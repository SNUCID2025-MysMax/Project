data_total = [
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner in 10 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (10 SEC)\nif ((#AirConditioner).switch != \"off\") {\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: One week later, play ‘playlist.mp3’ through the speakers at this time.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (168 HOUR)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"playlist.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the shades after 2 hours and 30 minutes.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (30 MIN)\nif ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in 7 minutes and 15 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 MIN)\nwait until (15 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the television in 5 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan after 1 minute.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 MIN)\nif ((#Fan).switch != \"off\") {\n    (#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Play music in 10 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (10 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"song.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator after 5 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nif ((#Refrigerator).switch != \"off\") {\n    (#Refrigerator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 3 days, set the lights to orange.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (72 HOUR)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"30|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 4 seconds, set the speaker volume to 50.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).setVolume(50)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the TV channel to 5 in 1 hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTvChannel(5)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window in 15 minutes.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 MIN)\nif ((#Window).window != \"open\") {\n    (#Window).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 2 days, set the air conditioner to heating mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (48 HOUR)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\n(#AirConditioner).setAirConditionerMode(\"heat\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner after 8 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (8 HOUR)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the water valve after 3 minutes.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 MIN)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television in 50 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (50 MIN)\nif ((#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan after 1 hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 15 seconds, say ‘Hello’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"Hello\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier after 5 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nif ((#Humidifier).switch != \"on\") {\n    (#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 6 minutes, set the speaker volume to 30.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).setVolume(30)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 8 minutes, set the lights to blue.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (8 MIN)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to cooling mode after 7 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\n(#AirConditioner).setAirConditionerMode(\"cool\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the television volume to 20 in 3 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setVolume(20)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier after 4 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 MIN)\nif ((#Humidifier).switch != \"off\") {\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 11 hours, say ‘Good night’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (11 HOUR)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"Good night\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window in 9 seconds.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (9 SEC)\nif ((#Window).window != \"closed\") {\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the water valve after 6 hours.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nif ((#Valve).valveStatus == \"open\") {\n    (#Valve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 1 hour, say ‘Time to take a break’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"Time to take a break\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan after 5 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 SEC)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 12 seconds, turn on the light and set it to yellow.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (12 SEC)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"60|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the television channel to 7 in 8 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (8 HOUR)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTVChannel(7)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 2 minutes, set the TV volume to 10.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Television).setVolume(10)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier after 1 day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (24 HOUR)\nif ((#Humidifier).switch != \"off\") {\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the television in 15 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the robot vacuum cleaner after 30 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 SEC)\nif ((#RobotCleaner).switch != \"off\") {\n    (#RobotCleaner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan after 10 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (10 MIN)\nif ((#Fan).switch != \"off\") {\n    (#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in 2 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier after 20 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (20 MIN)\nif ((#Humidifier).switch != \"on\") {\n    (#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please close the window in 15 minutes.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 MIN)\nif ((#Window).window != \"closed\") {\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner after 2 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 SEC)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the water valve after 6 hours.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television in 3 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 MIN)\nif ((#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 12 minutes, say ‘Hello World’ through the speakers.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (12 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"Hello World\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the television channel to 3 in 30 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTvChannel(3)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan after 20 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (20 MIN)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV in 3 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 MIN)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner after 2 hours, 20 minutes, and 2 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (20 MIN)\nwait until (2 SEC)\nif ((#AirConditioner).switch != \"off\") {\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 30 minutes and 10 seconds, play ‘playlist.mp3’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"playlist.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the shade after 1 hour, 2 minutes and 5 seconds.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (2 MIN)\nwait until (5 SEC)\nif ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in 5 hours, 30 minutes and 45 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nwait until (30 MIN)\nwait until (45 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker after 3 hours, 20 minutes, and 10 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 HOUR)\nwait until (20 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"off\") {\n    (#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV in 1 hour 50 minutes and 5 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (50 MIN)\nwait until (5 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner after 6 hours, 40 minutes and 30 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nwait until (40 MIN)\nwait until (30 SEC)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the water valve after 4 hours, 30 minutes and 10 seconds.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 HOUR)\nwait until (30 MIN)\nwait until (10 SEC)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 7 hours, 20 minutes and 30 seconds, turn on the light and set it to blue.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nwait until (20 MIN)\nwait until (30 SEC)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan in 5 hours, 50 minutes, and 5 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nwait until (50 MIN)\nwait until (5 SEC)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the television in 3 hours, 5 minutes and 25 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 HOUR)\nwait until (5 MIN)\nwait until (25 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to heating mode after 4 hours, 20 minutes and 40 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 HOUR)\nwait until (20 MIN)\nwait until (40 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\n(#AirConditioner).setAirConditionerMode(\"heat\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please close the window in 1 hour, 30 minutes and 45 seconds.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (30 MIN)\nwait until (45 SEC)\nif ((#Window).window != \"closed\") {\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the television channel to 7 in 1 hour, 45 minutes and 20 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (45 MIN)\nwait until (20 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTvChannel(7)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in 6 hours, 10 minutes, and 5 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nwait until (10 MIN)\nwait until (5 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan after 2 hours, 20 minutes and 50 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (20 MIN)\nwait until (50 SEC)\nif ((#Fan).switch != \"off\") {\n    (#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television in 7 hours, 5 minutes, and 10 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nwait until (5 MIN)\nwait until (10 SEC)\nif ((#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please open the window in 1 hour, 40 minutes and 15 seconds.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (40 MIN)\nwait until (15 SEC)\nif ((#Window).window != \"open\") {\n    (#Window).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner after 2 hours, 20 minutes, and 2 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (20 MIN)\nwait until (2 SEC)\nif ((#AirConditioner).switch != \"off\") {\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 30 minutes and 10 seconds, play ‘playlist.mp3’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"playlist.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the shade after 1 hour, 2 minutes and 5 seconds.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (2 MIN)\nwait until (5 SEC)\nif ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner after 5 hours, 30 minutes and 45 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nwait until (30 MIN)\nwait until (45 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker after 3 hours, 20 minutes, and 10 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 HOUR)\nwait until (20 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"off\") {\n    (#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV after 1 hour, 50 minutes, and 5 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (50 MIN)\nwait until (5 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner after 6 hours, 40 minutes and 30 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nwait until (40 MIN)\nwait until (30 SEC)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 4 hours, 30 minutes and 10 seconds, open the water valve.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 HOUR)\nwait until (30 MIN)\nwait until (10 SEC)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 7 hours, 20 minutes and 30 seconds, turn on the light and set it to blue.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nwait until (20 MIN)\nwait until (30 SEC)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner after 2 hours and 50 minutes and turn it off after 1.5 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(2 HOUR)\nwait until(50 MIN)\nif((#AirConditioner).switch !=\"on\"){\n    (#AirConditioner).on()\n}\nwait until(1 HOUR)\nwait until(30 MIN)\nif((#AirConditioner).switch != \"off\"){\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the temperature is above 25 degrees after 4 hours, turn on the air conditioner.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(4 HOUR)\nif((#TemperatureSensor).temperature >= 25){\n    if((#AirConditioner).switch != \"on\"){\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dust concentration is over 100 after 2 hours, turn on the air purifier for 3 hours.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(2 HOUR)\nif((#AirQualityDetector).dustLevel >= 100){\n    if((#AirPurifier).switch != \"on\"){\n        (#AirPurifier).on()\n    }\n    wait until(3 HOUR)\n    if((#AirPurifier).switch != \"off\"){\n        (#AirPurifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 30 minutes, turn on the air conditioner for 4 hours. If the temperature is above 24 degrees after 4 hours, turn it on for 1 more hour.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(30 MIN)\nif((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n    }\nwait until(4 HOUR)\nif((#TemperatureSensor).temperature >= 24){\n    wait until(1 HOUR)\n}\nif((#AirConditioner).switch != \"off\"){\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher after 2 hours, 35 minutes and 10 seconds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(2 HOUR)\nwait until(35 MIN)\nwait until(10 SEC)\nif((#Dishwasher).switch != \"on\"){\n    (#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner at 6 a.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 6)\nif((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 4:23 p.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 16 and (#Clock).minute == 23)\nif((#Fan).switch != \"on\"){\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and turn it off when the humidity exceeds 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#Humidifier).switch != \"on\"){\n    (#Humidifier).on()\n}\nwait until((#HumiditySensor).humidity >= 50)\nif((#Humidifier).switch != \"off\"){\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the outside temperature is above 26 degrees, turn on the air conditioner, and after 40 minutes, if the indoor temperature is below 23 degrees, turn off the air conditioner.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#WeatherProvider).temperatureWeather >= 26){\n    if((#AirConditioner).switch != \"on\"){\n        (#AirConditioner).on()\n    }\n    wait until(40 MIN)\n    if((#TemperatureSensor).temperature <=24){\n        if((#AirConditioner).switch != \"off\"){\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights one hour from now, turn on the air conditioner after three hours, turn on the humidifier after 5 hours and 20 minutes, and turn it off when the humidity exceeds 60%.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(1 HOUR)\nif((#Light).switch != \"off\"){\n    (#Light).off()\n}\nwait until(2 HOUR)\nif((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n}\nwait until(2 HOUR)\nwait until(20 MIN)\nif((#Humidifier).switch!=\"on\"){\n    (#Humidifier).on()\n}\nwait until((#HumiditySensor).humidity >= 60)\nif((#Humidifier).switch!=\"off\"){\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn the dishwasher on automatic mode after 3 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(3 HOUR)\nif((#Dishwasher).dishwasherMode != \"auto\"){\n    (#Dishwasher).setDishwasherMode(\"auto\")\n}\nif((#Dishwasher).switch != \"on\"){\n    (#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the temperature is above 26 degrees at 11 PM, turn on the fan.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 23)\nif((#TemperatureSensor).temperature >=26){\n    if((#Fan).switch != \"on\"){\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the temperature is above 26 degrees at 8:30 am, turn on the fan.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 23)\nif((#TemperatureSensor).temperature >=26){\n    if((#Fan).switch != \"on\"){\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 1 hour, tell the current accumulated gas usage time and the amount of gas used.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nusage_time = (#GasMeter).gasMeterTime\nusage_amount = (#GasMeter).gasMeterVolume\n(#Speaker).speak(\"현재 누적 가스 사용 시간은 \" + usage_time)\n(#Speaker).speak(\"현재 사용된 가스의 양은 \" + usage_amount)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator, and after 1 hour and 15 minutes, if the humidity is above 50%, turn off the irrigator. If it is below 50%, give 100ml of water and then turn off the irrigator.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n    (#Irrigator).on()\n}\nwait until (1 HOUR 15 MIN)\ncurr_humidity = (#HumiditySensor).humidity\nif (curr_humidity >= 50.0) {\n    (#Irrigator).off()\n} else {\n    (#Irrigator).setWaterPortion(100, \"milliliters\")\n    (#Irrigator).startwatering()\n    (#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After 24 minutes, tell the current temperature and humidity.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (24 MIN)\ncurr_temperature = \"현재 온도는 \" + (#TemperatureSensor).temperature\ncurr_humidity = \"현재 습도는 \" + (#HumiditySensor).humidity\n(#Speaker).speak(curr_temperature + \"도 입니다.\")\n(#Speaker).speak(curr_humidity + \"% 입니다.\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check if there is anyone after 1 hour and 53 minutes.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR 53 MIN)\nif ((#PresenceSensor).presence == \"detected\") {\n    (#Speaker).speak(\"사람이 감지되었습니다.\")\n} else {\n    (#Speaker).speak(\"사람이 감지되지 않았습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current gas concentration is above 0.5%, close the gas valve and reopen it after 1 hour and 10 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeter >= 0.5) {\n    if ((#GasValve).valve != \"closed\"){\n    (#GasValve).close()\n    }\n    wait until (1 HOUR)\n    wait until (10 MIN)\n    if ((#GasValve).valve != \"open\"){\n    (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current temperature is above 25 degrees, turn on the air conditioner, check if the door locks are open, close the windows if they are open, turn on the dishwasher, and turn everything off after 2 hours.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature >= 25.0) {\n    if ((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n    }\n    if ((#DoorLock).door == \"open\") {\n        if ((#Window).window == \"open\"){\n        (#Window).close()\n        }\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n        wait until (2 HOUR)\n        if ((#AirConditioner).switch != \"off\"){\n        (#AirConditioner).off()\n        }\n        if ((#Dishwasher).switch != \"off\"){\n        (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Run the water system for 10 minutes, and when the water leak detector detects a leak, stop the water system and send an email.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#Irrigator).on()\nwait until (10 MIN)\nif ((#LeakSensor).leakage == \"detected\") {\n    if ((#Irrigator).switch != \"off\") {\n        (#Irrigator).off()\n    }\n    (#EmailProvider).send(\"user@dummy.com\", \"누수 감지 알림\", \"급수 중 누수가 감지되었습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner after 30 minutes, turn on the air purifier after 1 hour, and open the window after 2 hours.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 MIN)\n(#AirConditioner).on()\nwait until (30 MIN)\n(#AirPurifier).on()\nwait until (1 HOUR)\n(#Window).open()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If no movement is currently detected and no one is present, turn on the pump and turn off the refrigerator after 2 hours.\n\nServices: {'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"inactive\" and (#PresenceSensor).presence == \"not_present\") {\n    if ((#Pump).switch != \"on\") {\n        (#Pump).on()\n    }\n    wait until (2 HOUR)\n    if ((#Refrigerator).switch != \"off\") {\n        (#Refrigerator).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If no smoke is currently detected, open the shade and close it after 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmokeDetector).smoke == \"not_detected\") {\n    if ((#Shade).shadeLevel != 100) {\n        (#Shade).open()\n    }\n    wait until (30 MIN)\n    if ((#Shade).shadeLevel != 0) {\n        (#Shade).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidity is currently over 30%, turn the humidifier on low for 1 hour. Otherwise, turn it on high for 2 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#HumiditySensor).humidity >= 30){\n    if((#Humidifier).switch != \"on\"){\n        (#Humidifier).on()\n    }\n    if((#Humidifier).humidifierMode != \"low\"){\n        (#Humidifier).setHumidifierMode(\"low\")\n    }\n    wait until(1 HOUR)\n    if((#Humidifier).switch != \"off\"){\n        (#Humidifier).off()\n    }\n}\nelse{\n    if((#Humidifier).switch != \"on\"){\n        (#Humidifier).on()\n    }\n    if((#Humidifier).humidifierMode != \"high\"){\n        (#Humidifier).setHumidifierMode(\"high\")\n    }\n    wait until(2 HOUR)\n    if((#Humidifier).switch != \"on\"){\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the button is held, turn on the air purifier and set it to sleep  mode. Also, turn on the air conditioner if it is off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"held\") \nif ((#AirPufier).switch != \"on\") {\n    (#AirPufier).on()\n}\nif ((#AirPufier).airPurifierFanMode != \"sleep\") {\n(#AirPufier).setPurifierFanMode(\"sleep\")\n}\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light if button is double pressed and held\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"double\" and (#Button).button == \"held\") \n(#Light).off()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is nice, open the window.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#WeatherProvider).weather == \"clear\"){\n    if((#Window).window != \"open\"){\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the windows if the weather is not sunny.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#WeatherProvider).weather != \"clear\"){\n    if((#Window).window != \"closed\"){\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: if the weather is cloudy, close the window and say 'It's cloudy today' through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clouds\") {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n    }\n    (#Speaker).speak(\"오늘 날씨는 흐려요\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if fine dust level is above 50.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel > 50.0) {\n    if ((#AirPurifier).switch != \"on\"){\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo every day at 7 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\"){\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtain if the contact sensor is open.\n\nServices: {'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"open\") {\n    if  ((#Curtain).curtain != \"closed\"){\n        (#Curtain).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light color to red if a leak is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"detected\") {\n    if ((#Light).switch != \"on\"){\n        (#Light).on()\n    }\n    if ((#Light).color != \"0|100|100\"){\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if fine dust level is above 50\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel > 50.0) {\n    (#AirPurifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the windows if the air conditioner is on\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n    if ((#Window).window != \"closed\"){\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan if the temperature exceeds 30 degrees\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature > 30.0) {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email if the gas valve is open and CO2 level exceeds 1000 ppm\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve == \"open\" and (#AirQualityDetector).carbonDioxide > 1000.0) {\n    (#EmailProvider).send(\"user@example.com\", \"Gas Valve Alert\", \"CO2 level is too high!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television if presence sensor detects no one is present\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"not present\" and (#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light color to red if it is January 1st\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).month == 1 and (#Clock).day == 1) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    (#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if it is Saturday\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"saturday\" and (#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the windows, turn on the air conditioner, and turn the air purifier on high. After 10 minutes, turn everything off and open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"closed\") {\n    (#Window).close()\n}\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n    (#AirConditioner).setAirConditionerMode(\"cool\")\n}\nif ((#AirPurifier).switch != \"on\") {\n    (#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"high\") {\n    (#AirPurifier).setPurifierFanMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open and the current hour is 8 AM, turn on the camera and take a photo.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"open\" and (#Clock).hour == 8) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the refrigerator is off, turn it on. If the mode is RapidFreeze, change it to rapidCool, and if it is RapidCool, change it to RapidFreeze.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#Refrigerator).switch != \"on\"){\n    (#Refrigerator).on()\n}\nif((#Refrigerator).refrigeratorMode == \"RapidFreeze\") {\n    (#Refrigerator).setRefrigeratorMode(\"rapidCool\")\n}\nif((#Refrigerator).refrigeratorMode == \"RapidCool\") {\n    (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you please turn on the air conditioner?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n\t(#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n\t(#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n\t(#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to automatic mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"auto\") {\n\t(#AirConditioner).setAirConditionerMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to auto.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"auto\") {\n\t(#AirConditioner).setAirConditionerMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in cooling mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"cool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Put the air conditioner on cool mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"cool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: It’s hot, so turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"cool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to heating mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please change the air conditioner to heat mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the air conditioner mode to warm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn the air conditioner on warm mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air conditioner is on right now, close the windows.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n    if ((#Window).window != \"open\") {\n\t    (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air conditioner is off now, close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air conditioner is not in automatic mode, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).airConditionerMode != \"auto\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air conditioner is currently operating in cool mode, change it to heat mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).airConditionerMode == \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air conditioner is currently in heat mode, turn on the robot vacuum cleaner. Set the air conditioner temperature to 20 degrees.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).airConditionerMode == \"heat\") {\n\tif ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}\n(#AirConditioner).setTemperature(20.0)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check the air conditioner status every hour and turn it on if it is off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to automatic mode every 6 o'clock\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check if the windows are closed every 30 minutes and close them if the air conditioner is on.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#AirConditioner).switch != \"off\") {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to heating mode every day at 22:00.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"heat\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to cooling mode every day at 8 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the gas valve when the air conditioner is turned off every 15 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#AirConditioner).switch != \"on\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner every 5 seconds if it is not in automatic mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 SEC) {\n    if ((#AirConditioner).airConditionerMode != \"auto\") {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air conditioner is running in cooling mode, change it to heat mode every 45 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n    if ((#AirConditioner).airConditionerMode == \"cool\") {\n        (#AirConditioner).setAirConditionerMode(\"heat\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air conditioner is in heat mode every day at 18:00, turn on the robot vacuum cleaner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirConditioner).airConditionerMode == \"heat\") {\n            if ((#RobotCleaner).switch != \"on\") {\n                (#RobotCleaner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"off\") {\n\t(#AirPurifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please set the air purifier to automatic mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"auto\") {\n\t(#AirPurifier).setPurifierFanMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to sleep mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n\t(#AirPurifier).setPurifierFanMode(\"sleep\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan mode to low.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"low\") {\n\t(#AirPurifier).setPurifierFanMode(\"low\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to medium.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"medium\") {\n\t(#AirPurifier).setPurifierFanMode(\"medium\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"high\") {\n\t(#AirPurifier).setPurifierFanMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Make the air purifier fan quiet.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n\t(#AirPurifier).setPurifierFanMode(\"quiet\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Air purifier in wind-free mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n\t(#AirPurifier).setPurifierFanMode(\"windFree\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier fan mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"off\") {\n\t(#AirPurifier).setPurifierFanMode(\"off\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is on, turn it off.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode == \"on\") {\n\t(#AirPurifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is turned off, close the blinds.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"off\") {\n    if ((#Blind).blindLevel > 0) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is currently in automatic mode, change it to sleep mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"auto\") {\n\t(#AirPurifier).setPurifierFanMode(\"sleep\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is currently in sleep mode, turn on the dishwasher.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"sleep\") {\n    if ((#Dishwasher).switch != \"on\") {\n\t    (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier's fan is currently set to low mode, change it to windfree mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode == \"low\") {\n\t(#AirPurifier).setPurifierFanMode(\"windFree\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is currently in medium mode, turn on the fan.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"medium\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier's fan is not currently in high mode, change it to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"high\") {\n\t(#AirPurifier).setPurifierFanMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is not currently in quiet mode, say “noisy” through the speaker.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n    (#Speaker).speak(\"시끄럽다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier's fan is currently in wind-free mode, open the shade.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"windFree\") {\n    if ((#Shade).shadeLevel != 100) {\n\t    (#Shade).setShadeLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier mode is now off, open the shade.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"off\") {\n    if ((#Shade).shadeLevel != 100) {\n\t    (#Shade).setShadeLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check the air purifier status every hour and turn it on if it is off.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier every 7 o'clock\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to automatic mode every 20 minutes.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (20 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"auto\") {\n        (#AirPurifier).setPurifierFanMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to sleep mode every day at 23:00.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan mode to low every 15 minutes.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"low\") {\n        (#AirPurifier).setPurifierFanMode(\"low\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to medium every day at 10 o'clock.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to high mode every 30 minutes.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"high\") {\n        (#AirPurifier).setPurifierFanMode(\"high\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Make the air purifier fan quiet every day at 21:00.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to wind-free mode every hour.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n        (#AirPurifier).setPurifierFanMode(\"windFree\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier fan mode every day at 19:00.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode != \"off\") {\n            (#AirPurifier).setPurifierFanMode(\"off\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is on every day at 9 o'clock, turn it off.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is turned off every day at 17:00, close the blinds.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            if ((#Blind).blindLevel > 0) {\n                (#Blind).setBlindLevel(0)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is currently in automatic mode, change it to sleep mode every 10 minutes.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode == \"auto\") {\n        (#AirPurifier).setPurifierFanMode(\"sleep\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 o'clock, if the air purifier is currently in sleep mode, turn on the dishwasher.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode == \"sleep\") {\n            (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier's fan is set to low mode, change it to windfree mode every 5 minutes.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode == \"low\") {\n        (#AirPurifier).setPurifierFanMode(\"windFree\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 14:00, if the air purifier is in medium mode, turn on the fan.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode == \"medium\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier's fan is not in high mode, change it to high mode every 10 minutes.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"high\") {\n        (#AirPurifier).setPurifierFanMode(\"high\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier is not in quiet mode every 5 minutes, say ‘noisy’ through the speaker.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"시끄럽다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air purifier mode is off every 6 o'clock, open the shade.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode == \"off\") {\n            if ((#Shade).shadeLevel != 100) {\n                (#Shade).setShadeLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current fine dust concentration is lower than 50, close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).dustLevel < 50.0) {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Measure the concentration of fine dust (PM 10) right now and notify it through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 미세먼지 농도는 \" + (#AirQualityDetector).dustLevel)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the concentration of ultrafine dust is over 40, will you close the window and turn on the air purifier?\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel >= 40.0) {\n    if ((#Window).window != \"closed\") {\n\t    (#Window).close()\n    }\n    if ((#AirPurifier).switch != \"on\") {\n\t    (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the concentration of ultrafine dust (PM 2.5) is lower than 15, close the curtains.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel < 15.0) {\n    if ((#Curtain).curtainLevel > 0) {\n\t    (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fine dust concentration based on PM 2.5 is higher than 40, turn on the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel > 40.0) {\n    if ((#Camera).switch != \"on\") {\n\t    (#Camera).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the ultrafine dust concentration based on the current PM 1.0 standard is higher than 50, sound the siren.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n    if ((#Siren).switch != \"on\") {\n\t    (#Siren).on()\n    }\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the carbon dioxide concentration is now 400 ppm, please say “Congratulations!” through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).carbonDioxide == 400.0) {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n\t(#Speaker).speak(\"축하합니다!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current temperature around the air quality sensor is over 30 degrees, turn on the fan and set the speed to 100.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).temperature > 30.0) {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n\t(#Fan).setFanSpeed(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the air quality sensor measures the humidity and it is over 50, say “It’s too humid” through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).humidity > 50.0) {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n\t(#Speaker).speak(\"너무 습해요\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current VOC concentration is lower than 0.03, turn on the light and set it to red.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).tvocLevel < 0.03) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n\t(#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current air quality sensor reports that the noble gas concentration is higher than 3 ppm, please send an e-mail with no content to user@dummy.com with the subject “Inert gas concentration warning: (current noble gas concentration).”\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).tvocLevel > 3.0) {\n\t(#EmailProvider).sendMail(\"user@dummy.com\", \"비활성기체 농도 주의: \" + (#AirQualityDetector).tvocLevel, \"\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fine dust concentration is lower than 50 every hour, close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirQualityDetector).dustLevel < 50.0) {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 30 minutes, the concentration of fine dust (PM 10) is measured and announced through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 미세먼지 농도는 \" + (#AirQualityDetector).dustLevel)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the ultrafine dust concentration is above 40 every 15 minutes, close the window and turn on the air purifier.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#AirQualityDetector).fineDustLevel >= 40.0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#AirPufier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the ultrafine dust concentration based on PM 2.5 is lower than 15 every 10 minutes, close the curtains.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#AirQualityDetector).fineDustLevel < 15.0) {\n        if ((#Curtain).curtainLevel > 0) {\n            (#Curtain).setCurtainLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 9 o'clock, if the fine dust concentration based on PM 2.5 is higher than 40, turn on the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 40.0) {\n            if ((#Camera).switch != \"on\") {\n                (#Camera).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the ultrafine dust concentration based on the current PM 1.0 standard is higher than 50 every 5 minutes, sound the siren.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every hour, when the carbon dioxide concentration is 400 ppm, say ‘Congratulations!’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirQualityDetector).carbonDioxide == 400.0) {\n        if ((#Speaker).switch != \"on\") {\n\t        (#Speaker).on()\n        }\n        (#Speaker).speak(\"축하합니다!\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 8 o'clock, if the temperature around the air quality sensor is over 30 degrees, turn on the fan and set the speed to 100.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are currently open at all, turn on the feeder and feed 100 grams of rice.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 0) {\n    if ((#Feeder).switch != \"on\") {\n\t    (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(100, \"grams\")\n\t(#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds only about 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 20) {\n    (#Blind).setBlindLevel(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds 25%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 25) {\n    (#Blind).setBlindLevel(25)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds only halfway.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 50) {\n    (#Blind).setBlindLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds just a little.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 50) {\n    (#Blind).setBlindLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 100) {\n    (#Blind).setBlindLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the blinds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 0) {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 100) {\n    (#Blind).setBlindLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the blinds completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 0) {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Blind).blindLevel != 100) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are currently open more than 72%, reduce them to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 72) {\n\t(#Blind).setBlindLevel(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are less than half open, turn on the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel <= 50) {\n    if ((#Humidifier).switch != \"on\") {\n\t    (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the blinds completely every day at 22:00.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Blind).blindLevel > 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 8 o'clock, if the blinds are currently open more than 50%, turn on the grower and water 80ml.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Blind).blindLevel >= 50) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(80, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After a while the feeder turns on when I press the button.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"pushed\") {\n    if ((#Feeder).switch != \"on\") {\n\t    (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: When I press the button later, please close the shade completely.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"held\") {\n    if ((#Shade).shadeLevel > 0) {\n    \t(#Shade).setShadeLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: After a moment, press the button twice in succession to turn on the lights and air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"double\") {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please check the operation status of the button now and announce it through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak((#Button).button)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday, the button operation status is checked and announced through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\") {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n    (#Speaker).speak((#Button).button)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every weekday, press the button to turn on the feeder.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n    wait until ((#Button).button == \"pushed\") {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: On the first day of every month, press and hold the button to completely close the shade.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1) {\n    wait until ((#Button).button == \"held\") {\n        if ((#Shade).shadeLevel > 0) {\n            (#Shade).setShadeLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights and air conditioner every time you press the button twice in succession\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Button).button == \"double\") {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Add 5 and 3 and say the result through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).add(5, 3)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"5와 3을 더한 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Subtract 4 from 10. Tell me the results through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).sub(10, 4)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"10에서 4를 뺀 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Divide 20 by 4 and say the result through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).div(20, 4)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"20을 4로 나눈 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Multiply 6 and 7. And tell me the result through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).mul(6, 7)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"6과 7을 곱한 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Find the remainder when 15 is divided by 4. Tell me the results through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).mod(15, 4)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"15를 4로 나눈 나머지는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you turn on the camera?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you turn off the camera?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"off\") {\n\t(#Camera).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"off\") {\n\t(#Camera).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the camera is on now, turn on the dryer.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"off\") {\n    if ((#Dehumidifier).switch != \"on\") {\n\t    (#Dehumidifier).on()   \n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the camera is not off now, turn off the pump.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    if ((#Pump).switch != \"off\") {\n\t    (#Pump).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture with the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture now and email it to my@email.com.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\nimagePath = (#Camera).take()\n(#EmailProvider).sendMailWithFile(\"my@email.com\", \"사진\", \"가장 최근에 찍은 사진 파일입니다.\", imagePath)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send the most recently taken photo file to my@email.com.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"my@email.com\", \"사진\", \"가장 최근에 찍은 사진 파일입니다.\", (#Camera).image)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a time lapse with your camera at 2x speed for 15 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}\n(#Camera).takeTimelapse(0.25, 2.0)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take time-lapse photos at 10x speed for 3 hours with the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}\n(#Camera).takeTimelapse(3.0, 10.0)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a time-lapse video at 10x speed for 6 hours with your camera and send it to mail@example.com.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}\ntimeLapsePath = (#Camera).takeTimelapse(3.0, 10.0)\n(#EmailProvider).sendMailWithFile(\"mail@example.com\", \"타임랩스\", \"가장 최근에 찍은 타임랩스입니다.\", timeLapsePath)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send me the most recent photo files taken with the camera by email. Please send the address to name@cite.org, the title ‘Recent Photos’, and no content.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"name@cite.org\", \"최근 사진\", \"\", (#Camera).image)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak through the speaker the URL address of the photo file most recently taken with the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak((#Camera).image)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo now, and send the photo file to test@name.com with a random title and content.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "imagePath = (#Camera).take()\n(#EmailProvider).sendMailWithFile(\"test@name.com\", \"임의의 제목\", \"임의의 내용\", imagePath)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera every 2 hours\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (2 HOUR) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you turn on the camera every day at 9 o'clock?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you turn off the camera every weekend?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n    if ((#Camera).switch != \"off\") {\n        (#Camera).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off camera every 15 minutes\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Camera).switch != \"off\") {\n        (#Camera).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dryer every time the camera turns on\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Camera).switch != \"off\") {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture with your camera every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 o'clock, take a time lapse with the camera at 2x speed for 15 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(0.25, 2.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 18:00, take time-lapse photos with the camera at 10x speed for 3 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(3.0, 10.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday, send me the most recent photo files taken with the camera by email. Send the address to name@cite.org, the title ‘Recent Photos’, and no content.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"name@cite.org\", \"최근 사진\", \"\", (#Camera).image)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Friday, the URL address of the most recent photo file taken with the camera is announced through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak((#Camera).image)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the blue light when the charger is currently charging.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).chargeState == \"charging\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n\t(#Light).setColor(\"240|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger is now fully charged, the green light will turn on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).chargeState == \"fullyCharged\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n\t(#Light).setColor(\"120|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger is not currently charging, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).chargeState == \"error\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your current charger voltage is between 210 and 230, open the shade to about 50%.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).voltage >= 210.0 and (#Charger).voltage <= 230.0) {\n\tif ((#Shade).shadeLevel != 50) {\n\t    (#Shade).setShadeLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current flowing through the charger is greater than 1, open the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).current > 1.0) {\n    if ((#GasValve).valve != \"open\") {\n\t    (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 5 minutes, the blue light turns on when the current charger is charging.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#Charger).chargeState == \"charging\") {\n        if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n        }\n        (#Light).setColor(\"240|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 6 o'clock, the green light turns on when the charger is fully charged.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Charger).chargeState == \"fullyCharged\") {\n        if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n        }\n        (#Light).setColor(\"120|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every weekend, turn off the air conditioner if the charger is not currently charging.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n    if ((#Charger).chargeState == \"error\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 10 minutes, if the current charger voltage is between 210 and 230, turn on the shade and open it to 50%.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#Charger).voltage >= 210.0 and (#Charger).voltage <= 230.0) {\n        if ((#Shade).shadeLevel != 50) {\n            (#Shade).setShadeLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every hour, if the current flowing through the charger is greater than 1, open the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Charger).current > 1.0) {\n        if ((#GasValve).valve != \"open\") {\n            (#GasValve).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current date is the 1st, turn on the red light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).day == 1) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n\t(#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current time is 9 o'clock, turn off the pump.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 9) {\n    if ((#Pump).switch != \"off\") {\n\t    (#Pump).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current time is midnight, turn off the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 0) {\n    if ((#Light).switch != \"off\") {\n\t    (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current time is noon, announce through the speaker that it is lunch time.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 12) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"점심 시간입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV if the current time is 6 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 18) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current time is 7 PM, turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 19) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current minute is 0, the speaker announces ‘It’s on time’.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"정각입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current month is December, turn on the dishwasher.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).month == 12) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: When the current second is 30 seconds, turn on the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).second == 30) {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is Monday, open the curtains about 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"monday\") {\n    if ((#Curtain).curtainLevel != 50) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is Tuesday, please close the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"tuesday\") {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is Wednesday, turn on the feeding machine.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"wednesday\") {\n    if ((#Feeder).switch != \"on\") {\n\t    (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it's Thursday, open the blinds 67%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"thursday\") {\n    if ((#Blind).blindLevel != 67) {\n        (#Blind).setBlindLevel(67)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is Saturday, turn off the robot vacuum cleaner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"saturday\") {\n\tif ((#RobotCleaner).switch != \"off\") {\n        (#RobotCleaner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is a public holiday, close the gas valve and open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).isHoliday == true) {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is not a public holiday, turn off the TV.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).isHoliday == false) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light if the current Unix timestamp is an even number.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).timestamp % 2 == 0) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce the start of the meeting through the speaker every Monday at 8 o'clock\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"회의 시작 시간입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump every 14:00 on the 15th of every month\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 15 and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Pump).switch != \"on\") {\n\t    (#Pump).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Celebrate the new year through speakers every year at midnight on January 1st.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).month == 1 and (#Clock).day == 1 and (#Clock).hour == 0 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"새해 복 많이 받으세요!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV at 18:30 every weekday\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner every 10 o’clock every weekend.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 10 and (#Clock).minute == 0) {\n\tif ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).minute == 30) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window every time the seconds count 15\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC) {\n    if ((#Clock).second == 15) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds 75% at 9 a.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(75)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the lights to dim whenever the time reaches 22:45.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 45) {\n        if ((#Light).switch != \"on\") {\n\t        (#Light).on()\n        }\n        (#Light).setLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Whenever 11:11 strikes, tell me to make a wish through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 11) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }    \n        (#Speaker).speak(\"소원을 빌어보세요.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Friday at 17:00, the start of the weekend is announced through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 17 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"주말이 시작되었습니다!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on yellow lights to welcome the New Year at 23:59 on December 31st every year.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).month == 12 and (#Clock).day == 31 and (#Clock).hour == 23 and (#Clock).minute == 59) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    (#Light).setColor(\"60|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Now, if the contact sensor is closed, turn off the light bulb.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"closed\") {\n    if ((#Light).switch != \"off\") {\n\t    (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is currently open, turn on the refrigerator.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"open\") {\n\tif ((#Refrigerator).switch != \"on\") {\n\t\t(#Refrigerator).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 10 minutes now turn off the light bulb if the contact sensor is closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Light).switch != \"off\") {\n\t        (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 8 o'clock, turn on the refrigerator if the contact sensor is currently open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#ContactSensor).contact == \"open\") {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan whenever the contact sensor closes\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"closed\") {\n    if ((#Fan).switch != \"off\") {\n\t    (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner every time the contact sensor opens\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"open\") {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier whenever the contact sensor is closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"closed\") {\n    if ((#Humidifier).switch != \"off\") {\n\t    (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the blinds whenever the contact sensor opens\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"open\") {\n    if ((#Blind).blindLevel > 0) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Dim the lights whenever the contact sensor is closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"closed\") {\n    (#Light).setLevel(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 100) {\n    (#Curtain).setCurtainLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel > 0) {\n    (#Curtain).setCurtainLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 50) {\n    (#Curtain).setCurtainLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 100) {\n    (#Curtain).setCurtainLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel > 0) {\n    (#Curtain).setCurtainLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the curtains are currently open, reduce them to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).switch != \"on\") {\n\t(#Curtain).on()\n}\nif ((#Curtain).curtainLevel > 0) {\n\t(#Curtain).setCurtainLevel(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the curtains are currently closed, open them to 80%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel == 0) {\n    (#Curtain).setCurtainLevel(80)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the curtains are currently open at 24%, close them completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel == 24) {\n\t(#Curtain).setCurtainLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains to 75%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 75) {\n    (#Curtain).setCurtainLevel(75)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains to 25%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 25) {\n    (#Curtain).setCurtainLevel(25)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Would you please open the curtains every Monday at 22:00?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) { \n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains completely at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window when the curtains are open\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Curtain).curtainLevel > 0) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: When the curtains are closed, open them to 80%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Curtain).curtainLevel == 0) {\n    if ((#Curtain).curtainLevel != 80) {\n        (#Curtain).setCurtainLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains 50% on the first day of every month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 50) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Fully open the curtains every Friday at 8 o'clock\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: The curtains are completely closed every year on December 31st.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).month == 12 and (#Clock).day == 31 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel > 0) {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every time the curtains are closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Curtain).curtainLevel == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains to 75% at 6pm every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 75) {\n        (#Curtain).setCurtainLevel(75)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains to 25% at 8am every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {  \n    if ((#Curtain).curtainLevel != 25) {\n        (#Curtain).setCurtainLevel(25)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dryer.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dryer.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dryer.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"off\") {\n\t(#Dehumidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the dryer.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"off\") {\n\t(#Dehumidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dryer to cool mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"cooling\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the dryer to delayed wash mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"delayWash\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the dryer to dry mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"drying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"drying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set dryer mode to complete.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"finished\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"finished\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dryer to refresh mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"refreshing\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the dryer to weight sensing mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"weightSensing\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"weightSensing\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dryer to anti-wrinkle mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"wrinklePrevent\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the dryer to dehumidifying mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"dehumidifying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"dehumidifying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dryer to AI dry mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"AIDrying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dryer to sterilization mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"sanitizing\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the dryer to internal care mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"internalCare\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dryer to anti-freeze mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"freezeProtection\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the dryer to continuous dehumidification mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"continuousDehumidifying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the dryer to defrost mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"thawingFrozenInside\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dryer is currently on, turn on the air purifier.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"off\") {\n\t(#AirPurifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dryer is currently off, turn off the lights.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n    if ((#Light).switch != \"off\") {\n\t    (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dryer is currently in cooling mode, sound a notification through the speaker.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"cooling\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"건조기가 냉각 모드입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is now in delayed wash mode, close the window.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"delayWash\") {\n    if ((#Window).window != \"closed\") {\n\t    (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is currently in drying mode, turn off the humidifier.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"drying\") {\n    if ((#Humidifier).switch != \"off\") {\n\t    (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dryer is currently in the completed state, turn on the siren.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"finished\") {\n    if ((#Siren).switch != \"on\") {\n\t    (#Siren).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dryer is now in refresh mode, turn on the TV.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"refreshing\") {\n    if ((#Television).switch != \"on\") {\n\t    (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check if the dryer is now in weight detection mode and, if so, turn on the air conditioner.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"weightSensing\") {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is currently in anti-wrinkle mode, open the curtains 50%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"wrinklePrevent\") {\n    if ((#Curtain).curtainLevel != 50) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is currently in dehumidifying mode, turn on the fan.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"dehumidifying\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is currently in AI drying mode, play the song “music.mp3” through the speakers.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"AIDrying\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).play(\"music.mp3\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dryer is now in sterilizing mode, open the window.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"sanitizing\") {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is currently in internal maintenance mode, turn on the robot vacuum cleaner.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"internalCare\") {\n\tif ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is now in anti-freeze mode, turn on the fan.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"freezeProtection\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is currently in continuous dehumidification mode, turn on all the lights.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"continuousDehumidifying\") {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dryer is currently in defrost mode, turn on the fan.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dryer every hour\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the dryer every day at 7 o'clock.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dryer every Monday at 22:00\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Dehumidifier).switch != \"off\") {\n        (#Dehumidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dryer at 18:30 every weekday.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Dehumidifier).switch != \"off\") {\n        (#Dehumidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dryer to cooling mode on the first day of every month.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1) {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n    if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n        (#Dehumidifier).setDeHumidifierMode(\"cooling\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: On the 1st of every month, change the dryer to delayed cleaning mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1) {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n    if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n        (#Dehumidifier).setDeHumidifierMode(\"delayWash\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the dishwasher.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"off\") {\n\t(#Dishwasher).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the dishwasher.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"off\") {\n\t(#Dishwasher).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to eco mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"eco\") {\n\t(#Dishwasher).setDishwasherMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the dishwasher to powerful mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"intense\") {\n\t(#Dishwasher).setDishwasherMode(\"normal\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the dishwasher to automatic mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"auto\") {\n\t(#Dishwasher).setDishwasherMode(\"heavy\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to fast mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"quick\") {\n\t(#Dishwasher).setDishwasherMode(\"light\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the dishwasher to rinse mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"rinse\") {\n\t(#Dishwasher).setDishwasherMode(\"heavy\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to dry mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"dry\") {\n\t(#Dishwasher).setDishwasherMode(\"light\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is currently turned on, it will notify you through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"off\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"식기세척기가 켜져 있습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dishwasher is off, turn it on and set it to automatic mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"auto\") {\n    (#Dishwasher).setDishwasherMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your dishwasher is currently on power mode, turn off the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).dishwasherMode == \"intense\") {\n    if ((#Humidifier).switch != \"off\") {\n\t    (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the dishwasher every 7 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher every Monday at 22:00\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"off\") {\n        (#Dishwasher).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Dishwasher).switch != \"off\") {\n        (#Dishwasher).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to eco mode every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"eco\") {\n        (#Dishwasher).setDishwasherMode(\"eco\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the dishwasher to powerful mode every day at 12 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"intense\") {\n        (#Dishwasher).setDishwasherMode(\"intense\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the dishwasher to automatic mode every Wednesday at 14:00.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"wednesday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"auto\") {\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to fast mode every day at 16:45.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 45) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"quick\") {\n        (#Dishwasher).setDishwasherMode(\"quick\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Friday at 19:00, switch the dishwasher to rinse mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 19 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"rinse\") {\n        (#Dishwasher).setDishwasherMode(\"rinse\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to dry mode every day at 22:00.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"dry\") {\n        (#Dishwasher).setDishwasherMode(\"dry\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you through the speaker every 30 minutes when the dishwasher is turned on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Dishwasher).switch != \"off\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"식기세척기가 켜져 있습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 15 minutes, turn on the dishwasher if it is off and set it to automatic mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"auto\") {\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 9 o'clock, if the dishwasher is currently on power mode, turn off the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Dishwasher).dishwasherMode == \"intense\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the door is currently open, the speaker will tell you that the door lock is open and that you should check.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"open\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"문의 잠금이 열려 있으므로 점검해주세요.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the door is currently closed, tell the speaker that the door is closed.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"closed\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"문이 닫혀 있으므로 엽니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the door is closed now, turn on the fan.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"closing\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the door is open now, turn on the light.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"opening\") {\n    if ((#Light).switch != \"on\") {\n    \t(#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the door is closing now, wait until the door closes.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"closing\") {\n\twait until((#DoorLock).door == \"closed\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the door is open now, wait until the door opens and then turn on the air conditioner.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"opening\") {\n\twait until((#DoorLock).door == \"open\")\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Once an hour, tell me through the speaker what the current door lock status is.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#DoorLock).door == \"closed\") {\n\t    (#Speaker).speak(\"문이 닫혀 있습니다.\")\n    }\n    if ((#DoorLock).door == \"closing\") {\n\t    (#Speaker).speak(\"문이 닫히는 중입니다.\")\n    }\n    if ((#DoorLock).door == \"open\") {\n\t    (#Speaker).speak(\"문이 열려 있습니다.\")\n    }\n    if ((#DoorLock).door == \"opening\") {\n\t    (#Speaker).speak(\"문이 열리는 중입니다.\")\n    }\n    if ((#DoorLock).door == \"unknown\") {\n\t    (#Speaker).speak(\"문의 상태를 알 수 없습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email to this address: user@example.com with the subject 'Meeting Schedule' and the text 'Meeting starts at 3 PM.'\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMail(\"user@example.com\", \"회의 일정\", \"회의는 오후 3시에 시작합니다.\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email to this address: boss@example.com, with the subject 'Submit a report', the content 'Submitting a report', and the file path '/documents/report.pdf'.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"boss@example.com\", \"보고서 제출\", \"보고서를 제출합니다.\", \"/documents/report.pdf\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email to your friend at friend@example.com, with the subject line 'Hello' and the text 'How are you?'\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMail(\"friend@example.com\", \"안부\", \"잘 지내니?\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email to your manager with the file, address manager@example.com, title 'Project Plan', content 'Plan attached', file path '/projects/plan.pdf'\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"manager@example.com\", \"프로젝트 계획서\", \"계획서를 첨부합니다.\", \"/projects/plan.pdf\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you please send me an email? The recipient is colleague@example.com, the subject is 'Work cooperation', and the content is 'Please cooperate.'\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMail(\"colleague@example.com\", \"업무 협조\", \"협조 부탁드립니다.\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Can you send me an email with a file attached? The recipient is client@example.com, the title is ‘Contract’, the content is ‘Contract is attached.’, the file path is ‘/contracts/contract.pdf’\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"client@example.com\", \"계약서\", \"계약서를 첨부합니다.\", \"/contracts/contract.pdf\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email to this address every day at 9:00: user@example.com with the subject 'Meeting Schedule' and the text 'Meeting starts at 3:00 PM.'\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMail(\"user@example.com\", \"회의 일정\", \"회의는 오후 3시에 시작합니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email to this address every Monday at 10 o'clock: boss@example.com, with the subject line 'Submission of report', the content 'Submitting a report', and the file path '/documents/report.pdf'.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"boss@example.com\", \"보고서 제출\", \"보고서를 제출합니다.\", \"/documents/report.pdf\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email to your friend every day at 12 o'clock, with the address friend@example.com, the subject line 'Hello', and the content 'How are you?'\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMail(\"friend@example.com\", \"안부\", \"잘 지내니?\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Friday at 15:00, send an email to your manager with the file, address manager@example.com, title 'Project Plan', content 'Plan attached', file path '/projects/plan.pdf'.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"manager@example.com\", \"프로젝트 계획서\", \"계획서를 첨부합니다.\", \"/projects/plan.pdf\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you send me an email every day at 14:00? The recipient is colleague@example.com, the subject is ‘Work cooperation’, and the content is ‘Please cooperate.’\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 14 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMail(\"colleague@example.com\", \"업무 협조\", \"협조 부탁드립니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Can you send me an email with a file attached every day at 16:00? The recipient is client@example.com, the title is ‘Contract’, the content is ‘Contract is attached.’, and the file path is ‘/contracts/contract.pdf’\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"client@example.com\", \"계약서\", \"계약서를 첨부합니다.\", \"/contracts/contract.pdf\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"off\") {\n\t(#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"off\") {\n\t(#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 10.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#Fan).setFanSpeed(10)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the fan to medium speed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#Fan).setFanSpeed(50)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 75 speed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}\n(#Fan).setFanSpeed(75)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at maximum speed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}\n(#Fan).setFanSpeed(100)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fan is currently off, turn it on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fan is currently on, lower the speed to 30.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"off\") {\n\t(#Fan).setFanSpeed(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fan speed is now 60, turn on the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).fanSpeed == 60) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fan speed is now 90, turn off the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).fanSpeed == 90) {\n    if ((#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fan speed is now 10, open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).fanSpeed == 10) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the fan every day at 9 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan every Monday at 10 o'clock\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"off\") {\n        (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Fan).switch != \"off\") {\n        (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 10 every 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    (#Fan).setFanSpeed(10)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the fan to medium speed every day at 12 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    (#Fan).setFanSpeed(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 75 speed every 45 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n    (#Fan).setFanSpeed(75)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Friday at 14:00, turn on the fan at maximum speed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n    (#Fan).setFanSpeed(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan every 15 minutes if it is currently off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 20 minutes, if the fan is currently on, lower the speed to 30.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (20 MIN) {\n    if ((#Fan).switch != \"off\") {\n        (#Fan).setFanSpeed(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the feeder.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"off\") {\n\t(#Feeder).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeding machine.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the feeding machine.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"off\") {\n\t(#Feeder).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed 50 grams from the feeder.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(50, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the feeder to give 100g of food.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(100, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed as much as 5 lbs.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(5, \"pounds\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set it to give 20g of food.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(20, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is currently off, turn it on.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeding machine is currently on, feed 30 grams.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"off\") {\n    (#Feeder).setFeedPortion(30, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is currently off, turn it on and feed 60 grams.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(60, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is feeding, say through the speaker that it is feeding.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"feeding\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"급식기가 먹이를 주는 중입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder status is in error, change the light to red.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"error\") {\n    if ((#Light).switch != \"on\") {\n    \t(#Light).on()\n    }\n\t(#Light).setColor(\"255|0|0\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeding machine status is in error, close the gas valve.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"error\") {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is resting, open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"idle\") {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeding machine is resting, open the curtains.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"idle\") {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder every hour\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Give 200 grams of feed every day at 7 o'clock.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(200, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder every Monday at 22:00\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"off\") {\n        (#Feeder).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed 50 from the feeder every hour.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(50, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set it to feed 100g from the feeder every day at 12 o'clock.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(100, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed 45 grams every Wednesday at 14:00.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"wednesday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(145, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set it to give 20 grams of food every day at 16:45.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 45) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(20, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 30 minutes, turn on the feeder if it is currently off.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the current gas concentration.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 가스 농도는 \" + (#GasMeter).gasMeter)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me what the gas concentration is.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"가스 농도는 \" + (#GasMeter).gasMeter)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the current calorific value of the gas.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 가스의 열량 값은 \" + (#GasMeter).gasMeterCalorific)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me how many calories there are in gas.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"가스의 열량은 \" + (#GasMeter).gasMeterCalorific)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Tell me the current cumulative gas usage time.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 누적 가스 사용 시간은 \" + (#GasMeter).gasMeterTime)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me how long the gas has been used.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"가스 사용 시간은 \" + (#GasMeter).gasMeterTime)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the amount of gas currently used.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me how much gas has been used so far.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas concentration is over 5%, sound the siren.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeter >= 5) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the calorific value of the gas is now over 1000 kJ, open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeterCalorific >= 1000) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current gas usage time exceeds 3600 seconds, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeterTime >= 3600) {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the amount of gas you have used so far is over 50, please tell me how much you have used on your speaker so far.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeterVolume >= 50) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"사용된 가스의 양이 50을 넘었습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Informs you of the current gas concentration every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 가스 농도는 \" + (#GasMeter).gasMeter)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me what the gas concentration is every day at 7 o'clock\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가스 농도는 \" + (#GasMeter).gasMeter)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of the current calorific value of gas every 30 minutes\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 가스의 열량 값은 \" + (#GasMeter).gasMeterCalorific)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Tells you how many calories the gas has every 15 minutes\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가스의 열량은 \" + (#GasMeter).gasMeterCalorific)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of the current cumulative gas usage time every 5 minutes\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 누적 가스 사용 시간은 \" + (#GasMeter).gasMeterTime)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of how much gas has been used every 10 minutes\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가스 사용 시간은 \" + (#GasMeter).gasMeterTime)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of the current amount of gas used every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 o'clock, it tells you how much gas has been used so far.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Sound the siren every hour if the gas concentration is over 5%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#GasMeter).gasMeter >= 5) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 16:00, if the calorific value of the gas is now over 6000kJ, open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 0) {\n    if ((#GasMeter).gasMeterCalorific >= 6000) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"closed\") {\n    (#GasValve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"open\") {\n    (#GasValve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"closed\") {\n    (#GasValve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please open the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"open\") {\n    (#GasValve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas valve is currently open, close it.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve == \"open\") {\n    (#GasValve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas valve is currently closed, open it.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"open\") {\n    (#GasValve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the gas valve every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the gas valve every day at 8 o'clock\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#GasValve).valve != \"open\") {\n        (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please close the gas valve every Monday at 10 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please open the gas valve at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#GasValve).valve != \"open\") {\n        (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Friday at 14:00, close the gas valve if it is currently open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the gas valve if it is currently closed every 15 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#GasValve).valve != \"open\") {\n        (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"off\") {\n\t(#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"off\") {\n\t(#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the humidifier to automatic mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"auto\") {\n\t(#Humidifier).setHumidifierMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to low mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"low\") {\n\t(#Humidifier).setHumidifierMode(\"low\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier on medium mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"medium\") {\n\t(#Humidifier).setHumidifierMode(\"medium\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn the humidifier on high mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"high\") {\n\t(#Humidifier).setHumidifierMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidifier is currently off, turn it on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidifier is currently on, change it to medium mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"off\") {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"medium\") {\n        (#Humidifier).setHumidifierMode(\"medium\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidifier is not in automatic mode, it will notify you through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).humidifierMode != \"auto\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가습기가 자동 모드가 아닙니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidifier is currently in low mode, turn on the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).humidifierMode == \"low\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidifier is not currently in medium mode, turn off the feeder.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).humidifierMode != \"medium\") {\n    if ((#Feeder).switch != \"off\") {\n        (#Feeder).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the humidifier every 8 o'clock every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier every Monday at 10 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"off\") {\n        (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Humidifier).switch != \"off\") {\n        (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the humidifier to automatic mode every 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"auto\") {\n        (#Humidifier).setHumidifierMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to low mode every day at 12 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"low\") {\n        (#Humidifier).setHumidifierMode(\"low\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn the humidifier on medium mode every 45 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"medium\") {\n        (#Humidifier).setHumidifierMode(\"medium\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Tell me the current humidity.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 습도는 \" + (#HumiditySensor).humidity)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me how humid it is.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"습도는 \" + (#HumiditySensor).humidity)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current humidity is above 50%, turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity >= 50) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Now, if the humidity is below 30%, the weather is announced through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity <= 30) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"thunderstorm\") {\n        (#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n    } else if ((#WeatherProvider).weather == \"drizzle\") {\n        (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n    } else if ((#WeatherProvider).weather == \"rain\") {\n        (#Speaker).speak(\"현재 날씨는 비입니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n    } else if ((#WeatherProvider).weather == \"mist\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\") {\n        (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n    } else if ((#WeatherProvider).weather == \"haze\") {\n        (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"dust\") {\n        (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n    } else if ((#WeatherProvider).weather == \"fog\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"sand\") {\n        (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n    } else if ((#WeatherProvider).weather == \"ash\") {\n        (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n    } else if ((#WeatherProvider).weather == \"squall\") {\n        (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\") {\n        (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current humidity exceeds 70%, open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity > 70) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of the current humidity every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 습도는 \" + (#HumiditySensor).humidity)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me what the humidity is every day at 9 o'clock\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"습도는 \" + (#HumiditySensor).humidity)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner every 30 minutes if the current humidity is above 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#HumiditySensor).humidity >= 50) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 15 minutes, if the humidity is below 30%, the weather is announced through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#HumiditySensor).humidity <= 30) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#WeatherProvider).weather == \"thunderstorm\") {\n            (#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n        } else if ((#WeatherProvider).weather == \"drizzle\") {\n            (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n        } else if ((#WeatherProvider).weather == \"rain\") {\n            (#Speaker).speak(\"현재 날씨는 비입니다.\")\n        } else if ((#WeatherProvider).weather == \"snow\") {\n            (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n        } else if ((#WeatherProvider).weather == \"mist\") {\n            (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n        } else if ((#WeatherProvider).weather == \"smoke\") {\n            (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n        } else if ((#WeatherProvider).weather == \"haze\") {\n            (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n        } else if ((#WeatherProvider).weather == \"dust\") {\n            (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n        } else if ((#WeatherProvider).weather == \"fog\") {\n            (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n        } else if ((#WeatherProvider).weather == \"sand\") {\n            (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n        } else if ((#WeatherProvider).weather == \"ash\") {\n            (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n        } else if ((#WeatherProvider).weather == \"squall\") {\n            (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n        } else if ((#WeatherProvider).weather == \"tornado\") {\n            (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n        } else if ((#WeatherProvider).weather == \"clear\") {\n            (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n        } else if ((#WeatherProvider).weather == \"clouds\") {\n            (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window every hour if the current humidity exceeds 70%.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#HumiditySensor).humidity > 70) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n\t(#Irrigator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n\t(#Irrigator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"off\") {\n\t(#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"off\") {\n\t(#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current humidity is below 40%, turn on the irrigation system and give 300ml of water.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity <= 40) {\n    if ((#Irrigator).switch != \"on\") {\n        (#Irrigator).on()\n    }\n    (#Irrigator).setWaterPortion(300, \"mililiters\")\n\t(#Irrigator).startWatering()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current humidity is below 20%, start watering and give 200ml of water.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity <= 20) {\n    if ((#Irrigator).switch != \"off\") {\n        (#Irrigator).off()\n    }\n    (#Irrigator).setWaterPortion(200, \"mililiters\")\n\t(#Irrigator).startWatering()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the watering machine every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Irrigator).switch != \"on\") {\n        (#Irrigator).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the irrigation system every day at 9 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Irrigator).switch != \"on\") {\n        (#Irrigator).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Irrigator).switch != \"off\") {\n        (#Irrigator).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 o'clock, if the temperature is below 30, give 5 liters of water.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#WeatherProvider).temperature <= 30) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n        (#Irrigator).setWaterPortion(300, \"liters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current water leak sensor detects a water leak, sound an alarm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"detected\") {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If a water leak has occurred now, close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"detected\") {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If there is currently no water leak, turn on the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"not_detected\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current water leak sensor detects a water leak every hour, an alarm sounds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If water leaks occur every day at 7 o'clock, close the gas valve.\n\nServices: {'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights every 30 minutes if there are currently no leaks.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#LeakSensor).leakage == \"not_detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light bulb.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the light bulb.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light bulb.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the light bulb.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the lighting brightness to 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}\n(#Light).setLevel(50)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light bulb brightness to 75%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}\n(#Light).setLevel(75)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please lower the brightness of the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setLevel(10)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the lighting color to red using the HSV value.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"0|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light bulb color to blue.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the fire color to green.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"120|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the light color to yellow.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"60|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light bulb color to purple using the hsv value.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"300|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the fire color to orange.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"30|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light is currently off, turn it on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light bulb is currently on, set the brightness to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).setLevel(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the light bulb every day at 9 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights every Monday at 10 o'clock\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the lighting brightness to 50% every 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n    (#Light).setLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 o'clock, set the light bulb brightness to 75%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n    (#Light).setLevel(75)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the lighting color to red using the HSV value every 45 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n    (#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the current light intensity.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 광량은 \" + (#LightSensor).light)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the current illuminance value.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 조도 값은 \" + (#LightSensor).light)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light level is over 1000, turn off the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LightSensor).light >= 1000) {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current illuminance value is below 100, turn on the lights.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LightSensor).light <= 100) {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of the current light intensity every hour\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 광량은 \" + (#LightSensor).light)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please let me know the current illuminance value every 8 o'clock\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 조도 값은 \" + (#LightSensor).light)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 30 minutes, turn off the light if the light intensity is over 1000.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#LightSensor).light >= 1000) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light every 15 minutes if the current illuminance value is below 100.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#LightSensor).light <= 100) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the lunch menu for building 301 today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 301동 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me Jahayeon’s dinner menu today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 자하연 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the breakfast menu at the dormitory cafeteria tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 기숙사식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the breakfast menu at the student cafeteria today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 학생식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the veterinary school lunch menu today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 수의대식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the dinner menu at 3 restaurants today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 전망대(3식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the breakfast menu at the art restaurant today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 예술계식당(아름드리) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the lunch menu at the dormitory cafeteria today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 기숙사식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell us today’s Our Home dinner menu.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 아워홈 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the morning menu at Dongwon-gwan today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 동원관식당(113동) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the lunch menu for building 220 today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 웰스토리(220동) 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the dinner menu at the engineering school cafeteria today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 투굿(공대간이식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me today’s breakfast menu at Jahayeon Restaurant.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 자하연식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the lunch menu at the building 301 restaurant tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 301동식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the breakfast menu at the student cafeteria tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 학생식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the lunch menu at the vet school cafeteria tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 수의대식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the observatory dinner menu tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 전망대(3식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the breakfast menu tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 예술계식당(아름드리) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the lunch menu at the dormitory cafeteria tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 기숙사식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell us the Our Home dinner menu tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 아워홈 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the breakfast menu for building 113 tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 동원관식당(113동) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the Wellstory lunch menu tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 웰스토리(220동) 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the Toogood dinner menu tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 투굿(공대간이식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the dinner menu for tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 투굿(공대간이식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the breakfast menu at Jahayeon Restaurant tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 자하연식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the lunch menu for Building 301 tomorrow.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 301동식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Tell me today’s random restaurant menu.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).todayMenu()\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please recommend what to eat at Seoul National University now.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).todayMenu()\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please choose anything from the current restaurant menu.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).todayMenu()\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 10 o'clock, let me know today's lunch menu in Building 301\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 10 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 301동 점심\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 17:00, let me know today’s Jahayeon dinner menu.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 17 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 자하연 저녁\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 7 o'clock, let me know the breakfast menu for tomorrow's dormitory cafeteria.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"내일 기숙사식당 아침\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 8 o'clock, let me know what the student cafeteria breakfast menu is today.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 학생식당 아침\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 o'clock, let me know the lunch menu of today's veterinary school cafeteria.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 수의대식당 점심\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Output the current movement status through the speaker.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\nif ((#MotionSensor).motion == active) {\n    (#Speaker).speak(\"움직임이 감지되었습니다.\")\n}\nif ((#MotionSensor).motion == inactive) {\n    (#Speaker).speak(\"움직임이 감지되지 않았습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If movement is detected by the motion sensor, it speaks through the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"active\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"움직임이 감지되었습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If you detect movement right now, take a picture and send it to ssong@test.org.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"active\") {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    x = (#Camera).take()\n    (#EmailProvider).sendMailWithFile(\"ssong@test.org\", \"움직임이 감지되었습니다\", \"모션 센서에 의해 감지된 움직임에 대한 사진입니다.\", x)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If there is currently no movement, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"inactive\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Output the current movement status to the speaker every hour.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#MotionSensor).motion == active) {\n        (#Speaker).speak(\"움직임이 감지되었습니다.\")\n    }\n    if ((#MotionSensor).motion == inactive) {\n        (#Speaker).speak(\"움직임이 감지되지 않았습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 30 minutes, if the motion sensor detects movement, it speaks through the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"움직임이 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If you detect movement every 15 minutes, take a picture and send it to ssong@test.org.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        x = (#Camera).take()\n        (#EmailProvider).sendMailWithFile(\"ssong@test.org\", \"움직임이 감지되었습니다\", \"모션 센서에 의해 감지된 움직임에 대한 사진입니다.\", x)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner every 10 minutes if there is currently no movement.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#MotionSensor).motion == \"inactive\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak the current presence detection status through the speaker.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\nif ((#PresenceSensor).presence == \"present\") {\n    (#Speaker).speak(현재 누군가가 있습니다.)\n}\nif ((#PresenceSensor).presence == \"not_present\") {\n    (#Speaker).speak(현재 아무도 없습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the presence sensor detects a presence, turn off the dishwasher and turn on the water dispenser.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"present\") {\n    if ((#Dishwasher).switch != \"off\") {\n        (#Dishwasher).off()\n    }\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If there is no one currently, please take a photo and send it to dummy@mail.mail.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"not_present\") {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    x = (#Camera).take()\n    (#EmailProvider).sendMailWithFile(\"dummy@mail.mail\", \"존재 감지 없음\", \"존재 센서에 의해 감지되지 않은 상태입니다.\", x)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If there is someone present, please recommend today's Seoul National University restaurant menu and announce it through the speaker.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"present\") {\n    menu_info = (#MenuProvider).todayMenu()\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak the current presence detection status through the speaker every hour.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#PresenceSensor).presence == \"present\") {\n        (#Speaker).speak(현재 누군가가 있습니다.)\n    }\n    if ((#PresenceSensor).presence == \"not_present\") {\n        (#Speaker).speak(현재 아무도 없습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 30 minutes, if the presence sensor detects a presence, turn off the dishwasher and turn on the water dispenser.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#PresenceSensor).presence == \"present\") {\n        if ((#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 15 minutes, if no one is present, take a picture and send it to dummy@mail.mail.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        x = (#Camera).take()\n        (#EmailProvider).sendMailWithFile(\"dummy@mail.mail\", \"존재 감지 없음\", \"존재 센서에 의해 감지되지 않은 상태입니다.\", x)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 10 minutes, if there is someone present, recommend any of today's Seoul National University restaurant menu and announce it through the speaker.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#PresenceSensor).presence == \"present\") {\n        menu_info = (#MenuProvider).todayMenu()\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(menu_info)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"on\") {\n\t(#Pump).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the pump.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"off\") {\n\t(#Pump).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).operationMode != \"normal\") {\n\t(#Pump).setOperationMode(\"normal\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to minimum mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).operationMode != \"minimum\") {\n\t(#Pump).setOperationMode(\"minimum\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to maximum mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).operationMode != \"maximum\") {\n\t(#Pump).setOperationMode(\"maximum\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce the current operating mode of the pump through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 펌프의 작동 모드는 \" + (#Pump).operationMode)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the pump is off now, turn it on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"on\") {\n\t(#Pump).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the pump is on now, set it to maximum mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"off\") {\n\t(#Pump).setOperationMode(\"maximum\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Pump).switch != \"on\") {\n        (#Pump).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the pump every 9 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Pump).switch != \"off\") {\n        (#Pump).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode every Monday at 8 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Pump).operationMode != \"normal\") {\n        (#Pump).setOperationMode(\"normal\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to minimum mode at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Pump).operationMode != \"minimum\") {\n        (#Pump).setOperationMode(\"minimum\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to maximum mode every day at 12 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Pump).operationMode != \"maximum\") {\n        (#Pump).setOperationMode(\"maximum\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the refrigerator.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"on\") {\n\t(#Refrigerator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"off\") {\n\t(#Refrigerator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch your refrigerator to RapidCool mode\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n\t(#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn your refrigerator into RapidFreeze mode\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n\t(#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your refrigerator's current operating mode is not RapidCool, turn on the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n\tif ((#Light).switch != \"on\") {\n\t\t(#Light).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the refrigerator is currently turned on, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"off\") {\n\tif ((#AirConditioner).switch != \"off\") {\n\t\t(#AirConditioner).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the refrigerator is on, set it to quick freeze mode, and if it is off, turn it on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"off\") {\n    if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n        (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n    }\n}\nelse {\n\tif ((#Refrigerator).switch != \"on\") {\n\t\t(#Refrigerator).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the refrigerator is operating in rapid cooling mode, turn on the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode == \"RapidCool\") {\n\tif ((#Fan).switch != \"on\") {\n\t\t(#Fan).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Refrigerator).switch != \"on\") {\n        (#Refrigerator).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator every day at 9 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Refrigerator).switch != \"off\") {\n        (#Refrigerator).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the refrigerator to RapidCool mode every Monday at 8 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n        (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch the refrigerator to RapidFreeze mode at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n        (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light every day at 12 o'clock if the refrigerator's current operating mode is not RapidCool.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start cleaning.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"on\") {\n\t(#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"on\") {\n\t(#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"on\") {\n\t(#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the robot vacuum cleaner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"off\") {\n\t(#RobotCleaner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the robot vacuum cleaner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"off\") {\n\t(#RobotCleaner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot vacuum cleaner to automatic mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot vacuum cleaner to spot cleaning mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot vacuum cleaner to repeat cleaning mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner in manual mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n}\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot vacuum cleaner to stop mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Operate the robot vacuum cleaner in map mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n}\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the robot vacuum cleaner is currently turned on, set it to partial cleaning mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"off\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the robot vacuum cleaner is currently operating in automatic mode, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode == \"auto\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner every 3 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the robot vacuum cleaner every day at 18:00.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).switch != \"off\") {\n        (#RobotCleaner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn the robot vacuum cleaner on automatic mode every Friday at 8 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Run the robot vacuum cleaner in partial cleaning mode at 20:30 every weekend.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 20 and (#Clock).minute == 30) {\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start cleaning in map mode every day at 12 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current shade is open at all, play music in the 'Music/MyMusic.mp3' path through the speaker.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel > 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).play(\"Music/MyMusic.mp3\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the shade is now more than half open, reduce it to about 45%.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel >= 50) {\n    (#Shade).setShadeLevel(45)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your shade is currently less than 80% open, increase it to 90%.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel < 80) {\n\t(#Shade).setShadeLevel(90)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the shade is now more than half open, turn on the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel >= 50) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the shade by 10%.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 10) {\n    (#Shade).setShadeLevel(10)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the shade slightly.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 25) {\n    (#Shade).setShadeLevel(25)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the shade completely.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the shade 90%.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 90) {\n    (#Shade).setShadeLevel(90)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Adjust the shade to 60%.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 60) {\n    (#Shade).setShadeLevel(60)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open shades 30% every 3 hours\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    if ((#Shade).shadeLevel != 30) {\n        (#Shade).setShadeLevel(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the shade to 25% every Monday at 8 o'clock.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Shade).shadeLevel != 25) {\n        (#Shade).setShadeLevel(25)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the shades to 90% at 10:30 every weekend.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 10 and (#Clock).minute == 30) {\n    if ((#Shade).shadeLevel != 90) {\n        (#Shade).setShadeLevel(90)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the shade to 10% every day at 18:00.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Shade).shadeLevel != 10) {\n        (#Shade).setShadeLevel(10)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"off\") {\n\t(#Siren).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n    (#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Sound the alarm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Sound the siren.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Run the alarm in strobe mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n    (#Siren).on()\n}\n(#Siren).setSirenMode(\"strobe\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please start blaring the alarm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n    (#Siren).on()\n}\n(#Siren).setSirenMode(\"siren\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it so that both the alarm sound and the lights come on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the alarm mode to off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"off\") {\n\t(#Siren).setSirenMode(\"off\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set siren mode to both.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"both\") {\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the alarm to strobe mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"strobe\") {\n\t(#Siren).setSirenMode(\"strobe\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to only sound the siren sound.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"siren\") {\n\t(#Siren).setSirenMode(\"siren\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the alarm is currently in both mode, change it to only sound.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode == \"both\") {\n\t(#Siren).setSirenMode(\"siren\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the siren is currently in strobe mode, change it to make a sound.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode == \"strobe\") {\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the alarm is currently in siren mode, change it so that only the strobe light comes on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode == \"siren\") {\n\t(#Siren).setSirenMode(\"strobe\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the siren is on, turn on the refrigerator and change the mode to RapidCool.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"off\") {\n\tif ((#Refrigerator).switch != \"on\") {\n\t\t(#Refrigerator).on()\n\t}\n    if ((#Refrigerator).refrigeratorMode() != \"RapidCool\") {\n    \t(#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren every day at 9 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Siren).switch != \"off\") {\n        (#Siren).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Sound the siren every Monday at 8 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Sound the siren at 18:30 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren every day at 12 o'clock and set both the alarm sound and lights to come on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the power connected to the smart plug.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"on\") {\n\t(#SmartPlug).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Could you turn on the smart plug?\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"on\") {\n\t(#SmartPlug).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the smart plug.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"off\") {\n\t(#SmartPlug).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the power connected to the smart plug.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"off\") {\n\t(#SmartPlug).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current flowing through the smart plug is greater than 1, turn off the refrigerator.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).current > 1.0) {\n\tif ((#Refrigerator).switch != \"off\") {\n\t\t(#Refrigerator).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Let the speaker know how much power your smart plug is currently consuming.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"현재 스마트 플러그의 전력 소비량은 \" + (#SmartPlug).powerConsumption)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the current voltage of your smart plug.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"현재 스마트 플러그의 전압은 \" + (#SmartPlug).voltage)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If your smart plug is on, turn it off and close the window.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"off\") {\n\t(#SmartPlug).off()\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the smart plug is currently turned off, turn on the robot vacuum cleaner.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"on\") {\n\tif ((#RobotCleaner).switch != \"on\") {\n\t\t(#RobotCleaner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the smart plug's power consumption is over 1000, close the gas valve and turn on the humidifier.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).powerConsumption >= 1000.0) {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the power connected to the smart plug every 4 hours.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (4 HOUR) {\n    if ((#SmartPlug).switch != \"on\") {\n        (#SmartPlug).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the smart plug every day at 6 o'clock.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#SmartPlug).switch != \"off\") {\n        (#SmartPlug).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Tuesday at 9 o'clock, the smart plug's power consumption is announced through the speaker.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"tuesday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 스마트 플러그의 전력 소비량은 \" + (#SmartPlug).powerConsumption)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off your smart plug at 12:15 every weekday.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 12 and (#Clock).minute == 15) {\n    if ((#SmartPlug).switch != \"off\") {\n        (#SmartPlug).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on your smart plug at 18:45 every weekend.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 18 and (#Clock).minute == 45) {\n    if ((#SmartPlug).switch != \"on\") {\n        (#SmartPlug).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Output the current smoke detection status to the speaker now.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#SmokeDetector).smoke == \"detected\") {\n    (#Speaker).speak(현재 연기가 감지되었습니다. 확인해주세요.)\n}\nif ((#SmokeDetector).smoke == \"not_detected\") {\n    (#Speaker).speak(현재 연기가 감지되지 않았습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Sound an alarm when fire smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#SmokeDetector).smoke == \"detected\") {\n\tif ((#Siren).switch != \"on\") {\n\t\t(#Siren).on()\n\t}\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Now, if you don't detect smoke, close the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmokeDetector).smoke == \"not_detected\") {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If smoke is currently detected, close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmokeDetector).smoke == \"detected\") {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: The current smoke detection status is output to the speaker every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#Speaker).speak(현재 연기가 감지되었습니다. 확인해주세요.)\n    }\n    if ((#SmokeDetector).smoke == \"not_detected\") {\n        (#Speaker).speak(현재 연기가 감지되지 않았습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 7 o'clock, the smoke detection status is announced through the speaker.\n\nServices: {'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#Speaker).speak(현재 연기가 감지되었습니다. 확인해주세요.)\n    }\n    if ((#SmokeDetector).smoke == \"not_detected\") {\n        (#Speaker).speak(현재 연기가 감지되지 않았습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check the smoke detection status and sound the alarm every Monday at 9 o'clock.\n\nServices: {'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close windows every 30 minutes if smoke is not detected.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#SmokeDetector).smoke == \"not_detected\") {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check the smoke detection status every 15 minutes and sound an alarm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check if smoke is detected every day at 12 o'clock and close the gas valve.\n\nServices: {'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Output the current sound detection status to the speaker now.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#SoundSensor).sound == \"detected\") {\n    (#Speaker).speak(현재 소리가 감지됩니다.)\n}\nif ((#SoundSensor).sound == \"not_detected\") {\n    (#Speaker).speak(현재 소리가 감지되지 않았습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Output the current noise detection status to the speaker now.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#SoundSensor).sound == \"detected\") {\n    (#Speaker).speak(현재 소리가 감지됩니다.)\n}\nif ((#SoundSensor).sound == \"not_detected\") {\n    (#Speaker).speak(현재 소리가 감지되지 않았습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Now, if no sound is detected, turn off the refrigerator.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SoundSensor).sound == \"not_detected\") {\n\tif ((#Refrigerator).switch != \"off\") {\n\t\t(#Refrigerator).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current sound is louder than 100 decibels, turn on the pump.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SoundSensor).soundPressureLevel > 100) {\n\tif ((#Pump).switch != \"on\") {\n\t\t(#Pump).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every two hours, the current noise level is output through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (2 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 소음의 크기는\" + (#SoundSensor).soundPressureLevel)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 8 o'clock, the sound detection status is announced through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SoundSensor).sound == \"detected\") {\n        (#Speaker).speak(현재 소리가 감지됩니다.)\n    }\n    if ((#SoundSensor).sound == \"not_detected\") {\n        (#Speaker).speak(현재 소리가 감지되지 않았습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator if no sound is detected every 20 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (20 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 10 minutes, if the noise exceeds 40, speak a caution message through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SoundSensor).soundPressureLevel > 40) {\n        (#Speaker).speak(현재 소음이 너무 큽니다. 주의해 주세요.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"off\") {\n\t(#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"off\") {\n\t(#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please pause the music.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).pause()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please pause the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).pause()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please stop the music.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).stop()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please stop the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).stop()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Play music in the 'folder/path/music.mp3' path.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).play(\"folder/path/music.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Say ‘Hello’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"안녕하세요\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the speaker is currently on pause, turn off the refrigerator.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"paused\") {\n\tif ((#Refrigerator).switch != \"off\") {\n\t\t(#Refrigerator).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the speaker is currently stopped, say ‘The speaker is currently stopped’ through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"stopped\") {\n\tif ((#Speaker).switch != \"on\") {\n\t\t(#Speaker).on()\n\t}\n\t(#Speaker).speak(\"스피커가 현재 stopped 상태입니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the speaker is currently playing, close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the speaker is turned on, close the gas valve.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"off\") {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the speaker is currently turned off, turn it on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Outputs the current speaker status to the speaker every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 스피커의 상태는 \" + (#Speaker).playbackStatus)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 7 o'clock, say 'Good morning' through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"좋은 아침입니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday at 9 o'clock, a speaker announces, 'Weekly meeting begins.'\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"주간 회의가 시작됩니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 30 minutes, turn on the speaker and say ‘start working’.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"작업을 시작합니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the speaker if it is turned off every 15 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 o'clock, say 'It's lunch time' through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"점심 시간입니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the switch.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"on\") {\n\t(#Switch).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the switch.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"on\") {\n\t(#Switch).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Switch off.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"off\") {\n\t(#Switch).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the switch.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"off\") {\n\t(#Switch).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: When the switch is on, a notification sounds through the speaker.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"off\") {\n\t(#Speaker).speak(\"스위치가 켜져 있습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the switch is off, turn it on.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"on\") {\n\t(#Switch).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the switch every hour.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Switch).switch != \"on\") {\n        (#Switch).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the switch every day at 7 o'clock.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Switch).switch != \"off\") {\n        (#Switch).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn on the television.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"off\") {\n\t(#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn off the TV.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"off\") {\n\t(#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the TV channel to 5.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\nif ((#Television).tvChannel != 5) {\n    (#Television).setTvChannel(5)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn up the TV channel.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).channelUp()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please turn down the TV channel.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).channelDown()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the television volume to 20.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).setVolume(20)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Increase the TV volume by 2 levels.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).volumeUp()\n(#Television).volumeUp()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn the TV volume down 3 levels.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).volumeDown()\n(#Television).volumeDown()\n(#Television).volumeDown()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn down the television volume 10 steps.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "target_volume = (#Calculator).sub((#Television).volume, 10)\nif (target_volume < 0) {\n\ttarget_volume = 0\n}\nif ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).setVolume(target_volume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn up the TV volume by 20.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "target_volume = (#Calculator).add((#Television).volume, 20)\nif ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).setVolume(target_volume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please mute the TV.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please mute the television.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Unmute the TV.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please mute the television.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Unmute the TV.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please unmute the television.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the TV is currently muted, unmute it.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the television isn't on mute right now, mute it.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the television is currently on, close the window, and if it is off, turn it on.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"off\") {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n} else {\n\t(#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current volume is over 30, reduce it to 10.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).volume > 30) {\n\tif ((#Television).switch != \"on\") {\n\t\t(#Television).on()\n\t}\n\t(#Television).setVolume(10)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV every 3 hours.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television every day at 8 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the TV channel to 11 every Wednesday at 10 o'clock.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"wednesday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n    if ((#Television).tvChannel != 11) {\n        (#Television).setTvChannel(11)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the television volume to 20 at 12:15 every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 12 and (#Clock).minute == 15) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n    (#Television).setVolume(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV at 18:45 every weekend.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 18 and (#Clock).minute == 45) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Tell me the current room temperature.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"현재 온도는 \" + (#TemperatureSensor).temperature)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the indoor temperature is above 25 degrees, turn on the air conditioner.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature >= 25) {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the temperature in your house is over 30 degrees, open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature > 30) {\n\tif ((#Window).window != \"open\") {\n\t\t(#Window).open()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current indoor temperature is too low, turn on the humidifier.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature < 18) {\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of the current temperature in your home every 3 hours.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    current_temperature = (#TemperatureSensor).temperature\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 온도는 \" + current_temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Notifies you of the current home temperature every day at 7 o'clock.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    current_temperature = (#TemperatureSensor).temperature\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 온도는 \" + current_temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check the current actual temperature every Friday at 9 o'clock and turn on the air conditioner if it is above 25 degrees.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#TemperatureSensor).temperature >= 25) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner every 30 minutes if the temperature is above 25 degrees.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#TemperatureSensor).temperature >= 25) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window every day at 12 o'clock when the temperature exceeds 30 degrees.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#TemperatureSensor).temperature > 30) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the water valve.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"closed\") {\n\t(#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the water valve.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).switch != \"on\") {\n\t(#Valve).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the water valve.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"open\") {\n\t(#Valve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the water valve.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).switch != \"off\") {\n\t(#Valve).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the water valve is open now, close it.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"open\") {\n\t(#Valve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the water valve is currently closed, open it.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"closed\") {\n\t(#Valve).open()\n}\n매 3시간마다 물 밸브를 열어줘.\nloop (3 HOUR) {\n    if ((#Valve).valveStatus == \"closed\") {\n        (#Valve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the water valve every day at 18:00.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Valve).switch != \"off\") {\n        (#Valve).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current atmospheric pressure is over 1 atm, announce ‘High pressure’ through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).pressure > 1) {\n\tif ((#Speaker).switch != \"on\") {\n\t\t(#Speaker).on()\n\t}\n\t(#Speaker).speak(\"고기압입니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather outside is higher than 30 degrees, close the windows and turn on the air conditioner.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).temperature > 30) {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the outside temperature is lower than 10 degrees, turn on the air conditioner in heating mode and set it to 22 degrees.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).temperature < 10) {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n\t(#AirConditioner).setTemperature(22)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce the current weather through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#WeatherProvider).weather == \"thunderstorm\") {\n\t(#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n} else if ((#WeatherProvider).weather == \"drizzle\") {\n\t(#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n} else if ((#WeatherProvider).weather == \"rain\") {\n\t(#Speaker).speak(\"현재 날씨는 비입니다.\")\n} else if ((#WeatherProvider).weather == \"snow\") {\n\t(#Speaker).speak(\"현재 날씨는 눈입니다.\")\n} else if ((#WeatherProvider).weather == \"mist\") {\n\t(#Speaker).speak(\"현재 날씨는 안개입니다.\")\n} else if ((#WeatherProvider).weather == \"smoke\") {\n\t(#Speaker).speak(\"현재 날씨는 연기입니다.\")\n} else if ((#WeatherProvider).weather == \"haze\") {\n\t(#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n} else if ((#WeatherProvider).weather == \"dust\") {\n\t(#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n} else if ((#WeatherProvider).weather == \"fog\") {\n\t(#Speaker).speak(\"현재 날씨는 안개입니다.\")\n} else if ((#WeatherProvider).weather == \"sand\") {\n\t(#Speaker).speak(\"현재 날씨는 모래입니다.\")\n} else if ((#WeatherProvider).weather == \"ash\") {\n\t(#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n} else if ((#WeatherProvider).weather == \"squall\") {\n\t(#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n} else if ((#WeatherProvider).weather == \"tornado\") {\n\t(#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n} else if ((#WeatherProvider).weather == \"clear\") {\n\t(#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n} else if ((#WeatherProvider).weather == \"clouds\") {\n\t(#Speaker).speak(\"현재 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it's thundering right now, close the windows.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"thunderstorm\") {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is currently drizzling, turn on the lights and set them to orange.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"drizzle\") {\n\tif ((#Light).switch != \"on\") {\n\t\t(#Light).on()\n\t}\n\t(#Light).setColor(\"30|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it's raining right now, sound the siren.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"rain\") {\n\tif ((#Siren).switch != \"on\") {\n\t\t(#Siren).on()\n\t}\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it is currently snowing, turn on the lights and set them to white.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"snow\") {\n\tif ((#Light).switch != \"on\") {\n\t\t(#Light).on()\n\t}\n\t(#Light).setColor(\"0|0|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is currently foggy, turn on the air purifier.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"mist\" or weather == \"fog\") {\n\tif ((#AirPurifier).switch != \"on\") {\n\t\t(#AirPurifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is currently clear, turn on the air conditioner.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clear\") {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is currently nice, turn on the air conditioner.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clear\") {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is currently sunny, turn on the air conditioner.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clear\") {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is currently cloudy, turn on the humidifier.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clouds\") {\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Tell me the weather in your area. Latitude 37.5665, Longitude 126.9780\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(37.5665, 126.9780)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the weather in Seoul.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(37.5665, 126.9780)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"서울의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"서울의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"서울의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"서울의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"서울의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"서울의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"서울의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"서울의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"서울의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"서울의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"서울의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"서울의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"서울의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"서울의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"서울의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Tell me the weather in New York.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(40.7128, -74.0060)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please tell me the weather in Daegu.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(35.8722, 128.6025)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"대구의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"대구의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"대구의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"대구의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"대구의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"대구의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"대구의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"대구의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"대구의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"대구의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"대구의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"대구의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"대구의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"대구의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"대구의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: It checks the current air pressure every 6 o'clock, and when it exceeds 1 atm, it announces through the speaker, 'High pressure.'\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#WeatherProvider).pressure > 1) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"고기압입니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check the weather outside every Tuesday at 9 o'clock, and if it is higher than 30 degrees, close the windows and turn on the air conditioner.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"tuesday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#WeatherProvider).temperature > 30) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check the outside temperature at 12:15 every weekday, and if it is lower than 10 degrees, turn on the air conditioner in heating mode and set it to 22 degrees.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 12 and (#Clock).minute == 15) {\n    if ((#WeatherProvider).temperature < 10) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        (#AirConditioner).setAirConditionerMode(\"heat\")\n        (#AirConditioner).setTemperature(22)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every weekend at 18:45, the current weather is announced through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 18 and (#Clock).minute == 45) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"thunderstorm\") {\n        (#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n    } else if ((#WeatherProvider).weather == \"drizzle\") {\n        (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n    } else if ((#WeatherProvider).weather == \"rain\") {\n        (#Speaker).speak(\"현재 날씨는 비입니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n    } else if ((#WeatherProvider).weather == \"mist\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\") {\n        (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n    } else if ((#WeatherProvider).weather == \"haze\") {\n        (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"dust\") {\n        (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n    } else if ((#WeatherProvider).weather == \"fog\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"sand\") {\n        (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n    } else if ((#WeatherProvider).weather == \"ash\") {\n        (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n    } else if ((#WeatherProvider).weather == \"squall\") {\n        (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\") {\n        (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"open\") {\n\t(#Window).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please close the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"closed\") {\n\t(#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the window is currently open, close it and turn on the humidifier.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"closed\") {\n\t(#Window).close()\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the window is closed right now, turn off the dryer.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window == \"closed\") {\n\tif ((#Dehumidifier).switch != \"off\") {\n\t\t(#Dehumidifier).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window every two hours.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (2 HOUR) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window every day at 9 o'clock.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the windows and turn on the humidifier every Monday at 8 o'clock.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to siren mode at 6:00 PM on holidays. Announce \"Holiday siren activated\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"siren\") {\n            (#Siren).setSirenMode(\"siren\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Holiday siren activated\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren if it is in both mode at 11:00 PM. Announce \"Siren turned off\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"both\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren turned off\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to strobe mode at 7:00 AM every Monday. Announce \"Siren set to strobe mode\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren set to strobe mode\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 8:00 PM if it is in siren mode. Announce \"Siren turned off\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"siren\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren turned off\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 6:00 AM every Monday. Announce \"Siren activated for the week\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren activated for the week\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 3:00 PM on the last Friday of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day >= 24 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter volume exceeds 1000 and the gas valve is open, turn on the siren and set it to both mode at 6:00 AM. Announce \"Gas leak detected\" on the speaker.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1000 and (#GasValve).valve == \"open\") {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas leak detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter time exceeds 5000 seconds, turn off the gas valve and announce \"Gas usage limit reached\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasMeter).gasMeterTime > 5000) {\n        if ((#GasValve).valve == \"open\") {\n            (#GasValve).valve = \"closed\"\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Gas usage limit reached\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 7:00 PM if the gas meter calorific value exceeds 1500. Announce \"High gas calorific value detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1500) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"High gas calorific value detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to both mode if the gas meter volume exceeds 5000 between 9:00 AM and 5:00 PM. Announce \"Gas leak emergency\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour >= 9 and (#Clock).hour < 17) {\n        if ((#GasMeter).gasMeterVolume > 5000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas leak emergency\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas valve is open at 6:00 PM and gas meter volume is less than 100, announce \"Gas usage nominal\" on the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterVolume < 100) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas usage nominal\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to siren mode at 2:00 PM if the gas meter calorific value exceeds 2000. Announce \"Warning: High calorific gas\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 2000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"siren\") {\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Warning: High calorific gas\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren if it is in both mode at 10:00 PM and announce \"Siren deactivated for the night\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"both\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren deactivated for the night\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter volume exceeds 3000 at 3:00 PM on weekends, turn on the siren and set it to strobe mode. Announce \"Weekend gas leak detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#GasMeter).gasMeterVolume > 3000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Weekend gas leak detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the speaker and play a sound file at 8:00 AM if the gas meter volume is below 500.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume < 500) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"soundfile_path\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter calorific value exceeds 1200 at 9:00 PM, turn on the siren and set it to siren mode. Announce \"High calorific gas warning\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1200) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"siren\") {\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"High calorific gas warning\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter time exceeds 6000 seconds, turn on the siren and set it to both mode. Announce \"Gas meter time limit exceeded\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasMeter).gasMeterTime > 6000) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Gas meter time limit exceeded\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker if the gas meter volume is less than 300 at 11:00 AM.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume < 300) {\n            if ((#Speaker).switch != \"off\") {\n                (#Speaker).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 5:00 PM if the gas meter volume exceeds 4000. Announce \"Critical gas volume detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 4000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Critical gas volume detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas valve is open and the gas meter calorific value is above 1800, turn on the speaker and play a sound file at 2:00 PM.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterCalorific > 1800) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"soundfile_path\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve if the gas meter volume exceeds 1500 at 4:00 PM and announce \"Gas valve closed due to high volume\" on the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1500) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas valve closed due to high volume\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to both mode at 9:00 PM if the gas meter time exceeds 8000 seconds. Announce \"Extended gas usage detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 8000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Extended gas usage detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter volume exceeds 600 at 6:00 PM, announce \"Gas volume threshold exceeded\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 600) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas volume threshold exceeded\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 10:00 AM if the gas meter calorific value is below 1000 and announce \"Siren off: Calorific value low\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific < 1000) {\n            if ((#Siren).switch != \"off\") {\n                (#Siren).off()\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Siren off: Calorific value low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas valve is open and the gas meter volume exceeds 2500, turn on the siren and set it to siren mode at 1:00 PM. Announce \"Gas volume critical\" on the speaker.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterVolume > 2500) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"siren\") {\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas volume critical\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve at 8:00 AM if the gas meter time exceeds 9000 seconds. Announce \"Gas valve closed: Time exceeded\" on the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 9000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas valve closed: Time exceeded\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter volume exceeds 3500 and the gas meter calorific value exceeds 1600 at 7:00 PM, turn on the siren and set it to both mode. Announce \"Critical gas situation detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 3500 and (#GasMeter).gasMeterCalorific > 1600) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Critical gas situation detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve if the gas meter volume exceeds 5000 at 5:00 AM. Announce \"Gas valve closed due to high volume\" on the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 5000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas valve closed due to high volume\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 12:00 PM if the gas meter calorific value exceeds 1400. Announce \"Warning: High gas calorific value\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1400) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Warning: High gas calorific value\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker at 3:00 PM if the gas valve is closed.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"closed\") {\n            if ((#Speaker).switch != \"off\") {\n                (#Speaker).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter volume exceeds 4500 at 9:00 AM, turn on the siren and set it to both mode. Announce \"Gas volume critical\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 4500) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas volume critical\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve at 10:00 AM if the gas meter volume exceeds 2000. Announce \"Gas valve closed due to high usage\" on the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 2000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas valve closed due to high usage\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 4:00 PM if the gas meter calorific value exceeds 1600. Announce \"High gas calorific value detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1600) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"High gas calorific value detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas meter volume exceeds 1200 at 12:00 PM, turn on the siren and set it to both mode. Announce \"Gas leak detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1200) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas leak detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve at 6:00 PM if the gas meter time exceeds 15000 seconds. Announce \"Gas valve closed: Time limit reached\" on the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 15000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas valve closed: Time limit reached\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to both mode at 7:00 AM if the gas meter calorific value exceeds 1300. Announce \"High calorific gas detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1300) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"High calorific gas detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the gas valve is open and the gas meter volume exceeds 1800 at 5:00 PM, turn on the siren and set it to strobe mode. Announce \"Gas leak emergency\" on the speaker.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterVolume > 1800) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas leak emergency\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker at 3:00 PM if the gas meter volume is below 700.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume < 700) {\n            if ((#Speaker).switch != \"off\") {\n                (#Speaker).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to both mode at 8:00 PM if the gas meter volume exceeds 1400. Announce \"Gas leak detected\" on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1400) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas leak detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve if the gas meter time exceeds 7000 seconds at 2:00 PM. Announce \"Gas valve closed: Usage time exceeded\" on the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 7000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas valve closed: Usage time exceeded\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to high mode at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"high\") {\n            (#Humidifier).setHumidifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to auto mode if the humidity is below 40% at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to medium mode at 6:00 AM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"medium\") {\n            (#Humidifier).setHumidifierMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to low mode if the humidity is above 60% at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 60.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"low\") {\n                (#Humidifier).setHumidifierMode(\"low\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 11:00 PM if the humidity is above 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 50.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to high mode at 9:00 AM if the humidity is below 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to auto mode at 8:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 5:00 PM if the humidity is above 55%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 55.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to medium mode at 7:00 PM if the humidity is below 45%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 45.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 12:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to high mode at 6:00 PM if the humidity is below 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 50.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to low mode at 10:00 AM if the humidity is above 70%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 70.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"low\") {\n                (#Humidifier).setHumidifierMode(\"low\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to medium mode at 2:00 PM if the humidity is below 35%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 35.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 3:00 AM if the humidity is above 55%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 3 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 55.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to high mode at 9:00 PM if the humidity is below 25%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 25.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to auto mode at 8:00 AM if the humidity is below 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to medium mode at 10:00 AM if the humidity is below 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 4:00 PM if the humidity is above 65%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 65.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if the temperature exceeds 30°C at 2:00 PM and the blinds are closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if VOC level is above 0.05 and humidity is below 40% at 9:00 AM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05 and (#AirQualityDetector).humidity < 40.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 60% at 3:00 PM if the CO2 level is above 800 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a photo if the gas meter volume exceeds 50 m³ at 4:00 PM.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 50.0) {\n            if ((#Camera).switch != \"on\") {\n                (#Camera).on()\n            }\n            (#Camera).take()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to high mode at 7:00 AM if the humidity is above 70%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 70.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"high\") {\n                (#Dehumidifier).setDehumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Lock the door if it is 10:00 PM and the humidity is below 30%.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30.0) {\n            if ((#DoorLock).lockState == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 5:00 PM if the temperature is above 28°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder at 8:00 PM if the gas meter time exceeds 10000 seconds.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 10000) {\n            if ((#Feeder).switch != \"off\") {\n                (#Feeder).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if the humidity is below 35% at 9:00 AM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity < 35.0) {\n                if ((#Humidifier).switch != \"on\") {\n                    (#Humidifier).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the curtain to 80% at 7:00 AM if the gas meter volume exceeds 60 m³.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 60.0) {\n            (#Curtain).setCurtainLevel(80)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to eco mode at 10:00 PM if the humidity is above 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 50.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwasherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier if the humidity is above 60% at 6:00 PM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity > 60.0) {\n                if ((#Humidifier).switch != \"off\") {\n                    (#Humidifier).off()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner and set it to auto mode at 8:00 AM if the temperature is above 28°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Lock the door and turn on the siren if the gas concentration exceeds 200 ppm at 5:00 PM.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#GasValve).gasMeter > 200.0) {\n            if ((#DoorLock).lockState == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 6:00 AM if the PM 2.5 level exceeds 35.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 35.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 7:00 PM if the temperature is below 20°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the curtain to 100% at 9:00 AM if the gas meter time exceeds 5000 seconds.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 5000) {\n            (#Curtain).setCurtainLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder at 8:00 PM if the gas meter volume exceeds 70 m³.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 70.0) {\n            if ((#Feeder).switch != \"off\") {\n                (#Feeder).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier at 10:00 AM if the humidity is below 30% on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity < 30.0) {\n                if ((#Humidifier).switch != \"on\") {\n                    (#Humidifier).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to medium mode at 8:00 AM if the humidity is below 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 3:00 PM if the humidity is above 60% on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity > 60.0) {\n                if ((#Humidifier).switch != \"off\") {\n                    (#Humidifier).off()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 10 at 12:00 PM if the temperature is above 30°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator if it is off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n    (#Irrigator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigator if it is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"off\") {\n    (#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 100 ml if the irrigator is off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n    (#Irrigator).on()\n}\n(#Irrigator).setWaterPortion(100, \"milliliters\")\n(#Irrigator).startWatering()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 50 ml at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(50, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator and start watering with 150 ml if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(150, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 75 ml if the irrigator is on at 7:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch == \"on\") {\n            (#Irrigator).setWaterPortion(75, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigator at 9:00 PM if it is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 200 ml if it is a weekend.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(200, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator and start watering with 120 ml at 6:00 AM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(120, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigator at 11:00 PM if it is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator and start watering with 100 ml if it is off and it is 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(100, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 80 ml if it is a holiday and the time is 10:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(80, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator and start watering with 60 ml if the time is 5:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(60, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigator if it is on and it is 11:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 150 ml if it is a weekend and the time is 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(150, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator and start watering with 70 ml if it is a holiday and the time is 7:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(70, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigator if it is on and it is 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 90 ml if it is 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(90, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigator and start watering with 110 ml if it is 8:00 AM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(110, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigator if it is on and it is 10:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 100 ml if the blinds are open at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(100, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 150 ml if the temperature is above 30°C at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(150, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 50 ml if the humidity is below 40% at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(50, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system and set the blinds to 50% at 5:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system and set the humidifier to high mode if humidity is below 30% at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system at 9:00 PM and announce \"Irrigation system turned off\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Irrigation system turned off\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 200 ml if the CO2 level exceeds 500 ppm at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 500) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(200, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system if the gas meter exceeds 50 units at 6:00 PM.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeter > 50) {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 120 ml at 8:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(120, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system and start watering with 80 ml at 10:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(80, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system and start watering with 90 ml at 5:00 PM if the fan is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Fan).switch == \"on\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(90, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 110 ml if the temperature is below 20°C at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(110, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 130 ml at 7:00 PM if the gas valve is closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"closed\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(130, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system at 11:00 AM if the blinds are closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 160 ml at 8:00 AM if the air conditioner is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(160, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system if the CO2 level is below 400 ppm at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide < 400) {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 140 ml at 9:00 AM if the humidifier is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch == \"on\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(140, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system at 6:00 AM if the fan is off and the temperature is above 25°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Fan).switch == \"off\" and (#AirQualityDetector).temperature > 25) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start watering with 180 ml at 3:00 PM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(180, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system and start watering with 170 ml at 1:00 PM if the gas valve is open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(170, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the irrigation system at 10:00 PM if the blinds are partially open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"partially\") {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light at 6:00 PM if it's off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"off\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light brightness to 60% at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light at 10:00 PM if it's on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the light color to blue at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Light).setColor(\"240|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light to red color at 5:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 5 and (#Clock).minute == 0) {\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light brightness to 30% at 9:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and set it to green color at 12:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"120|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light color to yellow at 3:00 PM if the light is off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"60|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light brightness to 75% if it is below 50% at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Light).light < 50) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(75)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light at 1:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light to purple color at 2:00 AM if it's on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"300|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change the light color to orange at 6:00 PM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 18 and (#Clock).minute == 0) {\n        (#Light).setColor(\"30|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light at 8:00 PM on Fridays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light brightness to 10% at 5:00 AM if it's on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).setLevel(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light at 3:00 PM if it's on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and set it to blue color at 9:00 PM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setColor(\"240|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light at 7:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light brightness to 50% at 8:00 PM if the light is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).setLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light at 6:00 AM if it's off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light brightness to 20% at 9:00 PM if the light is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).setLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and set the color to red at 7:00 PM if the air quality (PM 2.5) is poor.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 50.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setColor(\"0|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light if the gas meter volume exceeds 1000 at 10:00 PM.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1000) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to high mode at 9:00 AM if the light is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 50% at 2:00 PM if the light is off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"off\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and play music on the speaker at 8:00 PM on holidays.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"path/to/music\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 11:00 PM if the light is on.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            if ((#Dehumidifier).switch == \"on\") {\n                (#Dehumidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the light brightness to 80% at 6:00 AM if the temperature is below 20°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(80)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light and lock the door at 10:00 PM.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n        if ((#DoorLock).lock == \"unlocked\") {\n            (#DoorLock).lock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and set the level to 60% at 7:00 PM if the humidity is above 70%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(60)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and open the curtains at 8:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Curtain).curtain == \"closed\") {\n                (#Curtain).setCurtainLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light and start feeding 30 grams the pet at 9:00 PM if the CO2 level is above 800 ppm.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(30, \"grams\")\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and play a notification sound on the speaker at 7:00 AM if the humidity is below 30%.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity < 30.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"path/to/notification\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light and set the blind level to 50% at 6:00 PM if the temperature exceeds 25°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            (#Blind).setBlindLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and start watering the plants at 9:00 AM if the gas meter volume exceeds 500.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 500) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(200, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light and start feeding the pet 100 grams at 5:00 PM if the temperature is below 18°C.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 18.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(100, \"grams\")\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current light intensity is above 800 at 7:00 AM, turn off the lights.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 800) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the current light intensity is below 200 at 6:00 PM, turn on the lights.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 200) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce the current light intensity every day at noon.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        current_light_intensity = (#LightSensor).light\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"현재 광량은 \" + current_light_intensity)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 300 at 8:00 AM, set the light brightness to 70%.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 300) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(70)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights if the light intensity is above 600 at 9:00 PM.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 600) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 150 at 7:00 PM, turn on the lights and set the color to blue.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 150) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setColor(\"240|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 900 at 10:00 AM, set the light brightness to 30%.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 900) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce the current light intensity at 5:00 PM if it's below 400.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 400) {\n            current_light_intensity = (#LightSensor).light\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"현재 광량은 \" + current_light_intensity)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 500 at 4:00 PM, turn on the lights and set the brightness to 50%.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 500) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights at 8:00 AM if the light intensity is above 700.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 700) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 800 at 7:00 AM, turn off the lights and close the blinds.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 800) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#Blind).blind != \"closed\") {\n                (#Blind).setBlindLevel(0)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 100 at 8:00 PM, turn on the lights and open the blinds halfway.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 100) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Blind).blind != \"partially\") {\n                (#Blind).setBlindLevel(50)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 500 at 12:00 PM on weekdays, turn on the air conditioner.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n            if ((#LightSensor).light > 500) {\n                if ((#AirConditioner).switch != \"on\") {\n                    (#AirConditioner).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 200 at 10:00 PM, turn on the humidifier.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 200) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 1000 at 9:00 AM on weekends, turn off the air purifier and set the blinds to 70%.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n            if ((#LightSensor).light > 1000) {\n                if ((#AirPurifier).switch != \"off\") {\n                    (#AirPurifier).off()\n                }\n                if ((#Blind).blind != \"70\") {\n                    (#Blind).setBlindLevel(70)\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 300 at 7:00 PM on weekdays, turn on the lights and set the air conditioner to cool mode.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n            if ((#LightSensor).light < 300) {\n                if ((#Light).switch != \"on\") {\n                    (#Light).on()\n                }\n                if ((#AirConditioner).airConditionerMode != \"cool\") {\n                    (#AirConditioner).setAirConditionerMode(\"cool\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 400 at 6:00 PM on holidays, turn on the dehumidifier and set it to high mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 400) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"high\") {\n                (#Dehumidifier).setDehumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 150 at 5:00 PM on weekdays, turn off the lights and set the blinds to 30%.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n            if ((#LightSensor).light < 150) {\n                if ((#Light).switch == \"on\") {\n                    (#Light).off()\n                }\n                if ((#Blind).blind != \"30\") {\n                    (#Blind).setBlindLevel(30)\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 600 at 11:00 AM, turn on the fan and set it to speed 3.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 600) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 200 at 10:00 PM, turn on the humidifier.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 200) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 1000 at 2:00 PM, turn off the air conditioner.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 1000) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 300 at 9:00 AM, turn on the humidifier and set it to medium mode.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 300) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 800 at 5:00 PM, turn off the lights and set the air conditioner to auto mode.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 800) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 400 at 8:00 AM on weekends, turn on the dehumidifier and set it to low mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n            if ((#LightSensor).light < 400) {\n                if ((#Dehumidifier).switch != \"on\") {\n                    (#Dehumidifier).on()\n                }\n                if ((#Dehumidifier).dehumidifierMode != \"low\") {\n                    (#Dehumidifier).setDehumidifierMode(\"low\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 700 at 3:00 PM, turn off the humidifier.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 700) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 250 at 6:00 PM, turn on the lights and set the blinds to 60%.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 250) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Blind).blind != \"60\") {\n                (#Blind).setBlindLevel(60)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 900 at 4:00 PM, turn on the air conditioner and set it to cool mode.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 900) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"cool\") {\n                (#AirConditioner).setAirConditionerMode(\"cool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is below 100 at 7:00 AM, turn on the lights and set the air purifier to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 100) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light intensity is above 400 at 8:00 PM, turn off the dehumidifier.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 400) {\n            if ((#Dehumidifier).switch != \"off\") {\n                (#Dehumidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights if no presence is detected.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if presence is detected at 2:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Welcome home' on the speaker if presence is detected after 6:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour >= 18 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Welcome home\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier if no presence is detected at 9:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights if presence is detected at 7:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan if presence is detected.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"present\") {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier if no presence is detected at 11:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV if presence is detected at 8:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if no presence is detected.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light if presence is detected at 6:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if no presence is detected.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Good morning' if presence is detected at 7:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Good morning\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if presence is detected at 8:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV if no presence is detected at 11:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Television).switch != \"off\") {\n                (#Television).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if presence is detected at 6:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Good night' if no presence is detected at 11:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Good night\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier if presence is detected at 9:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights if no presence is detected at 10:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan if presence is detected at 5:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'System shutting down' if no presence is detected at 12:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"System shutting down\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights if presence is detected at 7:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if no presence is detected at 10:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if presence is detected at 3:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Good evening' if presence is detected at 8:00 PM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Good evening\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV if no presence is detected at 2:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if presence is detected at 9:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'System started' if presence is detected at 6:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"System started\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights if presence is detected at 5:00 AM.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to minimum mode at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"minimum\") {\n            (#Pump).setOperationMode(\"minimum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to maximum mode at 12:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump at 8:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Pump).switch != \"on\") {\n                (#Pump).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump at 11:00 PM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode at 4:00 PM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"normal\") {\n                (#Pump).setOperationMode(\"normal\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to minimum mode at 1:00 PM on the first day of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"minimum\") {\n            (#Pump).setOperationMode(\"minimum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to maximum mode at 3:00 PM on the last day of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 31 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump at 5:00 AM on the first Monday of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).day <= 7 and (#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump at 9:00 PM on the last Friday of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day >= 24 and (#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode at 7:00 AM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to minimum mode at 10:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"minimum\") {\n                (#Pump).setOperationMode(\"minimum\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to maximum mode at 4:00 PM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"maximum\") {\n                (#Pump).setOperationMode(\"maximum\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump at 8:00 PM on the first Friday of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day <= 7 and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump at 6:00 AM on the first day of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode at 3:00 PM on the last Monday of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).day >= 24 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and set the light to 50% at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump and the air conditioner at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to maximum mode and turn on the fan at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and play music on the speaker at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"path_to_music\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to minimum mode and turn off the dehumidifier at 5:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"minimum\") {\n            (#Pump).setOperationMode(\"minimum\")\n        }\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and the humidifier at 7:00 AM.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode and announce \"Pump set to normal mode\" on the speaker at 3:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Pump set to normal mode\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump and the light at 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and the camera at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to maximum mode and turn off the light at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and the air purifier at 8:00 AM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump and the television at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and set the dehumidifier to drying mode at 7:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to minimum mode and turn on the fan at 9:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"minimum\") {\n                (#Pump).setOperationMode(\"minimum\")\n            }\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump and the camera at 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the pump to normal mode and turn on the light at 5:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and set the fan speed to 3 at 3:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump and announce \"Pump turned off\" on the speaker at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Pump turned off\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump and the humidifier at 8:00 AM if the humidity is below 40%.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Pump).switch != \"on\") {\n                (#Pump).on()\n            }\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the pump and the air conditioner at 6:00 PM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 12:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 11:00 PM and turn it back on at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 7:00 AM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"on\") {\n                (#Refrigerator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 9:00 PM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"off\") {\n                (#Refrigerator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 3:00 PM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 10:00 AM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 11:30 PM if it is a weekend.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n            if ((#Refrigerator).switch != \"off\") {\n                (#Refrigerator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 5:00 AM if it is a weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"on\") {\n                (#Refrigerator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 12:00 PM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n            if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n                (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 9:00 PM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n            if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n                (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 1:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator and set it to RapidCool mode at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 6:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 8:00 PM if it is a weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"off\") {\n                (#Refrigerator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 7:00 AM if it is a weekend.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"on\") {\n                (#Refrigerator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator and set it to RapidFreeze mode at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 7:00 AM and turn on the light if the light sensor detects darkness.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#LightSensor).light < 100) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 6:00 PM and turn on the air conditioner if the temperature is above 25°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#AirQualityDetector).temperature > 25) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 10:00 PM and close the curtains if the motion sensor is inactive.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#MotionSensor).motion == \"inactive\") {\n            if ((#Curtain).curtain != \"closed\") {\n                (#Curtain).setCurtainLevel(0)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 12:00 PM and turn on the fan if the humidity is above 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 5:00 AM and announce the current time on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current time is 5:00 AM\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 11:00 PM and set the humidifier to low mode if the humidity is below 30%.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#HumiditySensor).humidity < 30) {\n            if ((#Humidifier).humidifierMode != \"low\") {\n                (#Humidifier).setHumidifierMode(\"low\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 8:00 AM and start the irrigation system for 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(30, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 7:00 PM and lock the door if it is not already locked.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#DoorLock).lock != \"locked\") {\n            (#DoorLock).lock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 9:00 AM and turn off the humidifier if the humidity is above 50%.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#HumiditySensor).humidity > 50) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 10:00 PM and turn on the air purifier if the air quality is poor.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#AirQualityDetector).airQuality == \"poor\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 6:00 PM and turn on the fan if the motion sensor is active.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#MotionSensor).motion == \"active\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 8:00 AM and announce the current temperature on the speaker if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current temperature is \" + (#AirQualityDetector).temperature + \" degrees Celsius.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 7:00 PM and set the curtains to 50% if the light level is above 500.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#LightSensor).light > 500) {\n            if ((#Curtain).curtainLevel != 50) {\n                (#Curtain).setCurtainLevel(50)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 6:00 AM and set the humidifier to high mode if the humidity is below 40%.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 8:00 PM and turn off the light if the motion sensor is inactive.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#MotionSensor).motion == \"inactive\") {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 9:00 AM and set the fan to low speed if the light level is below 200.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#LightSensor).light < 200) {\n            if ((#Fan).fanSpeed != 1) {\n                (#Fan).setFanSpeed(1)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 10:00 PM and announce the current humidity on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current humidity is \" + (#HumiditySensor).humidity + \"%.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 7:00 AM and turn on the air conditioner if the temperature is above 28°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#AirQualityDetector).temperature > 28) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 6:00 AM and turn on the light if the light level is below 300.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#LightSensor).light < 300) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 5:00 PM and turn off the fan if the motion sensor is inactive.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#MotionSensor).motion == \"inactive\") {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 8:00 PM and announce the current gas meter reading on the speaker.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current gas meter reading is \" + (#GasMeter).gasMeter + \" units.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 9:00 AM and turn on the air purifier if the air quality is poor.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#AirQualityDetector).airQuality == \"poor\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 6:00 AM and turn on the humidifier if the humidity is below 40%.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 11:00 PM and turn on the fan if the temperature is above 30°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#AirQualityDetector).temperature > 30) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 5:00 PM and set the air conditioner to cooling mode if the temperature is above 32°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#AirQualityDetector).temperature > 32) {\n            if ((#AirConditioner).airConditionerMode != \"cooling\") {\n                (#AirConditioner).setAirConditionerMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidFreeze mode at 7:00 AM and turn on the fan if the light level is above 600.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#LightSensor).light > 600) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 6:00 AM and set the humidifier to medium mode if the humidity is below 35%.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#HumiditySensor).humidity < 35) {\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 10:00 PM and set the curtains to 100% if the light level is above 700.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#LightSensor).light > 700) {\n            if ((#Curtain).curtainLevel != 100) {\n                (#Curtain).setCurtainLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the refrigerator to RapidCool mode at 9:00 AM and turn on the air purifier if the air quality is bad.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#AirQualityDetector).airQuality == \"bad\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to stop mode at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 11:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to map mode at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to repeat mode at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to stop mode at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 7:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 5:00 PM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 10:00 AM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to stop mode at 3:00 PM if today is Sunday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"sunday\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 8:00 AM and to stop mode at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 9:00 AM and to repeat mode at 7:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n    }\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 6:00 AM and to auto mode at 12:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n    }\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to map mode at 7:00 AM and to stop mode at 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 9:00 AM and to part mode at 4:00 PM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n        if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to repeat mode at 8:00 AM and to manual mode at 5:00 PM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n            }\n        }\n        if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 9:00 AM and to part mode at 6:00 PM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n        if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to stop mode at 7:00 PM and to manual mode at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to repeat mode at 10:00 AM and to map mode at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n    }\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 7:00 AM and turn on the air conditioner if the temperature is above 25°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#AirQualityDetector).temperature > 25) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 10:00 AM and turn off the lights if it is sunny.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"sunny\") {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 3:00 PM and lock the door if the gas valve is open.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#GasValve).valve == \"open\") {\n            if ((#DoorLock).lock == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to map mode at 6:00 PM and turn on the lights if motion is detected.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#MotionSensor).motion == \"active\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to repeat mode at 2:00 PM and turn on the humidifier if the humidity is below 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to stop mode at 9:00 AM and turn on the lights if it is cloudy.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"cloudy\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 4:00 PM and turn off the fan if the temperature is below 20°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 11:00 AM and turn off the humidifier if the humidity is above 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#HumiditySensor).humidity > 60.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 8:00 AM and turn on the lights if it is raining.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"rain\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to repeat mode at 6:00 PM and turn off the air purifier if the air quality is good.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#AirQualityDetector).dustLevel < 30) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to stop mode at 9:00 PM and lock the door if motion is detected.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n        if ((#MotionSensor).motion == \"active\") {\n            if ((#DoorLock).lock == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 5:00 AM and turn on the lights if the light level is below 300 lux.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#LightSensor).light < 300){\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to map mode at 3:00 PM and turn off the air conditioner if the temperature is below 22°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#AirQualityDetector).temperature < 22) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 8:00 PM and turn on the fan if the humidity is above 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 6:00 AM and turn off the lights if the light level is above 500 lux.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#LightSensor).light > 500) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 7:00 PM and turn on the air purifier if the air quality is bad.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).dustLevel > 70) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 5:00 PM and turn off the dehumidifier if the humidity is below 40%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Dehumidifier).switch != \"off\") {\n                (#Dehumidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to map mode at 9:00 AM and turn on the lights if it is foggy.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"fog\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 2:00 PM and turn on the air conditioner if the CO2 level is above 800 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#AirQualityDetector).carbonDioxide > 800) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 11:00 AM and turn on the dehumidifier if the humidity is above 70%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#HumiditySensor).humidity > 70) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to repeat mode at 8:00 AM and turn off the humidifier if the humidity is above 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to stop mode at 6:00 PM and turn on the lights if it is snowing.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"snow\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 7:00 AM and turn off the fan if the temperature is below 18°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).temperature < 18) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to map mode at 2:00 PM and turn on the humidifier if the humidity is below 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#HumiditySensor).humidity < 30) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to part mode at 5:00 PM and turn off the air purifier if the air quality is good.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#AirQualityDetector).dustLevel < 30) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to auto mode at 6:00 AM and turn on the lights if the light level is below 300 lux.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#LightSensor).light < 300) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to manual mode at 7:00 PM and turn off the air purifier if the air quality is good.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).dustLevel < 30) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to repeat mode at 4:00 PM and turn on the dehumidifier if the humidity is above 70%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#HumiditySensor).humidity > 70) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner to map mode at 9:00 AM and turn on the lights if it is foggy.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"fog\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n            (#Siren).setSirenMode(\"siren\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#GasValve).valve == \"open\") {\n            (#GasValve).valve = \"closed\"\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights and set them to red if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Smoke detected' on the speaker if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Smoke detected\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Unlock the door if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#DoorLock).lock == \"locked\") {\n            (#DoorLock).unlock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if smoke is detected and humidity is below 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity < 30.0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the windows if smoke is detected.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Window).window == \"closed\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan if smoke is detected and temperature is above 25°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to high mode if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"high\") {\n            (#Humidifier).setHumidifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email if smoke is detected.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#EmailProvider).sendEmail(\"Smoke Alert\", \"Smoke has been detected in the house.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start the irrigation system if smoke is detected and the humidity is below 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity < 20.0) {\n        if ((#Irrigation).switch != \"on\") {\n            (#Irrigation).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the blinds if smoke is detected and it is after 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#Clock).hour >= 18) {\n        if ((#Blind).blind != \"closed\") {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to high mode if smoke is detected and the air quality is poor.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#AirQualityDetector).airQuality == \"poor\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).mode != \"high\") {\n            (#AirPurifier).setAirPurifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the charger if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Charger).switch != \"off\") {\n            (#Charger).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier if smoke is detected and the humidity is above 70%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity > 70.0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot cleaner if smoke is detected and set it to map mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Emergency! Smoke detected' on the speaker if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Emergency! Smoke detected\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send a notification to the email provider if smoke is detected.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#EmailProvider).sendEmail(\"Smoke Alert\", \"Smoke has been detected in the house.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to strobe mode if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier and set it to auto mode if smoke is detected and humidity is below 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity < 50.0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"auto\") {\n            (#Humidifier).setHumidifierMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains if smoke is detected and it is daytime.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#Clock).hour >= 6 and (#Clock).hour < 18) {\n        if ((#Curtain).curtain == \"closed\") {\n            (#Curtain).setCurtainLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the sound sensor if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#SoundSensor).switch != \"on\") {\n            (#SoundSensor).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if smoke is detected and the temperature is below 20°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#AirQualityDetector).temperature < 20.0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light and set it to yellow if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"60|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the robot cleaner if smoke is detected and set it to stop mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television if sound is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light if sound is detected and set it to blue.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"240|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if the sound pressure level exceeds 80 dB.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 80.0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if sound is detected and it's 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if sound is detected and set it to medium mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"medium\") {\n            (#Humidifier).setHumidifierMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the charger if the sound pressure level exceeds 90 dB.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 90.0) {\n        if ((#Charger).switch != \"off\") {\n            (#Charger).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a photo if sound is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot cleaner if sound is detected and set it to auto mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if the sound pressure level is below 30 dB.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel < 30.0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher if sound is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if the sound pressure level exceeds 70 dB and it is past 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 70.0 and (#Clock).hour >= 22) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Sound detected' on the speaker if sound is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Sound detected\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light if sound is not detected for 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(30 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if sound is detected and set it to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier if sound is not detected for 10 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to high mode if sound is detected and it's 3:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"high\") {\n            (#Dehumidifier).setDehumidifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light if sound is detected and it's 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the television if sound is detected and set it to HDMI 1.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setSource(\"HDMI 1\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera if sound is not detected for 15 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(15 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher if sound is detected and set it to auto mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the robot cleaner if the sound pressure level exceeds 85 dB.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 85.0) {\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce 'Noise detected' on the speaker if the sound pressure level exceeds 100 dB.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 100.0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Noise detected\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier if the sound pressure level is below 20 dB.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel < 20.0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light if sound is detected and set it to red.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the television if the sound pressure level exceeds 75 dB.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 75.0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if sound is detected and it's 5:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if sound is detected and set it to auto mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"auto\") {\n            (#Humidifier).setHumidifierMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if sound is detected and it's 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light if sound is detected and it's 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set TV to channel 5 at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).setTvChannel(5)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV at 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Unmute the TV at 6:30 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"muted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set it to channel 10 at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(10)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change TV to channel 7 at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).setTvChannel(7)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV at 1:00 AM if it is still on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV at 3:00 PM and change to channel 9.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(9)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV at 5:00 PM if it is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Unmute the TV at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"muted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV at 8:30 PM and set it to channel 11.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 30) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(11)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV at 2:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 30) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change TV channel up at 6:45 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 45) {\n        if ((#Television).switch != \"off\") {\n            (#Television).channelUp()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Change TV channel down at 9:15 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 15) {\n        if ((#Television).switch != \"off\") {\n            (#Television).channelDown()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV at 10:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Unmute the TV at 5:30 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 30) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"muted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV at 8:00 AM and set it to channel 12.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(12)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV at 7:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 30) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and turn on the light at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set the temperature to 22°C at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#AirConditioner).temperature != 22) {\n            (#AirConditioner).setTemperature(22)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV if motion is detected in the living room.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set it to channel 5 at 6:30 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30 and (#Clock).isHoliday==true) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(5)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV if the air quality is poor.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).airQuality == \"poor\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set the air conditioner to heat mode at 5:00 PM if the temperature is below 18°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 18) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and lock the door at 11:00 PM.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#DoorLock).lock == \"unlocked\") {\n            (#DoorLock).lock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and play music at 7:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"music.mp3\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV and turn off the lights at 11:00 PM if no one is present.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n                (#Television).mute()\n            }\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set it to channel 8 at 6:00 PM if the humidity is above 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            (#Television).setTvChannel(8)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and activate the alarm if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Alarm).switch != \"on\") {\n            (#Alarm).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and start the robot cleaner at 10:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#RobotCleaner).mode != \"auto\") {\n            (#RobotCleaner).setMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV if the gas level is high.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasMeter).gasLevel > 100) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV and turn on the siren if motion is detected at the entrance.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and feed the pet at 9:00 AM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and turn on the dehumidifier at 7:00 PM if the humidity is above 65%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 65) {\n            if ((#Television).switch != \"off\") {\n                (#Television).off()\n            }\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set it to channel 7 if motion is detected in the living room.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(7)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and start watering the plants 100ml at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(100, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV and turn on the light if sound is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set it to channel 3 if the gas valve is open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasValve).valve == \"open\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and activate the siren if the refrigerator mode is RapidFreeze.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Refrigerator).refrigeratorMode == \"RapidFreeze\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and start the dishwasher at 8:00 PM if the humidity is below 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            (#Dishwasher).setDishwasherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV if the blinds are open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"open\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV and turn on the air purifier if the air quality is poor.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).airQuality == \"poor\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set it to channel 10 at 7:00 PM if the temperature is below 20°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 20) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            (#Television).setTvChannel(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and activate the siren if the gas valve is open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasValve).valve == \"open\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set it to channel 12 if the refrigerator mode is RapidCool.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Refrigerator).refrigeratorMode == \"RapidCool\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(12)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV and set the humidifier to auto mode at 9:00 PM if the humidity is above 50%.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 50) {\n            if ((#Television).switch != \"off\") {\n                (#Television).off()\n            }\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Mute the TV and set the fan speed to 3 if sound is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#Fan).fanSpeed != 3) {\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if the temperature exceeds 30°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 30) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set the air conditioner to heat mode at 5:00 PM if the temperature is below 18°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 18) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to high if the temperature exceeds 28°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 28) {\n        if ((#Fan).fanSpeed != 3) {\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if the temperature is below 18°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 18) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if the temperature exceeds 35°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 35) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to high mode if the temperature is below 15°C.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 15) {\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light if the temperature exceeds 40°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 40) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the irrigation system if the temperature is above 30°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 30) {\n        if ((#Irrigation).switch != \"on\") {\n            (#Irrigation).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera if the temperature exceeds 45°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 45) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the gas valve if the temperature exceeds 50°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 50) {\n        if ((#GasValve).valve == \"open\") {\n            (#GasValve).valve = \"closed\"\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the humidifier to auto mode if the temperature is below 20°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 20) {\n        if ((#Humidifier).humidifierMode != \"auto\") {\n            (#Humidifier).setHumidifierMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the television if the temperature is below 25°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 25) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot cleaner if the temperature is below 22°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 22) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 50% if the temperature exceeds 35°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 35) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan if the temperature exceeds 27°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 27) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier if the temperature exceeds 25°C.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 25) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the weather is 'snow' and the temperature is below 0°C at 6:12 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 12) {\n        if ((#WeatherProvider).weather == 'snow' and (#WeatherProvider).temperature < 0) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if the weather is 'clear' and the temperature is above 25°C at 2:43 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 43) {\n        if ((#WeatherProvider).weather == 'clear' and (#WeatherProvider).temperature > 25) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights if the weather is 'fog' at 7:15 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 15) {\n        if ((#WeatherProvider).weather == 'fog') {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce the weather if it is 'thunderstorm' on the speaker at 8:30 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 30) {\n        if ((#WeatherProvider).weather == 'thunderstorm') {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Current weather is thunderstorm\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to heat mode if the weather is 'drizzle' and the temperature is below 10°C at 9:22 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 22) {\n        if ((#WeatherProvider).weather == 'drizzle' and (#WeatherProvider).temperature < 10) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if the humidity is below 30% at 6:08 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 8) {\n        if ((#WeatherProvider).humidity < 30) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to high if the weather is 'dust' at 8:19 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 19) {\n        if ((#WeatherProvider).weather == 'dust') {\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if the temperature is below 15°C at 10:07 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 7) {\n        if ((#WeatherProvider).temperature < 15) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the temperature is below 5°C at 6:13 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 13) {\n        if ((#WeatherProvider).temperature < 5) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier if the humidity is above 70% at 3:44 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 44) {\n        if ((#WeatherProvider).humidity > 70) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if the weather is 'clear' and the temperature is above 30°C at 12:15 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 15) {\n        if ((#WeatherProvider).weather == 'clear' and (#WeatherProvider).temperature > 30) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set the air conditioner to heat mode if the weather is 'rain' and the temperature is below 18°C at 5:33 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 33) {\n        if ((#WeatherProvider).weather == 'rain' and (#WeatherProvider).temperature < 18) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights if the weather is 'mist' at 6:22 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 22) {\n        if ((#WeatherProvider).weather == 'mist') {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if the temperature is above 20°C at 4:55 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 55) {\n        if ((#WeatherProvider).temperature > 20) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the temperature is below 15°C at 7:07 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 7) {\n        if ((#WeatherProvider).temperature < 15) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan if the temperature is above 25°C at 1:19 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 19) {\n        if ((#WeatherProvider).temperature > 25) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the weather is 'clouds' and the temperature is below 10°C at 11:12 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 12) {\n        if ((#WeatherProvider).weather == 'clouds' and (#WeatherProvider).temperature < 10) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if the humidity is below 25% at 9:55 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 55) {\n        if ((#WeatherProvider).humidity < 25) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights if the weather is 'clear' at 8:33 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 33) {\n        if ((#WeatherProvider).weather == 'clear') {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the weather is 'mist' and the temperature is below 12°C at 4:44 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 44) {\n        if ((#WeatherProvider).weather == 'mist' and (#WeatherProvider).temperature < 12) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if the weather is 'haze' at 10:12 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 12) {\n        if ((#WeatherProvider).weather == 'haze') {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if the temperature is below 10°C at 5:37 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 37) {\n        if ((#WeatherProvider).temperature < 10) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set the air conditioner to heat mode if the weather is 'snow' and the temperature is below 5°C at 6:15 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 15) {\n        if ((#WeatherProvider).weather == 'snow' and (#WeatherProvider).temperature < 5) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if the weather is 'clouds' and the temperature is above 20°C at 3:21 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 21) {\n        if ((#WeatherProvider).weather == 'clouds' and (#WeatherProvider).temperature > 20) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the temperature is below 8°C at 6:08 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 8) {\n        if ((#WeatherProvider).temperature < 8) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier if the humidity is below 20% at 9:24 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 24) {\n        if ((#WeatherProvider).humidity < 20) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights if the weather is 'clear' at 5:17 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 17) {\n        if ((#WeatherProvider).weather == 'clear') {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the weather is 'mist' and the temperature is below 12°C at 2:35 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 35) {\n        if ((#WeatherProvider).weather == 'mist' and (#WeatherProvider).temperature < 12) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if the weather is 'haze' at 10:18 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 18) {\n        if ((#WeatherProvider).weather == 'haze') {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan if the temperature is below 10°C at 8:09 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 9) {\n        if ((#WeatherProvider).temperature < 10) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the TV and set the air conditioner to heat mode if the weather is 'snow' and the temperature is below 5°C at 6:20 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 20) {\n        if ((#WeatherProvider).weather == 'snow' and (#WeatherProvider).temperature < 5) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if the weather is 'clouds' and the temperature is above 20°C at 3:32 PM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 32) {\n        if ((#WeatherProvider).weather == 'clouds' and (#WeatherProvider).temperature > 20) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner in heat mode if the temperature is below 8°C at 6:08 AM.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 8) {\n        if ((#WeatherProvider).temperature < 8) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the windows from 9 AM to 5 PM on weekdays and close them at other times.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\" ) {\n    if((#Clock).hour >= 9 and (#Clock).hour < 17 and (#Window).status == \"closed\"){\n        (#Window).open()\n    }\n    if((#Clock).hour < 9 or (#Clock).hour >= 17 and (#Window).status == \"opened\"){\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner, lights, television, and fan at 9 AM on weekends if no one is present.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\" and (#Clock).hour == 9 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\" ){\n    if((#AirConditioner).status == \"on\"){\n        (#AirConditioner).off()\n    }\n    if((#Light).switch == \"on\"){\n        (#Light).off()\n    }\n    if((#Television).switch == \"on\"){\n        (#Television).off()\n    }\n    if((#Fan).status == \"on\"){\n        (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed the dog 15 grams of food at 8 AM, 12 PM, 4 PM, and 8 PM every day.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0 or (#Clock).hour == 12 and (#Clock).minute == 0 or (#Clock).hour == 16 and (#Clock).minute == 0 or (#Clock).hour == 20 and (#Clock).minute == 0){\n    if((#Feeder).switch == \"on\" and (#Feeder).feederState ==\"Idle\"){\n        (#Feeder).setFeedPortion(15, \"grams\")\n        (#Feeder).startFeeding()\n        (#Feeder).off()\n    }\n    if((#Feeder).feederState == \"off\"){\n        (#Feeder).on()\n        (#Feeder).setFeedPortion(15, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Feeder).feederState == \"Error\"){\n        (#Feeder).off()\n        wait until (1 MIN)\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to drying mode if the humidity is above 60%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC, (#HumiditySensor).humidity >= 60.0)\n{\n\tif((#Dehumidifier).switch == \"off\")\n\t{\n\t\t(#Dehumidifier).on()\n\t\t(#Dehumidifier).setDehumidifierMode(\"drying\")\n\t}\n\tif((#Dehumidifier).switch == \"on\" and not (#Dehumidifier).dehumidifierMode == \"drying\")\n\t{\n\t\t(#Dehumidifier).setDehumidifierMode(\"drying\")\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: On mondays and Tuesdays, turn off the lights if the brightness is above 1000, and turn on the lights if the brightness is below 100.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\")\n{\n    if((#LightSensor).light >= 1000)\n    {\n        if((#Light).switch != \"off\"){\n            (#Light).off()\n        }\n    }\n    if((#LightSensor).light <= 100)\n    {\n        if((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the CO2 concentration is above 600 or the fine dust concentration is above 20 or the TVOC level is above 30, set the air purifier mode to high, otherwise set it to auto.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC) {\n    if ((#AirQualityDetector).carbonDioxide >= 600.0 or (#AirQualityDetector).veryFineDustLevel >= 20 or (#AirQualityDetector).tvocLevel >= 30) {\n        if((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        (#AirPurifier).setPurifierFanMode(\"high\")\n    } else {\n        (#AirPurifier).setPurifierFanMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is a thunderstorm or a tornado, close the windows, sound the siren, tell the speaker to warn, and turn off the robot cleaner, humidifier, dehumidifier, air conditioner, fan, and dishwasher.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#WeatherProvider).weather == \"thunderstorm\" or (#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"There is a thunderstorm or a tornado. Please be careful.\")\n        if ((#Window).window == \"open\") {\n            (#Window).close()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).off()\n        }\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n        if ((#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher, robot cleaner, and air purifier at 12 PM and set each to auto mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 12) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        (#Dishwasher).setDishwasherMode(\"auto\")\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if((#AirPurifier).airPurifierFanMode != \"auto\"){\n            (#AirPurifier).setPurifierFanMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the windows, turn on the lights and set the brightness to 75, and turn on the television at 6 PM.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 18) {\n        if ((#Window).window == \"open\") {\n            (#Window).close()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(75)\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains, turn on the humidifier, set the humidifier mode to auto, set the lights to 10, and say 'Good night' at 10 PM.\n\nServices: {'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 22) {\n        if ((#Curtain).switch != \"on\") {\n            (#Curtain).on()\n        }\n        (#Curtain).close()\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        (#Humidifier).setHumidifierMode(\"auto\")\n        if ((#Light).switch != \"off\") {\n            (#Light).setLevel(10)\n        }\n        (#Speaker).speak(\"오늘 하루도 수고하셨습니다. 잘 자요.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window, open the blinds, turn on the air conditioner at 9 AM on weekends, set it to cooling mode if the temperature is above 25 degrees, otherwise set it to auto mode.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR, (#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\"){\n    if ((#Clock).hour >= 9 and (#Clock).hour < 12) {\n        (#Speaker).speak(\"주말입니다! 오늘도 즐거운 하루 보내세요.\")\n        if ((#Blind).switch != \"on\") {\n            (#Blind).on()\n        }\n        (#Blind).openPercent(100)\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if((#TemperatureSensor).temperature >= 25.0){\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n        if((#AirConditioner).airConditionerMode != \"auto\"){\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send the schedule for the day to user@example.com every day at 8 AM.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0){\n        schedule = \"오늘의 일정은 다음과 같습니다: \\n- 오전 10시: 팀 회의\\n- 오후 1시: 점심 식사\\n- 오후 3시: 프로젝트 리뷰\\n- 오후 5시: 운동\"\n        (#EmailProvider).sendMail(\"user@example.com\", \"오늘의 일정\", schedule)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the gas valve if it is open from 9 AM to 5 PM, close the gas valve if a gas leak is detected, trigger the alarm if motion, presence, or sound is detected, and if smoke is detected, open the window and turn on the air purifier.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour >= 9 and (#Clock).hour < 17){\n    if((#GasValve).valve == \"open\" or (#LeakSensor).leakage == \"leak\"){\n        (#GasValve).close()\n        (#EmailProvider).send(\"user@example.com\", (#Clock).timestamp + \" 가스 밸브가 닫았습니다.\", \"가스 밸브가 열려있거나 누출이 감지되었습니다\")\n    }\n    if((#MotionSensor).motion == \"detected\" or (#PresenceSensor).presence == \"detected\" or (#SoundSensor).sound == \"detected\"){\n        (#Siren).on()\n        (#EmailProvider).send(\"user@example.com\", (#Clock).timestamp + \" 움직임이 감지되었습니다.\", \"움직임이 감지되어 경보음을 울렸습니다.\")\n    }\n    if((#SmokeDetector).smoke == \"detected\"){\n        if((#AirPurifier).switch == \"off\"){\n            (#AirPurifier).on()\n        }\n        if((#Window).window == \"close\"){\n            (#Window).open()\n        }\n        (#EmailProvider).send(\"user@example.com\", (#Clock).timestamp + \" 연기가 감지되었습니다.\", \"연기가 감지되어 창문을 열고 공기청정기를 켰습니다.\")\n    }        \n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the robot cleaner mode to auto, part, repeat, manual, and map mode at 1 PM every monday, Wednesday, and Friday, and let it run for 30 minutes each.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"friday\") {\n    if ((#Clock).hour == 13 and (#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n    }\n    if ((#Clock).hour == 14 and (#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n    }\n    if ((#Clock).hour == 15 and (#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n    }\n    if ((#Clock).hour == 16 and (#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n    }\n    if ((#Clock).hour == 17 and (#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidity is above 60%, turn on the dehumidifier and set it to drying mode. If the current flowing through the smart plug is above 5A, turn off the smart plug.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC)\n{\n    if((#HumiditySensor).humidity >= 60.0)\n    {\n        if((#Dehumidifier).switch == \"off\")\n        {\n            (#Dehumidifier).on()\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n        if((#Dehumidifier).switch == \"on\" and not (#Dehumidifier).dehumidifierMode == \"drying\")\n        {\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n    }\n    if((#HumiditySensor).humidity < 60.0)\n    {\n        if((#Dehumidifier).switch == \"on\")\n        {\n            (#Dehumidifier).off()\n        }\n    }\n    if((#SmartPlug).current > 5.0)\n    {\n        if((#SmartPlug).switch == \"on\")\n        {\n            (#SmartPlug).off()\n        }\n    }\n    else\n    {\n        if((#SmartPlug).switch == \"off\")\n        {\n            (#SmartPlug).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 6 hours, dispense 200 grams of food with the feeder and take a picture.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(6 HOUR) {\n    if ((#Feeder).feederState == \"Error\"){\n        (#Feeder).off()\n        (#Feeder).on()\n    }\n    if ((#Feeder).feederState == \"Idle\") {\n        (#Feeder).setFeedPortion(200, \"grams\")\n        (#Feeder).startFeeding()\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window and turn on the air conditioner if the temperature is above 25 degrees.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC, (#TemperatureSensor).temperature >= 25) {\n    if((#Window).window == \"open\"){\n        (#Window).close()\n    }\n    if((#AirConditioner).switch == \"off\"){\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window and turn on the air conditioner if the temperature is above 25 degrees.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#TemperatureSensor).temperature >= 25) {\n    if((#Window).window != \"closed\"){\n        (#Window).close()\n    }\n    if((#AirConditioner).switch == \"off\"){\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the brightness is above 1000, turn off the light, and if it is below 100, turn it on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC)\n{\n    if((#LightSensor).light >= 1000 and (#Light).switch == \"on\")\n    {\n        (#Light).off()\n    }\n    if((#LightSensor).light <= 100 and (#Light).switch == \"off\")\n    {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Operate the dishwasher, robot cleaner, and air purifier every day at 1 PM and 7 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR, (#Clock).hour == 13 or (#Clock).hour == 19) \n{\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if((#Dishwasher).dishwasherMode != \"auto\"){\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n    if((#RobotCleaner).robotCleanerCleaningMode != \"auto\"){\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n    }\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if((#AirPurifier).airPurifierFanMode != \"auto\"){\n        (#AirPurifier).setPurifierFanMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the fine dust level is above 50, set the air purifier to high mode, if it is below 10, turn off the air purifier, and otherwise set it to windFree mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC) \n{\n    if((#AirQualityDetector).fineDustLevel >= 50) {\n      if((#AirPurifier).switch == \"off\"){\n\t\t\t\t(#AirPurifier).on()\n\t\t}\n        if((#AirPurifier).airPurifierFanMode != \"high\"){\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if((#AirQualityDetector).fineDustLevel < 10) {\n        if ((#AirPurifier).switch == \"on\") {\n            (#AirPurifier).off()\n        }\n        if((#AirPurifier).airPurifierFanMode != \"windFree\"){\n\t\t    (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidity is below 25%, operate the humidifier in high mode, and if it is above 65%, operate it in low mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC) {\n    if((#Humidifier).humidity < 25.0){\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n\t\t\t\t(#Humidifier).setHumidifierMode(\"high\")\n\t\t}\n\t\tif((#Humidifier).humidity > 65){\n\t\t\tif((#Humidifier).switch == \"off\"){\n\t\t\t\t(#Humidifier).on()\n\t\t\t}\n\t\t\t(#Humidifier).setHumidifierMode(\"low\")\n\t\t}\n\t\t(#Humidifier).setHumidifierMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights and set the air purifier to sleep mode after 10 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if((#Clock).hour >= 22 or (#Clock).hour < 6) {\n        (#Light).off()\n        if((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if((#AirPurifier).airPurifierFanMode != \"sleep\"){\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: When the fire alarm goes off, close the gas valve and open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC) {\n    if((#SmokeDetector).smoke == \"detected\") {\n        (#GasValve).close()\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every 2 hours, open the window for ventilation and close it 10 minutes later.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(2 HOUR) {\n    if ((#Window).window == \"closed\") {\n        (#Window).open()\n        wait until(10 MIN)\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the voltage of the smart plug is above 230V, turn off the smart plug and turn it back on when it goes below 220V. If the power consumption is above 1200W, turn off the smart plug and turn it back on when it goes below 1000W.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR)\n{\n    if((#SmartPlug).voltage > 230.0)\n    {\n        (#SmartPlug).off()\n        wait until(voltage < 220.0)\n        (#SmartPlug).on()\n    }\n    if((#SmartPlug).powerConsumption > 1200.0)\n    {\n        (#SmartPlug).off()\n        wait until(power_consumption < 1000.0)\n        (#SmartPlug).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the camera is off, turn on the camera and take a picture.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidity is above 50%, turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC){\n    if((#HumiditySensor).humidity >= 50.0){\n        if((#AirConditioner).switch == \"off\"){\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidity is below 30%, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC){\n    if((#HumiditySensor).humidity <= 30.0){\n        if((#AirConditioner).switch == \"on\"){\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the weather is sunny, open the window and raise the blinds.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"sunny\") {\n    if((#Window).window == \"closed\")\n    {\n        (#Window).open()\n    }\n    if((#Blind).switch == \"off\")\n    {\n        (#Blind).on()\n    }\n    (#Blind).setBlindLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If smoke is detected, open the window.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 SEC){\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if((#Window).window == \"closed\")\n        {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 300ml of water every morning at 7am and midnight.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(300,\"mililiters\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 1 liter of water every morning at 7am and midnight.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(1,\"liters\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 10 gallons of water every morning at 7am and midnight.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(10,\"gallons\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 28 ounces of water every morning at 7am and midnight.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(28,\"ounces\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every morning at 9 o'clock, turn on the air purifier if the dust concentration is above 50 or the fine dust concentration is above 30.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#AirQualityDetector).dustLevel >= 50 or (#AirQualityDetector).fineDustLevel >= 50){\n            if((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the temperature exceeds 30°C, turn on the fan and set it to maximum speed. Turn off the fan when the temperature drops below 25°C.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if ((#TemperatureSensor).temperature > 30.0) {\n        if((#Fan).switch != \"on\"){\n            (#Fan).on()\n        }\n        if((#Fan).fanSpeed != 100){\n            (#Fan).setFanSpeed(100)\n        }\n    } else if ((#TemperatureSensor).temperature < 25.0) {\n        if((#Fan).switch != \"off\"){\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 7 PM, close the window, turn on the lights, turn on the TV, set it to channel 2, turn the volume to 10, and turn on the humidifier.\n\nServices: {'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 19 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Window).window !=\"closed\"){\n            (#Window).close()\n        }\n        if((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n        if((#Television).switch != \"on\"){\n            (#Television).on()\n        }\n        if((#Television).tvChannel != 10){\n            (#Television).setTvChannel(10)\n        }\n        if((#Humidifier).switch != \"on\"){\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If indoor light levels fall below 50 between 7 and 9 a.m., open the blinds 80%, otherwise keep the blinds at 20%.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour >= 7 and (#Clock).hour < 9){\n        if((#LightSensor).light < 50){\n            if((#Blind).blindLevel != 80){\n                (#Blind).setBlindLevel(80)\n            }\n        }\n    }\n    else{\n        if((#Blind).setBlindLevel != 20){\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the luminance is less than 200, set the curtains to 75%, if it is between 200 and less than 500, set it to 50%, and if it is over 500, set it to 25%.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour >= 9 and (#Clock).hour <= 17 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#LightSensor).light < 200){\n            if((#Curtain).openPercent != 75){\n                (#Curtain).setOpenPercent(75)\n            }\n        }\n        else if((#LightSensor).light < 500){\n            if((#Curtain).openPercent != 50){\n                (#Curtain).setOpenPercent(50)\n            }\n        }\n        else{\n            if((#Curtain).openPercent != 25){\n                (#Curtain).setOpenPercent(25)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan if the temperature is above 26 degrees at 1pm every day.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#TemperatureSensor).temperature >=26){\n            if((#Fan).switch != \"on\"){\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed the puppy 50 grams every day at 7am, 1pm, and 7pm.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 7 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed the puppy 50 pounds every day at 7am, 1pm, and 7pm.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 7 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed the puppy 50 ounces every day at 7am, 1pm, and 7pm.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 7 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed your dog 50 grams at 8:00 AM, 100 grams at 2:00 PM, and 75 grams at 8:00 PM every day.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 8 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(75, \"grams\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed your dog 50 pounds at 8:00 AM, 100 pounds at 2:00 PM, and 75 pounds at 8:00 PM every day.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 8 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(75, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed your dog 50 ounces at 8:00 AM, 100 ounces at 2:00 PM, and 75 ounces at 8:00 PM every day.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 8 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(75, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window every day at 5pm if the weather is clear.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 17 and (#Clock).minute == 0){\n        if((#WeatherProvider).weather == \"clear\"){\n            if((#Window).window != \"open\"){\n                (#Window).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window every day at 4:25 PM if the weather is clear.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 16 and (#Clock).minute == 25) {\n        if((#WeatherProvider).weather == \"clear\"){\n            if((#Window).window != \"open\"){\n                (#Window).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window every day at 5:30 am if it rains or snows.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 5 and (#Clock).minute == 30) {\n        if((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"snow\"){\n            if((#Window).window != \"closed\"){\n                (#Window).close()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If smoke is detected once every 3 hours, speak through the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(3 HOUR){\n    if((#SmokeDetector).smoke == \"detected\"){\n        (#Speaker).speak(\"연기가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak through the speaker if smoke is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#SmokeDetector).smoke == \"detected\"){\n        (#Speaker).speak(\"연기가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday at 5 a.m., if there are people around, turn on the air conditioner in cooling mode.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 5 and (#Clock).minute == 0){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#AirConditioner).switch != \"on\"){\n                    (#AirConditioner).on()\n                }\n                if((#AirConditioner).airConditionerMode != \"cool\"){\n                    (#AirConditioner).setAirConditionerMode(\"cool\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If movement is detected at 7 a.m. on weekends, speak through the speaker.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0){\n            if((#MotionSensor).motion == \"active\"){\n                (#Speaker).speak(\"움직임이 감지되었습니다.\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every day at 2pm if the humidity is below 25%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 25){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every day at 11 PM if the humidity is below 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 23 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 30){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every day at 2 a.m. if the humidity is below 25%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 2 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 25){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every day at 1pm if the humidity is below 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 40){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light is below 1000 at 7 a.m. on weekdays, open the blinds.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0){\n            if((#LightSensor).light <= 1000){\n                if((#Blind).blindLevel != 100){\n                    (#Blind).open()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the light is below 1000 at 9 a.m. on weekdays, open the blinds.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 9 and (#Clock).minute == 0){\n            if((#LightSensor).light <= 1000){\n                if((#Blind).blindLevel != 100){\n                    (#Blind).open()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 12 PM, if the dust concentration is above 50, turn on the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 12 and (#Clock).minute == 0){\n        if((#AirQualityDetector).dustLevel >= 50){\n            if((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 6 PM, if the dust concentration is above 50, turn on the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 6 and (#Clock).minute == 0){\n        if((#AirQualityDetector).dustLevel >= 50){\n            if((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light at 10 a.m. every Sunday and turn it off at 12 p.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 10 and (#Clock).minute == 0){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n        if((#Clock).hour == 0 and (#Clock).minute == 0){\n            if((#Light).switch != \"off\"){\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Wednesday, turn on the light at 9 a.m. and turn it off at 1 p.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"wednesday\"){\n        if((#Clock).hour == 9 and (#Clock).minute == 0){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n        if((#Clock).hour == 13 and (#Clock).minute == 0){\n            if((#Light).switch != \"off\"){\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday at 8 PM, when a sound is detected, turn the humidifier on to medium.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 20 and (#Clock).minute == 0){\n            if((#SoundSensor).sound == \"detected\"){\n                if((#Humidifier).switch != \"on\"){\n                    (#Humidifier).on()\n                }\n                if((#Humidifier).humidifierMode != \"medium\"){\n                    (#Humidifier).setHumidifierMode(\"medium\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday at 2pm, turn on the humidifier on low when a sound is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 14 and (#Clock).minute == 0){\n            if((#SoundSensor).sound == \"detected\"){\n                if((#Humidifier).switch != \"on\"){\n                    (#Humidifier).on()\n                }\n                if((#Humidifier).humidifierMode != \"low\"){\n                    (#Humidifier).setHumidifierMode(\"low\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Friday at 8 a.m., when a sound is detected, turn on the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 8 and (#Clock).minute == 0){\n            if((#SoundSensor).sound == \"detected\"){\n                if((#Humidifier).switch != \"on\"){\n                    (#Humidifier).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains every Sunday at 7 am.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0){\n            if((#Curtain).curtain != \"open\"){\n                (#Curtain).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light every Sunday at 7:20 am.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 20){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Thursday or Friday at 4:30 PM, if anyone is there, turn on TV channel 10.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 16 and (#Clock).minute == 30){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#Television).tvChannel != 10){\n                    (#Television).setTvChannel(10)\n                }\n                if((#Television).switch != \"on\"){\n                    (#Television).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Tuesday and Monday at 1:30pm, turn on television channel 12 when there is someone there.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 13 and (#Clock).minute == 30){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#Television).tvChannel != 12){\n                    (#Television).setTvChannel(12)\n                }\n                if((#Television).switch != \"on\"){\n                    (#Television).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 1l of water every day at 1pm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(1,\"liters\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 45ml of water every day at 1pm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(45,\"mililiters\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 15 gallons of water every day at 1pm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(15,\"gallons\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Water the plant with 120 ounces of water every day at 1pm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(45,\"ounces\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Sound the siren when movement is detected from 3 a.m. to 6 a.m. every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour >= 3 and (#Clock).hour < 6){\n        if((#MotionSensor).motion == \"active\"){\n            if((#Siren).sirenMode !=\"siren\"){\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and strobe lights when movement is detected from 2 a.m. to 6 a.m. every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour >= 2 and (#Clock).hour < 6){\n        if((#MotionSensor).motion == \"active\"){\n            if((#Siren).sirenMode !=\"strobe\"){\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day from 2 a.m. to 6 a.m., turn on the siren and flashing lights when movement is detected.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour >= 2 and (#Clock).hour < 6){\n        if((#MotionSensor).motion == \"active\"){\n            if((#Siren).sirenMode !=\"strobe\"){\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday at 6 a.m., if there is someone there, turn the air conditioner on to heating mode.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 6 and (#Clock).minute == 0){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#AirConditioner).airConditionerMode != \"heat\"){\n                    (#AirConditioner).setAirConditionerMode(\"heat\")\n                }\n                if((#AirConditioner).switch != \"on\"){\n                    (#AirConditioner).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains fully at 6 o'clock every morning.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Announce the current weather through the speaker every hour.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"thunderstorm\") {\n        (#Speaker).speak(\"현재 날씨는 천둥입니다.)\n    } else if ((#WeatherProvider).weather == \"drizzle\") {\n        (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n    } else if ((#WeatherProvider).weather == \"rain\") {\n        (#Speaker).speak(\"현재 날씨는 비입니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n    } else if ((#WeatherProvider).weather == \"mist\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\") {\n        (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n    } else if ((#WeatherProvider).weather == \"haze\") {\n        (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"dust\") {\n        (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n    } else if ((#WeatherProvider).weather == \"fog\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"sand\") {\n        (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n    } else if ((#WeatherProvider).weather == \"ash\") {\n        (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n    } else if ((#WeatherProvider).weather == \"squall\") {\n        (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\") {\n        (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Check for leaks every 10 minutes, and if any leaks occur, notify us by email to test@dummy.org.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        (#EmailProvider).sendMail(\"test@dummy.org\", \"누수 감지\", \"누수가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Measure the carbon dioxide concentration in your home once every two days, and if it exceeds 1,000, open the windows in the house to ventilate, and then close them after 30 minutes.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (48 HOUR) {\n    if ((#AirQualityDetector).carbonDioxide > 1000) {\n        if ((#Window).window == \"closed\") {\n            (#Window).open()\n        }\n    }\n    wait until (30 MIN)\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Once a week, the speaker announces the current indoor temperature.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (168 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 기온은\" + (#TemperatureSensor).temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday at 3pm, the speaker announces the current outside temperature.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 기온은\" + (#WeatherProvider).temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump for 8 hours from morning to evening every day, set the pump to maximum mode in summer, and set the pump mode to minimum mode in winter.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on() \n        }\n    }\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n        `(#Pump).off()\n        }\n    }\n    if ((#Clock).month == 6 or (#Clock).month == 7 or (#Clock).month == 8) {\n        if ((#Pump).operationMode != \"maximum\"){\n            (#Pump).setOperationMode(\"maximum\")\n        }\n    }\n    if ((#Clock).month == 12 or (#Clock).month == 1 or (#Clock).month == 2) {\n        if ((#Pump).operationMode != \"minimum\"){\n            (#Pump).setOperationMode(\"minimum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the lights to yellow in spring, green in summer, pink in fall, and white in winter, and turn them on every night at 10 p.m., and turn them off at midnight.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (24 HOUR) {\n    if ((#Clock).month == 3 or (#Clock).month == 4 or (#Clock).month == 5) {\n        (#Light).setColor(\"60|100|100\")\n    }\n    else if ((#Clock).month == 6 or (#Clock).month == 7 or (#Clock).month == 8) {\n        (#Light).setColor(\"120|100|100\")\n    }\n    else if ((#Clock).month == 9 or (#Clock).month == 10 or (#Clock).month == 11) {\n        (#Light).setColor(\"300|100|100\")\n    }\n    else if ((#Clock).month == 12 or (#Clock).month == 1 or (#Clock).month == 2) {\n        (#Light).setColor(\"0|0|100\")\n    }\n    wait until ((#Clock).hour == 22)\n    if ((#Light).switch != \"on\"){\n        (#Light).on()\n    }\n    wait until ((#Clock).hour == 0)\n    if ((#Light).switch != \"off\"){\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo every 3 hours and send it to me by email.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(3 HOUR) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    x = (#Camera).take()\n    (#EmailProvider).sendMailWithFile(\"my@email.com\", \"사진\", \"가장 최근에 찍은 사진 파일입니다.\", x)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: On weekdays, fully open the shade at 7 a.m. and close it fully at 8 p.m. And on weekends, fully open the shade at 11 a.m. and close it fully at 10 p.m.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 100) {\n                (#Shade).open()\n            }\n        }\n        else if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 0) {\n                (#Shade).close()\n            }\n        }\n    }\n    else {\n        if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 100) {\n                (#Shade).open()\n            }\n        }\n        else if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 0) {\n                (#Shade).close()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: On weekdays, operate the pump in normal mode for 10 minutes every 8 a.m., and on weekends, operate the pump in minimum mode for 1 hour every 8 a.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Pump).switch != \"on\") {\n              (#Pump).on()\n        }\n        if ((#Pump).operationMode != \"normal\"){\n            (#Pump).setOperationMode(\"normal\")\n        }\n        wait until(10 MIN)\n        if ((#Pump).switch != \"off\") {\n              (#Pump).off()\n        }\n    }\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Pump).switch != \"on\") {\n              (#Pump).on()\n        }\n        if ((#Pump).operationMode != \"minimum\"){\n            (#Pump).setOperationMode(\"minimum\")\n        }\n        wait until(1 HOUR)\n        if ((#Pump).switch != \"off\") {\n              (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every morning at 7 a.m., set the color of the light to match the weather that day, turn it on, and then announce it through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"thunderstorm\" or (#WeatherProvider).weather == \"drizzle\") {\n        (#Light).setColor(\"173|216|230\")\n        (#Speaker).speak(\"비 오는 날에 어울리는 연한 파란색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Light).setColor(\"255|255|255\")\n        (#Speaker).speak(\"눈 오는 날에 어울리는 흰색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Light).setColor(\"255|223|0\")\n        (#Speaker).speak(\"맑은 날에 어울리는 노란색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\" or (#WeatherProvider).weather == \"fog\" or (#WeatherProvider).weather == \"mist\" or (#WeatherProvider).weather == \"haze\") {\n        (#Light).setColor(\"128|128|128\")\n        (#Speaker).speak(\"흐린 날에 어울리는 회색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\" or (#WeatherProvider).weather == \"squall\") {\n        (#Light).setColor(\"0|0|255\")\n        (#Speaker).speak(\"바람부는 날에 어울리는 푸른색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\" or (#WeatherProvider).weather == \"dust\" or (#WeatherProvider).weather == \"sand\" or (#WeatherProvider).weather == \"ash\") {\n        (#Light).setColor(\"192|192|192\")\n        (#Speaker).speak(\"연기나 먼지에 어울리는 은색 조명을 켜겠습니다.\")\n    } else {\n        (#Light).setColor(\"255|255|255\")\n        (#Speaker).speak(\"흰색 조명을 켜겠습니다.\")\n    }\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If I leave the house between 8 and 10 a.m., recommend clothing according to the temperature and let me know if I need to bring an umbrella or mask.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).hour <= 8 and (#Clock).hour > 10) and (#DoorLock).door == \"opening\") {\n    outfit_recommendation = \"\"\n    if ((#WeatherProvider).temperature < 0) {\n        outfit_recommendation = \"오늘은 매우 춥습니다. 두꺼운 코트와 목도리를 착용하세요. \"\n    } else if ((#WeatherProvider).temperature >= 0 and (#WeatherProvider).temperature < 10) {\n        outfit_recommendation = \"오늘은 추운 날씨입니다. 따뜻한 옷과 코트를 입으세요. \"\n    } else if ((#WeatherProvider).temperature >= 10 and (#WeatherProvider).temperature < 20) {\n        outfit_recommendation = \"오늘은 쌀쌀한 날씨입니다. 가벼운 자켓이나 스웨터를 입으세요. \"\n    } else if ((#WeatherProvider).temperature >= 20 and (#WeatherProvider).temperature < 30) {\n        outfit_recommendation = \"오늘은 따뜻한 날씨입니다. 가벼운 옷차림을 하세요. \"\n    } else {\n        outfit_recommendation = \"오늘은 매우 더운 날씨입니다. 시원한 옷차림을 하세요. \"\n    }\n    if ((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"thunderstorm\" or (#WeatherProvider).weather == \"drizzle\") {\n        outfit_recommendation = outfit_recommendation + \"비가 오니 우산을 챙기세요. \"\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        outfit_recommendation = outfit_recommendation + \"눈이 오니 우산을 챙기세요. \"\n    }\n    if ((#WeatherProvider).weather == \"smoke\" or (#WeatherProvider).weather == \"dust\" or (#WeatherProvider).weather == \"sand\" or (#WeatherProvider).weather == \"ash\" or (#AirQualityDetector).fineDustLevel >= 35.0 or (#AirQualityDetector).dustLevel > 80.0) {\n        outfit_recommendation = outfit_recommendation + \"먼지가 많으니 마스크를 챙기세요. \"\n    }\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(outfit_recommendation)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: When fire smoke or water leaks are detected, the siren sounds, and if no movement is detected in the house, send an email to security@home.com with a subject and content stating the situation.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\"){\n            (#Siren).setSirenMode(\"both\")\n        }\n        (#EmailProvider).sendMail(\"security@home.com\", \"화재 감지\", \"집에서 화재가 감지되었습니다.\")\n    }\n    if ((#LeakSensor).leakage ==  \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\"){\n            (#Siren).setSirenMode(\"both\")\n        }\n        (#EmailProvider).sendMail(\"security@home.com\", \"누수 감지\", \"집에서 누수가 감지되었습니다.\")\n    }\n    if ((#SmokeDetector).smoke == \"clear\" and (#LeakSensor).leakage == \"not_detected\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Create a scenario where you check and maintain comfortable air in the house every 30 minutes. Announce your activities through speakers.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#TemperatureSensor).temperature > 28) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n            (#AirConditioner).setTemperature(22)\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"실내 온도가 높습니다. 에어컨을 냉방 모드로 켭니다.\")\n    } else if ((#TemperatureSensor).temperature < 17) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"heat\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n            (#AirConditioner).setTemperature(25)\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"실내 온도가 낮습니다. 에어컨을 난방 모드로 켭니다.\")\n    } else {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n        (#Speaker).speak(\"실내 온도가 적정하여 에어컨을 끕니다.\")\n    }\n    if ((#HumiditySensor).humidity > 70) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n        (#Speaker).speak(\"습도가 높아 가습기를 끄고 에어컨을 자동 모드로 켭니다.\")\n    } else if ((#HumiditySensor).humidity < 30) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"습도가 낮아 가습기를 켜고 창문을 닫습니다.\")\n    } else {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n        (#Speaker).speak(\"습도가 적절합니다.\")\n    }\n    if ((#AirQualityDetector).dustLevel > 50 or (#AirQualityDetector).fineDustLevel > 35) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"공기 질이 나쁩니다. 창문을 닫고 공기 청정기를 가동합니다.\")\n    } else {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 1000) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#Window).window != \"on\") {\n            (#Window).open()\n        }\n        (#Speaker).speak(\"이산화탄소 농도가 높습니다. 환기를 시작합니다.\")\n    } else {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 3pm, turn the dishwasher on automatic mode and the robot vacuum cleaner on map mode for one hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 15 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"auto\") {\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n    }\n    wait until (1 HOUR)\n    if ((#RobotCleaner).switch != \"off\") {\n        (#RobotCleaner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Press the button to turn off all air conditioners, lights, fans, and dryers.\n\nServices: {'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Button).button == \"pressed\"){\n        if ((#AirConditioner).switch != \"off\"){\n            (#AirConditioner).off()\n        }\n        if ((#Light).switch != \"off\"){\n            (#Light).off()\n        }\n        if ((#Fan).switch != \"off\"){\n            (#Fan).off()\n        }\n        if ((#Dehumidifier).switch != \"off\"){\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If a water leak is detected, send an email to admin@admin.com and say through the speaker that the water leak has been detected.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#LeakSensor).leakage){\n    (#EmailProvider).sendMail(\"admin@admin.com\",\"누수 감지\",\"누수가 감지되었습니다.\")\n    (#Speaker).speak(\"누수가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: The siren sounds for 1 minute when movement is detected from 1 a.m. to 7 a.m. on weekdays and all day long on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#MotionSensor).motion == \"active\"){\n        if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n            if((#Clock).hour >= 1 and (#Clock).hour < 7){\n                if((#Siren).switch != \"on\"){\n                    (#Siren).on()\n                }\n            if((#Siren).sirenMode != \"siren\"){\n                (#Siren).setSirenMode(\"siren\")\n            }\n            wait until(1 MIN)\n            if((#Siren).switch != \"off\"){\n                (#Siren).off()\n            }\n        }\n    }\n    else{\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n            if((#Siren).sirenMode != \"siren\"){\n                (#Siren).setSirenMode(\"siren\")\n            }\n            wait until(1 MIN)\n            if((#Siren).switch != \"off\"){\n                (#Siren).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the windows when it snows or rains.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"snow\" or (#WeatherProvider).weather == \"rain\"){\n        if((#Window).window != \"closed\"){\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier every 3 hours.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(3 HOUR){\n    if((#AirPurifier).switch != \"on\"){\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window once every 6 hours if there are people around and the temperature is above 27 degrees.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(6 HOUR){\n    if((#PresenceSensor).presence == \"present\" and (#TemperatureSensor).temperature >= 27){\n        if((#Window).window != \"open\"){\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture every two hours between 1 AM and 5 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(2 HOUR, (#Clock).hour >=1 and (#Clock).hour < 5){\n        (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If sound is detected at 3:05 AM every day, tell me it's detected\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 3 and (#Clock).minute == 5 and (#Clock).second == 0){\n        if((#SoundSensor).sound == \"detected\"){\n            (#Speaker).speak(\"소리가 감지되었습니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the door if it is open at 11:05 PM every day.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 23 and (#Clock).minute == 5){\n        if((#DoorLock).door == \"open\"){\n            (#DoorLock).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture every day at 11:05 PM when the door is open.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 23 and (#Clock).minute == 5){\n        if((#DoorLock).door == \"open\"){\n            (#Camera).take()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner every morning at 5 o'clock and the air purifier at 8 o'clock in the evening.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 6 a.m. every day, and if movement is detected at 7 p.m. on weekdays, take a picture and say through the speaker that movement has been detected.\n\nServices: {'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n            if((#MotionSensor).motion == \"active\"){\n                if((#Camera).switch != \"on\"){\n                (#Camera).on()\n                }\n                (#Camera).take()\n                if ((#Speaker).switch != \"on\"){\n                    (#Speaker).on()\n                }\n                (#Speaker).speak(\"움직임이 감지되었습니다.\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot vacuum cleaner at 3pm on Tuesdays and Thursdays and turn on the lights at 7am every day when the weather is cloudy.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"thursday\"){\n        if((#Clock).hour == 15 and (#Clock).minute == 0){\n            if((#RobotCleaner).switch != \"on\"){\n                (#RobotCleaner).on()\n            }\n            if((#RobotCleaner).robotCleanerCleaningMode != \"auto\"){\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n    }\n    if((#Clock).hour == 7 and (#Clock).minute  == 0){\n        if((#WeatherProvider).weather == \"clouds\"){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send me an email every 2 hours when a person is detected. To admin@admin.com\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(2 HOUR){\n    if((#PresenceSensor).presence == \"present\"){\n        (#EmailProvider).sendMail(\"사람이 감지되었습니다.\",\"사람 감지\",\"admin@admin.com\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Press the button twice in succession to turn on the lights and air conditioner and set them to cooling mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Button).button == \"double\"){\n        if((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n        if((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if((#AirConditioner).airConditionerMode != \"cool\"){\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If it rains or snows, close the window and turn the dryer on AI mode.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"snow\"){\n        if((#Window).window != \"closed\"){\n            (#Window).close()\n        }\n        if((#Dehumidifier).switch != \"on\"){\n            (#Dehumidifier).on()\n        }\n        if((#Dehumidifier).dehumidifierMode != \"AIDrying\"){\n            (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Input : On Mondays, Wednesdays, and Fridays, turn on the lights and open the blinds at 7 a.m., and turn off the lights and close the blinds at 12 p.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "On weekends, press the button to turn on the lights and open the blinds.\nloop(1 SEC){\n    if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n            if((#Blind).blindLevel != 100){\n                (#Blind).setBlindLevel(100)\n            }\n        }\n        if((#Clock).hour == 12 and (#Clock).minute == 0 and (#Clock).second == 0){\n            if((#Light).switch != \"off\"){\n                (#Light).off()\n            }\n            if((#Blind).blindLevel != 0){\n                (#Blind).setBlindLevel(0)\n            }\n        }\n    }\n    else{\n        if((#Button).button == \"pressed\"){\n            if((#Light).switch != \"on\"){\n            (#Light).on()\n            }\n            if((#Blind).blindLevel != 100){\n                (#Blind).setBlindLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday to Friday from 8 a.m. to 8 p.m., when the air quality detector detects a fine dust concentration of 50 or higher, the blinds are opened 50%, and when the button is pressed, the air conditioner is set to automatic mode and the air purifier is turned on.\n\nServices: {'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Clock).hour >= 8 and (#Clock).hour < 20) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if ((#AirQualityDetector).dustLevel >= 50.0) {\n            if ((#Blind).blindLevel != 50){\n                (#Blind).setBlindLevel(50)\n            }\n        }\n        if ((#Button).button == \"pushed\") {\n            if ((#Airconditioner).switch != \"on\"){\n                (#AirConditioner).on()\n            }\n            if ((#Airconditioner).AirConditionerMode != \"auto){\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n            if ((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }   \n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open 50% curtains every day at 6 pm, take a picture with the camera if the charger is charged, and then send the photo by email when the contact sensor is opened, and close the curtain after 10 minutes\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Clock).hour == 18 and (#Clock).minute == 0 and (#Clock).second == 0) {\n    if ((#Curtain).curtainLevel != 50){\n        (#Curtain).setCurtainLevel(50)\n    }\n    if ((#Charger).chargeState == \"isAtFullCharge\") {\n        if ((#Camera).switch != \"on\"){\n        (#Camera).on()\n        }\n        (#Camera).take()\n        imagePath = (#Camera).image\n        wait until ((#ContactSensor).contact == \"open\") \n        (#EmailProvider).sendWithFile(\"recipient@example.com\", \"사진 전송\", \"최근 사진입니다.\", imagePath)\n        wait until (10 MIN) \n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every Monday, turn on the dishwasher at 8 a.m. and turn it off at 1 p.m.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\") {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n    }\n    if ((#Clock).hour == 13 and (#Clock).minute == 0){\n        if ((#Dishwasher).switch != \"off\"){\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Please email me if the front door is not closed at 7pm.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 19 and (#Clock).minute == 0) {\n    if ((#DoorLock).door != \"closed\") {\n        (#EmailProvider).sendMail(\"user@dummy.com\", \"Front Door Not Closed\", \"Front Door is not closed\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier every day at 7 am if the humidity is above 70%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#HumiditySensor).humidity >= 70.0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If humidity is above 70% during the current weekend, turn off the humidifier, set the dishwasher to automatic mode, and turn on the robot vacuum after 30 minutes\n\nServices: {'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n    if ((#HumiditySensor).humidity >= 70.0) {\n        if ((#Humidifier).switch != \"off\"){\n        (#Humidifier).off()\n        }\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\"){\n        (#Dishwasher).setDishwasherMode(\"auto\")\n        }\n        wait until (30 MIN)\n        if ((#RobotCleaner).switch != \"on\"){\n        (#RobotCleaner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 6pm, if the humidity is above 60%, turn off the humidifier, turn on the 100 grams feeder and feed the dog, and turn the humidifier on again after 1 hour.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#HumiditySensor).humidity >= 60.0) {\n        if ((#Humidifier).switch != \"off\"){\n            (#Humidifier).off()\n        }\n        if ((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n        wait until ((#Clock).hour == 19 and (#Clock).minute == 0)\n        if ((#Humidifier).switch != \"on\"){\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidity is above 80% at 9 a.m. on weekdays, turn off the humidifier, close the gas valve, and turn on the feeder and feed the dog 50 grams. After one hour, turn off the feeder and open the gas valve.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity >= 80.0) {\n            if ((#Humidifier).switch != \"off\"){\n                (#Humidifier).off()\n            }\n            if ((#GasValve).valve != \"closed\"){\n                (#GasValve).close()\n            }\n            if ((#Feeder).switch != \"on\"){\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(50.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n            wait until (1 HOUR)\n            if ((#Feeder).switch != \"off\"){\n                (#Feeder).off()\n            }\n            if ((#GasValve).valve != \"open\"){\n                (#GasValve).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 6 a.m., turn on the lights if the brightness is over 3000 lx, check the light level an hour later, and turn off the lights if the brightness is below 2000 lx.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#LightSensor).light >= 3000.0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        wait until (1 HOUR)\n        if ((#LightSensor).light <= 2000.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every evening at 8pm, when the water detector detects a water leak, turn off the gas valve, set the lights to red, and send an email.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 20 and (#Clock).minute == 0) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        if ((#Light).color != \"0|100|100\") {\n            (#Light).setColor(\"0|100|100\")\n        }\n        (#EmailProvider).sendMail(\"user@dummy.com\", \"누수 감지 알림\", \"누수가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 9 PM, turn on the robot vacuum cleaner if no motion is detected, turn on the pump after one hour, and turn off the robot vacuum cleaner after 30 minutes.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 21 and (#Clock).minute == 0) {\n    if ((#MotionSensor).motion == \"inactive\") {\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        wait until (30 MIN)\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).off()\n        }\n        wait until (30 MIN)\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 2pm, if no one is present, start the refrigerator, then after 2 hours start the pump and turn on the robot vacuum cleaner.\n\nServices: {'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        wait until (2 HOUR)\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 4 PM, if the illumination level falls below 1500 lx, turn on the lights and operate the water supply system and water 1 liters. After 30 minutes, turn off the water supply system, check the illumination level, and turn off the lights if it is above 1500 lx.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 0) {\n    if ((#LightSensor).light <= 1500.0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Irrigator).on()\n        wait until (30 MIN)\n        (#Irrigator).setWaterPortion(1.0, \"liters\")\n        (#Irrigator).startWatering()\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n        if ((#LightSensor).light >= 1500.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 6pm, if no sound is detected, sound the siren, turn on the smart plug, and turn it all off an hour later.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#SmartPlug).switch != \"on\") {\n            (#SmartPlug).on()\n        }\n        wait until (1 HOUR)\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#SmartPlug).switch != \"off\") {\n            (#SmartPlug).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 7 am, if the temperature is below 20 degrees, close the windows, turn on the television, and say ‘It’s cold’ through the speaker.\n\nServices: {'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\nif ((#TemperatureSensor).temperature <= 20.0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Its too cold\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 5pm, if the weather is raining, close the window and say ‘It’s going to rain’ through the speaker.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 17 and (#Clock).minute == 0) {\n    weatherInfo = (#WeatherProvider).weather\n    if (weatherInfo == \"Rain\") {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"It's raining\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Every day at 3pm, if the temperature is above 25 degrees, close the windows, turn on the television, and turn it off after 2 hours.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 15 and (#Clock).minute == 0) {\n    if ((#TemperatureSensor).temperature > 25.0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        wait until (2 HOUR)\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner every day at 8 AM\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier every day at 6 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Dehumidifier).switch != \"on\"){\n        (#Dehumidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan every day at noon.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"on\"){\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start the feeder with 50grams whenever it is off.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN){\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier every day at 6 AM\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light every day at 5 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 5 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"on\"){\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the pump every day at 7 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 19 and (#Clock).minute == 0) {\n    if ((#Pump).switch != \"on\"){\n        (#Pump).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo every day at 7 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0){\n        if ((#Camera).switch != \"off\"){\n        (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtain every day at 6 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if (#Curtain.curtain != \"open\"){\n        (#Curtain).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Send an email if the fan is off every hour.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR){\n    if ((#Fan).switch != \"on\") {\n        (#EmailProvider).send(\"user@dummy.com\", \"Fan is off alert\", \"The fan is off\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed 50grams every day at 6 PM\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the lights if no presence detected from 10 PM to 6 AM\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour >= 22 or (#Clock).hour < 6) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Light).switch != \"off\"){\n        (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to sleep mode if it is on every night at 11 PM\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 23 and (#Clock).minute == 0) {\n    if ((#AirPurifier).switch != \"off\") {\n        (#AirPurifier).off()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n        (#AirPurifier).setPurifierFanMode(\"sleep\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds at 6 AM every morning\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Blind).blind != \"open\"){\n    (#Blind).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the TV at every midnight\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 0 and (#Clock).minute == 0) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the lights and set color to blue whenever charger is charging\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if ((#Charger).chargeState == \"isCharging\") {\n        if ((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n        if ((#Light).color != \"240|100|100\"){\n            (#Light).setColor(\"240|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot cleaner every Saturday at 9 AM\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"saturday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the shades at 10 PM every night\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Shade).shadeLevel != 0){\n    (#Shade).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light whenever button is pushed\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if ((#Button).button == \"pushed\") {\n        if ((#Light).switch != \"off\"){\n        (#Light).off()\n        }\n    } \n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a picture with the camera at noon every day\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\"){\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier at 6 PM every day\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light at 10 PM every night\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if((#Clock).hour == 22 and (#Clock).minute == 0){\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light whenever motion sensor detects movement\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC){\n    if ((#MotionSensor).motion == \"active\" and (#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light if sound is detected at night\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour >= 22 or (#Clock).hour < 6) {\n    if ((#SoundSensor).sound == \"detected\" and (#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner every day at 8 AM if the temperature is above 25 degrees.\"\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature > 25.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier every day at 9 AM if the fine dust level is above 50.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 50.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo every day at 7 AM\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\"){\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier every day at 9 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\"){\n        (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start the dishwasher every day at 10 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if (#Dishwasher.switch != \"on\"){\n        (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if the fine dust level is above 50 and it is 10 AM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 50.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if the temperature is below 22 degrees at 3 PM.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 22.0) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo every hour.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Camera).switch != \"on\"){\n    (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the charger every day at 8 PM if the contact sensor is closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#ContactSensor).contact == \"closed\") {\n            if( (#Charger).switch != \"on\"){\n            (#Charger).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier at 2 PM if the humidity is above 60%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 60.0) {\n            if (#Dehumidifier.switch != \"on\"){\n            (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start the dishwasher every day at 11 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 6:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 30) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 3:15 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 15) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier at 10:45 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 45) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the light at 7:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the light at 11:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window at 8:00 AM.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window at 5:45 PM.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 45) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtain at 7:30 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        (#Curtain).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtain at 8:15 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 15) {\n        (#Curtain).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 9:15 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder at 8:00 AM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder at 6:30 PM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 30) {\n        if ((#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 10:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the refrigerator at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the refrigerator at 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to auto mode at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to auto mode at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to cool mode at 1:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to heat mode at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"heat\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner if it is not in auto mode at 11:30 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 30) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to heat mode if it is in cool mode at 2:15 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 15) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode == \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the robot cleaner and set the air conditioner temperature to 20°C if the air conditioner is in heat mode at 6:45 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 45) {\n        if ((#AirConditioner).airConditionerMode == \"heat\") { \n            if (#RobotCleaner.switch != \"on\"){\n            (#RobotCleaner).on()\n            }\n            if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n            }\n            (#AirConditioner).setTemperature(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 5:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier at 9:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the window at 6:00 AM.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the window at 8:00 PM.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the humidifier at 10:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the humidifier at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 1:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 7:00 AM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier at 10:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to auto mode at 9:00 AM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"auto\") {\n            (#AirPurifier).setPurifierFanMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to sleep mode at 11:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to low at 8:30 AM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 30) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to medium at 2:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to high at 5:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier fan to quiet at 10:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to windFree mode at 3:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off lights if the air purifier is in windFree mode at 4:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode == \"windFree\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to auto mode at 6:00 AM, to medium mode at 12:00 PM, and to quiet mode at 10:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"auto\") {\n            (#AirPurifier).setPurifierFanMode(\"auto\")\n        }\n    }\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to low mode at 8:00 AM, to high mode at 2:00 PM, and to windFree mode at 8:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to medium mode at 9:00 AM, to sleep mode at 1:00 PM, and to off mode at 11:00 PM.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"off\") {\n            (#AirPurifier).setPurifierFanMode(\"off\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Measure PM 10 dust level at 9:00 AM and turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        pm10Value = (#AirQualityDetector).dustLevel\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If fine dust level (PM 2.5) is below 15 at 2:00 PM, set the air purifier to sleep mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel < 15.0) {\n            if ((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n                (#AirPurifier).setPurifierFanMode(\"sleep\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If very fine dust level (PM 1.0) is above 50 at 6:30 PM, set the air purifier to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n            if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n             }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If carbon dioxide level is 400 ppm at 10:45 AM, set the air conditioner to auto mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 45) {\n        if ((#AirQualityDetector).carbonDioxide == 400.0) {\n            if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n            }   \n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the temperature around the air quality sensor exceeds 30°C at 3:00 PM, set the air conditioner to cool mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#AirConditioner).switch != \"on\"){\n                (#AirConditioner).on()\n            }   \n            if ((#AirConditioner).airConditionerMode != \"cool\") {\n                (#AirConditioner).setAirConditionerMode(\"cool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the humidity measured by the air quality sensor exceeds 50 at 11:00 AM, set the air purifier to quiet mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 50.0) {\n            if ((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n             }\n            if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n                (#AirPurifier).setPurifierFanMode(\"quiet\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is below 15 and temperature exceeds 30°C, turn on the air conditioner and set it to cool mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel < 15.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is 400 ppm and humidity exceeds 50%, set the air purifier to quiet mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide == 400.0 and (#AirQualityDetector).humidity > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level exceeds 50 and TVOC level is below 0.03, set the air purifier to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 50.0 and (#AirQualityDetector).tvocLevel < 0.03) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 1.0 level exceeds 50 and CO2 level is 400 ppm, turn on the air conditioner and set it to auto mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0 and (#AirQualityDetector).carbonDioxide == 400.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If fine dust level (PM 2.5) exceeds 40 and TVOC level is above 3, set the air purifier to sleep mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 40.0 and (#AirQualityDetector).tvocLevel > 3.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 100 and temperature exceeds 25°C, turn on the air conditioner and set it to cool mode. If CO2 level is above 600 ppm, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level exceeds 35 and VOC level is above 0.05, turn on the air purifier and set it to high mode. If humidity is below 40%, set the air purifier to low mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is above 1000 ppm and temperature exceeds 28°C, turn on the air conditioner. If PM 1.0 level exceeds 50, set the air purifier to medium mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is above 50 and temperature exceeds 30°C, turn on the air conditioner. If humidity is above 60%, set the air purifier to quiet mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 150 and VOC level is above 0.1, turn on the air purifier and set it to windFree mode. If CO2 level is below 400 ppm, turn off the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 100 and temperature exceeds 25°C, turn on the air conditioner and set it to cool mode. If CO2 level is above 600 ppm, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level exceeds 35 and VOC level is above 0.05, turn on the air purifier and set it to high mode. If humidity is below 40%, set the air purifier to low mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is above 1000 ppm and temperature exceeds 28°C, turn on the air conditioner. If PM 1.0 level exceeds 50, set the air purifier to medium mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is above 50 and temperature exceeds 30°C, turn on the air conditioner. If humidity is above 60%, set the air purifier to quiet mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 150 and VOC level is above 0.1, turn on the air purifier and set it to windFree mode. If CO2 level is below 400 ppm, turn off the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 100 and temperature exceeds 25°C, set the blinds to 40%. If CO2 level is above 600 ppm, set the blinds to 0%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level exceeds 35 and VOC level is above 0.05, set the blinds to 60%. If humidity is below 40%, set the blinds to 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Blind).blindLevel != 60) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#Blind).blindLevel != 20) {\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is above 1000 ppm and temperature exceeds 28°C, set the blinds to 50%. If PM 1.0 level exceeds 50, set the blinds to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#Blind).blindLevel != 50) {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is above 50 and temperature exceeds 30°C, set the blinds to 70%. If humidity is above 60%, set the blinds to 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blindLevel != 70) {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 150 and VOC level is above 0.1, set the blinds to 80%. If CO2 level is below 400 ppm, set the blinds to 0%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#Blind).blindLevel != 80) {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 100 and temperature exceeds 25°C, turn on the air purifier and set it to cool mode. If CO2 level is above 600 ppm, turn off the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"cool\") {\n            (#AirPurifier).setPurifierFanMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level exceeds 35 and VOC level is above 0.05, turn on the air purifier and set it to high mode. If humidity is below 40%, set the air purifier to low mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is above 1000 ppm and temperature exceeds 28°C, turn on the air conditioner and set it to high mode. If PM 1.0 level exceeds 50, set the air purifier to medium mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is above 50 and temperature exceeds 30°C, turn on the air conditioner and set it to quiet mode. If humidity is above 60%, set the air purifier to quiet mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"quiet\") {\n            (#AirConditioner).setAirConditionerMode(\"quiet\")\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 150 and VOC level is above 0.1, turn on the air conditioner and set it to windFree mode. If CO2 level is below 400 ppm, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"windFree\") {\n            (#AirConditioner).setAirConditionerMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level exceeds 35 and VOC level is above 0.05, set the blinds to 60%. If humidity is below 40%, set the blinds to 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Blind).blindLevel != 60) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#Blind).blindLevel != 20) {\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is above 1000 ppm and temperature exceeds 28°C, set the blinds to 50%. If PM 1.0 level exceeds 50, set the blinds to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#Blind).blindLevel != 50) {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is above 50 and temperature exceeds 30°C, set the blinds to 70%. If humidity is above 60%, set the blinds to 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blindLevel != 70) {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 150 and VOC level is above 0.1, set the blinds to 80%. If CO2 level is below 400 ppm, set the blinds to 0%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#Blind).blindLevel != 80) {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 100 and temperature exceeds 25°C, turn on the air purifier and set it to cool mode. If CO2 level is above 600 ppm, turn off the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"cool\") {\n            (#AirPurifier).setPurifierFanMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level exceeds 35 and VOC level is above 0.05, turn on the air purifier and set it to high mode. If humidity is below 40%, set the air purifier to low mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is above 1000 ppm and temperature exceeds 28°C, turn on the air conditioner and set it to high mode. If PM 1.0 level exceeds 50, set the air purifier to medium mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is above 50 and temperature exceeds 30°C, turn on the air conditioner and set it to quiet mode. If humidity is above 60%, set the air purifier to quiet mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"quiet\") {\n            (#AirConditioner).setAirConditionerMode(\"quiet\")\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 150 and VOC level is above 0.1, turn on the air conditioner and set it to windFree mode. If CO2 level is below 400 ppm, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"windFree\") {\n            (#AirConditioner).setAirConditionerMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 100 and temperature exceeds 25°C, set the blinds to 30%. If CO2 level is above 600 ppm, set the blinds to 0%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level exceeds 35 and VOC level is above 0.05, set the blinds to 60%. If humidity is below 40%, set the blinds to 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Blind).blindLevel != 60) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#Blind).blindLevel != 20) {\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level is above 1000 ppm and temperature exceeds 28°C, set the blinds to 50%. If PM 1.0 level exceeds 50, set the blinds to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#Blind).blindLevel != 50) {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 2.5 level is above 50 and temperature exceeds 30°C, set the blinds to 70%. If humidity is above 60%, set the blinds to 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blindLevel != 70) {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level is above 150 and VOC level is above 0.1, set the blinds to 80%. If CO2 level is below 400 ppm, set the blinds to 0%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#Blind).blindLevel != 80) {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the camera is on, turn on the dehumidifier.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"off\") {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the camera is off, turn off the pump.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a photo at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a 15-minute timelapse at 0.25x speed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(0.25, 2.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a 3-hour timelapse at 10x speed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(3.0, 10.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If PM 10 level exceeds 100, turn on the camera and set the air conditioner to cool mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If CO2 level exceeds 600 ppm, turn off the camera and turn on the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If temperature exceeds 30°C and camera is off, turn on the camera and set air conditioner to high mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).temperature > 30.0 and (#Camera).switch != \"on\") {\n        (#Camera).on()\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera and turn on the air purifier if PM 2.5 exceeds 40 and VOC level is above 0.05.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 40.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If fine dust level exceeds 50 and temperature exceeds 25°C, turn on the camera and set the air conditioner to medium mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"medium\") {\n            (#AirConditioner).setAirConditionerMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If VOC level is below 0.03, turn on the camera and set the air purifier to low mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).tvocLevel < 0.03) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and set the air purifier to quiet mode if humidity exceeds 60%.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera and set the air purifier to windFree mode if PM 10 level exceeds 150.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and set the air purifier to off mode if CO2 level is below 400 ppm.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"off\") {\n            (#AirPurifier).setPurifierFanMode(\"off\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera if the VOC level exceeds 1.0 ppm and temperature is above 30°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).tvocLevel > 1.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the camera is on and VOC level exceeds 1.0 ppm, turn on the air conditioner and set it to cool mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"off\" and (#AirQualityDetector).tvocLevel > 1.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the camera is off and fine dust level exceeds 30, turn on the air purifier and set it to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\" and (#AirQualityDetector).fineDustLevel > 30.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera and turn on the air purifier if PM 2.5 exceeds 40 and CO2 level is above 600 ppm.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 40.0 and (#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and set the air conditioner to high mode if temperature exceeds 28°C and PM 1.0 exceeds 50.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).temperature > 28.0 and (#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo with the camera at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a 15-minute timelapse at 0.25x speed at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).takeTimelapse(0.25, 2.0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a 3-hour timelapse at 10x speed at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).takeTimelapse(3.0, 10.0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Email the most recent photo taken by the camera to name@cite.org at 5:00 PM.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        imagePath = (#Camera).image\n        (#EmailProvider).sendWithFile(\"name@cite.org\", \"최근 사진\", \"\", imagePath)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo now and email it to test@name.com with subject '사진' and body '방금 찍은 사진'.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).take()\n    image = (#Camera).image\n    (#EmailProvider).sendWithFile(\"test@name.com\", \"사진\", \"방금 찍은 사진\", image)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera at 6:30 AM and off at 7:30 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a photo at 4:45 PM every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 45) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera at 11:15 PM and on at 11:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 15) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a photo at 5:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are closed, set them to 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blind == \"closed\") {\n    (#Blind).setBlindLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are open, set them to 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blind == \"open\") {\n    (#Blind).setBlindLevel(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are partially open, close them completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blind == \"partially\") {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 70% at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 100% at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 50%, set them to 80%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 50) {\n    (#Blind).setBlindLevel(80)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 20%, set them to 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 20) {\n    (#Blind).setBlindLevel(40)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 30%, set them to 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 30) {\n    (#Blind).setBlindLevel(60)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 70%, set them to 90%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 70) {\n    (#Blind).setBlindLevel(90)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 90%, close them completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 90) {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 50% if PM 2.5 level exceeds 35.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 20% if VOC level exceeds 0.1.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).tvocLevel > 0.1) {\n        (#Blind).setBlindLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 80% if temperature exceeds 30°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).temperature > 30) {\n        (#Blind).setBlindLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 40% if humidity is below 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).humidity < 40) {\n        (#Blind).setBlindLevel(40)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 60% if CO2 level exceeds 600 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 600) {\n        (#Blind).setBlindLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 70% if PM 10 level exceeds 100.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100) {\n        (#Blind).setBlindLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 30% if fine dust level exceeds 50.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50) {\n        (#Blind).setBlindLevel(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 100% at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 0% at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 90% if PM 1.0 level exceeds 30.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).veryFineDustLevel > 30) {\n        (#Blind).setBlindLevel(90)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are closed, set them to 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"closed\") {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are open, set them to 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"open\") {\n        (#Blind).setBlindLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are partially open, close them completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"partially\") {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 70% at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 100% at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 50%, set them to 80%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 50) {\n        (#Blind).setBlindLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 20%, set them to 40%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 20) {\n        (#Blind).setBlindLevel(40)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 30%, set them to 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 30) {\n        (#Blind).setBlindLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 70%, set them to 90%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 70) {\n        (#Blind).setBlindLevel(90)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 90%, close them completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 90) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's charging state is \"charging\" and voltage is above 12.5V, turn on the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"charging\" and (#Charger).voltage > 12.5) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's charging state is \"fullyCharged\" and it is 9:00 AM, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"fullyCharged\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's charging state is \"discharging\" and current is above 1.5A, close the blinds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"discharging\" and (#Charger).current > 1.5) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's voltage drops below 11V, turn on the lights at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).voltage < 11 and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's current exceeds 2A and it is 7:00 AM, turn off the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).current > 2.0 and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's charging state is \"error\" and PM 10 level is above 100, turn on the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"error\" and (#AirQualityDetector).dustLevel > 100.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's voltage is between 11V and 12V, and temperature exceeds 25°C, turn on the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).voltage >= 11 and (#Charger).voltage <= 12 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger's current is below 0.5A and the charging state is \"charging\" and humidity is above 60%, set air purifier to quiet mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).current < 0.5 and (#Charger).chargingState == \"charging\" and (#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger is in \"stopped\" state and the voltage is above 13V, set the blinds to 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"stopped\" and (#Charger).voltage > 13.0) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the charger is \"fullyCharged\" and the current is 0, turn off the lights at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"fullyCharged\" and (#Charger).current == 0 and (#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 50% at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier if it is a holiday.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to cool mode on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Take a photo with the camera every Monday at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 100% on the first day of each month at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 6:30 AM if the current temperature is above 25°C.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If today is Monday and the time is 5:00 PM, set the blinds to 20%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).hour == 17 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 11:30 PM on the last day of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 31 and (#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a photo on holidays at 9:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to sleep mode at 10:00 PM if the humidity is above 60%.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n                (#AirPurifier).setPurifierFanMode(\"sleep\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the voltage of the charger is below 5V, turn on the air conditioner at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Charger).voltage < 5.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 30% if the air quality (PM 10) is poor and it's a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#Clock).isHoliday==true) {\n        (#Blind).setBlindLevel(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 7:00 AM if the CO2 level is above 600 ppm.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 80% at 3:00 PM if the air conditioner is on.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera at 11:00 PM if the charging state is \"charging\".\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"charging\") {\n            if ((#Camera).switch != \"off\") {\n                (#Camera).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner at 8:00 AM if the temperature exceeds 30°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to heat mode at 6:00 AM if the temperature is below 15°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 15.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are closed at 5:00 PM, set them to 70%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 6:00 AM if the humidity is below 40%.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity < 40.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are at 50% at 8:00 PM, set them to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Blind).blindLevel == 50) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the camera at 12:00 AM if it is discharging.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"discharging\") {\n            if ((#Camera).switch != \"off\") {\n                (#Camera).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to high mode at 7:00 PM if the VOC level is above 0.05.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner at 3:00 PM if the CO2 level exceeds 800 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are open at 4:00 PM, set them to 10%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            (#Blind).setBlindLevel(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier at 9:00 PM if the temperature is below 20°C.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 90% at 2:00 PM if the VOC level is below 0.03.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.03) {\n            (#Blind).setBlindLevel(90)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera at 7:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to auto mode at 5:00 PM if the voltage is above 220V.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Charger).voltage > 220.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 11:00 PM if the charging state is \"fullyCharged\".\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"fullyCharged\") {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to quiet mode at 8:00 PM if the humidity is above 70%.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n                (#AirPurifier).setPurifierFanMode(\"quiet\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera at 9:00 AM and take a photo.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air conditioner to cool mode at 2:00 PM if the CO2 level is below 400 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide < 400.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"cool\") {\n                (#AirConditioner).setAirConditionerMode(\"cool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier at 10:00 PM if the VOC level is below 0.02.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.02) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 75% at 7:30 AM if the charging state is \"error\".\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Charger).chargingState == \"error\") {\n            (#Blind).setBlindLevel(75)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 5:30 PM if the CO2 level is above 800 ppm.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are open at 10:00 AM, set them to 50%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 6:00 PM if the temperature is below 18°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 18.0) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to medium mode at 8:00 AM if the humidity is below 50%.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity < 50.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n                (#AirPurifier).setPurifierFanMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner at 12:00 PM if the temperature exceeds 35°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 35.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are closed at 3:00 PM, set them to 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera at 4:30 PM and take a 15-minute timelapse.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).takeTimelapse(0.25, 2.0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 11:45 PM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 23 and (#Clock).minute == 45) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the air purifier to high mode at 1:00 PM if the PM 2.5 level exceeds 35.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 35.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner at 3:00 PM if the voltage exceeds 230V.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Charger).voltage > 230.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air purifier at 9:30 PM if the VOC level is below 0.01.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).tvocLevel < 0.01) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the blinds to 85% at 8:30 AM if the charging state is \"fullyCharged\".\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 30) {\n        if ((#Charger).chargingState == \"fullyCharged\") {\n            (#Blind).setBlindLevel(85)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 6:30 AM if the CO2 level is above 500 ppm.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).carbonDioxide > 500.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the blinds are open at 10:00 AM, set them to 75%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            (#Blind).setBlindLevel(75)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the air conditioner at 9:00 PM if the temperature is below 22°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 22.0) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains if they are open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtain == \"open\") {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the curtains are partially open, close them completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtain == \"partially\") {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the curtains to 50% at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the curtains are closed, open them completely.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtain == \"closed\") {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains at 6:00 AM if the temperature is above 20°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 20.0) {\n            (#Curtain).setCurtainLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains at 10:00 PM if the temperature is below 15°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 15.0) {\n            (#Curtain).setCurtainLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the curtains to 75% if the air quality (PM 10) is poor.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0) {\n        (#Curtain).setCurtainLevel(75)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the curtains are at 50%, set them to 80%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtainLevel == 50) {\n        (#Curtain).setCurtainLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the curtains to 20% if the CO2 level is above 800 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 800.0) {\n        (#Curtain).setCurtainLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the curtains are open at 5:00 PM, set them to 30%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Curtain).curtain == \"open\") {\n            (#Curtain).setCurtainLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the curtains to 60% at 9:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Close the curtains at 11:00 PM if the humidity is above 70%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            (#Curtain).setCurtainLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the curtains to 40% if the blinds are at 70%.\n\nServices: {'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 70) {\n        (#Curtain).setCurtainLevel(40)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the curtains at 7:00 AM and close them at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(100)\n    }\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, turn on the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed, turn off the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, turn on the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, turn on the dehumidifier.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed, turn off the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, turn on the air purifier and set it to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed, turn off the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, turn on the light and set the brightness to 70%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed, turn off the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, send an email notification.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"open\") {\n        (#EmailProvider).sendMail(\"user@example.com\", \"Contact Sensor Alert\", \"The contact sensor is open.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed, turn on the television.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, close the blinds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed, turn on the speaker and play a sound.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"alert_sound.mp3\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open, set the air conditioner to cool mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"open\") {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open at 8:00 AM, turn on the light.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed at 10:00 PM, turn off the air purifier.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open on weekends, turn on the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if (((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#ContactSensor).contact != \"closed\") {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed at midnight, turn off the air conditioner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open and the time is 6:00 PM, turn on the dehumidifier.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed and it is a holiday, turn off the humidifier.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#ContactSensor).contact == \"closed\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open at 7:00 AM, turn on the air purifier and set it to high mode.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed at 9:00 PM, turn off the camera.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open at 10:00 AM on a weekday, turn on the light and set the brightness to 70%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday != \"saturday\" and (#Clock).weekday != \"sunday\" and (#Clock).hour == 10 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed at 11:00 PM, turn off the fan.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open at 3:00 PM, send an email notification.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        (#EmailProvider).sendMail(\"user@example.com\", \"Contact Sensor Alert\", \"The contact sensor is open.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed at 6:00 AM, turn on the television.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open at 4:00 PM, close the blinds.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is closed at 2:00 PM on a holiday, turn off the robot cleaner.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 14 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the contact sensor is open at 5:00 PM, turn on the pump.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to cooling mode at 6:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n            (#Dehumidifier).setDehumidifierMode(\"cooling\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if the mode is continuousDehumidifying at 10:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"continuousDehumidifying\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to drying mode at 2:00 PM if the humidity is above 60%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to wrinklePrevent mode at 3:00 PM on holidays.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in drying mode at 11:00 PM, turn it off.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"drying\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to refreshing mode at 8:00 AM if the temperature is above 25°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n                (#Dehumidifier).setDehumidifierMode(\"refreshing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 9:00 AM if the mode is sanitizing.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"sanitizing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to AIDrying mode at 7:00 PM if the CO2 level is above 600 ppm.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n                (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to internalCare mode at 6:00 PM if the VOC level is above 0.05.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n                (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to delayWash mode at 5:00 PM if the blinds are open.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n                (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in refreshing mode at 4:00 PM, turn it off.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"refreshing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to freezeProtection mode at 2:00 PM if it is a holiday.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n            (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in cooling mode at 8:00 PM, set it to finished mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"cooling\") {\n            if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n            }\n            (#Dehumidifier).setDehumidifierMode(\"finished\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to sanitizing mode at 9:00 AM if the PM 10 level is above 100.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).dustLevel > 100.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n                (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in internalCare mode at 11:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"internalCare\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to continuousDehumidifying mode at 7:00 AM if the temperature is below 20°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n                (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to drying mode at 10:00 AM if the blinds are closed.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to freezeProtection mode at 5:00 PM if the charging state is \"discharging\".\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"discharging\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n                (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in weightSensing mode at 3:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"weightSensing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to thawingFrozenInside mode at 4:00 AM if it is a holiday.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 4 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n            (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in cooling mode at 12:00 PM, set it to internalCare mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"cooling\") {\n            (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to sanitizing mode at 9:00 PM if the humidity is above 70%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n                (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in refreshing mode at 2:00 AM, turn it off.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"refreshing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to wrinklePrevent mode at 10:00 AM if the temperature is below 18°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 18.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n                (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in AIDrying mode at 11:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"AIDrying\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to freezeProtection mode at 1:00 PM if the VOC level is above 0.1.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.1) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n                (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in continuousDehumidifying mode at 3:00 PM, set it to thawingFrozenInside mode.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"continuousDehumidifying\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to internalCare mode at 8:00 AM if the CO2 level is above 800 ppm.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n                (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in cooling mode at 10:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"cooling\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to delayWash mode at 6:00 PM if the blinds are partially open.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"partially\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n                (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in internalCare mode at 5:00 PM, turn it off.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"internalCare\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to sanitizing mode at 2:00 PM if the temperature is above 30°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n                (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to continuousDehumidifying mode at 11:00 AM if the charging state is \"fullyCharged\".\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"fullyCharged\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n                (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in freezeProtection mode at 4:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"freezeProtection\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to weightSensing mode at 7:00 AM if the VOC level is below 0.03.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.03) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"weightSensing\") {\n                (#Dehumidifier).setDehumidifierMode(\"weightSensing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to wrinklePrevent mode at 10:00 AM if the CO2 level is below 500 ppm.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide < 500.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n                (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dehumidifier is in thawingFrozenInside mode at 11:00 PM, turn it off.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to sanitizing mode at 1:00 PM if it is a holiday.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n            (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to refreshing mode at 9:00 AM if the temperature is below 20°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n                (#Dehumidifier).setDehumidifierMode(\"refreshing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in weightSensing mode at 8:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"weightSensing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to thawingFrozenInside mode at 5:00 AM if the blinds are closed.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n                (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to continuousDehumidifying mode at 6:00 PM if the VOC level is above 0.08.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.08) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n                (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to internalCare mode at 3:00 PM if the charging state is \"error\".\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"error\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n                (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in sanitizing mode at 11:30 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Dehumidifier).dehumidifierMode == \"sanitizing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to AIDrying mode at 10:00 PM if the CO2 level is above 700 ppm.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 700.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n                (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to wrinklePrevent mode at 4:00 PM if it is a holiday.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to cooling mode at 9:00 AM if the temperature is above 28°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n                (#Dehumidifier).setDehumidifierMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in thawingFrozenInside mode at 6:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in sanitizing mode at 11:30 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Dehumidifier).dehumidifierMode == \"sanitizing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to AIDrying mode at 10:00 PM if the CO2 level is above 700 ppm.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 700.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n                (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to wrinklePrevent mode at 4:00 PM if it is a holiday.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to cooling mode at 9:00 AM if the temperature is above 28°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n                (#Dehumidifier).setDehumidifierMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier if it is in thawingFrozenInside mode at 6:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to drying mode at 7:00 PM if the humidity is above 80%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 80.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to delayWash mode at 2:00 PM if the blinds are opening.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"opening\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n                (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to eco mode at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher if the mode is intense at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"intense\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 2:00 PM if the humidity is above 60%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"auto\") {\n                (#Dishwasher).setDishwaherMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to quick mode at 3:00 PM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in rinse mode at 11:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to dry mode at 8:00 AM if the temperature is above 25°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"dry\") {\n                (#Dishwasher).setDishwaherMode(\"dry\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher at 9:00 AM if the mode is eco.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 7:00 PM if the CO2 level is above 600 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"auto\") {\n                (#Dishwasher).setDishwaherMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to dry mode at 6:00 PM if the VOC level is above 0.05.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"dry\") {\n                (#Dishwasher).setDishwaherMode(\"dry\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to rinse mode at 5:00 PM if the blinds are open.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"rinse\") {\n                (#Dishwasher).setDishwaherMode(\"rinse\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in quick mode at 2:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"quick\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 6:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to eco mode at 7:00 PM if the VOC level is above 0.08.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.08) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwaherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in rinse mode at 4:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to dry mode at 5:00 PM if the blinds are closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"dry\") {\n                (#Dishwasher).setDishwaherMode(\"dry\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher if it is in auto mode at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"auto\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to quick mode at 8:00 AM if the temperature is above 30°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"quick\") {\n                (#Dishwasher).setDishwaherMode(\"quick\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in dry mode at 10:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"dry\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to eco mode at 6:00 PM if the VOC level is below 0.05.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.05) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwaherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to rinse mode at 3:00 PM if the CO2 level is above 700 ppm.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 700.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"rinse\") {\n                (#Dishwasher).setDishwaherMode(\"rinse\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 11:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher if the temperature is above 28°C and the mode is eco at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0 and (#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to intense mode at 10:00 AM if the humidity is above 65%.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 65.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"intense\") {\n                (#Dishwasher).setDishwaherMode(\"intense\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to eco mode at 6:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher if the mode is intense at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"intense\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to quick mode at 3:00 PM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in rinse mode at 11:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to dry mode at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"dry\") {\n            (#Dishwasher).setDishwaherMode(\"dry\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher at 9:00 AM if the mode is eco.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 7:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to dry mode at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"dry\") {\n            (#Dishwasher).setDishwaherMode(\"dry\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to rinse mode at 5:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"rinse\") {\n            (#Dishwasher).setDishwaherMode(\"rinse\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in quick mode at 2:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"quick\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 6:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to eco mode at 7:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in rinse mode at 4:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to dry mode at 5:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"dry\") {\n            (#Dishwasher).setDishwaherMode(\"dry\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher if it is in auto mode at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"auto\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to quick mode at 8:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in dry mode at 10:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"dry\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to eco mode at 6:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to rinse mode at 3:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"rinse\") {\n            (#Dishwasher).setDishwaherMode(\"rinse\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to auto mode at 11:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher if it is in eco mode at 4:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to intense mode at 10:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"intense\") {\n            (#Dishwasher).setDishwaherMode(\"intense\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in auto mode at 7:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"auto\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dishwasher and set it to quick mode at 8:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the dishwasher is in dry mode at 5:00 PM, turn it off.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"dry\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to rinse mode at 7:00 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"rinse\") {\n            (#Dishwasher).setDishwaherMode(\"rinse\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 8:00 AM and set the speed to 3.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 10:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 2 at 6:45 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 12:00 PM and set the speed to 1.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(1)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 3:15 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 4 at 9:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(4)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 5:30 AM and set the speed to 2.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 8:45 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 1 at 7:15 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(1)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 2:30 PM and set the speed to 5.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(5)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 1:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 3 at 10:15 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 4:45 AM and set the speed to 2.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 4 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 6:20 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 20) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 4 at 11:10 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 10) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(4)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 7:00 PM and set the speed to 1.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(1)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 12:45 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 2 at 3:15 AM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 3 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 2:00 AM and set the speed to 3.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 5:30 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to cooling mode at 7:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n            (#Dehumidifier).setDehumidifierMode(\"cooling\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to delayWash mode at 8:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n            (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to drying mode at 9:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to finished mode at 10:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"finished\") {\n            (#Dehumidifier).setDehumidifierMode(\"finished\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to refreshing mode at 11:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n            (#Dehumidifier).setDehumidifierMode(\"refreshing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to weightSensing mode at 12:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"weightSensing\") {\n            (#Dehumidifier).setDehumidifierMode(\"weightSensing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to wrinklePrevent mode at 1:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to dehumidifying mode at 2:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"dehumidifying\") {\n            (#Dehumidifier).setDehumidifierMode(\"dehumidifying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to AIDrying mode at 3:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n            (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to sanitizing mode at 4:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n            (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to internalCare mode at 5:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n            (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to freezeProtection mode at 6:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n            (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to continuousDehumidifying mode at 7:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n            (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to thawingFrozenInside mode at 8:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n            (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 9:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 10:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 11:00 PM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 12:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 1:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 2:00 AM.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder at 7:00 AM and start feeding 1 serving.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(1.0, \"servings\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder at 8:00 PM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is off, turn it on at 6:00 AM and start feeding 30g.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Feeder).switch == \"off\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(30.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start feeding 45grams at 12:00 PM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(45.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder and start feeding 60grams at 5:00 PM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(60.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start feeding 20g at 3:00 PM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(20.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder at 9:30 PM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 30) {\n        if ((#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is on at 4:00 PM, start feeding 40grams.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Feeder).switch == \"on\") {\n            (#Feeder).setFeedPortion(40.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder and start feeding 25g at 7:30 AM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(25.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start feeding 35g at 11:45 AM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 45) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(35.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder and start feeding 50 grams at 10:00 AM.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder at 7:00 AM and start feeding 50ml if the feeder is idle.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n           (#Feeder).setFeedPortion(50.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder at 8:00 PM if the feeder is idle.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"off\") {\n                (#Feeder).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is off and idle, turn it on at 6:00 AM and start feeding 30g.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\" and (#Feeder).switch == \"off\") {\n            (#Feeder).on()\n            (#Feeder).setFeedPortion(30.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start feeding 45g at 12:00 PM if the feeder is idle.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(45.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder and start feeding 60g at 5:00 PM if it is off and idle.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\" and (#Feeder).switch == \"off\") {\n            (#Feeder).on()\n            (#Feeder).setFeedPortion(60.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is feeding at 9:00 AM, turn it off.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"feeding\" and (#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Start feeding 30g at 3:00 PM if the feeder is idle.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(30.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the feeder and start feeding 50g at 6:30 AM if the feeder is idle.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(50.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the feeder at 11:00 PM if it is in error state.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"error\" and (#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: If the feeder is idle at 2:00 PM, start feeding 20grams.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(20.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air conditioner if the temperature exceeds 30°C on weekdays at 2:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 6:00 AM on holidays if the VOC level is above 0.05.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Open the blinds at 7:00 AM on weekdays if they are closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Blind).blind == \"closed\") {\n            (#Blind).setBlindLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dehumidifier at 11:00 PM on weekends.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the camera and take a photo at 9:00 AM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to cooling mode at 2:00 PM if the temperature exceeds 28°C.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n                (#Dehumidifier).setDehumidifierMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the fan at 10:00 AM if the temperature exceeds 25°C.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 8:00 PM on weekdays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Feed the pets 50g at 7:00 AM and 6:00 PM every day.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 or (#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 3 at 12:00 PM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Fan).FanSpeed != 3) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the dishwasher if it is running at 10:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to eco mode at 8:00 PM if the blinds are closed.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwaherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to continuousDehumidifying mode at 9:00 AM on holidays.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n            (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the fan speed to 2 at 7:30 AM every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        if ((#Fan).FanSpeed != 2) {\n            (#Fan).setFanSpeed(2)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dehumidifier to dry mode at 10:00 PM if the humidity is above 60%.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the air purifier at 5:00 AM if the CO2 level exceeds 600 ppm.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the dishwasher to intense mode at 6:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"intense\") {\n            (#Dishwasher).setDishwaherMode(\"intense\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the fan at 8:30 PM every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the dehumidifier and set it to wrinklePrevent mode at 3:00 PM on holidays.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the speaker and play music at 7:00 AM every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/music.mp3\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Pause the speaker at 9:00 PM every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).pause()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Stop the speaker at 10:00 PM if it is playing.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).stop()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the speaker and play a podcast at 6:00 AM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/podcast\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker at 11:00 PM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Play an audiobook at 8:00 AM every Monday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/audiobook\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak \"Good Morning\" at 7:00 AM every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Good Morning\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Pause the speaker at 12:00 PM every Saturday and Sunday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).pause()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Play a workout playlist at 6:00 PM every Tuesday and Thursday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and ((#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"thursday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/workout_playlist\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak \"Time to relax\" at 9:00 PM every Friday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0 and (#Clock).weekday == \"friday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Time to relax\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker at 10:00 PM every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Play nature sounds at 5:00 AM every Saturday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0 and (#Clock).weekday == \"saturday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/nature_sounds\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak \"Good Night\" at 9:00 PM every Sunday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Good Night\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Pause the speaker at 1:00 PM every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).pause()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Play a bedtime story at 8:00 PM every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/bedtime_story\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak \"Lunchtime\" at 12:00 PM every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Lunchtime\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker at 9:00 AM every Sunday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak \"Time to work\" at 8:00 AM every Monday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Time to work\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Play birthday song at 7:00 AM on January 1st.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).month == 1 and (#Clock).day == 1 and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"path/to/birthday_song\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Speak \"Happy Birthday\" at 8:00 AM on July 20th.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).month == 7 and (#Clock).day == 20 and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Happy Birthday\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the speaker at 10:00 PM every Sunday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 9:00 AM every weekday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or \n         (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or \n         (#Clock).weekday == \"friday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 10:00 PM every day.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 12:00 PM on weekends.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to siren mode at 6:00 PM on holidays.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"siren\") {\n            (#Siren).setSirenMode(\"siren\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren if it is in both mode at 11:00 PM.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"both\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to strobe mode at 7:00 AM every Monday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 8:00 PM if it is in siren mode.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"siren\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 10:00 AM if it is a holiday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 5:00 PM every Friday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0 and (#Clock).weekday == \"friday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 7:00 AM every Sunday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 8:00 AM on the first day of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 9:00 PM on the last day of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 31 and (#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 5:00 PM every Saturday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0 and (#Clock).weekday == \"saturday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 6:00 AM every Monday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 7:00 PM every Thursday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0 and (#Clock).weekday == \"thursday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 4:00 PM every Wednesday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0 and (#Clock).weekday == \"wednesday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 8:00 PM every Tuesday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0 and (#Clock).weekday == \"tuesday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to siren mode at 7:00 AM every Thursday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"thursday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"siren\") {\n            (#Siren).setSirenMode(\"siren\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 6:00 AM every Sunday.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 3:00 PM on the last Friday of each month.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day >= 24 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 10:00 AM if it is a holiday. Announce \"Holiday siren mode set to both\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Holiday siren mode set to both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn on the siren and set it to strobe mode at 9:00 AM every weekday. Announce \"Siren activated\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or \n         (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or \n         (#Clock).weekday == \"friday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren activated\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Turn off the siren at 10:00 PM every day. Announce \"Siren deactivated\" on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren deactivated\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: Set the siren to both mode at 12:00 PM on weekends. Play an alert sound on the speaker.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"alert_sound.mp3\")\n    }\n}"
        }
    ]
]