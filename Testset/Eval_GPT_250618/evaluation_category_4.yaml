- command: "창문이 열리면 알람의 사이렌을 울려 줘."
  command_translated: "Sound the alarm's siren when the window opens."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Window).windowControl_window == open)
      (#Alarm).alarm_siren()
  elapsed_time: 1.219 seconds
- command: "토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘."
  command_translated: "Turn on irrigation when soil moisture is above and below 20%."
  devices:
  - Speaker
  - SoilMoistureSensor
  - TemperatureSensor
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > 20.0) and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0)) {
        all(#Irrigator).switch_on()
      }
  elapsed_time: 2.636 seconds
- command: "움직임이 감지되면 최대 3번까지 조명을 켜 줘."
  command_translated: "Turn on the light up to 3 times when motion is detected."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - SmokeDetector
  - Light
  - Button
  - MotionSensor
  - Clock
  - FallDetector
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      count := 0
      if ((#MotionSensor).motionSensor_motion == active) {
        if (count < 3) {
          (#Light).switch_on()
          count = count + 1
          (#Clock).clock_delay(1000)
        }
      } else {
        count = 0
        break
      }
  elapsed_time: 2.118 seconds
- command: "온도가 35도 이상이 되면 에어컨을 켜 줘."
  command_translated: "Turn on the air conditioner when the temperature is above 35 degrees."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirPurifier
  - Calculator
  - RobotCleaner
  - TemperatureSensor
  - Clock
  - Dehumidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#TemperatureSensor).temperatureMeasurement_temperature > 35.0)
      (#AirConditioner).switch_on()
  elapsed_time: 2.042 seconds
- command: "습도가 80% 이상이 되면 블라인드를 내려 줘."
  command_translated: "Lower the blinds when the humidity is above 80%."
  devices:
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - Blind
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - Humidifier
  - Shade
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if (((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) == true) {
        if (triggered == false) {
          all(#Blind).blind_close()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.598 seconds
- command: "블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘."
  command_translated: "When the blinds are closed, say 'Blinds are closed'."
  devices:
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - GasValve
  - Pump
  - Clock
  - Window
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Blind).blind_blind == closed)
      (#Speaker).mediaPlayback_speak("Blinds are closed")
  elapsed_time: 2.053 seconds
- command: "TV가 꺼지면 스피커를 꺼 줘."
  command_translated: "Turn off the speakers when the TV is turned off."
  devices:
  - Speaker
  - Timer
  - AirQualityDetector
  - Blind
  - Television
  - GasValve
  - SoundSensor
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Television).switch_switch == "off") {
        if (triggered == false) {
          all(#Speaker).switch_off()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.975 seconds
- command: "커튼이 3번 열렸다 닫히면 조명을 꺼 줘."
  command_translated: "Turn off the light when the curtain opens and closes 3 times."
  devices:
  - Siren
  - Speaker
  - Curtain
  - Light
  - Blind
  - DoorLock
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      count := 0
      prev_open := false
      prev_close := false
      if ((#Curtain).curtain_curtain == "open") and (prev_open == false) {
        count = count + 1
        prev_open = true
      } else if ((#Curtain).curtain_curtain != "open") {
        prev_open = false
      }
      if ((#Curtain).curtain_curtain == "closed") and (prev_close == false) {
        count = count + 1
        prev_close = true
      } else if ((#Curtain).curtain_curtain != "closed") {
        prev_close = false
      }
      if (count >= 3) {
        all(#Light).switch_off()
        break
      }
  elapsed_time: 3.982 seconds
- command: "제습기가 꺼지면 다시 켜 줘."
  command_translated: "Turn the dehumidifier back on when it turns off."
  devices:
  - Speaker
  - AirPurifier
  - Refrigerator
  - GasValve
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Dehumidifier).switch_switch == off) {
        if (triggered == false) {
          (#Dehumidifier).switch_on()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.094 seconds
- command: "재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘."
  command_translated: "When the occupancy sensor no longer detects it, say 'Door is open'."
  devices:
  - Speaker
  - LightSensor
  - ContactSensor
  - OccupancySensor
  - MotionSensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == not_present)
      (#Speaker).mediaPlayback_speak("Door is open")
  elapsed_time: 2.549 seconds
