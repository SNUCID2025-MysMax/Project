- command: "사이렌을 울려줘."
  command_translated: "Sound the siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - Recorder
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_on()
  elapsed_time: 1.196 seconds
- command: "사이렌을 울려줘."
  command_translated: "Sound the siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - Recorder
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_on()
  elapsed_time: 1.227 seconds
- command: "경광등을 켜 줘."
  command_translated: "Turn on the strobe."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Light
  - Blind
  - Alarm
  - Clock
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).sirenMode_setSirenMode("strobe")
  elapsed_time: 1.576 seconds
- command: "경광등을 켜 줘."
  command_translated: "Turn on the strobe."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Light
  - Blind
  - Alarm
  - Clock
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).sirenMode_setSirenMode("strobe")
  elapsed_time: 1.730 seconds
- command: "사이렌과 경광등을 동시에 켜 줘"
  command_translated: "Turn on the siren and the strobe at the same time"
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Blind
  - Alarm
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Siren).sirenMode_setSirenMode("both")
  elapsed_time: 1.902 seconds
- command: "사이렌과 경광등을 동시에 켜 줘"
  command_translated: "Turn on the siren and the strobe at the same time"
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Blind
  - Alarm
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_on()
      (#Siren).sirenMode_setSirenMode("both")
  elapsed_time: 1.295 seconds
- command: "사이렌과 경광등을 둘 다 꺼 줘"
  command_translated: "Turn off both the siren and the strobe"
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - GasValve
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Alarm).alarm_off()
      all(#Siren).switch_off()
  elapsed_time: 1.342 seconds
- command: "사이렌과 경광등을 둘 다 꺼 줘"
  command_translated: "Turn off both the siren and the strobe"
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - GasValve
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Alarm).alarm_off()
      all(#Siren).switch_off()
  elapsed_time: 2.444 seconds
- command: "재실 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the occupancy sensor is detected."
  devices:
  - Siren
  - Speaker
  - ContactSensor
  - Alarm
  - OccupancySensor
  - MotionSensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == present)
      (#Alarm).alarm_siren()
  elapsed_time: 5.853 seconds
- command: "재실 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the occupancy sensor is detected."
  devices:
  - Siren
  - Speaker
  - ContactSensor
  - Alarm
  - OccupancySensor
  - MotionSensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == present)
      any(#Alarm).alarm_siren()
      any(#Siren).sirenMode_setSirenMode("siren")
  elapsed_time: 1.698 seconds
- command: "에어컨의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner is powered on."
  devices:
  - Siren
  - Speaker
  - Fan
  - Relay
  - AirConditioner
  - AirPurifier
  - Alarm
  - Recorder
  - TemperatureSensor
  - Clock
  - Dehumidifier
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#AirConditioner).switch_switch == on) {
        all(#Alarm).alarm_siren()
        all(#Siren).sirenMode_setSirenMode("siren")
      } else {
        all(#Alarm).alarm_off()
        all(#Siren).switch_off()
      }
      break
  elapsed_time: 2.573 seconds
- command: "에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner is in cooling mode."
  devices:
  - Siren
  - Speaker
  - Fan
  - AirConditioner
  - AirPurifier
  - Alarm
  - Refrigerator
  - Recorder
  - TemperatureSensor
  - Feeder
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirConditioner).airConditionerMode_airConditionerMode == cool) {
        if ((#Alarm).alarm_alarm != siren) {
          (#Alarm).alarm_siren()
        }
      } else {
        if ((#Alarm).alarm_alarm == siren) {
          (#Alarm).alarm_off()
        }
      }
  elapsed_time: 2.670 seconds
- command: "에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner's target temperature is 30 degrees."
  devices:
  - Siren
  - Speaker
  - Fan
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - Recorder
  - TemperatureSensor
  - Clock
  - Dehumidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirConditioner).airConditionerMode_targetTemperature == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.786 seconds
- command: "에어컨이 지원하는 모드를 스피커로 출력해줘"
  command_translated: "Speaker out the modes supported by the air conditioner"
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirPurifier
  - Recorder
  - TemperatureSensor
  - Feeder
  - SoundSensor
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      modes = (#AirConditioner).airConditionerMode_supportedAcModes
      (#Speaker).mediaPlayback_speak(modes)
  elapsed_time: 1.875 seconds
- command: "에어컨을 꺼줘."
  command_translated: "Turn off the air conditioner."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirPurifier
  - Humidifier
  - Recorder
  - Feeder
  - Clock
  - Dehumidifier
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_off()
  elapsed_time: 1.236 seconds
- command: "에어컨을 켜줘."
  command_translated: "Turn on the air conditioner."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirPurifier
  - Humidifier
  - Recorder
  - Feeder
  - Clock
  - Dehumidifier
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_on()
  elapsed_time: 1.268 seconds
- command: "에어컨의 전원을 토글해줘."
  command_translated: "Toggle the power of the air conditioner."
  devices:
  - Speaker
  - Fan
  - Relay
  - AirConditioner
  - AirPurifier
  - Feeder
  - SmartPlug
  - Clock
  - Dehumidifier
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_toggle()
  elapsed_time: 1.335 seconds
- command: "에어컨을 자동 모드로 설정해줘."
  command_translated: "Set the air conditioner to auto mode."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - Recorder
  - Feeder
  - Clock
  - Dehumidifier
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).airConditionerMode_setAirConditionerMode(auto)
  elapsed_time: 1.472 seconds
- command: "에어컨의 목표 온도를 18도로 설정해줘."
  command_translated: "Set the target temperature for the air conditioner to 18 degrees."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - RobotCleaner
  - TemperatureSensor
  - Clock
  - Dehumidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      temp = 18.0
      (#AirConditioner).airConditionerMode_setTemperature(temp)
  elapsed_time: 1.294 seconds
- command: "공기청정기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air purifier is powered on."
  devices:
  - Siren
  - Speaker
  - Fan
  - Relay
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - SmartPlug
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#AirPurifier).switch_switch == on) {
        if (triggered == false) {
          (#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.555 seconds
- command: "공기청정기가 수면 모드면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air purifier is in sleep mode."
  devices:
  - Siren
  - Speaker
  - Fan
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - SoundSensor
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirPurifier).airPurifierFanMode_airPurifierFanMode == "sleep") {
        all(#Alarm).alarm_siren()
      }
  elapsed_time: 1.418 seconds
- command: "공기청정기가 지원하는 모드를 스피커로 출력해줘"
  command_translated: "Speaker out the modes the air purifier supports"
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - Recorder
  - SoundSensor
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      modes = (#AirPurifier).airPurifierFanMode_supportedAirPurifierFanModes
      if (modes != "") {
        (#Speaker).mediaPlayback_speak(modes)
      } else {
        (#Speaker).mediaPlayback_speak("No supported modes information available for the air purifier.")
      }
  elapsed_time: 4.250 seconds
- command: "공기청정기를 꺼줘."
  command_translated: "Turn off the air purifier."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_off()
  elapsed_time: 1.390 seconds
- command: "공기청정기를 켜줘."
  command_translated: "Turn on the air purifier."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - SmokeDetector
  - AirQualityDetector
  - AirPurifier
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_on()
  elapsed_time: 1.464 seconds
- command: "공기청정기의 전원을 토글해줘."
  command_translated: "Toggle the air purifier's power."
  devices:
  - Speaker
  - Fan
  - Relay
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - SmartPlug
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_toggle()
  elapsed_time: 1.158 seconds
- command: "공기청정기의 모드를 자동으로 설정해줘."
  command_translated: "Set the air purifier's mode to automatic."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - AirQualityDetector
  - AirPurifier
  - RobotCleaner
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(auto)
  elapsed_time: 1.354 seconds
- command: "공기질 측정기의 측정 온도가 20도이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren If the temperature measured by the air quality meter is 20 degrees."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - GasMeter
  - Alarm
  - TemperatureSensor
  - Clock
  - Dehumidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).temperatureMeasurement_temperature == 20.0)
      (#Alarm).alarm_siren()
  elapsed_time: 1.631 seconds
- command: "이산화탄소 농도가 800ppm 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the carbon dioxide concentration is above 800 ppm."
  devices:
  - Siren
  - Speaker
  - SmokeDetector
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      co2 = (#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide
      if (co2 > 800) {
        if (triggered == false) {
          triggered = true
          any(#Alarm) ? all(#Alarm).alarm_siren() : all(#Siren).sirenMode_setSirenMode("siren")
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.748 seconds
- command: "공기질 측정기의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the relative humidity on the air quality meter is above 70 percent."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - Humidifier
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirQualityDetector).relativeHumidityMeasurement_humidity > 70.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.348 seconds
- command: "실내 황사 농도가 150마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the indoor yellow dust concentration is 150 micrograms or more."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - SmokeDetector
  - AirQualityDetector
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirQualityDetector).dustSensor_dustLevel >= 150) {
        (#Siren).sirenMode_setSirenMode("siren")
        (#Siren).switch_on()
      }
  elapsed_time: 1.643 seconds
- command: "실내 미세먼지 농도가 35마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if indoor particulate matter concentration is 35 micrograms or higher."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - Window
  - AirQualityDetector
  - Alarm
  - Calculator
  - TemperatureSensor
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#AirQualityDetector).dustSensor_dustLevel >= 35) or ((#AirQualityDetector).dustSensor_fineDustLevel >= 35) or ((#AirQualityDetector).dustSensor_veryFineDustLevel >= 35)) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.992 seconds
- command: "실내 초미세먼지 농도가 15마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the indoor fine particulate matter concentration is 15 micrograms or more."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - Window
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirQualityDetector).dustSensor_fineDustLevel >= 15) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.673 seconds
- command: "총 휘발성 유기 화합물 농도가 0.5ppm 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the total volatile organic compound concentration is greater than 0.5 ppm."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - SmokeDetector
  - AirQualityDetector
  - Alarm
  - LeakSensor
  - Pump
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirQualityDetector).tvocMeasurement_tvocLevel > 0.5) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.775 seconds
- command: "알람이 경광등 모드이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the alarm is in strobe mode."
  devices:
  - Siren
  - Speaker
  - Timer
  - Blind
  - ContactSensor
  - Alarm
  - SoundSensor
  - Clock
  - FallDetector
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).alarm_alarm == "strobe") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.915 seconds
- command: "알람의 볼륨이 높음이면 알람의 사이렌을 울려줘."
  command_translated: "If the volume of the alarm is high, sound the alarm's siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Blind
  - Alarm
  - LeakSensor
  - Recorder
  - SoundSensor
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).alarm_alarmVolume == "high") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.469 seconds
- command: "알람 배터리 상태가 20퍼센트 이하이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the alarm battery is below 20 percent."
  devices:
  - Siren
  - Timer
  - Speaker
  - HumiditySensor
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).battery_battery < 20) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.940 seconds
- command: "알람의 사이렌과 경광등을 모두 켜줘."
  command_translated: "Turn on both the alarm's siren and strobe."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - SmokeDetector
  - Blind
  - Alarm
  - Clock
  - FallDetector
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Alarm).alarm_both()
  elapsed_time: 1.234 seconds
- command: "알람을 꺼줘."
  command_translated: "Turn off the alarm."
  devices:
  - Siren
  - Timer
  - Speaker
  - Blind
  - ContactSensor
  - Alarm
  - MotionSensor
  - GasValve
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_off()
  elapsed_time: 1.423 seconds
- command: "알람의 볼륨을 낮음으로 설정해줘."
  command_translated: "Set the volume of the alarm to low."
  devices:
  - Siren
  - Timer
  - Speaker
  - Blind
  - GasMeter
  - Alarm
  - SoundSensor
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Alarm).alarm_setAlarmVolume("low")
  elapsed_time: 1.724 seconds
- command: "알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Blind
  - Alarm
  - Recorder
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.083 seconds
- command: "알람의 경광등을 켜줘."
  command_translated: "Turn on the alarm's light."
  devices:
  - Siren
  - LightSensor
  - Timer
  - Speaker
  - Relay
  - Light
  - Blind
  - ContactSensor
  - Alarm
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_strobe()
  elapsed_time: 1.092 seconds
- command: "블라인드가 50 퍼센트 이상 열려있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the blinds are more than 50 percent open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - Pump
  - Clock
  - FallDetector
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      blindLevel = (#Blind).blindLevel_blindLevel
      if (blindLevel > 50) {
        if (triggered == false) {
          triggered = true
          all(#Alarm).alarm_siren()
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.472 seconds
- command: "블라인드가 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the blinds are open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - Pump
  - Clock
  - FallDetector
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Blind).blind_blind == open) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.327 seconds
- command: "블라인드를 70 퍼센트로 설정해줘."
  command_translated: "Set the blinds to 70 percent."
  devices:
  - Speaker
  - Curtain
  - Light
  - Blind
  - Humidifier
  - Shade
  - Clock
  - FallDetector
  - Window
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      level = 70
      (#Blind).blindLevel_setBlindLevel(level)
  elapsed_time: 1.234 seconds
- command: "블라인드를 닫아줘."
  command_translated: "Close the blinds."
  devices:
  - Speaker
  - Curtain
  - Blind
  - Buttonx4
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_close()
  elapsed_time: 1.200 seconds
- command: "블라인드를 열어줘."
  command_translated: "Open the blinds."
  devices:
  - Speaker
  - Curtain
  - Blind
  - Humidifier
  - Shade
  - Pump
  - Clock
  - Window
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_open()
  elapsed_time: 1.059 seconds
- command: "블라인드 움직임을 멈춰줘."
  command_translated: "Stop blind movement."
  devices:
  - Timer
  - Speaker
  - Curtain
  - Relay
  - Blind
  - ContactSensor
  - MotionSensor
  - Clock
  - FallDetector
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_pause()
  elapsed_time: 1.253 seconds
- command: "버튼이 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the button is pressed."
  devices:
  - Siren
  - Timer
  - Speaker
  - Button
  - ContactSensor
  - Alarm
  - MotionSensor
  - SoundSensor
  - Clock
  - FallDetector
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Button).button_button == pushed) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.268 seconds
- command: "버튼의 개수가 4개 이상이면 알람의 사이렌을 울려줘."
  command_translated: "If there are more than four buttons, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Button
  - Blind
  - Alarm
  - ContactSensor
  - SoundSensor
  - Clock
  - FallDetector
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Button).button_numberOfButtons > 4) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.617 seconds
- command: "버튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the button's supported states via the speaker."
  devices:
  - Speaker
  - Button
  - ContactSensor
  - Recorder
  - Pump
  - SoundSensor
  - Clock
  - Window
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      supportedStates = (#Button).button_supportedButtonValues
      (#Speaker).mediaPlayback_speak(supportedStates)
  elapsed_time: 1.325 seconds
- command: "버튼1이 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if button 1 is pressed."
  devices:
  - Siren
  - Speaker
  - Timer
  - Button
  - ContactSensor
  - Alarm
  - MotionSensor
  - SoundSensor
  - Clock
  - Window
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Buttonx4).buttonx4_button1 == pushed) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.854 seconds
- command: "버튼2가 눌린 상태면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if button 2 is pressed."
  devices:
  - Siren
  - Timer
  - Speaker
  - Button
  - Alarm
  - MotionSensor
  - SoundSensor
  - Clock
  - FallDetector
  - Window
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Buttonx4).buttonx4_button2 == pushed) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          all(#Siren).sirenMode_setSirenMode("siren")
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.116 seconds
- command: "버튼3이 두 번 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "if button 3 is pressed twice, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Button
  - Alarm
  - Recorder
  - SoundSensor
  - Clock
  - FallDetector
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Buttonx4).buttonx4_button3 == pushed_2x) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 3.056 seconds
- command: "버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘."
  command_translated: "if button 4 is swiped up, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Button
  - ContactSensor
  - Alarm
  - MotionSensor
  - SoundSensor
  - Clock
  - FallDetector
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Buttonx4).buttonx4_button4 == swipe_up) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.918 seconds
- command: "버튼 개수가 4개면 알람의 사이렌을 울려줘."
  command_translated: "If the number of buttons is 4, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Button
  - Blind
  - Alarm
  - ContactSensor
  - MotionSensor
  - SoundSensor
  - Clock
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Button).button_numberOfButtons == 4) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.314 seconds
- command: "4개짜리 버튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the button x4 via the speaker."
  devices:
  - Speaker
  - Timer
  - Siren
  - Button
  - ContactSensor
  - Recorder
  - SoundSensor
  - Clock
  - Window
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      supportedStates = (#Buttonx4).buttonx4_supportedButtonValues
      if (supportedStates != "") {
        (#Speaker).mediaPlayback_speak(supportedStates)
      } else {
        (#Speaker).mediaPlayback_speak("No supported button states available.")
      }
  elapsed_time: 2.080 seconds
- command: "5와 3을 더해줘."
  command_translated: "Add 5 and 3."
  devices:
  - Siren
  - Speaker
  - Relay
  - Alarm
  - Calculator
  - Feeder
  - Clock
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_add(5, 3)
  elapsed_time: 1.197 seconds
- command: "10을 2로 나눠줘."
  command_translated: "Divide 10 by 2."
  devices:
  - Speaker
  - Fan
  - Relay
  - Calculator
  - Shade
  - Feeder
  - Clock
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_div(10, 2)
  elapsed_time: 1.344 seconds
- command: "10을 3으로 나눈 나머지를 구해."
  command_translated: "Find the remainder of 10 divided by 3."
  devices:
  - Speaker
  - Relay
  - Calculator
  - Shade
  - Feeder
  - Clock
  - FallDetector
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_mod(10, 3)
  elapsed_time: 1.532 seconds
- command: "7과 8을 곱해줘."
  command_translated: "Multiply 7 and 8."
  devices:
  - Siren
  - Speaker
  - Fan
  - Relay
  - Calculator
  - Feeder
  - Clock
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_mul(7, 8)
  elapsed_time: 1.295 seconds
- command: "15에서 4를 빼줘."
  command_translated: "Subtract 4 from 15."
  devices:
  - Timer
  - Speaker
  - Curtain
  - Button
  - Calculator
  - Feeder
  - Clock
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = 15
      result = result - 4
  elapsed_time: 1.675 seconds
- command: "카메라의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the camera is powered on."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - MotionSensor
  - Camera
  - Recorder
  - SmartPlug
  - Clock
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Camera).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.273 seconds
- command: "가장 최근에 찍은 사진을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘."
  command_translated: "Send an email with the most recent photo as an attachment to 'test@example.com' with the subject line \"Photo\" and the content \"This is a photo\"."
  devices:
  - Speaker
  - LightSensor
  - EmailProvider
  - DoorLock
  - ContactSensor
  - Camera
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      img = (#Camera).camera_image
      (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "Photo", "This is a photo", img)
  elapsed_time: 1.745 seconds
- command: "가장 최근에 찍은 동영상을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘"
  command_translated: "Send an email with the most recent video as an attachment to 'test@example.com' with the subject line \"Video\" and the content \"This is a video."
  devices:
  - Speaker
  - EmailProvider
  - DoorLock
  - Camera
  - Recorder
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      file = (#Camera).camera_video
      if (file != null) {
        (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "Video", "This is a video.", file)
      } else {
        (#Speaker).mediaPlayback_speak("No recent video available to send.")
      }
  elapsed_time: 2.412 seconds
- command: "카메라를 꺼줘."
  command_translated: "Turn off the camera."
  devices:
  - Timer
  - Speaker
  - Blind
  - MotionSensor
  - Camera
  - GasValve
  - Recorder
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_off()
  elapsed_time: 1.192 seconds
- command: "카메라를 켜줘."
  command_translated: "Turn on the camera."
  devices:
  - Timer
  - Speaker
  - Relay
  - Blind
  - Camera
  - Recorder
  - Irrigator
  - Clock
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_on()
  elapsed_time: 1.188 seconds
- command: "카메라의 전원을 토글해줘."
  command_translated: "Toggle the camera's power."
  devices:
  - Speaker
  - Relay
  - Blind
  - Button
  - Camera
  - SmartPlug
  - Switch
  - Clock
  - Charger
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_toggle()
  elapsed_time: 1.207 seconds
- command: "카메라로 사진을 찍어줘."
  command_translated: "Take a photo with the camera."
  devices:
  - Timer
  - Speaker
  - Blind
  - ContactSensor
  - Camera
  - Recorder
  - Clock
  - FallDetector
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).camera_take()
  elapsed_time: 1.271 seconds
- command: "카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘."
  command_translated: "Take a time-lapse video with the camera at speed 2 for 10 seconds."
  devices:
  - Timer
  - Speaker
  - Fan
  - Camera
  - Recorder
  - Clock
  - Charger
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).camera_takeTimelapse(10.0, 2.0)
  elapsed_time: 1.276 seconds
- command: "충전기의 전압이 230볼트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the charger's voltage is above 230 volts."
  devices:
  - Siren
  - Speaker
  - Relay
  - ContactSensor
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - SmartPlug
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Charger).voltageMeasurement_voltage > 230.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.557 seconds
- command: "충전기의 상태가 충전 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the charger's status is charging."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Charger).chargingState_chargingState == "charging") {
        if (triggered == false) {
          (#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.929 seconds
- command: "충전기의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the charger is drawing more than 10 amps."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - Pump
  - SoundSensor
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Charger).currentMeasurement_current > 10.0) {
        (#Alarm).alarm_siren()
        (#Siren).sirenMode_setSirenMode("siren")
      } else {
        (#Alarm).alarm_off()
        (#Siren).switch_off()
      }
      break
  elapsed_time: 1.794 seconds
- command: "충전기가 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Annonce the status supported by the charger via the speaker."
  devices:
  - Speaker
  - Relay
  - ContactSensor
  - Recorder
  - TemperatureSensor
  - Pump
  - SoundSensor
  - Clock
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      status = (#Charger).chargingState_supportedChargingStates
      (#Speaker).mediaPlayback_speak(status)
  elapsed_time: 1.273 seconds
- command: "오늘 날짜가 2025년 5월 12일이면 알람의 사이렌을 울려줘."
  command_translated: "If today's date is May 12, 2025, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - LeakSensor
  - MenuProvider
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_year == 2025 and (#Clock).clock_month == 5 and (#Clock).clock_date == 20250512) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.850 seconds
- command: "현재 시간이 2025년 5월 12일 오후 3시 15분이면 알람의 사이렌을 울려줘."
  command_translated: "If the current time is 3:15 PM on May 12, 2025, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Alarm
  - Camera
  - TemperatureSensor
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: "15 15 12 5 *"
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.268 seconds
- command: "오늘이 20일이면 알람의 사이렌을 울려줘"
  command_translated: "If today is the 20th, sound the alarm siren"
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - MenuProvider
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_day == 20) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.473 seconds
- command: "현재 시간이 오후 3시이면 알람의 사이렌을 울려줘."
  command_translated: "If the current time is 3pm, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Alarm
  - Camera
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Clock).clock_hour == 15) {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 1.471 seconds
- command: "오늘이 공휴일이면 알람의 사이렌을 울려줘."
  command_translated: "If today is a holiday, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Alarm
  - MenuProvider
  - SoundSensor
  - Clock
  - FallDetector
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_isHoliday == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.395 seconds
- command: "지금이 30분이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 30 minutes from now, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Alarm
  - Calculator
  - LeakSensor
  - Recorder
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      targetTime := (#Clock).clock_timestamp + 1800000
      if ((#Clock).clock_timestamp >= targetTime) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.238 seconds
- command: "지금이 5월이면 알람의 사이렌을 울려줘."
  command_translated: "If it's May, sound the alarm siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - LeakSensor
  - Recorder
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_month == 5) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.790 seconds
- command: "지금이 40초이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 40 seconds now, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Alarm
  - LeakSensor
  - Camera
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Clock).clock_second == 40) {
        (#Alarm).alarm_siren()
      } else {
        break
      }
  elapsed_time: 2.265 seconds
- command: "지금이 오후 3시 15분이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 3:15pm, blare the siren on the alarm."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Blind
  - Alarm
  - Recorder
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: "15 15 * * *"
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.291 seconds
- command: "현재 Unix timestamp가 1747031637.23이면 알람의 사이렌을 울려줘."
  command_translated: "If the current Unix timestamp is 1747031637.23, sound the alarm siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Alarm
  - Camera
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_timestamp == 1747031637.23) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 2.484 seconds
- command: "오늘이 금요일이면 알람의 사이렌을 울려줘."
  command_translated: "If today is Friday, sound the alarm siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - MenuProvider
  - Recorder
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_weekday == friday) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.930 seconds
- command: "올해가 2025년이면 알람의 사이렌을 울려줘."
  command_translated: "If the year is 2025, sound the alarm siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - SmokeDetector
  - Alarm
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_year == 2025) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.888 seconds
- command: "1시간 20분 30초 뒤에 알람의 사이렌을 울려줘"
  command_translated: "Sound the alarm's siren in 1 hour, 20 minutes, 30 seconds"
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - ContactSensor
  - Alarm
  - Recorder
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_set("AlarmSirenTimer", 4830)
      (#Timer).timer_start("AlarmSirenTimer")
      wait until((#Timer).timer_isSet("AlarmSirenTimer") == false)
      (#Alarm).alarm_siren()
  elapsed_time: 1.913 seconds
- command: "접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the contact sensor is in contact."
  devices:
  - Siren
  - Speaker
  - SmokeDetector
  - ContactSensor
  - Alarm
  - LeakSensor
  - OccupancySensor
  - MotionSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#ContactSensor).contactSensor_contact == closed) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.516 seconds
- command: "커튼이 열림 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the curtain is open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Curtain).curtain_curtain == open) {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 1.373 seconds
- command: "커튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the curtain via the speaker."
  devices:
  - Speaker
  - Siren
  - Curtain
  - Relay
  - Blind
  - Recorder
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      states = "closed, closing, open, opening, partially, paused, unknown"
      message = "The states supported by the curtain are " + states + "."
      (#Speaker).mediaPlayback_speak(message)
  elapsed_time: 2.573 seconds
- command: "커튼을 닫아줘."
  command_translated: "Close the curtain."
  devices:
  - Speaker
  - Curtain
  - Blind
  - Humidifier
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).curtain_close()
  elapsed_time: 1.213 seconds
- command: "커튼을 열어줘."
  command_translated: "Open the curtain."
  devices:
  - Speaker
  - Curtain
  - Blind
  - Humidifier
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).curtain_open()
  elapsed_time: 1.140 seconds
- command: "커튼의 움직임을 멈춰줘."
  command_translated: "Stop the curtain from moving."
  devices:
  - Timer
  - Speaker
  - Curtain
  - Blind
  - Humidifier
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).curtain_pause()
  elapsed_time: 1.096 seconds
- command: "제습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the dehumidifier is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - HumiditySensor
  - AirPurifier
  - Alarm
  - Refrigerator
  - SoundSensor
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dehumidifier).switch_switch == on) {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
  elapsed_time: 1.735 seconds
- command: "제습기의 모드가 제습 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the dehumidifier is in dehumidifying mode."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - AirPurifier
  - Alarm
  - Refrigerator
  - LeakSensor
  - SoilMoistureSensor
  - SoundSensor
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Dehumidifier).dehumidifierMode_dehumidifierMode == dehumidifying) {
        if (triggered == false) {
          if (any(#Alarm)) {
            all(#Alarm).alarm_siren()
          } else if (any(#Siren)) {
            all(#Siren).sirenMode_setSirenMode("siren")
            all(#Siren).switch_on()
          }
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 5.142 seconds
- command: "제습기를 꺼줘."
  command_translated: "Turn off the dehumidifier."
  devices:
  - Speaker
  - HumiditySensor
  - Window
  - AirPurifier
  - Refrigerator
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).switch_off()
  elapsed_time: 1.195 seconds
- command: "제습기를 켜줘."
  command_translated: "Turn on the dehumidifier."
  devices:
  - Speaker
  - HumiditySensor
  - Window
  - AirPurifier
  - Refrigerator
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).switch_on()
  elapsed_time: 1.295 seconds
- command: "제습기의 전원을 토글해줘."
  command_translated: "Toggle the dehumidifier's power."
  devices:
  - Speaker
  - Relay
  - AirPurifier
  - Blind
  - Refrigerator
  - Charger
  - SmartPlug
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).switch_toggle()
  elapsed_time: 1.250 seconds
- command: "제습기를 냉각 모드로 설정해줘."
  command_translated: "Set the dehumidifier to cooling mode."
  devices:
  - Speaker
  - AirConditioner
  - Window
  - AirPurifier
  - Refrigerator
  - LeakSensor
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode("cooling")
  elapsed_time: 1.392 seconds
- command: "식기세척기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the dishwasher is powered on."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - Dishwasher
  - Irrigator
  - SmartPlug
  - Clock
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dishwasher).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 2.672 seconds
- command: "식기세척기의 모드가 에코 모드면 알람의 사이렌을 울려줘."
  command_translated: "If the dishwasher is in Eco mode, the alarm will sound a siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - SmokeDetector
  - Alarm
  - LeakSensor
  - Refrigerator
  - Dishwasher
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Dishwasher).dishwasherMode_dishwasherMode == eco) {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
      break
  elapsed_time: 2.316 seconds
- command: "식기세척기를 꺼줘."
  command_translated: "Turn off the dishwasher."
  devices:
  - Timer
  - Speaker
  - Refrigerator
  - Dishwasher
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).switch_off()
  elapsed_time: 1.088 seconds
- command: "식기세척기를 켜줘."
  command_translated: "Turn on the dishwasher."
  devices:
  - Speaker
  - Refrigerator
  - Dishwasher
  - RobotCleaner
  - Feeder
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).switch_on()
  elapsed_time: 1.106 seconds
- command: "식기세척기의 전원을 토글해줘."
  command_translated: "Toggle the dishwasher's power."
  devices:
  - Speaker
  - Dehumidifier
  - Relay
  - Blind
  - Dishwasher
  - SmartPlug
  - Switch
  - Clock
  - Charger
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).switch_toggle()
  elapsed_time: 1.149 seconds
- command: "식기세척기를 자동 모드로 설정해줘."
  command_translated: "Set the dishwasher to automatic mode."
  devices:
  - Speaker
  - Blind
  - Refrigerator
  - Humidifier
  - Dishwasher
  - Feeder
  - Irrigator
  - Clock
  - Dehumidifier
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).dishwasherMode_setDishwasherMode(auto)
  elapsed_time: 1.282 seconds
- command: "도어락이 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the door lock is open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - GasValve
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#DoorLock).doorControl_door == open) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          all(#Siren).sirenMode_setSirenMode("siren")
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.152 seconds
- command: "도어락을 닫아줘."
  command_translated: "Close the door lock."
  devices:
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#DoorLock).doorControl_close()
  elapsed_time: 1.178 seconds
- command: "도어락을 열어줘."
  command_translated: "Open the door lock."
  devices:
  - Speaker
  - Curtain
  - Relay
  - DoorLock
  - Blind
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#DoorLock).doorControl_open()
  elapsed_time: 1.033 seconds
- command: "이메일을 'test@example.com' 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘."
  command_translated: "Send an email to 'test@example.com' with the subject line \"Alert\" and the content \"This is an emergency\"."
  devices:
  - Siren
  - Speaker
  - EmailProvider
  - DoorLock
  - ContactSensor
  - GasValve
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#EmailProvider).emailProvider_sendMail("test@example.com", "Alert", "This is an emergency")
  elapsed_time: 1.287 seconds
- command: "선풍기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the fan is powered on."
  devices:
  - Siren
  - Speaker
  - Timer
  - Fan
  - Relay
  - Alarm
  - SoundSensor
  - SmartPlug
  - Clock
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Fan).switch_switch == on) {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
      break
  elapsed_time: 1.831 seconds
- command: "선풍기의 속도가 2000RPM 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the fan speed is above 2000 RPM."
  devices:
  - Siren
  - Speaker
  - Timer
  - Fan
  - SmokeDetector
  - AirPurifier
  - Alarm
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Fan).fanControl_fanSpeed > 2000) {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 2.125 seconds
- command: "선풍기의 속도를 1500RPM으로 설정해줘."
  command_translated: "Set the speed of the fan to 1500 RPM."
  devices:
  - Speaker
  - Fan
  - Dehumidifier
  - Curtain
  - AirPurifier
  - Humidifier
  - Clock
  - Charger
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).fanControl_setFanSpeed(1500)
  elapsed_time: 1.180 seconds
- command: "선풍기의 속도를 80퍼센트로 설정해줘."
  command_translated: "Set the speed of the fan to 80 percent."
  devices:
  - Speaker
  - Fan
  - Dehumidifier
  - Curtain
  - Window
  - AirPurifier
  - Clock
  - Charger
  - Humidifier
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      speed = 80
      (#Fan).fanControl_setPercent(speed)
  elapsed_time: 1.208 seconds
- command: "선풍기를 꺼줘."
  command_translated: "Turn off the fan."
  devices:
  - Timer
  - Speaker
  - Fan
  - Window
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).switch_off()
  elapsed_time: 1.193 seconds
- command: "선풍기를 켜줘."
  command_translated: "Turn on the fan."
  devices:
  - Timer
  - Speaker
  - Fan
  - Relay
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).switch_on()
  elapsed_time: 1.116 seconds
- command: "선풍기의 전원을 토글해줘."
  command_translated: "Toggle the fan's power."
  devices:
  - Speaker
  - Fan
  - Relay
  - Dehumidifier
  - Blind
  - Switch
  - SmartPlug
  - Clock
  - Charger
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).switch_toggle()
  elapsed_time: 1.443 seconds
- command: "사료 공급기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the feeder is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - AirPurifier
  - Alarm
  - Feeder
  - Recorder
  - Irrigator
  - SmartPlug
  - Clock
  - Charger
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Feeder).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.465 seconds
- command: "사료 공급기의 상태가 급식 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the feeder's status is feeding."
  devices:
  - Siren
  - Speaker
  - AirConditioner
  - Alarm
  - LeakSensor
  - RobotCleaner
  - Feeder
  - Recorder
  - Irrigator
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Feeder).feederOperatingState_feederOperatingState == feeding) {
        if (triggered == false) {
          triggered = true
          (#Alarm).alarm_siren()
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.361 seconds
- command: "사료 공급기를 꺼줘."
  command_translated: "Turn off the feeder."
  devices:
  - Speaker
  - Relay
  - AirPurifier
  - GasValve
  - Feeder
  - Recorder
  - Pump
  - Clock
  - Dehumidifier
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_off()
  elapsed_time: 1.265 seconds
- command: "사료 공급기를 켜줘."
  command_translated: "Turn on the feeder."
  devices:
  - Speaker
  - Relay
  - AirPurifier
  - Humidifier
  - Feeder
  - Recorder
  - Pump
  - Irrigator
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_on()
  elapsed_time: 1.098 seconds
- command: "사료 공급기의 전원을 토글해줘."
  command_translated: "Toggle the power of the feeder."
  devices:
  - Speaker
  - Relay
  - AirConditioner
  - AirPurifier
  - Feeder
  - Recorder
  - SmartPlug
  - Clock
  - Charger
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_toggle()
  elapsed_time: 1.149 seconds
- command: "사료 공급기의 사료 공급량을 100그램으로 설정해줘."
  command_translated: "Set the feeder's feed amount to 100 grams."
  devices:
  - Speaker
  - AirConditioner
  - AirPurifier
  - Blind
  - Humidifier
  - MenuProvider
  - Feeder
  - Recorder
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).feederPortion_setFeedPortion(100, grams)
  elapsed_time: 1.443 seconds
- command: "사료 공급기의 사료 공급을 시작해줘."
  command_translated: "Start feeding the feeder."
  devices:
  - Speaker
  - AirConditioner
  - AirPurifier
  - Humidifier
  - Feeder
  - Recorder
  - Pump
  - Irrigator
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).feederOperatingState_startFeeding()
  elapsed_time: 1.177 seconds
- command: "가스 미터의 가스 사용량이 500kWh 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas meter shows gas usage of 500 kWh or more."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - GasMeter
  - Alarm
  - LeakSensor
  - GasValve
  - Pump
  - SoundSensor
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#GasMeter).gasMeter_gasMeter >= 500.0)
      (#Alarm).alarm_siren()
  elapsed_time: 1.794 seconds
- command: "가스 미터의 가스 발열량이 1000kcal 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas meter reads more than 1000 kcal of gas."
  devices:
  - Siren
  - Timer
  - Speaker
  - HumiditySensor
  - SmokeDetector
  - GasMeter
  - Alarm
  - LeakSensor
  - GasValve
  - TemperatureSensor
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#GasMeter).gasMeter_gasMeterCalorific > 1000.0) {
        (#Alarm).alarm_siren()
        (#Siren).sirenMode_setSirenMode("siren")
      }
  elapsed_time: 2.104 seconds
- command: "가스 미터의 누적 가스 사용 시간이 10000초 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the siren of the alarm if the gas meter has a cumulative gas usage time of 10000 seconds or more."
  devices:
  - Siren
  - Timer
  - Speaker
  - HumiditySensor
  - GasMeter
  - Alarm
  - LeakSensor
  - Camera
  - GasValve
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#GasMeter).gasMeter_gasMeterTime >= 10000.0) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.050 seconds
- command: "가스 미터의 가스 사용량이 20세제곱미터 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas meter reads more than 20 cubic meters of gas."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - SmokeDetector
  - GasMeter
  - Alarm
  - LeakSensor
  - GasValve
  - TemperatureSensor
  - Pump
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#GasMeter).gasMeter_gasMeterVolume > 20.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.389 seconds
- command: "가스 밸브가 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas valve is open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - GasMeter
  - Alarm
  - GasValve
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#GasValve).valve_valve == open) {
        (#Alarm).alarm_siren()
        (#Siren).sirenMode_setSirenMode(siren)
        (#Siren).switch_on()
      } else {
        (#Alarm).alarm_off()
        (#Siren).switch_off()
      }
      break
  elapsed_time: 2.306 seconds
- command: "가스 밸브를 닫아줘."
  command_translated: "Close the gas valve."
  devices:
  - Speaker
  - Relay
  - AirPurifier
  - GasMeter
  - Humidifier
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#GasValve).valve_close()
  elapsed_time: 1.102 seconds
- command: "가스 밸브를 열어줘."
  command_translated: "Open the gas valve."
  devices:
  - Speaker
  - Relay
  - AirPurifier
  - GasMeter
  - Humidifier
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#GasValve).valve_open()
  elapsed_time: 3.650 seconds
- command: "가스 밸브의 가스 사용량이 1000kWh 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve's gas usage is over 1000 kWh."
  devices:
  - Siren
  - Speaker
  - SmokeDetector
  - GasMeter
  - Alarm
  - LeakSensor
  - GasValve
  - Pump
  - SoundSensor
  - Clock
  - Charger
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      gasUsage = (#GasValve).gasMeter_gasMeter
      if ((gasUsage > 1000.0) and (triggered == false)) {
        (#Siren).sirenMode_setSirenMode("siren")
        (#Siren).switch_on()
        triggered = true
      } else if (gasUsage <= 1000.0) {
        triggered = false
        (#Siren).switch_off()
      }
      break
  elapsed_time: 3.645 seconds
- command: "가스 밸브의 가스 발열량이 500kcal 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve has a gas calorific value of 500 kcal or more."
  devices:
  - Siren
  - Timer
  - Speaker
  - Fan
  - SmokeDetector
  - GasMeter
  - Alarm
  - LeakSensor
  - GasValve
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#GasValve).gasMeter_gasMeterCalorific >= 500.0) {
        (#Siren).sirenMode_setSirenMode("siren")
        (#Siren).switch_on()
      }
  elapsed_time: 1.704 seconds
- command: "가스 밸브의 누적 가스 사용 시간이 5000초 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve has a cumulative gas usage time of 5000 seconds or more."
  devices:
  - Siren
  - Timer
  - Speaker
  - GasMeter
  - Alarm
  - LeakSensor
  - Camera
  - GasValve
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#GasValve).gasMeter_gasMeterTime >= 5000.0) {
        if (triggered == false) {
          (#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.262 seconds
- command: "가스 밸브의 가스 사용량이 34세제곱미터 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas valve is using more than 34 cubic meters of gas."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - SmokeDetector
  - GasMeter
  - Alarm
  - LeakSensor
  - GasValve
  - Pump
  - SoundSensor
  - Clock
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#GasValve).gasMeter_gasMeterVolume > 34.0) {
        (#Alarm).alarm_siren()
        (#Siren).sirenMode_setSirenMode("siren")
      }
  elapsed_time: 1.787 seconds
- command: "가습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the humidifier is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Humidifier).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.399 seconds
- command: "가습기의 모드가 자동이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the humidifier's mode is Auto."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Humidifier).humidifierMode_humidifierMode == auto) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.551 seconds
- command: "가습기를 꺼줘."
  command_translated: "Turn off the humidifier."
  devices:
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - SoilMoistureSensor
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_off()
  elapsed_time: 1.128 seconds
- command: "가습기를 켜줘."
  command_translated: "Turn on the humidifier."
  devices:
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - SoilMoistureSensor
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_on()
  elapsed_time: 1.115 seconds
- command: "가습기의 전원을 토글해줘."
  command_translated: "Toggle the humidifier's power."
  devices:
  - Speaker
  - Relay
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_toggle()
  elapsed_time: 1.158 seconds
- command: "가습기를 강 모드로 설정해줘."
  command_translated: "Set the humidifier to strong mode."
  devices:
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - AirPurifier
  - Blind
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - Humidifier
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).humidifierMode_setHumidifierMode(high)
  elapsed_time: 1.278 seconds
- command: "습도 센서의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the humidity sensor reads a relative humidity of 70 percent or higher."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - Alarm
  - Humidifier
  - LeakSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity
      if (humidity >= 70.0) {
        if (triggered == false) {
          (#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.913 seconds
- command: "관개 장치의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - Alarm
  - Refrigerator
  - LeakSensor
  - Pump
  - Irrigator
  - SmartPlug
  - Clock
  - Charger
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Irrigator).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.357 seconds
- command: "관개 장치의 급수량이 3리터이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator has 3 liters of water."
  devices:
  - Siren
  - Speaker
  - Alarm
  - LeakSensor
  - Refrigerator
  - Feeder
  - SoilMoistureSensor
  - Pump
  - Irrigator
  - Clock
  - FallDetector
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Irrigator).irrigatorPortion_waterPortion == 3.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.342 seconds
- command: "관개 장치의 상태가 급수 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator's status is watering."
  devices:
  - Siren
  - Speaker
  - Alarm
  - LeakSensor
  - Refrigerator
  - Feeder
  - SoilMoistureSensor
  - Pump
  - Irrigator
  - Clock
  - FallDetector
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Irrigator).irrigatorOperatingState_irrigatorOperatingState == "watering") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 2.065 seconds
- command: "관개 장치를 꺼줘."
  command_translated: "Turn off the irrigator."
  devices:
  - Speaker
  - Refrigerator
  - LeakSensor
  - Feeder
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_off()
  elapsed_time: 1.265 seconds
- command: "관개 장치를 켜줘."
  command_translated: "Turn on the irrigator."
  devices:
  - Speaker
  - Relay
  - Refrigerator
  - LeakSensor
  - Feeder
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_on()
  elapsed_time: 1.260 seconds
- command: "관개 장치의 전원을 토글해줘."
  command_translated: "Toggle the power of the irrigator."
  devices:
  - Speaker
  - Relay
  - Refrigerator
  - Feeder
  - Pump
  - Irrigator
  - SmartPlug
  - Clock
  - Charger
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_toggle()
  elapsed_time: 1.337 seconds
- command: "관개 장치의 급수량을 5리터로 설정해줘."
  command_translated: "Set the water supply of the irrigator to 5 liters."
  devices:
  - Speaker
  - AirPurifier
  - Refrigerator
  - LeakSensor
  - Feeder
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).irrigatorPortion_setWaterPortion(5.0, liters)
  elapsed_time: 1.690 seconds
- command: "관개 장치의 급수를 시작해줘."
  command_translated: "Start watering the irrigator."
  devices:
  - Speaker
  - AirPurifier
  - Refrigerator
  - LeakSensor
  - Feeder
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).irrigatorOperatingState_startWatering()
  elapsed_time: 1.402 seconds
- command: "누수가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a leak is detected."
  devices:
  - Siren
  - Speaker
  - SmokeDetector
  - ContactSensor
  - Alarm
  - LeakSensor
  - MotionSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#LeakSensor).leakSensor_leakage == detected)
      any(#Alarm).alarm_siren()
      if (any(#Alarm) == false) {
        any(#Siren).sirenMode_setSirenMode(siren)
      }
  elapsed_time: 1.840 seconds
- command: "조명이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the light is on."
  devices:
  - Siren
  - LightSensor
  - Timer
  - Speaker
  - Relay
  - Light
  - Blind
  - Alarm
  - MotionSensor
  - Clock
  - FallDetector
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.350 seconds
- command: "조명의 색조가 30이면 알람의 사이렌을 울려줘."
  command_translated: "If the light has a hue of 30, sound the alarm's siren."
  devices:
  - Siren
  - LightSensor
  - Timer
  - Speaker
  - Light
  - Blind
  - Alarm
  - LeakSensor
  - SoundSensor
  - Clock
  - FallDetector
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).colorControl_hue == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.583 seconds
- command: "조명의 채도가 30이면 알람의 사이렌을 울려줘."
  command_translated: "If the light has a saturation of 30, sound the alarm's siren."
  devices:
  - Siren
  - LightSensor
  - Timer
  - Speaker
  - SmokeDetector
  - Light
  - Blind
  - Alarm
  - LeakSensor
  - SoundSensor
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).colorControl_saturation == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.550 seconds
- command: "조명 밝기가 100이면 알람의 사이렌을 울려줘"
  command_translated: "Sound the alarm's siren if the light brightness is 100"
  devices:
  - Siren
  - LightSensor
  - Speaker
  - SmokeDetector
  - Light
  - Blind
  - Alarm
  - SoundSensor
  - Clock
  - FallDetector
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).switchLevel_level == 100) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.962 seconds
- command: "조명을 빨간색으로 설정해줘."
  command_translated: "Set the light to red."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Relay
  - Light
  - Blind
  - Alarm
  - Clock
  - WeatherProvider
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).colorControl_setColor("255|0|0")
  elapsed_time: 1.438 seconds
- command: "조명의 색조를 70으로 설정해줘."
  command_translated: "Set the hue of the light to 70."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Light
  - Blind
  - Alarm
  - Humidifier
  - Clock
  - WeatherProvider
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      hueValue = 70.0
      (#Light).colorControl_setHue(hueValue)
  elapsed_time: 1.553 seconds
- command: "조명의 채도를 90으로 설정해줘."
  command_translated: "Set the saturation of the light to 90."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Light
  - Blind
  - Alarm
  - Humidifier
  - Clock
  - WeatherProvider
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      level = 90
      (#Light).colorControl_setSaturation(level)
  elapsed_time: 1.343 seconds
- command: "5의 속도로 조명의 밝기를 80으로 설정해줘."
  command_translated: "Set the brightness of the light to 80 with a speed of 5."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Fan
  - Light
  - Blind
  - Alarm
  - Clock
  - Charger
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      level = 80
      rate = 5
      (#Light).switchLevel_setLevel(level, rate)
  elapsed_time: 1.480 seconds
- command: "조명의 경고 모드를 켜줘."
  command_translated: "Turn on alert mode for lights."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Relay
  - Light
  - Blind
  - Alarm
  - Clock
  - FallDetector
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Light).switchLevel_alert()
  elapsed_time: 1.316 seconds
- command: "조명을 꺼줘."
  command_translated: "Turn off the lights."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Relay
  - Light
  - Blind
  - Alarm
  - GasValve
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Light).switch_off()
  elapsed_time: 1.193 seconds
- command: "조명을 켜줘."
  command_translated: "Turn on the lights."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Relay
  - Light
  - Blind
  - Alarm
  - Clock
  - WeatherProvider
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_on()
  elapsed_time: 1.125 seconds
- command: "조명의 전원을 토글해줘."
  command_translated: "Toggle the power of the light."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Relay
  - Light
  - Alarm
  - SmartPlug
  - Switch
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_toggle()
  elapsed_time: 1.191 seconds
- command: "조도 센서의 밝기 값이 500룩스 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the light sensor's brightness value is above 500 lux."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - HumiditySensor
  - Light
  - Alarm
  - LeakSensor
  - OccupancySensor
  - MotionSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#LightSensor).lightLevel_light > 500.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 2.399 seconds
- command: "오늘 학생식당 점심 메뉴를 스피커로 출력해줘."
  command_translated: "Announce today's 학생식당 lunch menu via the speaker."
  devices:
  - Speaker
  - Timer
  - OccupancySensor
  - MenuProvider
  - Dishwasher
  - Feeder
  - Recorder
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_menu("오늘 학생식당 점심")
      (#Speaker).mediaPlayback_speak(menu)
  elapsed_time: 1.721 seconds
- command: "오늘의 메뉴를 스피커로 출력해줘."
  command_translated: "Announce today's menu via the speaker."
  devices:
  - Speaker
  - Timer
  - Blind
  - MenuProvider
  - Recorder
  - Feeder
  - Clock
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_todayMenu()
      (#Speaker).mediaPlayback_speak(menu)
  elapsed_time: 2.379 seconds
- command: "오늘의 식당을 스피커로 출력해줘."
  command_translated: "Announce today's restaurant via the speaker."
  devices:
  - Speaker
  - Timer
  - Blind
  - MenuProvider
  - Recorder
  - Feeder
  - Pump
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_todayPlace()
      (#Speaker).mediaPlayback_speak(menu)
  elapsed_time: 1.305 seconds
- command: "모션 센서가 활성 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the motion sensor is active."
  devices:
  - Siren
  - Speaker
  - ContactSensor
  - Alarm
  - MotionSensor
  - OccupancySensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#MotionSensor).motionSensor_motion == active) {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 2.274 seconds
- command: "움직임이 감지되고 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if motion is detected."
  devices:
  - Siren
  - Speaker
  - SmokeDetector
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#MotionSensor).motionSensor_motion == active) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.053 seconds
- command: "존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a presence sensor is detected."
  devices:
  - Siren
  - Speaker
  - ContactSensor
  - Alarm
  - MotionSensor
  - OccupancySensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#PresenceSensor).presenceSensor_presence == present) {
        if (triggered == false) {
          (#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 11.520 seconds
- command: "펌프의 현재 동작 모드가 최대이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the pump's current operating mode is maximum."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - Pump
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Pump).pumpOperationMode_currentOperationMode == "maximum") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.446 seconds
- command: "펌프의 설정 동작 모드가 기본이면 알람의 사이렌을 울려줘."
  command_translated: "If the pump's set operation mode is default, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Alarm
  - LeakSensor
  - Pump
  - SoundSensor
  - Irrigator
  - Clock
  - FallDetector
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Pump).pumpOperationMode_operationMode == "normal") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.630 seconds
- command: "펌프의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the pump is powered on."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - LeakSensor
  - Pump
  - Irrigator
  - SmartPlug
  - Clock
  - Charger
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Pump).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.441 seconds
- command: "펌프가 지원하는 모드를 스피커로 출력해줘."
  command_translated: "Announce the modes supported by the pump via the speaker."
  devices:
  - Speaker
  - Relay
  - Blind
  - ContactSensor
  - LeakSensor
  - Recorder
  - Pump
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      modes = (#Pump).pumpOperationMode_supportedOperationModes
      (#Speaker).mediaPlayback_speak(modes)
  elapsed_time: 1.638 seconds
- command: "펌프가 열려있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the pump is open."
  devices:
  - Siren
  - Speaker
  - DoorLock
  - Blind
  - Alarm
  - LeakSensor
  - GasValve
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Pump).pump_pump == open) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.490 seconds
- command: "펌프의 동작 모드를 최대로 설정해줘."
  command_translated: "Set the pump's operation mode to maximum."
  devices:
  - Speaker
  - Relay
  - Blind
  - Calculator
  - Pump
  - Irrigator
  - Clock
  - Humidifier
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pumpOperationMode_setOperationMode(maximum)
  elapsed_time: 1.507 seconds
- command: "펌프를 꺼줘."
  command_translated: "Turn off the pump."
  devices:
  - Timer
  - Speaker
  - Relay
  - LeakSensor
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_off()
  elapsed_time: 1.291 seconds
- command: "펌프를 켜줘."
  command_translated: "Turn on the pump."
  devices:
  - Speaker
  - Relay
  - LeakSensor
  - Charger
  - Pump
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_on()
  elapsed_time: 1.526 seconds
- command: "펌프의 전원을 토글해줘."
  command_translated: "Toggle the power of the pump."
  devices:
  - Speaker
  - Dehumidifier
  - Relay
  - Pump
  - Switch
  - SmartPlug
  - Clock
  - Charger
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_toggle()
  elapsed_time: 1.224 seconds
- command: "펌프를 닫아줘."
  command_translated: "Close the pump."
  devices:
  - Timer
  - Speaker
  - Relay
  - Blind
  - LeakSensor
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pump_close()
  elapsed_time: 1.488 seconds
- command: "펌프를 열어줘."
  command_translated: "Open the pump."
  devices:
  - Speaker
  - Relay
  - Blind
  - LeakSensor
  - RobotCleaner
  - Pump
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pump_open()
  elapsed_time: 1.273 seconds
- command: "냉장고의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the refrigerator is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - Alarm
  - Refrigerator
  - TemperatureSensor
  - Irrigator
  - Switch
  - SmartPlug
  - Clock
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.458 seconds
- command: "냉장고의 성에 제거 기능이 켜저 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the refrigerator's defrost function is on."
  devices:
  - Siren
  - Speaker
  - Alarm
  - Refrigerator
  - LeakSensor
  - TemperatureSensor
  - Irrigator
  - SoundSensor
  - Clock
  - FallDetector
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Refrigerator).refrigeration_defrost == on) {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 1.495 seconds
- command: "냉장고의 급속 냉각 기능이 꺼져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the refrigerator's rapid cooling function is turned off."
  devices:
  - Siren
  - Timer
  - Speaker
  - AirConditioner
  - Alarm
  - Refrigerator
  - LeakSensor
  - Feeder
  - Irrigator
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Refrigerator).refrigeration_rapidCooling == off)
      any(#Alarm).alarm_siren()
      any(#Siren).sirenMode_setSirenMode("siren")
  elapsed_time: 1.679 seconds
- command: "냉장고의 급속 냉동 기능이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the refrigerator's rapid freezing function is on."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - DoorLock
  - Alarm
  - Refrigerator
  - TemperatureSensor
  - Irrigator
  - Clock
  - FallDetector
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).refrigeration_rapidFreezing == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.560 seconds
- command: "냉장고를 꺼줘."
  command_translated: "Turn off the refrigerator."
  devices:
  - Speaker
  - Relay
  - Refrigerator
  - GasValve
  - Feeder
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).switch_off()
  elapsed_time: 1.202 seconds
- command: "냉장고의 전원을 토글해줘."
  command_translated: "Toggle the refrigerator's power."
  devices:
  - Speaker
  - Relay
  - Blind
  - Refrigerator
  - Feeder
  - Irrigator
  - Switch
  - SmartPlug
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).switch_toggle()
  elapsed_time: 1.336 seconds
- command: "냉장고의 성에 제거 기능을 켜줘."
  command_translated: "Turn on the refrigerator's defrost function."
  devices:
  - Speaker
  - Refrigerator
  - Dishwasher
  - Feeder
  - Irrigator
  - Clock
  - Dehumidifier
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).refrigeration_setDefrost(on)
  elapsed_time: 1.340 seconds
- command: "냉장고의 급속 냉각 기능을 켜줘."
  command_translated: "Turn on the refrigerator's rapid cooling function."
  devices:
  - Speaker
  - Fan
  - AirConditioner
  - Refrigerator
  - Dishwasher
  - Feeder
  - Irrigator
  - Clock
  - Dehumidifier
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).refrigeration_setRapidCooling(on)
  elapsed_time: 1.326 seconds
- command: "냉장고의 급속 냉동 기능을 꺼줘."
  command_translated: "Turn off the refrigerator's rapid freezing function."
  devices:
  - Speaker
  - Fan
  - Relay
  - Refrigerator
  - Dishwasher
  - GasValve
  - Irrigator
  - Clock
  - Dehumidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Refrigerator).refrigeration_setRapidFreezing("off")
  elapsed_time: 1.434 seconds
- command: "로봇 청소기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the robot vacuum is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - Alarm
  - Pump
  - SoundSensor
  - SmartPlug
  - Switch
  - Clock
  - Charger
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#RobotCleaner).switch_switch == on) {
        all(#Alarm).alarm_siren()
      } else {
        all(#Alarm).alarm_off()
      }
      break
  elapsed_time: 2.870 seconds
- command: "로봇 청소기가 자동 모드이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the robot vacuum is in automatic mode."
  devices:
  - Siren
  - Speaker
  - Timer
  - Alarm
  - Pump
  - Irrigator
  - SoundSensor
  - Clock
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == "auto") {
        if (triggered == false) {
          triggered = true

          if (any(#Siren)) {
            all(#Siren).sirenMode_setSirenMode("siren")
            all(#Siren).switch_on()
          } else if (any(#Alarm)) {
            all(#Alarm).alarm_siren()
          }
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 3.647 seconds
- command: "로봇 청소기를 꺼줘."
  command_translated: "Turn off the robot vacuum."
  devices:
  - Speaker
  - Relay
  - Humidifier
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).switch_off()
  elapsed_time: 1.283 seconds
- command: "로봇 청소기를 켜줘."
  command_translated: "Turn on the robot vacuum."
  devices:
  - Speaker
  - Relay
  - AirPurifier
  - Humidifier
  - Pump
  - Clock
  - Dehumidifier
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).switch_on()
  elapsed_time: 1.402 seconds
- command: "로봇 청소기의 전원을 토글해줘."
  command_translated: "Toggle the robot vacuum's power."
  devices:
  - Speaker
  - Relay
  - Blind
  - Button
  - Switch
  - SmartPlug
  - Clock
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).switch_toggle()
  elapsed_time: 1.077 seconds
- command: "로봇 청소기의 청소 모드를 수동으로 설정해줘."
  command_translated: "Set the robot vacuum's cleaning mode to manual."
  devices:
  - Speaker
  - Blind
  - Dishwasher
  - Pump
  - Switch
  - Clock
  - Dehumidifier
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).robotCleanerCleaningMode_setRobotCleanerCleaningMode("manual")
  elapsed_time: 1.303 seconds
- command: "쉐이드가 40퍼센트 이상 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the shade is more than 40% open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - Pump
  - Clock
  - FallDetector
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Shade).windowShadeLevel_shadeLevel > 40) {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 1.534 seconds
- command: "쉐이드가 완전히 열려 있는 상태면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the shade is fully open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - Pump
  - Clock
  - FallDetector
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Shade).windowShade_windowShade == open) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.517 seconds
- command: "쉐이드가 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the shade via the speaker."
  devices:
  - Speaker
  - Siren
  - Blind
  - ContactSensor
  - Recorder
  - Clock
  - FallDetector
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      states_supported = (#Shade).windowShade_supportedWindowShadeCommands
      (#Speaker).mediaPlayback_speak(states_supported)
  elapsed_time: 1.291 seconds
- command: "쉐이드를 50퍼 센트로 설정해줘."
  command_translated: "Set the shade to 50 percent."
  devices:
  - Speaker
  - Curtain
  - Fan
  - Window
  - Light
  - Blind
  - Clock
  - Dehumidifier
  - Humidifier
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShadeLevel_setShadeLevel(50)
  elapsed_time: 1.225 seconds
- command: "쉐이드를 닫아줘."
  command_translated: "Close the shade."
  devices:
  - Speaker
  - Curtain
  - Blind
  - Humidifier
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_close()
  elapsed_time: 1.297 seconds
- command: "쉐이드를 열어줘."
  command_translated: "Open the shade."
  devices:
  - Speaker
  - Curtain
  - Blind
  - Humidifier
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_open()
  elapsed_time: 1.112 seconds
- command: "쉐이드 움직임을 일시 중지해줘."
  command_translated: "Pause the shade movement."
  devices:
  - Timer
  - Speaker
  - Curtain
  - Relay
  - Blind
  - MotionSensor
  - Clock
  - FallDetector
  - Dehumidifier
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_pause()
  elapsed_time: 1.491 seconds
- command: "사이렌이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the siren is on."
  devices:
  - Siren
  - Speaker
  - Timer
  - DoorLock
  - Blind
  - Alarm
  - SoundSensor
  - Clock
  - FallDetector
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Siren).switch_switch == on) {
        (#Siren).sirenMode_setSirenMode("siren")
      }
  elapsed_time: 1.071 seconds
- command: "사이렌 모드가 사이렌이면 알람의 사이렌을 울려줘."
  command_translated: "If the siren mode is Siren, sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Blind
  - Alarm
  - MotionSensor
  - SoundSensor
  - Clock
  - Window
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Siren).sirenMode_sirenMode == "siren") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.570 seconds
- command: "사이렌을 꺼줘."
  command_translated: "Turn off the siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - Recorder
  - SoundSensor
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_off()
  elapsed_time: 1.257 seconds
- command: "사이렌을 켜줘."
  command_translated: "Turn on the siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Alarm
  - Recorder
  - Pump
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_on()
  elapsed_time: 1.109 seconds
- command: "사이렌 전원을 토글해줘."
  command_translated: "Toggle the siren power."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - SmartPlug
  - Switch
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_toggle()
  elapsed_time: 1.182 seconds
- command: "사이렌 모드를 경광등으로 설정해줘."
  command_translated: "Set the siren mode to strobe."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Blind
  - Alarm
  - SoundSensor
  - Clock
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).sirenMode_setSirenMode("strobe")
  elapsed_time: 1.351 seconds
- command: "스마트 플러그의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is powered on."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - DoorLock
  - Television
  - Alarm
  - SmartPlug
  - Clock
  - Charger
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#SmartPlug).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.278 seconds
- command: "스마트 플러그의 전압이 220볼트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is over 220 volts."
  devices:
  - Siren
  - Speaker
  - Timer
  - DoorLock
  - Alarm
  - Refrigerator
  - TemperatureSensor
  - SoundSensor
  - SmartPlug
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#SmartPlug).voltageMeasurement_voltage > 220.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.457 seconds
- command: "스마트 플러그의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is drawing more than 10 amps."
  devices:
  - Siren
  - Speaker
  - Timer
  - DoorLock
  - Television
  - Alarm
  - LeakSensor
  - SoundSensor
  - SmartPlug
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#SmartPlug).currentMeasurement_current > 10.0) {
        (#Alarm).alarm_siren()
        (#Siren).switch_on()
        (#Siren).sirenMode_setSirenMode("siren")
      } else {
        (#Alarm).alarm_off()
        (#Siren).switch_off()
      }
      break
  elapsed_time: 2.064 seconds
- command: "스마트 플러그의 소비 전력이 1000와트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if a smart plug draws more than 1000 watts."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - DoorLock
  - Television
  - Alarm
  - SoundSensor
  - SmartPlug
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      power = (#SmartPlug).powerMeter_power
      if (power > 1000.0) {
        if (triggered == false) {
          (#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.097 seconds
- command: "스마트 플러그를 꺼줘."
  command_translated: "Turn off the smart plug."
  devices:
  - Speaker
  - Timer
  - Relay
  - DoorLock
  - Television
  - Refrigerator
  - SmartPlug
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_off()
  elapsed_time: 1.261 seconds
- command: "스마트 플러그를 켜줘."
  command_translated: "Turn on the smart plug."
  devices:
  - Timer
  - Speaker
  - Relay
  - DoorLock
  - Television
  - Refrigerator
  - SmartPlug
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_on()
  elapsed_time: 1.148 seconds
- command: "스마트 플러그의 전원을 토글해줘."
  command_translated: "Toggle the power of the smart plug."
  devices:
  - Timer
  - Speaker
  - Relay
  - DoorLock
  - Television
  - SmartPlug
  - Switch
  - Clock
  - Charger
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_toggle()
  elapsed_time: 1.243 seconds
- command: "연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if smoke is detected by the smoke detector."
  devices:
  - Siren
  - Speaker
  - SmokeDetector
  - AirQualityDetector
  - ContactSensor
  - Alarm
  - LeakSensor
  - MotionSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SmokeDetector).smokeDetector_smoke == detected)
      (#Alarm).alarm_siren()
  elapsed_time: 1.244 seconds
- command: "토양 습도 센서의 토양 습도 측정값이 30퍼센트 이하이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the soil moisture sensor's soil moisture reading is 30 percent or less."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - Alarm
  - LeakSensor
  - MotionSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Dehumidifier
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) {
        all(#Alarm).alarm_siren()
      }
  elapsed_time: 1.542 seconds
- command: "소리 센서에서 소리가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if sound is detected by the sound sensor."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - SmokeDetector
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#SoundSensor).soundSensor_sound == detected) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.932 seconds
- command: "소리 감지 레벨이 70dB 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the sound detection level is above 70 dB."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - HumiditySensor
  - Blind
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#SoundSensor).soundPressureLevel_soundPressureLevel > 70.0) {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
      break
  elapsed_time: 1.820 seconds
- command: "스피커의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the speaker is powered on."
  devices:
  - Siren
  - Speaker
  - Timer
  - Relay
  - Alarm
  - Recorder
  - SoundSensor
  - SmartPlug
  - Clock
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Speaker).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.288 seconds
- command: "스피커가 재생 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the speaker is playing."
  devices:
  - Siren
  - Speaker
  - Timer
  - Alarm
  - OccupancySensor
  - Recorder
  - SoundSensor
  - Clock
  - FallDetector
  - Window
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Speaker).mediaPlayback_playbackStatus == playing) {
        all(#Alarm).alarm_siren()
      } else {
        all(#Alarm).alarm_off()
      }
      break
  elapsed_time: 1.964 seconds
- command: "스피커가 지원하는 명령어를 스피커로 출력해줘."
  command_translated: "Announce commands that the speaker supports via the speaker."
  devices:
  - Speaker
  - Siren
  - Blind
  - ContactSensor
  - Recorder
  - SoundSensor
  - Clock
  - Window
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      supportedCommands = (#Speaker).mediaPlayback_supportedPlaybackCommands
      (#Speaker).mediaPlayback_speak(supportedCommands)
  elapsed_time: 1.628 seconds
- command: "스피커를 꺼줘."
  command_translated: "Turn off the speaker."
  devices:
  - Speaker
  - Timer
  - Blind
  - GasValve
  - Recorder
  - SoundSensor
  - Clock
  - Dehumidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_off()
  elapsed_time: 1.675 seconds
- command: "스피커를 켜줘."
  command_translated: "Turn on the speaker."
  devices:
  - Speaker
  - Timer
  - Blind
  - Recorder
  - SoundSensor
  - Irrigator
  - Clock
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_on()
  elapsed_time: 1.704 seconds
- command: "스피커의 전원을 토글해줘."
  command_translated: "Toggle the power of the speaker."
  devices:
  - Speaker
  - Relay
  - Blind
  - Recorder
  - SoundSensor
  - Switch
  - SmartPlug
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_toggle()
  elapsed_time: 1.111 seconds
- command: "스피커의 재생을 빨리 감기 해줘."
  command_translated: "Fast-forward the playback of the speaker."
  devices:
  - Speaker
  - Timer
  - Fan
  - Relay
  - Button
  - Camera
  - Recorder
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_fastForward()
  elapsed_time: 1.120 seconds
- command: "스피커의 재생을 일시 정지해줘."
  command_translated: "Pause playback on the speaker."
  devices:
  - Speaker
  - Timer
  - Siren
  - Recorder
  - Pump
  - SoundSensor
  - Clock
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_pause()
  elapsed_time: 1.954 seconds
- command: "스피커의 재생을 되감아줘."
  command_translated: "Rewind the speaker's playback."
  devices:
  - Speaker
  - Timer
  - Relay
  - Blind
  - Camera
  - Recorder
  - Clock
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_rewind()
  elapsed_time: 1.473 seconds
- command: "스피커의 재생을 멈춰줘."
  command_translated: "Stop the speaker from playing."
  devices:
  - Speaker
  - Timer
  - Siren
  - Recorder
  - Pump
  - SoundSensor
  - Clock
  - Dehumidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_stop()
  elapsed_time: 1.221 seconds
- command: "스피커에서 music.mp3를 재생해줘."
  command_translated: "Play 'music.mp3' on the speaker."
  devices:
  - Speaker
  - Timer
  - Recorder
  - Pump
  - SoundSensor
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_play("music.mp3")
  elapsed_time: 1.293 seconds
- command: "스피커에서 '지금은 테스트 중입니다.'를 말해줘."
  command_translated: "Speak \"This is a test\" through the speaker."
  devices:
  - Speaker
  - Timer
  - Calculator
  - Recorder
  - SoundSensor
  - Clock
  - Window
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("This is a test")
  elapsed_time: 1.761 seconds
- command: "녹음기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the recorder is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - Alarm
  - Camera
  - Recorder
  - SoundSensor
  - SmartPlug
  - Clock
  - Charger
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Recorder).switch_switch == on) {
        all(#Alarm).alarm_siren()
        all(#Siren).sirenMode_setSirenMode(siren)
        all(#Siren).switch_on()
      }
  elapsed_time: 1.610 seconds
- command: "녹음기가 녹음 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the recorder is recording."
  devices:
  - Siren
  - Speaker
  - Timer
  - Window
  - Alarm
  - Camera
  - Recorder
  - Feeder
  - SoundSensor
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Recorder).audioRecord_recordStatus == "recording") {
        (#Alarm).alarm_siren()
        break
      } else {
        (#Alarm).alarm_off()
      }
  elapsed_time: 1.997 seconds
- command: "녹음기를 꺼줘."
  command_translated: "Turn off the recorder."
  devices:
  - Timer
  - Speaker
  - AirPurifier
  - Camera
  - GasValve
  - Recorder
  - Feeder
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_off()
  elapsed_time: 1.961 seconds
- command: "녹음기를 켜줘."
  command_translated: "Turn on the recorder."
  devices:
  - Timer
  - Speaker
  - AirConditioner
  - AirPurifier
  - Camera
  - Recorder
  - Feeder
  - Clock
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_on()
  elapsed_time: 2.420 seconds
- command: "녹음기의 전원을 토글해줘."
  command_translated: "Toggle the recorder's power."
  devices:
  - Speaker
  - Relay
  - Camera
  - Recorder
  - Feeder
  - SmartPlug
  - Clock
  - Charger
  - RobotCleaner
  - Buttonx4
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_toggle()
  elapsed_time: 1.538 seconds
- command: "녹음기로 10초 동안 녹음해서 test.wav로 저장해줘."
  command_translated: "Record 10 seconds with a recorder and save it as test.wav."
  devices:
  - Speaker
  - AirConditioner
  - AirPurifier
  - Camera
  - Recorder
  - Feeder
  - SoundSensor
  - Clock
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).audioRecord_record("test.wav", 10)
  elapsed_time: 1.599 seconds
- command: "스위치의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the switch is powered on."
  devices:
  - Siren
  - Speaker
  - Relay
  - DoorLock
  - Button
  - ContactSensor
  - Alarm
  - Television
  - Switch
  - SmartPlug
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Switch).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.606 seconds
- command: "스위치를 꺼줘."
  command_translated: "Switch off."
  devices:
  - Timer
  - Speaker
  - Relay
  - Blind
  - ContactSensor
  - GasValve
  - Switch
  - Clock
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_off()
  elapsed_time: 1.254 seconds
- command: "스위치를 켜줘."
  command_translated: "Switch on."
  devices:
  - Timer
  - Speaker
  - Relay
  - Button
  - Irrigator
  - Switch
  - Clock
  - Humidifier
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_on()
  elapsed_time: 1.215 seconds
- command: "스위치의 전원을 토글해줘."
  command_translated: "Toggle the power of the switch."
  devices:
  - Speaker
  - Relay
  - Button
  - Television
  - ContactSensor
  - Blind
  - Switch
  - SmartPlug
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_toggle()
  elapsed_time: 1.234 seconds
- command: "TV의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the TV is powered on."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - Television
  - Alarm
  - SmartPlug
  - Clock
  - Charger
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.453 seconds
- command: "현재 TV 채널 이름이 '9시 뉴스'이면 알람의 사이렌을 울려줘."
  command_translated: "If the current TV channel is named \"9 o'clock news\" sound the alarm's siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - Television
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).tvChannel_tvChannelName == "9 o"clock news") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.728 seconds
- command: "TV의 볼륨이 50 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the volume on the TV is above 50."
  devices:
  - Siren
  - Speaker
  - Timer
  - AirQualityDetector
  - Television
  - Alarm
  - GasMeter
  - TemperatureSensor
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      volume = (#Television).audioVolume_volume
      if ((volume > 50) and (triggered == false)) {
        (#Alarm).alarm_siren()
        triggered = true
      } else if (volume <= 50) {
        triggered = false
        break
      }
  elapsed_time: 2.720 seconds
- command: "TV가 음소거 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the TV is muted."
  devices:
  - Siren
  - Speaker
  - Timer
  - Blind
  - Television
  - Alarm
  - MotionSensor
  - SoundSensor
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).audioMute_muteStatus == muted) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.846 seconds
- command: "TV를 꺼줘."
  command_translated: "Turn off the TV."
  devices:
  - Timer
  - Speaker
  - AirQualityDetector
  - Blind
  - Television
  - GasValve
  - Clock
  - Dehumidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_off()
  elapsed_time: 1.624 seconds
- command: "TV를 켜줘."
  command_translated: "Turn on the TV."
  devices:
  - Timer
  - Speaker
  - Relay
  - AirQualityDetector
  - Blind
  - Television
  - Recorder
  - Clock
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_on()
  elapsed_time: 1.394 seconds
- command: "TV의 전원을 토글해줘."
  command_translated: "Toggle the power of the TV."
  devices:
  - Speaker
  - Relay
  - AirQualityDetector
  - Blind
  - Television
  - Switch
  - SmartPlug
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_toggle()
  elapsed_time: 1.159 seconds
- command: "TV 채널을 하나 내려줘."
  command_translated: "Turn down a TV channel."
  devices:
  - Timer
  - Speaker
  - Button
  - Television
  - Blind
  - Pump
  - Clock
  - Buttonx4
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_channelDown()
  elapsed_time: 1.236 seconds
- command: "TV 채널을 하나 올려줘."
  command_translated: "Upload a TV channel."
  devices:
  - Speaker
  - Relay
  - AirQualityDetector
  - Television
  - Camera
  - Recorder
  - Pump
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_channelUp()
  elapsed_time: 1.348 seconds
- command: "TV 채널을 7번으로 설정해줘."
  command_translated: "Set the TV channel to 7."
  devices:
  - Speaker
  - Curtain
  - AirQualityDetector
  - Blind
  - Television
  - Calculator
  - Clock
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_setTvChannel(7)
  elapsed_time: 1.214 seconds
- command: "TV 채널을 '9시 뉴스'로 설정해줘."
  command_translated: "Set the TV channel to \"9 o'clock news\"."
  devices:
  - Speaker
  - AirQualityDetector
  - Blind
  - Television
  - MenuProvider
  - Clock
  - Dehumidifier
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_setTvChannelName("9 o"clock news")
  elapsed_time: 1.222 seconds
- command: "TV의 볼륨을 30으로 설정해줘."
  command_translated: "Set the volume on the TV to 30."
  devices:
  - Speaker
  - AirQualityDetector
  - Blind
  - Television
  - GasMeter
  - Calculator
  - Recorder
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_setVolume(30)
  elapsed_time: 1.099 seconds
- command: "TV의 볼륨을 낮춰줘."
  command_translated: "Turn down the volume on the TV."
  devices:
  - Timer
  - Speaker
  - AirQualityDetector
  - Button
  - Television
  - SoundSensor
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_volumeDown()
  elapsed_time: 1.248 seconds
- command: "TV의 볼륨을 높여줘."
  command_translated: "Turn up the volume on the TV."
  devices:
  - Timer
  - Speaker
  - AirQualityDetector
  - Button
  - Television
  - GasMeter
  - Recorder
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_volumeUp()
  elapsed_time: 1.225 seconds
- command: "TV를 음소거해줘."
  command_translated: "Mute the TV."
  devices:
  - Speaker
  - AirQualityDetector
  - Television
  - Alarm
  - Recorder
  - Clock
  - Dehumidifier
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_mute()
  elapsed_time: 1.248 seconds
- command: "TV의 음소거 상태를 해제해줘."
  command_translated: "Unmute the TV."
  devices:
  - Timer
  - Speaker
  - AirQualityDetector
  - Blind
  - Television
  - Alarm
  - Clock
  - Dehumidifier
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_unmute()
  elapsed_time: 1.214 seconds
- command: "TV의 음소거 상태를 음소거로 설정해줘."
  command_translated: "Set the TV's mute state to Mute."
  devices:
  - Speaker
  - AirQualityDetector
  - Blind
  - Television
  - Alarm
  - SoundSensor
  - Clock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_setMute(muted)
  elapsed_time: 1.137 seconds
- command: "현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the current room temperature is above 25 degrees."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - Alarm
  - OccupancySensor
  - MotionSensor
  - TemperatureSensor
  - Clock
  - Window
  - WeatherProvider
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 2.072 seconds
- command: "밸브가 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the valve is open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - GasValve
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Valve).valve_valve == open) {
        if (triggered == false) {
          all(#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.823 seconds
- command: "밸브를 닫아줘."
  command_translated: "Close the valve."
  devices:
  - Speaker
  - Relay
  - Blind
  - Humidifier
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Valve).valve_close()
  elapsed_time: 1.040 seconds
- command: "밸브를 열어줘."
  command_translated: "Open the valve."
  devices:
  - Speaker
  - Relay
  - Blind
  - Humidifier
  - GasValve
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Valve).valve_open()
  elapsed_time: 1.044 seconds
- command: "바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the humidity outside is above 80 percent."
  devices:
  - Siren
  - Speaker
  - HumiditySensor
  - AirQualityDetector
  - Alarm
  - Humidifier
  - LeakSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_humidityWeather > 80.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.299 seconds
- command: "바깥의 미세먼지 농도가 100 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the particulate matter concentration outside is above 100."
  devices:
  - Siren
  - Speaker
  - Window
  - AirQualityDetector
  - SmokeDetector
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_pm10Weather > 100) {
        all(#Alarm).alarm_siren()
      }
  elapsed_time: 1.423 seconds
- command: "바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the outside fine particulate matter concentration is above 50."
  devices:
  - Siren
  - Speaker
  - Window
  - AirQualityDetector
  - AirPurifier
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_pm25Weather > 50) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.413 seconds
- command: "기압이 1020hPa 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the barometric pressure is above 1020 hPa."
  devices:
  - Siren
  - Speaker
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - Pump
  - SoundSensor
  - Clock
  - WeatherProvider
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_pressureWeather > 1020.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.577 seconds
- command: "현재 바깥의 기온이 30도 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if it's currently above 30 degrees outside."
  devices:
  - Siren
  - Speaker
  - Window
  - Blind
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_temperatureWeather > 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.097 seconds
- command: "현재 날씨가 비가 오고 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the current weather is rainy."
  devices:
  - Siren
  - Speaker
  - Relay
  - Window
  - Alarm
  - LeakSensor
  - TemperatureSensor
  - Clock
  - FallDetector
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_weather == rain) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.232 seconds
- command: "위도 37.5665, 경도 126.9780의 현재 날씨 정보를 스피커로 출력해줘."
  command_translated: "Announce the current weather information for latitude 37.5665 and longitude 126.9780 via the speaker."
  devices:
  - Speaker
  - Siren
  - Window
  - MenuProvider
  - Recorder
  - TemperatureSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      weatherInfo = (#WeatherProvider).weatherProvider_getWeatherInfo(37.5665, 126.9780)
      (#Speaker).mediaPlayback_speak(weatherInfo)
  elapsed_time: 1.445 seconds
- command: "창문이 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a window is open."
  devices:
  - Siren
  - Speaker
  - Curtain
  - DoorLock
  - Blind
  - Alarm
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if (any(#Window).windowControl_window == open) {
        any(#Alarm).alarm_siren()
      } else {
        all(#Alarm).alarm_off()
      }
      break
  elapsed_time: 1.639 seconds
- command: "창문을 닫아줘."
  command_translated: "Close the window."
  devices:
  - Timer
  - Speaker
  - Curtain
  - Blind
  - Pump
  - Clock
  - Dehumidifier
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Window).windowControl_close()
  elapsed_time: 1.070 seconds
- command: "창문을 열어줘."
  command_translated: "Open a window."
  devices:
  - Speaker
  - Curtain
  - Blind
  - Buttonx4
  - Humidifier
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Window).windowControl_open()
  elapsed_time: 1.033 seconds
- command: "낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a fall is detected by the fall detection sensor."
  devices:
  - Siren
  - Speaker
  - SmokeDetector
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#FallDetector).fallDetection_fall == fall)
      (#Alarm).alarm_siren()
  elapsed_time: 1.604 seconds
- command: "점유 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if an occupancy sensor is detected."
  devices:
  - Siren
  - Speaker
  - ContactSensor
  - Alarm
  - OccupancySensor
  - MotionSensor
  - LeakSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - FallDetector
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == present)
      any(#Alarm) ? all(#Alarm).alarm_siren() : all(#Siren).sirenMode_setSirenMode("siren")
  elapsed_time: 1.683 seconds
- command: "릴레이의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the relay is powered on."
  devices:
  - Siren
  - Timer
  - Speaker
  - Relay
  - DoorLock
  - Alarm
  - LeakSensor
  - SmartPlug
  - Switch
  - Clock
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Relay).switch_switch == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.808 seconds
- command: "릴레이를 꺼줘."
  command_translated: "Turn off the relay."
  devices:
  - Timer
  - Speaker
  - Relay
  - Blind
  - GasValve
  - Pump
  - Clock
  - FallDetector
  - Dehumidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_off()
  elapsed_time: 1.325 seconds
- command: "릴레이를 켜줘."
  command_translated: "Turn on the relay."
  devices:
  - Timer
  - Speaker
  - Relay
  - Blind
  - Pump
  - Irrigator
  - Clock
  - FallDetector
  - Humidifier
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_on()
  elapsed_time: 1.932 seconds
- command: "릴레이의 전원을 토글해줘."
  command_translated: "Toggle the power of the relay."
  devices:
  - Speaker
  - Relay
  - Button
  - Blind
  - Pump
  - Switch
  - SmartPlug
  - Clock
  - Charger
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_toggle()
  elapsed_time: 1.146 seconds
- command: "테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘."
  command_translated: "Add a 60-second timer named Test Timer."
  devices:
  - Timer
  - Speaker
  - AirConditioner
  - AirPurifier
  - Camera
  - Feeder
  - Recorder
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_add("Test Timer", 60.0)
  elapsed_time: 1.711 seconds
- command: "테스트 타이머라는 이름의 타이머가 존재하면 알람의 사이렌을 울려줘."
  command_translated: "If a timer named Test Timer exists, sound the alarm siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - AirPurifier
  - Alarm
  - Recorder
  - Feeder
  - SoundSensor
  - Clock
  - RobotCleaner
  - PresenceSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Timer).timer_isExist("Test Timer") == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.504 seconds
- command: "테스트 타이머라는 이름의 타이머가 하면 알람의 사이렌을 울려줘."
  command_translated: "if a timer named Test Timer goes off, sound an alarm siren."
  devices:
  - Siren
  - Timer
  - Speaker
  - AirPurifier
  - Alarm
  - Recorder
  - TemperatureSensor
  - Feeder
  - SoundSensor
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ( (#Timer).timer_isSet("Test Timer") == false ) {
        if (triggered == false) {
          (#Alarm).alarm_siren()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 1.884 seconds
- command: "테스트 타이머라는 이름의 타이머를 리셋해줘."
  command_translated: "Reset a timer named Test Timer."
  devices:
  - Timer
  - Speaker
  - Relay
  - AirConditioner
  - AirPurifier
  - Feeder
  - Recorder
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_reset("Test Timer")
  elapsed_time: 1.260 seconds
- command: "테스트 타이머라는 이름의 타이머를 120초로 설정해줘."
  command_translated: "Set a timer named Test Timer to 120 seconds."
  devices:
  - Timer
  - Speaker
  - AirConditioner
  - AirPurifier
  - Camera
  - Feeder
  - Recorder
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_set("Test Timer", 120.0)
  elapsed_time: 1.264 seconds
- command: "테스트 타이머라는 이름의 타이머를 시작해줘."
  command_translated: "Start a timer named Test Timer."
  devices:
  - Timer
  - Speaker
  - AirConditioner
  - Window
  - AirPurifier
  - Feeder
  - Recorder
  - Clock
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_start("Test Timer")
  elapsed_time: 1.161 seconds
