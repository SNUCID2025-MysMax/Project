- command: "실시간으로 확인하여 토양 습도 센서의 값이 30% 이하가 되면 관개 장치를 켜 줘, 또한 1초마다 체크해서 온도가 25도를 넘으면 펌프를 꺼 줘."
  command_translated: "Check in real-time to turn on the irrigation when the soil moisture sensor reads 30% or less. Also, check every second to turn off the pump when the temperature exceeds 25 degrees."
  devices:
  - Speaker
  - HumiditySensor
  - LeakSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - Pump
  - Irrigator
  - SoundSensor
  - Clock
  - Dehumidifier
  - WeatherProvider
  generated_code:
  - name: "SoilMoistureIrrigation"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) {
        if (triggered == false) {
          all(#Irrigator).switch_on()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  - name: "PumpTemperatureControl"
    cron: ""
    period: 1000
    code: |
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) {
        all(#Pump).switch_off()
      }
  elapsed_time: 2.775 seconds
- command: "펌프가 꺼지면 스피커를 켜고, 토양 습도 센서의 값이 20% 이하가 되면 관개 장치를 켜 줘."
  command_translated: "Turn on the speaker when the pump turns off, and turn on the irrigation when the soil moisture sensor reads 20% or less."
  devices:
  - Speaker
  - HumiditySensor
  - ContactSensor
  - LeakSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - Pump
  - Irrigator
  - SoundSensor
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      pumpOffTriggered := false
      soilMoistureTriggered := false
      if ((#Pump).switch_switch == "off") {
        if (pumpOffTriggered == false) {
          (#Speaker).switch_on()
          pumpOffTriggered = true
        }
      } else {
        pumpOffTriggered = false
      }
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0) {
        if (soilMoistureTriggered == false) {
          (#Irrigator).switch_on()
          soilMoistureTriggered = true
        }
      } else {
        soilMoistureTriggered = false
      }
      break
  elapsed_time: 2.850 seconds
- command: "토양 습도 센서의 값이 25% 이하로 떨어진 후 10초 동안 값이 변하지 않으면 알람의 사이렌을 울려 줘. 그리고 조명은 그냥 꺼 줘."
  command_translated: "When the soil moisture sensor's reading drops below 25% and doesn't change for 10 seconds, sound the alarm's siren. And just turn off the lights."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - HumiditySensor
  - Light
  - Alarm
  - MotionSensor
  - LeakSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - SoundSensor
  - Clock
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      previous_moisture := (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
      unchanged_duration := 0

      current_moisture = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
      if ((current_moisture < 25.0) and (triggered == false)) {
        if (current_moisture == previous_moisture) {
          unchanged_duration = unchanged_duration + 100
          if (unchanged_duration >= 10000) {
            (#Alarm).alarm_siren()
            triggered = true
          }
        } else {
          unchanged_duration = 0
        }
      } else if (current_moisture >= 25.0) {
        triggered = false
        unchanged_duration = 0
      }
      previous_moisture = current_moisture

      if (triggered == false) {
        all(#Light).switch_off()
      }
      if (triggered == true) {
        break
      }
  elapsed_time: 6.642 seconds
- command: "실시간으로 확인하여 조명이 켜지면 펌프를 켜 줘, 토양 습도 센서의 값이 30% 이하로 떨어지면 블라인드를 닫아 줘."
  command_translated: "Check in real-time to turn on the pump when the lights come on, and close the blinds when the soil moisture sensor drops below 30%."
  devices:
  - Speaker
  - LightSensor
  - HumiditySensor
  - Light
  - Blind
  - ContactSensor
  - OccupancySensor
  - LeakSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - Pump
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      pump_on_triggered := false
      blinds_closed_triggered := false

      if ((#Light).switch_switch == on) {
        if (pump_on_triggered == false) {
          (#Pump).switch_on()
          pump_on_triggered = true
        }
      } else {
        pump_on_triggered = false
      }

      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {
        if (blinds_closed_triggered == false) {
          (#Blind).blind_close()
          blinds_closed_triggered = true
        }
      } else {
        blinds_closed_triggered = false
      }

      break
  elapsed_time: 9.832 seconds
- command: "관개 장치가 꺼지고 나서 토양 습도 센서의 값이 20% 이하로 떨어지면 사이렌과 경광등을 켜 줘. 커튼이 닫혀 있으면 열어 줘."
  command_translated: "Turn on the siren and strobes if the soil moisture sensor drops below 20% after the irrigation is turned off. Open the curtains if they are closed."
  devices:
  - Siren
  - Speaker
  - Curtain
  - HumiditySensor
  - Alarm
  - LeakSensor
  - SoilMoistureSensor
  - TemperatureSensor
  - Irrigator
  - Clock
  - Dehumidifier
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      irrigation_off := false
      soil_low := false
      if (all(#Irrigator).switch_switch == "off") {
        irrigation_off = true
      } else {
        irrigation_off = false
        soil_low = false
        break
      }
      if (irrigation_off == true) {
        if (any(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0) {
          soil_low = true
        } else {
          soil_low = false
        }
      } else {
        soil_low = false
      }
      if ((irrigation_off == true) and (soil_low == true)) {
        all(#Siren).switch_on()
        all(#Siren).sirenMode_setSirenMode("both")
        break
      }
  elapsed_time: 5.328 seconds
- command: "실시간으로 확인하여 문이 열릴 때마다 조명을 켜 줘, TV가 꺼지면 스피커를 끄고 블라인드를 닫아 줘."
  command_translated: "Check in real-time to turn on the lights whenever the door opens. And turn off the speakers when the TV is turned off, and close the blinds."
  devices:
  - Speaker
  - Siren
  - Curtain
  - DoorLock
  - Blind
  - Light
  - Television
  - GasValve
  - Clock
  - Window
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      door_opened := false
      if ((#DoorLock).doorControl_door == open) {
        if (door_opened == false) {
          all(#Light).switch_on()
          door_opened = true
        }
      } else {
        door_opened = false
        break
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      tv_off := false
      if ((#Television).switch_switch == off) {
        if (tv_off == false) {
          all(#Speaker).switch_off()
          all(#Blind).blind_close()
          tv_off = true
        }
      } else {
        tv_off = false
        break
      }
  elapsed_time: 3.887 seconds
- command: "제습기가 꺼지면 켜 줘, 조명이 꺼져 있으면 밝기를 50퍼센트로 설정해 줘."
  command_translated: "When the dehumidifier turns off, turn it on. If the lights are off, set the brightness to 50 percent."
  devices:
  - Speaker
  - LightSensor
  - HumiditySensor
  - Light
  - AirPurifier
  - Blind
  - Alarm
  - Irrigator
  - Clock
  - Dehumidifier
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      dehumidifier_switch:= (#Dehumidifier).switch_switch
      lights_off:= (all(#Light).switch_switch == off)
      if ((dehumidifier_switch == off) and (triggered == false)) {
        (#Dehumidifier).switch_on()
        triggered = true
      } else if (dehumidifier_switch == on) {
        triggered = false
      }
      if (lights_off == true) {
        all(#Light).switchLevel_setLevel(50, 100)
        break
      }
  elapsed_time: 3.300 seconds
- command: "창문이 열리면 블라인드를 닫고, 조명이 꺼지면 선풍기를 켜 줘."
  command_translated: "Close the blinds when the window opens, turn on the fan when the lights turns off."
  devices:
  - Siren
  - Speaker
  - Fan
  - Curtain
  - Light
  - Blind
  - DoorLock
  - GasValve
  - Pump
  - Clock
  - Window
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      blindsClosed := false
      fanOn := false
      if ((#Window).windowControl_window == open) {
        if (blindsClosed == false) {
          all(#Blind).blind_close()
          blindsClosed = true
        }
      } else {
        blindsClosed = false
      }
      if ((#Light).switch_switch == off) {
        if (fanOn == false) {
          all(#Fan).switch_on()
          fanOn = true
        }
      } else {
        fanOn = false
      }
      break
  elapsed_time: 3.407 seconds
- command: "실시간으로 확인하여 움직임이 감지되면 커튼을 닫고, 지금 알람의 사이렌을 울려 줘."
  command_translated: "Check in real-time, close the curtains when motion is detected, and sound the siren of alarm immediately."
  devices:
  - Siren
  - Speaker
  - Curtain
  - SmokeDetector
  - DoorLock
  - ContactSensor
  - Alarm
  - MotionSensor
  - SoundSensor
  - Clock
  - FallDetector
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#MotionSensor).motionSensor_motion == active) {
        if (triggered == false) {
          (#Curtain).curtain_close()
          (#Siren).sirenMode_setSirenMode("siren")
          (#Siren).switch_on()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.358 seconds
- command: "창문이 열리면 10초 후 커튼을 열어 줘. 창문과 상관없이, 5초마다 조명을 켰다 꺼 줘."
  command_translated: "when the window opens, open the curtains after 10 seconds. Turn the lights on and off every 5 seconds, regardless of the window."
  devices:
  - Siren
  - LightSensor
  - Speaker
  - Curtain
  - Light
  - Blind
  - DoorLock
  - Alarm
  - GasValve
  - Clock
  - Window
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      delayStarted := false
      delayStartTime := 0
      if ((#Window).windowControl_window == open) {
        if (triggered == false) {
          triggered = true
          delayStarted = true
          delayStartTime = (#Clock).clock_timestamp
        }
        if ((delayStarted == true) and ((#Clock).clock_timestamp - delayStartTime >= 10000)) {
          (#Curtain).curtain_open()
          delayStarted = false
        }
      } else {
        triggered = false
        delayStarted = false
      }
  - name: "Scenario2"
    cron: ""
    period: 5000
    code: |
      lightOn := false
      if (lightOn == false) {
        all(#Light).switch_on()
        lightOn = true
      } else {
        all(#Light).switch_off()
        lightOn = false
      }
      break
  elapsed_time: 4.241 seconds
