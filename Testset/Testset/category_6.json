[
  {
    "command": "5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이 되면 급수기를 끄고 반복도 종료해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 5000\n\n    def run(self):\n        soil = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity\n        temp = Tags('AirQualityDetector').temperatureMeasurement_temperature\n        if soil <= 30.0:\n            Tags('Irrigator').switch_on()\n            if temp >= 35.0:\n                Tags('Irrigator').switch_off()\n                break\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 5000,
        "code": "soil = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\ntemp = (#AirQualityDetector).temperatureMeasurement_temperature\nif (soil <= 30.0) {\n    (#Irrigator).switch_on()\n    if (temp >= 35.0) {\n        (#Irrigator).switch_off()\n        break\n    }\n}"
      }
    ]
  },
  {
    "command": "3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 3000\n        self.count = 0\n\n    def run(self):\n        if self.count >= 10:\n            break\n        Tags('Light').switch_toggle()\n        rain = Tags('WeatherProvider').weatherProvider_weather\n        if rain == 'rain':\n            break\n        self.count = self.count + 1\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 3000,
        "code": "count := 0\nif (count >= 10) {\n    break\n}\n(#Light).switch_toggle()\nrain = (#WeatherProvider).weatherProvider_weather\nif (rain == 'rain') {\n    break\n}\ncount = count + 1"
      }
    ]
  },
  {
    "command": "1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 1000\n\n    def run(self):\n        humidity = Tags('AirQualityDetector').relativeHumidityMeasurement_humidity\n        if humidity >= 80.0:\n            break\n        Tags('Fan').switch_toggle()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 1000,
        "code": "humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity\nif (humidity >= 80.0) {\n    break\n}\n(#Fan).switch_toggle()"
      }
    ]
  },
  {
    "command": "5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 5000\n\n    def run(self):\n        current_level = Tags('Blind').blindLevel_blindLevel\n        if current_level <= 10:\n            Tags('Blind').blindLevel_setBlindLevel(0)\n            break\n        next_level = current_level - 10\n        Tags('Blind').blindLevel_setBlindLevel(next_level)\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 5000,
        "code": "current_level = (#Blind).blindLevel_blindLevel\nif (current_level <= 10) {\n    (#Blind).blindLevel_setBlindLevel(0)\n    break\n}\nnext_level = current_level - 10\n(#Blind).blindLevel_setBlindLevel(next_level)"
      }
    ]
  },
  {
    "command": "10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 10000\n\n    def run(self):\n        lux = Tags('LightSensor').lightLevel_light\n        if lux >= 500.0:\n            Tags('Irrigator').switch_off()\n            break\n        Tags('Irrigator').switch_on()\n        Tags('Clock').clock_delay(0, 0, 5)\n        lux = Tags('LightSensor').lightLevel_light\n        if lux >= 500.0:\n            Tags('Irrigator').switch_off()\n            break\n        Tags('Irrigator').switch_off()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 10000,
        "code": "lux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n    (#Irrigator).switch_off()\n    break\n}\n(#Irrigator).switch_on()\n(#Clock).clock_delay(0, 0, 5)\nlux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n    (#Irrigator).switch_off()\n    break\n}\n(#Irrigator).switch_off()"
      }
    ]
  },
  {
    "command": "2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 2000\n\n    def run(self):\n        Tags('Light').switch_toggle()\n        light_state = Tags('Light').switch_switch\n        if light_state == 'off':\n            window_state = Tags('Window').windowControl_window\n            if window_state == 'open':\n                break\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 2000,
        "code": "(#Light).switch_toggle()\nlight_state = (#Light).switch_switch\nif (light_state == 'off') {\n    window_state = (#Window).windowControl_window\n    if (window_state == 'open') {\n        break\n    }\n}"
      }
    ]
  },
  {
    "command": "3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 3000\n        self.volume = 0\n\n    def run(self):\n        if self.volume >= 5:\n            motion = Tags('MotionSensor').motionSensor_motion\n            if motion == 'active':\n                break\n            self.volume = 0\n        else:\n            self.volume = self.volume + 1\n        Tags('Television').audioVolume_setVolume(self.volume)\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 3000,
        "code": "volume := 0\nif (volume >= 5) {\n    motion = (#MotionSensor).motionSensor_motion\n    if (motion == 'active') {\n        break\n    }\n    volume = 0\n} else {\n    volume = volume + 1\n}\n(#Television).audioVolume_setVolume(volume)"
      }
    ]
  },
  {
    "command": "10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 10000\n\n    def run(self):\n        Tags('Blind').blind_close()\n        tv = Tags('Television').switch_switch\n        if tv == 'on':\n            break\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 10000,
        "code": "(#Blind).blind_close()\ntv = (#Television).switch_switch\nif (tv == 'on') {\n    break\n}"
      }
    ]
  },
  {
    "command": "2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 2000\n\n    def run(self):\n        Tags('Alarm').alarm_siren()\n        state = Tags('Window').windowControl_window\n        Tags('Clock').clock_delay(0, 0, 1)\n        Tags('Alarm').alarm_off()\n        if state == 'closed':\n            break\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 2000,
        "code": "(#Alarm).alarm_siren()\nstate = (#Window).windowControl_window\n(#Clock).clock_delay(0, 0, 1)\n(#Alarm).alarm_off()\nif (state == 'closed') {\n    break\n}"
      }
    ]
  },
  {
    "command": "5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 5000\n\n    def run(self):\n        Tags('AirPurifier').airPurifierFanMode_setAirPurifierFanMode('auto')\n        state = Tags('Window').windowControl_window\n        if state == 'open':\n            break\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 5000,
        "code": "(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode('auto')\nstate = (#Window).windowControl_window\nif (state == 'open') {\n    break\n}"
      }
    ]
  }
]