[
  {
    "command": "1초마다 확인하여 관개 장치가 꺼졌다 켜진 횟수가 4번을 초과하고 펌프가 2번 이상 작동했으면 블라인드를 닫고 커튼을 내려 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''                    \n        self.period = 1000               \n        self.prev_irrigator_state = Tags('Irrigator').switch_switch\n        self.irrigator_off_to_on_count = 0\n        self.prev_pump_state = Tags('Pump').switch_switch\n        self.pump_on_count = 0\n\n    def run(self):\n        irrigator_state = Tags('Irrigator').switch_switch\n        pump_state = Tags('Pump').switch_switch\n\n        if self.prev_irrigator_state == 'off' and irrigator_state == 'on':\n            self.irrigator_off_to_on_count = self.irrigator_off_to_on_count + 1\n        self.prev_irrigator_state = irrigator_state\n\n        if pump_state == 'on' and self.prev_pump_state != 'on':\n            self.pump_on_count = self.pump_on_count + 1\n        self.prev_pump_state = pump_state\n\n        if self.irrigator_off_to_on_count > 4 and self.pump_on_count >= 2:\n            Tags('Blind').blind_close()\n            Tags('Curtain').curtain_close()\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 1000,
        "code": "prev_irrigator_state := (#Irrigator).switch_switch\nirrigator_off_to_on_count := 0\nprev_pump_state := (#Pump).switch_switch\npump_on_count := 0\nirrigator_state = (#Irrigator).switch_switch\npump_state = (#Pump).switch_switch\nif ((prev_irrigator_state == 'off') and (irrigator_state == 'on')) {\n    irrigator_off_to_on_count = irrigator_off_to_on_count + 1\n}\nprev_irrigator_state = irrigator_state\nif ((pump_state == 'on') and (prev_pump_state != 'on')) {\n    pump_on_count = pump_on_count + 1\n}\nprev_pump_state = pump_state\nif ((irrigator_off_to_on_count > 4) and (pump_on_count >= 2)) {\n    (#Blind).blind_close()\n    (#Curtain).curtain_close()\n    break\n}"
      }
    ]
  },
  {
    "command": "실시간으로 검사해서 창문이 열렸다 닫힌 횟수가 3번 이상이고, 그 사이 선풍기가 한 번도 꺼지지 않았으면 선풍기를 꺼 주고 블라인드를 닫아 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''                    \n        self.period = 100               \n        self.prev_window_state = Tags('Window').windowControl_window\n        self.window_open_to_close_count = 0\n        self.fan_off_detected = False\n\n    def run(self):\n        window_state = Tags('Window').windowControl_window\n        fan_state = Tags('Fan').switch_switch\n\n        if self.prev_window_state == 'open' and window_state == 'closed':\n            self.window_open_to_close_count = self.window_open_to_close_count + 1\n        self.prev_window_state = window_state\n\n        if fan_state == 'off':\n            self.fan_off_detected = True\n\n        if self.window_open_to_close_count >= 3 and self.fan_off_detected == False:\n            Tags('Fan').switch_off()\n            Tags('Blind').blind_close()\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 100,
        "code": "prev_window_state := (#Window).windowControl_window\nwindow_open_to_close_count := 0\nfan_off_detected := False\nwindow_state = (#Window).windowControl_window\nfan_state = (#Fan).switch_switch\nif ((prev_window_state == 'open') and (window_state == 'closed')) {\n    window_open_to_close_count = window_open_to_close_count + 1\n}\nprev_window_state = window_state\nif (fan_state == 'off') {\n    fan_off_detected = True\n}\nif ((window_open_to_close_count >= 3) and (fan_off_detected == False)) {\n    (#Fan).switch_off()\n    (#Blind).blind_close()\n    break\n}"
      }
    ]
  },
  {
    "command": "매시간 0분부터 30분까지, 3초마다 확인해서 제습기가 켜졌다 꺼진 횟수가 4번 이상이고, 그 때 습도가 65% 이상이면 알람의 사이렌을 1초간, 3초 간격으로 두 번 울리고 그 후 커튼을 닫아 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = '0 * * * *'\n        self.period = 3000\n        self.prev_state = Tags('Dehumidifier').switch_switch\n        self.toggle_count = 0\n\n    def run(self):\n        minute = Tags('Clock').clock_minute\n        if minute <= 30:\n            current_state = Tags('Dehumidifier').switch_switch\n            humidity = Tags('AirQualityDetector').relativeHumidityMeasurement_humidity\n\n            if self.prev_state == 'off' and current_state == 'on':\n                self.toggle_count = self.toggle_count + 1\n            self.prev_state = current_state\n\n            if self.toggle_count >= 4 and humidity >= 65.0:\n                Tags('Alarm').alarm_siren()\n                Tags('Clock').clock_delay(0, 0, 1)\n                Tags('Alarm').alarm_off()\n                Tags('Clock').clock_delay(0, 0, 3)\n                Tags('Alarm').alarm_siren()\n                Tags('Clock').clock_delay(0, 0, 1)\n                Tags('Alarm').alarm_off()\n                Tags('Curtain').curtain_close()\n                self.toggle_count = 0\n                break\n        else:\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "0 * * * *",
        "period": 3000,
        "code": "prev_state := (#Dehumidifier).switch_switch\ntoggle_count := 0\nminute = (#Clock).clock_minute\nif (minute <= 30) {\n    current_state = (#Dehumidifier).switch_switch\n    humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity\n    if ((prev_state == 'off') and (current_state == 'on')) {\n        toggle_count = toggle_count + 1\n    }\n    prev_state = current_state\n    if ((toggle_count >= 4) and (humidity >= 65.0)) {\n        (#Alarm).alarm_siren()\n        (#Clock).clock_delay(0, 0, 1)\n        (#Alarm).alarm_off()\n        (#Clock).clock_delay(0, 0, 3)\n        (#Alarm).alarm_siren()\n        (#Clock).clock_delay(0, 0, 1)\n        (#Alarm).alarm_off()\n        (#Curtain).curtain_close()\n        toggle_count = 0\n        break\n    }\n} else {\n    break\n}"
      }
    ]
  },
  {
    "command": "10분마다 확인하여 온도가 5도 이상 연속으로 세 번 상승하고 에어컨이 꺼져 있으면 에어컨을 키고 냉방 모드로 설정해줘",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''                    \n        self.period = 600000               \n        self.temp_1 = -999.0\n        self.temp_2 = -999.0\n        self.temp_3 = -999.0\n\n    def run(self):\n        current_temp = Tags('TemperatureSensor').temperatureMeasurement_temperature\n\n        self.temp_1 = self.temp_2\n        self.temp_2 = self.temp_3\n        self.temp_3 = current_temp\n\n        if self.temp_1 != -999.0 and self.temp_2 != -999.0 and self.temp_3 != -999.0:\n            rise_1 = self.temp_2 - self.temp_1\n            rise_2 = self.temp_3 - self.temp_2\n            if rise_1 > 5.0 and rise_2 > 5.0:\n                if Tags('AirConditioner').switch_switch == 'off':\n                    Tags('AirConditioner').switch_on()\n                    Tags('AirConditioner').airConditionerMode_setAirConditionerMode('cool')\n                    break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 600000,
        "code": "temp_1 := -999.0\ntemp_2 := -999.0\ntemp_3 := -999.0\ncurrent_temp = (#TemperatureSensor).temperatureMeasurement_temperature\ntemp_1 = temp_2\ntemp_2 = temp_3\ntemp_3 = current_temp\nif ((temp_1 != -999.0) and (temp_2 != -999.0) and (temp_3 != -999.0)) {\n    rise_1 = temp_2 - temp_1\n    rise_2 = temp_3 - temp_2\n    if ((rise_1 > 5.0) and (rise_2 > 5.0)) {\n        if ((#AirConditioner).switch_switch == 'off') {\n            (#AirConditioner).switch_on()\n            (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')\n            break\n        }\n    }\n}"
      }
    ]
  },
  {
    "command": "시각 상관없이 항상, 5초마다 체크해서 TV가 10분 동안 꺼져 있었다가 켜지는 이벤트가 두 번 이상 발생했으면, 스피커를 켜고 조명을 60으로 맞춰 줘. 단, 수요일에는 빼고",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''                    \n        self.period = 5000               \n        self.prev_state = Tags('Television').switch_switch\n        self.off_start_time = -1.0\n        self.off_to_on_count = 0\n\n    def run(self):\n        weekday = Tags('Clock').clock_weekday\n        if weekday != 'wednesday':\n            current_state = Tags('Television').switch_switch\n            current_time = Tags('Clock').clock_timestamp\n\n            if current_state == 'off':\n                if self.off_start_time == -1.0:\n                    self.off_start_time = current_time\n            else:\n                if self.prev_state == 'off' and self.off_start_time != -1.0:\n                    duration = current_time - self.off_start_time\n                    if duration >= 600.0:\n                        self.off_to_on_count = self.off_to_on_count + 1\n                    self.off_start_time = -1.0\n\n            self.prev_state = current_state\n\n            if self.off_to_on_count >= 2:\n                Tags('Speaker').switch_on()\n                Tags('Light').switchLevel_setLevel(60, 0)\n                break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 5000,
        "code": "prev_state := (#Television).switch_switch\noff_start_time := -1.0\noff_to_on_count := 0\nweekday = (#Clock).clock_weekday\nif (weekday != 'wednesday') {\n    current_state = (#Television).switch_switch\n    current_time = (#Clock).clock_timestamp\n    if (current_state == 'off') {\n        if (off_start_time == -1.0) {\n            off_start_time = current_time\n        }\n    } else if ((prev_state == 'off') and (off_start_time != -1.0)) {\n        duration = current_time - off_start_time\n        if (duration >= 600.0) {\n            off_to_on_count = off_to_on_count + 1\n        }\n        off_start_time = -1.0\n    }\n    prev_state = current_state\n    if (off_to_on_count >= 2) {\n        (#Speaker).switch_on()\n        (#Light).switchLevel_setLevel(60, 0)\n        break\n    }\n}"
      }
    ]
  },
  {
    "command": "3초마다 확인해서 조명이 꺼진 상태에서 3분 이상 유지되다가 다시 켜지는 일이 2번 연속 발생하면 블라인드를 모두 닫아 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''                    \n        self.period = 3000               \n        self.prev_state = Tags('Light').switch_switch\n        self.off_start_time = -1.0\n        self.off_to_on_count = 0\n\n    def run(self):\n        current_state = Tags('Light').switch_switch\n        current_time = Tags('Clock').clock_timestamp\n\n        if current_state == 'off':\n            if self.off_start_time == -1.0:\n                self.off_start_time = current_time\n        else:\n            if self.prev_state == 'off' and self.off_start_time != -1.0:\n                duration = current_time - self.off_start_time\n                if duration >= 180.0:\n                    self.off_to_on_count = self.off_to_on_count + 1\n                self.off_start_time = -1.0\n\n        self.prev_state = current_state\n\n        if self.off_to_on_count >= 2:\n            All(Tags('Blind').blind_close())\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 3000,
        "code": "prev_state := (#Light).switch_switch\noff_start_time := -1.0\noff_to_on_count := 0\ncurrent_state = (#Light).switch_switch\ncurrent_time = (#Clock).clock_timestamp\nif (current_state == 'off') {\n    if (off_start_time == -1.0) {\n        off_start_time = current_time\n    }\n} else if ((prev_state == 'off') and (off_start_time != -1.0)) {\n    duration = current_time - off_start_time\n    if (duration >= 180.0) {\n        off_to_on_count = off_to_on_count + 1\n    }\n    off_start_time = -1.0\n}\nprev_state = current_state\nif (off_to_on_count >= 2) {\n    all(#Blind).blind_close()\n    break\n}"
      }
    ]
  },
  {
    "command": "월요일 오후에, 1초마다 확인하여 문이 열렸을 때부터 닫힐 때까지 걸린 시간이 15초 이상인 경우가 3회 연속 발생했으면 알람의 사이렌을 1초간, 3초 간격으로 세 번 울려 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = '0 12 * * 1'\n        self.period = 1000\n        self.prev_state = Tags('Window').windowControl_window\n        self.open_start_time = -1.0\n        self.long_open_count = 0\n\n    def run(self):\n        current_state = Tags('Window').windowControl_window\n        current_time = Tags('Clock').clock_timestamp\n\n        if current_state == 'open':\n            if self.open_start_time == -1.0:\n                self.open_start_time = current_time\n        else:\n            if self.prev_state == 'open' and self.open_start_time != -1.0:\n                duration = current_time - self.open_start_time\n                if duration >= 15.0:\n                    self.long_open_count = self.long_open_count + 1\n                else:\n                    self.long_open_count = 0\n                self.open_start_time = -1.0\n\n        self.prev_state = current_state\n\n        if self.long_open_count >= 3:\n            Tags('Alarm').alarm_siren()\n            Tags('Clock').clock_delay(0, 0, 1)\n            Tags('Alarm').alarm_off()\n            Tags('Clock').clock_delay(0, 0, 3)\n            Tags('Alarm').alarm_siren()\n            Tags('Clock').clock_delay(0, 0, 1)\n            Tags('Alarm').alarm_off()\n            Tags('Clock').clock_delay(0, 0, 3)\n            Tags('Alarm').alarm_siren()\n            Tags('Clock').clock_delay(0, 0, 1)\n            Tags('Alarm').alarm_off()\n            self.long_open_count = 0\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "0 12 * * 1",
        "period": 1000,
        "code": "prev_state := (#Window).windowControl_window\nopen_start_time := -1.0\nlong_open_count := 0\ncurrent_state = (#Window).windowControl_window\ncurrent_time = (#Clock).clock_timestamp\nif (current_state == 'open') {\n    if (open_start_time == -1.0) {\n        open_start_time = current_time\n    }\n} else if ((prev_state == 'open') and (open_start_time != -1.0)) {\n    duration = current_time - open_start_time\n    if (duration >= 15.0) {\n        long_open_count = long_open_count + 1\n    } else {\n        long_open_count = 0\n    }\n    open_start_time = -1.0\n}\nprev_state = current_state\nif (long_open_count >= 3) {\n    (#Alarm).alarm_siren()\n    (#Clock).clock_delay(0, 0, 1)\n    (#Alarm).alarm_off()\n    (#Clock).clock_delay(0, 0, 3)\n    (#Alarm).alarm_siren()\n    (#Clock).clock_delay(0, 0, 1)\n    (#Alarm).alarm_off()\n    (#Clock).clock_delay(0, 0, 3)\n    (#Alarm).alarm_siren()\n    (#Clock).clock_delay(0, 0, 1)\n    (#Alarm).alarm_off()\n    long_open_count = 0\n    break\n}"
      }
    ]
  },
  {
    "command": "실시간으로 확인하여 움직임이 감지됐을 때 문이 열려 있던 비율이 50%를 넘으면, 이후 조명이 켜질 때마다 창문도 함께 열어 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''                    \n        self.period = 100               \n        self.motion_detected_count = 0\n        self.motion_with_window_open_count = 0\n        self.enable_window_open = False\n        self.prev_light_state = Tags('Light').switch_switch\n\n    def run(self):\n        motion = Tags('MotionSensor').motionSensor_motion\n        window_state = Tags('Window').windowControl_window\n        light_state = Tags('Light').switch_switch\n\n        if motion == 'active':\n            self.motion_detected_count = self.motion_detected_count + 1\n            if window_state == 'open':\n                self.motion_with_window_open_count = self.motion_with_window_open_count + 1\n\n            if self.motion_detected_count > 0:\n                ratio = (self.motion_with_window_open_count * 1.0) / (self.motion_detected_count * 1.0)\n                if ratio > 0.5:\n                    self.enable_window_open = True\n\n        if self.enable_window_open:\n            if self.prev_light_state == 'off' and light_state == 'on':\n                Tags('Window').windowControl_open()\n\n        self.prev_light_state = light_state```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 100,
        "code": "motion_detected_count := 0\nmotion_with_window_open_count := 0\nenable_window_open := False\nprev_light_state := (#Light).switch_switch\nmotion = (#MotionSensor).motionSensor_motion\nwindow_state = (#Window).windowControl_window\nlight_state = (#Light).switch_switch\nif (motion == 'active') {\n    motion_detected_count = motion_detected_count + 1\n    if (window_state == 'open') {\n        motion_with_window_open_count = motion_with_window_open_count + 1\n    }\n    if (motion_detected_count > 0) {\n        ratio = motion_with_window_open_count * 1.0 / (motion_detected_count * 1.0)\n        if (ratio > 0.5) {\n            enable_window_open = True\n        }\n    }\n}\nif (enable_window_open) {\n    if ((prev_light_state == 'off') and (light_state == 'on')) {\n        (#Window).windowControl_open()\n    }\n}\nprev_light_state = light_state"
      }
    ]
  }
]