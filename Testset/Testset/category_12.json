[
  {
    "command": "실시간으로 확인하여 토양 습도 센서의 값이 30% 이하가 되면 관개 장치를 켜 줘, 또한 1초마다 체크해서 온도가 25도를 넘으면 펌프를 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = '' \n        self.period = 100  \n        \n    def run(self):\n        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity\n        if soil_humidity <= 30.0:\n            Tags('Irrigator').switch_on()\n            break\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = '' \n        self.period = 1000  \n        \n    def run(self):\n        temperature = Tags('TemperatureSensor').temperatureMeasurement_temperature\n        if temperature > 25.0:\n            Tags('Pump').switch_off()\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 100,
        "code": "soil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (soil_humidity <= 30.0) {\n    (#Irrigator).switch_on()\n    break\n}"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": 1000,
        "code": "temperature = (#TemperatureSensor).temperatureMeasurement_temperature\nif (temperature > 25.0) {\n    (#Pump).switch_off()\n    break\n}"
      }
    ]
  },
  {
    "command": "펌프가 꺼지면 스피커를 켜고, 토양 습도 센서의 값이 20% 이하가 되면 관개 장치를 켜 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Pump').switch_switch == 'on')\n        wait_until(Tags('Pump').switch_switch == 'off')\n        Tags('Speaker').switch_on()\n        break\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = 100\n\n    def run(self):\n        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity\n        if soil_humidity <= 20.0:\n            Tags('Irrigator').switch_on()\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": -1,
        "code": "wait until((#Pump).switch_switch == 'on')\nwait until((#Pump).switch_switch == 'off')\n(#Speaker).switch_on()\nbreak"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": 100,
        "code": "soil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (soil_humidity <= 20.0) {\n    (#Irrigator).switch_on()\n    break\n}"
      }
    ]
  },
  {
    "command": "토양 습도 센서의 값이 25% 이하로 떨어진 후 10초 동안 값이 변하지 않으면 알람의 사이렌을 울려 줘. 그 후에는 알람의 사이렌이 울렸는지 여부와 상관 없이 조명을 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 100\n        self.stable_count = 0\n        self.last_value = -1.0\n\n    def run(self):\n        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity\n        if soil_humidity <= 25.0:\n            if self.last_value == -1.0:\n                self.last_value = soil_humidity\n                self.stable_count = 0\n            elif soil_humidity == self.last_value:\n                self.stable_count = self.stable_count + 1\n            else:\n                self.last_value = soil_humidity\n                self.stable_count = 0\n            if self.stable_count >= 100:\n                Tags('Alarm').alarm_siren()\n                self.stable_count = 0\n                self.last_value = -1.0\n                Tags('Light').switch_off()\n                break\n        else:\n            self.last_value = -1.0\n            self.stable_count = 0```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 100,
        "code": "stable_count := 0\nlast_value := -1.0\nsoil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (soil_humidity <= 25.0) {\n    if (last_value == -1.0) {\n        last_value = soil_humidity\n        stable_count = 0\n    } else if (soil_humidity == last_value) {\n        stable_count = stable_count + 1\n    } else {\n        last_value = soil_humidity\n        stable_count = 0\n    }\n    if (stable_count >= 100) {\n        (#Alarm).alarm_siren()\n        stable_count = 0\n        last_value = -1.0\n        (#Light).switch_off()\n        break\n    }\n} else {\n    last_value = -1.0\n    stable_count = 0\n}"
      }
    ]
  },
  {
    "command": "실시간으로 확인하여 조명이 켜지면 펌프를 켜 줘, 토양 습도 센서의 값이 30% 이하로 떨어지면 블라인드를 닫아 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Light').switch_switch == 'off')\n        wait_until(Tags('Light').switch_switch == 'on')\n        Tags('Pump').switch_on()\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = 100\n\n    def run(self):\n        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity\n        if soil_humidity <= 30.0:\n            Tags('Blind').blind_close()\n            break```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": -1,
        "code": "wait until((#Light).switch_switch == 'off')\nwait until((#Light).switch_switch == 'on')\n(#Pump).switch_on()"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": 100,
        "code": "soil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (soil_humidity <= 30.0) {\n    (#Blind).blind_close()\n    break\n}"
      }
    ]
  },
  {
    "command": "관개 장치가 꺼지고 나서 토양 습도 센서의 값이 20% 이하로 떨어지면 알람의 사이렌을 울려 줘. 커튼이 닫혀 있으면 열어 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Irrigator').switch_switch == 'on')\n        wait_until(Tags('Irrigator').switch_switch == 'off')\n        wait_until(Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity <= 20.0)\n        Tags('Alarm').alarm_siren()\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if Tags('Curtain').curtain_curtain == 'closed':\n            Tags('Curtain').curtain_open()```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": -1,
        "code": "wait until((#Irrigator).switch_switch == 'on')\nwait until((#Irrigator).switch_switch == 'off')\nwait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)\n(#Alarm).alarm_siren()"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": -1,
        "code": "if ((#Curtain).curtain_curtain == 'closed') {\n    (#Curtain).curtain_open()\n}"
      }
    ]
  },
  {
    "command": "실시간으로 확인하여 문이 열릴 때마다 조명을 켜 줘, TV가 꺼지면 스피커를 끄고 블라인드를 닫아 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 100\n        self.last_state = 'closed'\n\n    def run(self):\n        door_state = Tags('DoorLock').doorControl_door\n        if door_state != self.last_state:\n            if door_state == 'open':\n                Tags('Light').switch_on()\n            self.last_state = door_state\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Television').switch_switch == 'on')\n        wait_until(Tags('Television').switch_switch == 'off')\n        Tags('Speaker').switch_off()\n        Tags('Blind').blind_close()```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 100,
        "code": "last_state := 'closed'\ndoor_state = (#DoorLock).doorControl_door\nif (door_state != last_state) {\n    if (door_state == 'open') {\n        (#Light).switch_on()\n    }\n    last_state = door_state\n}"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": -1,
        "code": "wait until((#Television).switch_switch == 'on')\nwait until((#Television).switch_switch == 'off')\n(#Speaker).switch_off()\n(#Blind).blind_close()"
      }
    ]
  },
  {
    "command": "제습기가 꺼지면 켜 줘, 조명이 꺼져 있으면 밝기를 50으로 설정해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Dehumidifier').switch_switch == 'on')\n        wait_until(Tags('Dehumidifier').switch_switch == 'off')\n        Tags('Dehumidifier').switch_on()\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if Tags('Light').switch_switch == 'off':\n            Tags('Light').switchLevel_setLevel(50, 0)```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": -1,
        "code": "wait until((#Dehumidifier).switch_switch == 'on')\nwait until((#Dehumidifier).switch_switch == 'off')\n(#Dehumidifier).switch_on()"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": -1,
        "code": "if ((#Light).switch_switch == 'off') {\n    (#Light).switchLevel_setLevel(50, 0)\n}"
      }
    ]
  },
  {
    "command": "창문이 열리면 블라인드를 닫고, 조명이 꺼지면 선풍기를 켜 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Window').windowControl_window == 'closed')\n        wait_until(Tags('Window').windowControl_window == 'open')\n        Tags('Blind').blind_close()\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Light').switch_switch == 'on')\n        wait_until(Tags('Light').switch_switch == 'off')\n        Tags('Fan').switch_on()```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": -1,
        "code": "wait until((#Window).windowControl_window == 'closed')\nwait until((#Window).windowControl_window == 'open')\n(#Blind).blind_close()"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": -1,
        "code": "wait until((#Light).switch_switch == 'on')\nwait until((#Light).switch_switch == 'off')\n(#Fan).switch_on()"
      }
    ]
  },
  {
    "command": "실시간으로 확인하여 움직임이 감지되면 커튼을 닫고, 지금 알람의 사이렌을 울려 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 100\n\n    def run(self):\n        motion_state = Tags('MotionSensor').motionSensor_motion\n        if motion_state == 'active':\n            Tags('Curtain').curtain_close()\n            break\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        Tags('Alarm').alarm_siren()```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 100,
        "code": "motion_state = (#MotionSensor).motionSensor_motion\nif (motion_state == 'active') {\n    (#Curtain).curtain_close()\n    break\n}"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": -1,
        "code": "(#Alarm).alarm_siren()"
      }
    ]
  },
  {
    "command": "창문이 열리면 10초 후 커튼을 열어 주고, 동시에 5초마다 조명을 켰다 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        wait_until(Tags('Window').windowControl_window == 'closed')\n        wait_until(Tags('Window').windowControl_window == 'open')\n        Tags('Clock').clock_delay(0, 0, 10)\n        Tags('Curtain').curtain_open()\n\nclass Scenario2:\n    def __init__(self):\n        self.cron = ''\n        self.period = 5000\n\n    def run(self):\n        Tags('Light').switch_toggle()```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": -1,
        "code": "wait until((#Window).windowControl_window == 'closed')\nwait until((#Window).windowControl_window == 'open')\n(#Clock).clock_delay(0, 0, 10)\n(#Curtain).curtain_open()"
      },
      {
        "name": "Scenario2",
        "cron": "",
        "period": 5000,
        "code": "(#Light).switch_toggle()"
      }
    ]
  }
]