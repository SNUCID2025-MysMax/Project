- command: "매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘."
  code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: 100
    code: |
      phase := 0
      consecutive_time := 0

      if ((#Clock).clock_weekday == "saturday") or ((#Clock).clock_weekday == "sunday") {
        break
      }

      if (phase == 0) {
        if ((#Window).windowControl_window == "closed") and 
            ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and 
            ((#AirQualityDetector).temperatureMeasurement_temperature >= 30.0) {

          (#Clock).clock_delay(0, 0, 5)
          (#Window).windowControl_open()

          if ((#Fan).switch_switch == "off") {
            (#Fan).switch_on()
          }

          phase = 1
        }

      } else if (phase == 1) {
        if ((#AirQualityDetector).dustSensor_fineDustLevel >= 50) {
          consecutive_time = consecutive_time + 100
        } else {
          consecutive_time = 0
        }

        if (consecutive_time >= 60000) {
          (#Window).windowControl_close()
          (#Fan).switch_off()

          if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0) {
            (#Humidifier).switch_on()
          }

          if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) and 
              ((#Irrigator).switch_switch == "off") {
            (#Irrigator).switch_on()
          }

          break
        }
      }
- command: "매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘."
  code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: 100
    code: |
      state := 0
      blind_opened := false
      alarm_time := 0
      door_open_flag := false
      door_open_count := 0
      first_open_start := 0
      first_open_end := 0
      second_open_start := 0
      second_open_end := 0
      blink_mode := false
      window_closed_during_monitoring := false

      if (state == 0) {
        if ((#Light).switch_switch == 'off' and (#Window #Lower #Odd).windowControl_window == 'closed') {
          all(#Blind).blind_open()
          blind_opened = true
        }
        state = 1
      }

      if (state == 1 and (#Window #Lower #Odd).windowControl_window == 'open') {
        (#Clock).clock_delay(0, 0, 5)
        (#Alarm).alarm_siren()
        alarm_time = (#Clock).clock_timestamp
        state = 2
      }

      if (state == 2) {
        now = (#Clock).clock_timestamp

        if ((now - alarm_time) <= 10 and (#Window #Lower #Odd).windowControl_window == 'closed') {
          window_closed_during_monitoring = true
        }

        if ((now - alarm_time) >= 10) {
          if (window_closed_during_monitoring == false) {
            blink_mode = true
          }

          if (blind_opened == true and door_open_count >= 2) {
            first_duration = first_open_end - first_open_start
            second_duration = second_open_end - second_open_start
            if (second_duration > first_duration) {
              all(#AirConditioner #Wall).switch_off()
            }
          }

          state = 3
        }
      }

      if (state == 3 and blink_mode == true) {
        (#Light).switch_toggle()
        (#Clock).clock_delay(0, 0, 2)
      }

      if ((#DoorLock).doorControl_door == 'open' and door_open_flag == false) {
        door_open_flag = true
        now = (#Clock).clock_timestamp
        door_open_count = door_open_count + 1
        if (door_open_count == 1) {
          first_open_start = now
        } else if (door_open_count == 2) {
          second_open_start = now
        }
      }
      if ((#DoorLock).doorControl_door == 'closed' and door_open_flag == true) {
        door_open_flag = false
        now = (#Clock).clock_timestamp
        if (door_open_count == 1) {
          first_open_end = now
        } else if (door_open_count == 2) {
          second_open_end = now
        }
      }
- command: "에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘."
  code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      state := 0
      check_start := 0.0
      alarm_time := 0.0
      blink_phase := 0
      wait_start := 0.0
      door_opened := false
      blink_start := 0.0

      if (state == 0 and (#AirConditioner).switch_switch == 'off' and (#Window).windowControl_window == 'open') {
        check_start = (#Clock).clock_timestamp
        state = 1
      }

      if (state == 1) {
        now = (#Clock).clock_timestamp
        if ((now - check_start) >= 10) {
          humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity
          if (humidity > 60.0) {
            (#Blind).blind_close()
            (#Light).switch_off()
            state = 2
          } else {
            check_start = now
          }
        }
      }

      if (state == 2 and (#DoorLock).doorControl_door == 'closed') {
        (#Clock).clock_delay(0, 0, 5)
        (#Alarm).alarm_siren()
        alarm_time = (#Clock).clock_timestamp
        blink_start = alarm_time
        state = 3
      }

      if (state == 3) {
        now = (#Clock).clock_timestamp

        if ((now - alarm_time) > 60) {
          break
        }

        if ((#DoorLock).doorControl_door == 'open') {
          door_opened = true

          if (blink_phase == 0) {
            (#Light).switch_toggle()
            wait_start = now
            blink_phase = 1
          } else if (blink_phase == 1 and (now - wait_start) >= 1) {
            blink_phase = 0
          }
        }

        if (door_opened == true and (#DoorLock).doorControl_door == 'closed') {
          (#Speaker).mediaPlayback_speak("문이 닫혔습니다")
          break
        }
      } 
- command: "습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘."
  code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)
      if ((#Window).windowControl_window == 'open') {
        (#Clock).clock_delay(0, 0, 5)
        (#Dehumidifier).switch_on()
        wait until((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0)
        (#AirConditioner).switch_on()
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      state := 0
      curtain_phase := 0
      start_time := 0.0
      alarm_state := 0
      motion_timer := 0.0
      alarm_disabled_once := false

      if (state == 0 and (#AirConditioner).switch_switch == 'on' and (#Blind).blind_blind == 'open') {
        start_time = (#Clock).clock_timestamp
        state = 1
      }

      if (state == 1) {
        now = (#Clock).clock_timestamp

        if ((now - start_time) >= 10) {
          if (curtain_phase == 0) {
            (#Curtain).curtain_close()
            curtain_phase = 1
          } else {
            (#Curtain).curtain_open()
            curtain_phase = 0
          }
          start_time = now
        }

        if ((#MotionSensor).motionSensor_motion == 'active' and alarm_disabled_once == false) {
          (#Alarm).alarm_off()
          alarm_state = 1
          motion_timer = now
          alarm_disabled_once = true
        }

        if (alarm_state == 1 and (#MotionSensor).motionSensor_motion == 'inactive') {
          now = (#Clock).clock_timestamp
          if ((now - motion_timer) >= 5) {
            (#Alarm).alarm_siren()
            alarm_state = 0
          }
        }
      }
- command: "조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘."
  code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      state := 0
      alarm_time := 0.0
      door_open_time := 0.0
      blind_count := 0
      blind_phase := 0
      blind_timer := 0.0
      window_remained_closed := true

      if ((#Speaker).switch_switch == 'on') {
        (#Speaker).switch_off()
        break
      }

      if (state == 0 and (#Light).switch_switch == 'on' and (#Window).windowControl_window == 'closed' and (#DoorLock).doorControl_door == 'open') {
        door_open_time = (#Clock).clock_timestamp
        state = 1
      }

      if (state == 1) {
        now = (#Clock).clock_timestamp
        if ((now - door_open_time) >= 3) {
          (#Siren).sirenMode_setSirenMode('siren')
          alarm_time = now
          window_remained_closed = true
          state = 2
        }
      }

      if (state == 2) {
        now = (#Clock).clock_timestamp
        if ((now - alarm_time) <= 10 and (#Window).windowControl_window == 'open') {
          window_remained_closed = false
        }
        if ((now - alarm_time) > 10) {
          state = 3
        }
      }

      if (state == 3) {
        if (window_remained_closed == true) {
          (#Curtain).curtain_close()
          (#Light).switch_off()
          (#Fan).fanSpeed_setSpeed = 50
        }
        state = 4
      }

      if (state == 4) {
        if ((#TemperatureSensor).temperatureMeasurement_temperature >= 27.0) {
          (#AirConditioner).airConditionerMode_setMode = 'cool'
        }
        state = 5
      }

      if (state == 5) {
        if ((#MotionSensor).motionSensor_motion == 'active') {
          blind_timer = (#Clock).clock_timestamp
          state = 6
        } else {
          break
        }
      }

      if (state == 6) {
        now = (#Clock).clock_timestamp
        if ((now - blind_timer) >= 1) {
          if (blind_phase == 0) {
            (#Blind).blind_open()
            blind_phase = 1
          } else {
            (#Blind).blind_close()
            blind_phase = 0
            blind_count = blind_count + 1
          }
          blind_timer = now
        }
        if (blind_count >= 3) {
          break
        }
      }
- command: "조명이 꺼져 있고 창문이 열려 있는 상태에서 사람이 감지되면 3초 대기 후 조명을 켜고, 5초 후 블라인드를 닫아 줘. 이후 10초마다 알람을 한 번 1초간 울리되, 알람이 두 번 울린 후에는 에어컨을 ‘cool’ 모드로 전환해 줘. 단, 사람이 감지된 이후 문이 열리면 모든 동작을 중지하고 커튼을 닫아 줘."
  code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      state := 0
      motion_time := 0.0
      blind_time := 0.0
      alarm_timer := 0.0
      alarm_count := 0

      if (state == 0 and (#Light).switch_switch == 'off' and (#Window).windowControl_window == 'open' and (#MotionSensor).motionSensor_motion == 'active') {
        motion_time = (#Clock).clock_timestamp
        state = 1
      }

      if (state >= 1 and (#DoorLock).doorControl_door == 'open') {
        (#Curtain).curtain_close()
        break
      }

      if (state == 1) {
        now = (#Clock).clock_timestamp
        if ((now - motion_time) >= 3) {
          (#Light).switch_on()
          blind_time = now
          state = 2
        }
      }

      if (state == 2) {
        now = (#Clock).clock_timestamp
        if ((now - blind_time) >= 5) {
          (#Blind).blind_close()
          alarm_timer = now
          state = 3
        }
      }

      if (state == 3) {
        now = (#Clock).clock_timestamp
        if ((now - alarm_timer) >= 10) {
          (#Alarm).alarm_siren()
          alarm_timer = now
          alarm_count = alarm_count + 1
          state = 4
        }
      }

      if (state == 4) {
        now = (#Clock).clock_timestamp
        if ((now - alarm_timer) >= 1) {
          (#Alarm).alarm_off()
          if (alarm_count == 2) {
            (#AirConditioner).airConditionerMode_setMode = 'cool'
          }
          state = 3
        }
      }
- command: "매주 월요일 아침 7시에 조명을 20으로 설정해 줘. 이후 실시간으로 확인해서 자정까지 움직임이 감지될 때마다 블라인드를 열고, 3초 간격으로 커튼을 두 번 열었다 닫아 줘. 커튼을 조정할 때마다 창문이 열려 있으면 선풍기를 켜고, 닫혀 있으면 에어컨을 꺼 줘."
  code:
  - name: "Scenario1"
    cron: "0 7 * * 1"
    period: 0
    code: |
      (#Light).switch_setLevel = 20
  - name: "Scenario2"
    cron: "0 7 * * 1"
    period: 100
    code: |
      state := 0
      curtain_timer := 0.0
      curtain_phase := 0
      curtain_action_count := 0

      if ((#Clock).clock_dayOfWeek != 1) {
        break
      }

      if (state == 0 and (#MotionSensor).motionSensor_motion == 'active') {
        (#Blind).blind_open()
        curtain_timer = (#Clock).clock_timestamp
        curtain_action_count = 0
        curtain_phase = 0
        state = 1
      }

      if (state == 1) {
        now = (#Clock).clock_timestamp
        if ((now - curtain_timer) >= 3) {
          if (curtain_phase == 0) {
            (#Curtain).curtain_open()
            curtain_phase = 1
          } else {
            (#Curtain).curtain_close()
            curtain_phase = 0
          }

          if ((#Window).windowControl_window == 'open') {
            (#Fan).switch_on()
          } else {
            (#AirConditioner).switch_off()
          }

          curtain_action_count = curtain_action_count + 1
          curtain_timer = now
        }

        if (curtain_action_count >= 4) {
          state = 0
        }
      }
- command: "매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘."
  code:
  - name: "Scenario1"
    cron: "0 22 * * *"
    period: 100
    code: |
      state := 0
      siren_triggered := false
      door_open_flag := false
      door_open_count := 0
      first_open_start := 0
      first_open_end := 0
      second_open_start := 0
      second_open_end := 0

      if (state == 0) {
        if ((#Window #Lower).windowControl_window == 'open' and (#Light #Even).switch_switch == 'on') {
          (#Alarm).alarm_siren()
          siren_triggered = true
        }
        (#Clock).clock_delay(0, 0, 5)
        state = 1
      }

      if (state == 1) {
        if (siren_triggered == true) {
          (#Blind).blind_close()
        }
        state = 2
      }

      if (state == 2 and door_open_count >= 2) {
        (#Curtain).curtain_close()
        total_time = (first_open_end - first_open_start) + (second_open_end - second_open_start)
        (#Alarm).alarm_siren()
        (#Clock).clock_delay(0, 0, total_time)
        (#Alarm).alarm_off()
        break
      }

      if ((#DoorLock #Odd).doorControl_door == 'open' and door_open_flag == false) {
        door_open_flag = true
        now = (#Clock).clock_timestamp
        door_open_count = door_open_count + 1
        if (door_open_count == 1) {
          first_open_start = now
        } else if (door_open_count == 2) {
          second_open_start = now
        }
      }
      if ((#DoorLock #Odd).doorControl_door == 'closed' and door_open_flag == true) {
        door_open_flag = false
        now = (#Clock).clock_timestamp
        if (door_open_count == 1) {
          first_open_end = now
        } else if (door_open_count == 2) {
          second_open_end = now
        }
      }
- command: "매일 실시간으로 검사해서 로봇청소기가 작동 중이면서 사람이 움직일 때마다 10초 후 스피커로 “청소 중입니다”라는 음성을 재생해 줘. 또한 습도가 60%를 넘으면 홀수 태그가 붙은 공기청정기를 켜 줘. 공기청정기가 켜져 있는 동안 스마트 리모컨으로 TV 전원을 3초마다 껐다 켰다 해 줘. 창문이 5분 연속으로 열려 있을 때마다 닫아 줘."
  code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      wait until((#RobotCleaner).switch_switch == 'on' and (#MotionSensor).motionSensor_motion == 'active')
      (#Clock).clock_delay(0, 0, 10)
      (#Speaker).mediaPlayback_speak("청소 중입니다")
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity > 60.0)
      (#AirPurifier #Odd).switch_on()
  - name: "Scenario3"
    cron: ""
    period: 3000
    code: |
      if ((#AirPurifier #Odd).switch_switch == 'on') {
        (#Television).switch_toggle()
      }
  - name: "Scenario4"
    cron: ""
    period: 100
    code: |
      open_duration := 0
      if ((#Window).windowControl_window == 'open') {
        open_duration = open_duration + 100
      } else {
        open_duration = 0
      }
      if (open_duration >= 300000) {
        (#Window).windowControl_close()
        open_duration = 0
      }
- command: "실시간으로 확인해서 벽면 조명이 꺼져 있고 홀수 태그가 붙은 커튼이 닫힌 상태에서 문이 열리면, 5초 후 그 조명을 켜고 창문을 열어 줘. 이후 30초 동안 움직임이 감지되지 않으면 알람의 사이렌을 울려 줘. 30초가 모두 지난 뒤 에어컨이 꺼져 있고 실내 온도가 28도 이상이면 에어컨을 켜 줘. 또한 그 때 짝수 태그가 붙은 스마트 선풍기가 켜져 있으면 꺼 주고, 켜져 있지 않으면 그대로 두도록 해 줘."
  code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      phase := 0
      elapsed := 0
      motionDetected := false
      if (phase == 0) {
        if (((#Wall Light).switch_switch == "off") and ((#Curtain #Odd).curtain_curtain == "closed") and ((#ContactSensor).contactSensor_contact == "open")) {
          (#Clock).clock_delay(0, 0, 5)
          (#Wall Light).switch_on()
          (#Window).windowControl_open()
          phase = 1
        }
      } else if (phase == 1) {
        if ((#MotionSensor).motionSensor_motion == "active") {
          motionDetected = true
        }
        elapsed = elapsed + 100
        if (elapsed >= 30000) {
          if (motionDetected == false) {
            (#Alarm).alarm_siren()
          }
          phase = 2
        }
      } else if (phase == 2) {
        if (((#AirConditioner).switch_switch == "off") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 28.0)) {
          (#AirConditioner).switch_on()
        }
        if ((#Fan #Even).switch_switch == "on") {
          (#Fan #Even).switch_off()
        }
        break
      }