- command: 에어컨의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirConditioner).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirConditioner).airConditionerMode_airConditionerMode == 'cool') {
        (#Alarm).alarm_siren()
      }
- command: 에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirConditioner).airConditionerMode_targetTemperature == 30) {
        (#Alarm).alarm_siren()
      }
- command: 에어컨이 지원하는 모드를 스피커로 출력해줘
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      modes = (#AirConditioner).airConditionerMode_supportedAcModes
      (#Speaker).mediaPlayback_speak(modes)
- command: 에어컨을 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).switch_off()
- command: 에어컨을 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).switch_on()
- command: 에어컨의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).switch_toggle()
- command: 에어컨을 자동 모드로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).airConditionerMode_setAirConditionerMode('auto')
- command: 에어컨의 목표 온도를 18도로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).airConditionerMode_setTemperature(18)
- command: 공기청정기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirPurifier).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 공기청정기가 수면 모드면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirPurifier).airPurifierFanMode_airPurifierFanMode == 'sleep') {
        (#Alarm).alarm_siren()
      }
- command: 공기청정기가 지원하는 모드를 스피커로 출력해줘
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      modes = (#AirPurifier).airPurifierFanMode_supportedAirPurifierFanModes
      (#Speaker).mediaPlayback_speak(modes)
- command: 공기청정기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).switch_off()
- command: 공기청정기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).switch_on()
- command: 공기청정기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).switch_toggle()
- command: 공기청정기의 모드를 자동으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode('auto')
- command: 공기질 측정기의 측정 온도가 20도이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).temperatureMeasurement_temperature == 20) {
        (#Alarm).alarm_siren()
      }
- command: 이산화탄소 농도가 800ppm 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 800) {
        (#Alarm).alarm_siren()
      }
- command: 공기질 측정기의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).relativeHumidityMeasurement_humidity >= 70) {
        (#Alarm).alarm_siren()
      }
- command: 실내 황사 농도가 150마이크로그램 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).dustSensor_dustLevel >= 150) {
        (#Alarm).alarm_siren()
      }
- command: 실내 미세먼지 농도가 35마이크로그램 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).dustSensor_fineDustLevel >= 35) {
        (#Alarm).alarm_siren()
      }
- command: 실내 초미세먼지 농도가 15마이크로그램 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).dustSensor_veryFineDustLevel >= 15) {
        (#Alarm).alarm_siren()
      }
- command: 총 휘발성 유기 화합물 농도가 0.5ppm 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).tvocMeasurement_tvocLevel >= 0.5) {
        (#Alarm).alarm_siren()
      }
- command: 알람이 경광등 모드이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Alarm).alarm_alarm == 'strobe') {
        (#Alarm).alarm_siren()
      }
- command: 알람의 볼륨이 높음이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Alarm).alarm_alarmVolume == 'high') {
        (#Alarm).alarm_siren()
      }
- command: 알람 배터리 상태가 20퍼센트 이하이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Alarm).battery_battery <= 20) {
        (#Alarm).alarm_siren()
      }
- command: 알람의 사이렌과 경광등을 모두 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_both()
- command: 알람을 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_off()
- command: 알람의 볼륨을 낮음으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_setAlarmVolume('low')
- command: 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_siren()
- command: 알람의 경광등을 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_strobe()
- command: 블라인드가 50 퍼센트 이상 열려있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Blind).blindLevel_blindLevel >= 50) {
        (#Alarm).alarm_siren()
      }
- command: 블라인드가 열린 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Blind).blind_blind == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 블라인드를 70 퍼센트로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blindLevel_setBlindLevel(70)
- command: 블라인드를 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blind_close()
- command: 블라인드를 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blind_open()
- command: 블라인드 움직임을 멈춰줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blind_pause()
- command: 버튼이 눌렸으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Button).button_button == 'pushed') {
        (#Alarm).alarm_siren()
      }
- command: 버튼의 개수가 4개 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Button).button_numberOfButtons >= 4) {
        (#Alarm).alarm_siren()
      }
- command: 버튼이 지원하는 상태를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Button).button_supportedButtonValues
      (#Speaker).mediaPlayback_speak(states)
- command: 버튼1이 눌렸으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button1 == 'pushed') {
        (#Alarm).alarm_siren()
      }
- command: 버튼2가 눌린 상태면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button2 == 'held') {
        (#Alarm).alarm_siren()
      }
- command: 버튼3이 두 번 눌렸으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button3 == 'pushed_2x') {
        (#Alarm).alarm_siren()
      }
- command: 버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button4 == 'swipe_up') {
        (#Alarm).alarm_siren()
      }
- command: 버튼 개수가 4개면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_numberOfButtons == 4) {
        (#Alarm).alarm_siren()
      }
- command: 4개짜리 버튼이 지원하는 상태를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Buttonx4).buttonx4_supportedButtonValues
      (#Speaker).mediaPlayback_speak(states)
- command: 5와 3을 더해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_add(5, 3)
- command: 10을 2로 나눠줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_div(10, 2)
- command: 10을 3으로 나눈 나머지를 구해.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_mod(10, 3)
- command: 7과 8을 곱해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_mul(7, 8)
- command: 15에서 4를 빼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_sub(15, 4)
- command: 카메라의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Camera).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 가장 최근에 찍은 사진을 첨부파일로 이메일을 test@example.com 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      latest_photo = (#Camera).camera_image
      (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "사진", "사진입니다.", latest_photo)
- command: 가장 최근에 찍은 동영상을 첨부파일로 이메일을 test@example.com 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      latest_video = (#Camera).camera_video
      (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "동영상", "동영상입니다.", latest_video)
- command: 카메라를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).switch_off()
- command: 카메라를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).switch_on()
- command: 카메라의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).switch_toggle()
- command: 카메라로 사진을 찍어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).camera_take()
- command: 카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).camera_takeTimelapse(10, 2)
- command: 충전기의 전압이 230볼트 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Charger).voltageMeasurement_voltage >= 230) {
        (#Alarm).alarm_siren()
      }
- command: 충전기의 상태가 충전 중이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Charger).chargingState_chargingState == 'charging') {
        (#Alarm).alarm_siren()
      }
- command: 충전기의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Charger).currentMeasurement_current >= 10) {
        (#Alarm).alarm_siren()
      }
- command: 충전기가 지원하는 상태를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Charger).chargingState_supportedChargingStates
      (#Speaker).mediaPlayback_speak(states)
- command: 오늘 날짜가 2025년 5월 12일이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_date == 20250512) {
        (#Alarm).alarm_siren()
      }
- command: 현재 시간이 2025년 5월 12일 오후 3시 15분이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_datetime == 202505121515) {
        (#Alarm).alarm_siren()
      }
- command: 오늘이 20일이면 알람의 사이렌을 울려줘
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_day == 20) {
        (#Alarm).alarm_siren()
      }
- command: 현재 시간이 오후 3시이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_hour == 15) {
        (#Alarm).alarm_siren()
      }
- command: 오늘이 공휴일이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_isHoliday == true) {
        (#Alarm).alarm_siren()
      }
- command: 지금이 30분이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_minute == 30) {
        (#Alarm).alarm_siren()
      }
- command: 지금이 5월이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_month == 5) {
        (#Alarm).alarm_siren()
      }
- command: 지금이 40초이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_second == 40) {
        (#Alarm).alarm_siren()
      }
- command: 지금이 오후 3시 15분이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_time == 1515) {
        (#Alarm).alarm_siren()
      }
- command: 현재 Unix timestamp가 1747031637.23이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_timestamp == 1747031637.23) {
        (#Alarm).alarm_siren()
      }
- command: 오늘이 금요일이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_weekday == 'friday') {
        (#Alarm).alarm_siren()
      }
- command: 올해가 2025년이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_year == 2025) {
        (#Alarm).alarm_siren()
      }
- command: 1시간 20분 30초 뒤에 알람의 사이렌을 울려줘
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Clock).clock_delay(1, 20, 30)
- command: 접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#ContactSensor).contactSensor_contact == 'closed') {
        (#Alarm).alarm_siren()
      }
- command: 커튼이 열림 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Curtain).curtain_curtain == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 커튼이 지원하는 상태를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Curtain).curtain_supportedCurtainCommands
      (#Speaker).mediaPlayback_speak(states)
- command: 커튼을 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Curtain).curtain_close()
- command: 커튼을 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Curtain).curtain_open()
- command: 커튼을 멈춰줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Curtain).curtain_pause()
- command: 제습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dehumidifier).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 제습기의 모드가 제습 중이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dehumidifier).dehumidifierMode_dehumidifierMode == 'dehumidifying') {
        (#Alarm).alarm_siren()
      }
- command: 제습기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).switch_off()
- command: 제습기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).switch_on()
- command: 제습기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).switch_toggle()
- command: 제습기를 냉각 모드로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode('cooling')
- command: 식기세척기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dishwasher).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 식기세척기의 모드가 에코 모드면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dishwasher).dishwasherMode_dishwasherMode == 'eco') {
        (#Alarm).alarm_siren()
      }
- command: 식기세척기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).switch_off()
- command: 식기세척기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).switch_on()
- command: 식기세척기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).switch_toggle()
- command: 식기세척기를 자동 모드로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).dishwasherMode_setDishwasherMode('auto')
- command: 도어락이 열려 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#DoorLock).doorControl_door == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 도어락을 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#DoorLock).doorControl_close()
- command: 도어락을 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#DoorLock).doorControl_open()
- command: 이메일을 test@example.com 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#EmailProvider).emailProvider_sendMail('test@example.com', '알림', '긴급 상황입니다.')
- command: 선풍기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Fan).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 선풍기의 속도가 2000RPM 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Fan).fanControl_fanSpeed >= 2000) {
        (#Alarm).alarm_siren()
      }
- command: 선풍기의 속도를 1500RPM으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).fanControl_setFanSpeed(1500)
- command: 선풍기의 속도를 80퍼센트로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).fanControl_setPercent(80)
- command: 선풍기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).switch_off()
- command: 선풍기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).switch_on()
- command: 선풍기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).switch_toggle()
- command: 사료 공급기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Feeder).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 사료 공급기의 상태가 급식 중이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Feeder).feederOperatingState_feederOperatingState == 'feeding') {
        (#Alarm).alarm_siren()
      }
- command: 사료 공급기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).switch_off()
- command: 사료 공급기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).switch_on()
- command: 사료 공급기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).switch_toggle()
- command: 사료 공급기의 사료 공급량을 100그램으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).feederPortion_setFeedPortion(100, 'grams')
- command: 사료 공급기의 사료 공급을 시작해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).feederOperatingState_startFeeding()
- command: 가스 측정기의 가스 사용량이 500kWh 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeter >= 500) {
        (#Alarm).alarm_siren()
      }
- command: 가스 측정기의 가스 발열량이 1000kcal 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeterCalorific >= 1000) {
        (#Alarm).alarm_siren()
      }
- command: 가스 측정기의 누적 가스 사용 시간이 10000초 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeterTime >= 10000) {
        (#Alarm).alarm_siren()
      }
- command: 가스 측정기의 가스 사용량이 20세제곱미터 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeterVolume >= 20) {
        (#Alarm).alarm_siren()
      }
- command: 가스 밸브가 열려 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).valve_valve == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 가스 밸브를 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#GasValve).valve_close()
- command: 가스 밸브를 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#GasValve).valve_open()
- command: 가스 밸브의 가스 사용량이 1000kWh 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeter >= 1000) {
        (#Alarm).alarm_siren()
      }
- command: 가스 밸브의 가스 발열량이 500kcal 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeterCalorific >= 500) {
        (#Alarm).alarm_siren()
      }
- command: 가스 밸브의 누적 가스 사용 시간이 5000초 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeterTime >= 5000) {
        (#Alarm).alarm_siren()
      }
- command: 가스 밸브의 가스 사용량이 34세제곱미터 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeterVolume >= 34) {
        (#Alarm).alarm_siren()
      }
- command: 가습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Humidifier).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 가습기의 모드가 자동이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Humidifier).humidifierMode_humidifierMode == 'auto') {
        (#Alarm).alarm_siren()
      }
- command: 가습기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).switch_off()
- command: 가습기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).switch_on()
- command: 가습기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).switch_toggle()
- command: 가습기를 강 모드로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).humidifierMode_setHumidifierMode('high')
- command: 습도 센서의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70) {
        (#Alarm).alarm_siren()
      }
- command: 관개 장치의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Irrigator).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 관개 장치의 급수량이 3리터이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Irrigator).irrigatorPortion_waterPortion == 3) {
        (#Alarm).alarm_siren()
      }
- command: 관개 장치의 상태가 급수 중이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Irrigator).irrigatorOperatingState_irrigatorOperatingState == 'watering') {
        (#Alarm).alarm_siren()
      }
- command: 관개 장치를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).switch_off()
- command: 관개 장치를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).switch_on()
- command: 관개 장치의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).switch_toggle()
- command: 관개 장치의 급수량을 5리터로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).irrigatorPortion_setWaterPortion(5, 'liters')
- command: 관개 장치의 급수를 시작해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).irrigatorOperatingState_startWatering()
- command: 누수가 감지되면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#LeakSensor).leakSensor_leakage == 'detected') {
        (#Alarm).alarm_siren()
      }
- command: 조명이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 조명의 색조가 30이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).colorControl_hue == 30) {
        (#Alarm).alarm_siren()
      }
- command: 조명의 채도가 30이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).colorControl_saturation == 30) {
        (#Alarm).alarm_siren()
      }
- command: 조명 밝기가 100이면 알람의 사이렌을 울려줘
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).switchLevel_level == 100) {
        (#Alarm).alarm_siren()
      }
- command: 조명을 빨간색으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      (#Light).colorControl_setColor("255|0|0")
- command: 조명의 색조를 70으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).colorControl_setHue(70)
- command: 조명의 채도를 90으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).colorControl_setSaturation(90)
- command: 5의 속도로 조명의 밝기를 80으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switchLevel_setLevel(80, 5)
- command: 조명의 경고 모드를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switchLevel_alert()
- command: 조명을 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switch_off()
- command: 조명을 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switch_on()
- command: 조명의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switch_toggle()
- command: 조도 센서의 밝기 값이 500룩스 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#LightSensor).lightLevel_light >= 500) {
        (#Alarm).alarm_siren()
      }
- command: 오늘 학생식당 점심 메뉴를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#MenuProvider).menuProvider_menu('오늘 학생식당 점심')
      (#Speaker).mediaPlayback_speak(menu)
- command: 오늘의 메뉴를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      menu = (#MenuProvider).menuProvider_todayMenu()
      (#Speaker).mediaPlayback_speak(menu)
- command: 오늘의 식당을 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      place = (#MenuProvider).menuProvider_todayPlace()
      (#Speaker).mediaPlayback_speak(menu)
- command: 모션 센서가 활성 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#MotionSensor).motionSensor_motion == 'active') {
        (#Alarm).alarm_siren()
      }
- command: 존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#PresenceSensor).presenceSensor_presence == 'present') {
        (#Alarm).alarm_siren()
      }
- command: 펌프의 현재 동작 모드가 최대이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).pumpOperationMode_currentOperationMode == 'maximum') {
        (#Alarm).alarm_siren()
      }
- command: 펌프의 설정 동작 모드가 기본이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).pumpOperationMode_operationMode == 'normal') {
        (#Alarm).alarm_siren()
      }
- command: 펌프의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 펌프가 지원하는 모드를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      modes = (#Pump).pumpOperationMode_supportedOperationModes
      (#Speaker).mediaPlayback_speak(modes)
- command: 펌프가 열려있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).pump_pump == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 펌프의 동작 모드를 최대로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).pumpOperationMode_setOperationMode('maximum')
- command: 펌프를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).switch_off()
- command: 펌프를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).switch_on()
- command: 펌프의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).switch_toggle()
- command: 펌프를 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).pump_close()
- command: 펌프를 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).pump_open()
- command: 냉장고의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 냉장고의 성에 제거 기능이 켜저 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).refrigeration_defrost == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 냉장고의 급속 냉각 기능이 꺼져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).refrigeration_rapidCooling == 'off') {
        (#Alarm).alarm_siren()
      }
- command: 냉장고의 급속 냉동 기능이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).refrigeration_rapidFreezing == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 냉장고를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).switch_off()
- command: 냉장고의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).switch_toggle()
- command: 냉장고의 성에 제거 기능을 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).refrigeration_setDefrost('on')
- command: 냉장고의 급속 냉각 기능을 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).refrigeration_setRapidCooling('on')
- command: 냉장고의 급속 냉동 기능을 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).refrigeration_setRapidFreezing('off')
- command: 로봇 청소기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#RobotCleaner).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 로봇 청소기가 자동 모드이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == 'auto') {
        (#Alarm).alarm_siren()
      }
- command: 로봇 청소기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).switch_off()
- command: 로봇 청소기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).switch_on()
- command: 로봇 청소기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).switch_toggle()
- command: 로봇 청소기의 청소 모드를 수동으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).robotCleanerCleaningMode_setRobotCleanerCleaningMode('manual')
- command: 롤 스크린이 40퍼센트 이상 열려 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Shade).windowShadeLevel_shadeLevel >= 40) {
        (#Alarm).alarm_siren()
      }
- command: 롤 스크린이 완전히 열려 있는 상태면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Shade).windowShade_windowShade == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 롤 스크린이 지원하는 상태를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Shade).windowShade_supportedWindowShadeCommands
      (#Speaker).mediaPlayback_speak(states)
- command: 롤 스크린을 50퍼 센트로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShadeLevel_setShadeLevel(50)
- command: 롤 스크린을 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShade_close()
- command: 롤 스크린을 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShade_open()
- command: 롤 스크린 움직임을 일시 중지해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShade_pause()
- command: 사이렌이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Siren).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 사이렌 모드가 사이렌이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Siren).sirenMode_sirenMode == 'siren') {
        (#Alarm).alarm_siren()
      }
- command: 사이렌을 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).switch_off()
- command: 사이렌을 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).switch_on()
- command: 사이렌 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).switch_toggle()
- command: 사이렌 모드를 경광등으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).sirenMode_setSirenMode('strobe')
- command: 스마트 플러그의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 스마트 플러그의 전압이 220볼트 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).voltageMeasurement_voltage >= 220) {
        (#Alarm).alarm_siren()
      }
- command: 스마트 플러그의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).currentMeasurement_current >= 10) {
        (#Alarm).alarm_siren()
      }
- command: 스마트 플러그의 소비 전력이 1000와트 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).powerMeter_power >= 1000) {
        (#Alarm).alarm_siren()
      }
- command: 스마트 플러그를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#SmartPlug).switch_off()
- command: 스마트 플러그를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#SmartPlug).switch_on()
- command: 스마트 플러그의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#SmartPlug).switch_toggle()
- command: 연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmokeDetector).smokeDetector_smoke == 'detected') {
        (#Alarm).alarm_siren()
      }
- command: 토양 습도 센서의 토양 습도 측정값이 30퍼센트 이하이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30) {
        (#Alarm).alarm_siren()
      }
- command: 소리 센서에서 소리가 감지되면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SoundSensor).soundSensor_sound == 'detected') {
        (#Alarm).alarm_siren()
      }
- command: 소리 감지 레벨이 70dB 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SoundSensor).soundPressureLevel_soundPressureLevel >= 70) {
        (#Alarm).alarm_siren()
      }
- command: 스피커의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Speaker).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 스피커가 재생 중이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Speaker).mediaPlayback_playbackStatus == 'playing') {
        (#Alarm).alarm_siren()
      }
- command: 스피커가 지원하는 명령어를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      commands = (#Speaker).mediaPlayback_supportedPlaybackCommands
      (#Speaker).mediaPlayback_speak(commands)
- command: 스피커를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).switch_off()
- command: 스피커를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).switch_on()
- command: 스피커의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).switch_toggle()
- command: 스피커의 재생을 빨리 감기 해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_fastForward()
- command: 스피커의 재생을 일시 정지해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_pause()
- command: 스피커의 재생을 되감아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_rewind()
- command: 스피커의 재생을 멈춰줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_stop()
- command: 스피커에서 music.mp3를 재생해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_play('music.mp3')
- command: 스피커에서 '지금은 테스트 중입니다.'를 말해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_speak('지금은 테스트 중입니다.')
- command: 녹음기의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Recorder).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 녹음기가 녹음 중이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Recorder).audioRecord_recordStatus == 'recording') {
        (#Alarm).alarm_siren()
      }
- command: 녹음기를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).switch_off()
- command: 녹음기를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).switch_on()
- command: 녹음기의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).switch_toggle()
- command: 녹음기로 10초 동안 녹음해서 test.wav로 저장해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).audioRecord_record('test.wav', 10)
- command: 스위치의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Switch).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 스위치를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Switch).switch_off()
- command: 스위치를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Switch).switch_on()
- command: 스위치의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Switch).switch_toggle()
- command: TV의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 현재 TV 채널 이름이 '9시 뉴스'이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).tvChannel_tvChannelName == '9시 뉴스') {
        (#Alarm).alarm_siren()
      }
- command: TV의 볼륨이 50 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).audioVolume_volume >= 50) {
        (#Alarm).alarm_siren()
      }
- command: TV가 음소거 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).audioMute_muteStatus == 'muted') {
        (#Alarm).alarm_siren()
      }
- command: TV를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).switch_off()
- command: TV를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).switch_on()
- command: TV의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).switch_toggle()
- command: TV 채널을 하나 내려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_channelDown()
- command: TV 채널을 하나 올려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_channelUp()
- command: TV 채널을 7번으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_setTvChannel(7)
- command: TV 채널을 '9시 뉴스'로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_setTvChannelName('9시 뉴스')
- command: TV의 볼륨을 30으로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioVolume_setVolume(30)
- command: TV의 볼륨을 낮춰줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioVolume_volumeDown()
- command: TV의 볼륨을 높여줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioVolume_volumeUp()
- command: TV를 음소거해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioMute_mute()
- command: TV의 음소거 상태를 해제해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioMute_unmute()
- command: TV의 음소거 상태를 음소거로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioMute_setMute('muted')
- command: 현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#TemperatureSensor).temperatureMeasurement_temperature >= 25) {
        (#Alarm).alarm_siren()
      }
- command: 밸브가 열린 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Valve).valve_valve == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 밸브를 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Valve).valve_close()
- command: 밸브를 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Valve).valve_open()
- command: 바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_humidityWeather >= 80) {
        (#Alarm).alarm_siren()
      }
- command: 바깥의 미세먼지 농도가 100 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_pm10Weather >= 100) {
        (#Alarm).alarm_siren()
      }
- command: 바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_pm25Weather >= 50) {
        (#Alarm).alarm_siren()
      }
- command: 기압이 1020hPa 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_pressureWeather >= 1020) {
        (#Alarm).alarm_siren()
      }
- command: 현재 바깥의 기온이 30도 이상이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_temperatureWeather >= 30) {
        (#Alarm).alarm_siren()
      }
- command: 현재 날씨가 비가 오고 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_weather == 'rain') {
        (#Alarm).alarm_siren()
      }
- command: 위도 37.5665, 경도 126.9780의 현재 날씨 정보를 스피커로 출력해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      weatherInfo = (#WeatherProvider).weatherProvider_getWeatherInfo(37.5665, 126.978)
      (#Speaker).mediaPlayback_speak(weatherInfo)
- command: 창문이 열린 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Window).windowControl_window == 'open') {
        (#Alarm).alarm_siren()
      }
- command: 창문을 닫아줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Window).windowControl_close()
- command: 창문을 열어줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Window).windowControl_open()
- command: 낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#FallDetector).fallDetection_fall == 'fall') {
        (#Alarm).alarm_siren()
      }
- command: 점유 센서가 감지 상태이면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#OccupancySensor).presenceSensor_presence == 'present') {
        (#Alarm).alarm_siren()
      }
- command: 릴레이의 전원이 켜져 있으면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Relay).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
- command: 릴레이를 꺼줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Relay).switch_off()
- command: 릴레이를 켜줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Relay).switch_on()
- command: 릴레이의 전원을 토글해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Relay).switch_toggle()
- command: 테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_add('테스트 타이머', 60)
- command: 테스트 타이머라는 이름의 타이머가 존재하면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Timer).timer_isExist('테스트 타이머')) {
        (#Alarm).alarm_siren()
      }
- command: 테스트 타이머라는 이름의 타이머가 하면 알람의 사이렌을 울려줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Timer).timer_isSet('테스트 타이머')) {
        (#Alarm).alarm_siren()
      }
- command: 테스트 타이머라는 이름의 타이머를 리셋해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_reset('테스트 타이머')
- command: 테스트 타이머라는 이름의 타이머를 120초로 설정해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_set('테스트 타이머', 120)
- command: 테스트 타이머라는 이름의 타이머를 시작해줘.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_start('테스트 타이머')
