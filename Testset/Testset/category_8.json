[
  {
    "command": "토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 3000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity <= 25.0)\n            Tags('Irrigator').switch_on()\n            self.active = True\n        if self.active == True:\n            if Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity >= 30.0:\n                break\n            Tags('Irrigator').switch_toggle()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 3000,
        "code": "active := False\nif (active == False) {\n    wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)\n    (#Irrigator).switch_on()\n    active = True\n}\nif (active == True) {\n    if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 30.0) {\n        break\n    }\n    (#Irrigator).switch_toggle()\n}"
      }
    ]
  },
  {
    "command": "온도가 30도를 초과하는 순간 블라인드를 닫고, 이후 5초마다 알람의 사이렌을 울려 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 5000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('TemperatureSensor').temperatureMeasurement_temperature > 30.0)\n            Tags('Blind').blind_close()\n            self.active = True\n        if self.active == True:\n            Tags('Alarm').alarm_siren()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 5000,
        "code": "active := False\nif (active == False) {\n    wait until((#TemperatureSensor).temperatureMeasurement_temperature > 30.0)\n    (#Blind).blind_close()\n    active = True\n}\nif (active == True) {\n    (#Alarm).alarm_siren()\n}"
      }
    ]
  },
  {
    "command": "날씨 감지 센서에서 비가 감지되면 관개 장치를 바로 끄고, 이후 2초마다 알람을 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 2000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('WeatherProvider').weatherProvider_weather == 'rain')\n            Tags('Irrigator').switch_off()\n            self.active = True\n        if self.active == True:\n            Tags('Alarm').alarm_off()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 2000,
        "code": "active := False\nif (active == False) {\n    wait until((#WeatherProvider).weatherProvider_weather == 'rain')\n    (#Irrigator).switch_off()\n    active = True\n}\nif (active == True) {\n    (#Alarm).alarm_off()\n}"
      }
    ]
  },
  {
    "command": "일조량이 200룩스 이하가 되는 순간부터 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 4000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('LightSensor').lightLevel_light <= 200.0)\n            self.active = True\n        if self.active == True:\n            Tags('Light').switch_on()\n            Tags('Clock').clock_delay(0, 0, 2)\n            Tags('Light').switch_off()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 4000,
        "code": "active := False\nif (active == False) {\n    wait until((#LightSensor).lightLevel_light <= 200.0)\n    active = True\n}\nif (active == True) {\n    (#Light).switch_on()\n    (#Clock).clock_delay(0, 0, 2)\n    (#Light).switch_off()\n}"
      }
    ]
  },
  {
    "command": "문이 처음 열릴 때 환풍기를 켜고, 이후 3초마다 습도를 확인해서 70% 이하가 될 때까지 환풍기를 켜고 끄는 동작을 반복해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 3000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('DoorLock').doorControl_door == 'open')\n            Tags('Fan').switch_on()\n            self.active = True\n        if self.active == True:\n            if Tags('HumiditySensor').relativeHumidityMeasurement_humidity <= 70.0:\n                break\n            Tags('Fan').switch_toggle()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 3000,
        "code": "active := False\nif (active == False) {\n    wait until((#DoorLock).doorControl_door == 'open')\n    (#Fan).switch_on()\n    active = True\n}\nif (active == True) {\n    if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 70.0) {\n        break\n    }\n    (#Fan).switch_toggle()\n}"
      }
    ]
  },
  {
    "command": "조명이 켜지는 순간 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 2000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('Light').switch_switch == 'on')\n            Tags('Blind').blind_close()\n            self.active = True\n        if self.active == True:\n            Tags('Curtain').curtain_open()\n            Tags('Clock').clock_delay(0, 0, 1)\n            Tags('Curtain').curtain_close()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 2000,
        "code": "active := False\nif (active == False) {\n    wait until((#Light).switch_switch == 'on')\n    (#Blind).blind_close()\n    active = True\n}\nif (active == True) {\n    (#Curtain).curtain_open()\n    (#Clock).clock_delay(0, 0, 1)\n    (#Curtain).curtain_close()\n}"
      }
    ]
  },
  {
    "command": "TV가 켜진 첫 순간부터 5초마다 스피커를 켜고 3초 후에 끄는 동작을 반복해 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 5000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('Television').switch_switch == 'on')\n            self.active = True\n        if self.active == True:\n            Tags('Speaker').switch_on()\n            Tags('Clock').clock_delay(0, 0, 3)\n            Tags('Speaker').switch_off()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 5000,
        "code": "active := False\nif (active == False) {\n    wait until((#Television).switch_switch == 'on')\n    active = True\n}\nif (active == True) {\n    (#Speaker).switch_on()\n    (#Clock).clock_delay(0, 0, 3)\n    (#Speaker).switch_off()\n}"
      }
    ]
  },
  {
    "command": "공기청정기가 꺼지는 순간부터 2초마다 ‘공기청정기를 켜 주세요’라고 두 번 반복해서 스피커로 출력해줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 2000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('AirPurifier').switch_switch == 'off')\n            self.active = True\n        if self.active == True:\n            Tags('Speaker').mediaPlayback_speak('공기청정기를 켜 주세요')\n            Tags('Speaker').mediaPlayback_speak('공기청정기를 켜 주세요')\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 2000,
        "code": "active := False\nif (active == False) {\n    wait until((#AirPurifier).switch_switch == 'off')\n    active = True\n}\nif (active == True) {\n    (#Speaker).mediaPlayback_speak('공기청정기를 켜 주세요')\n    (#Speaker).mediaPlayback_speak('공기청정기를 켜 주세요')\n}"
      }
    ]
  },
  {
    "command": "창문이 열리는 순간 조명을 꺼 주고, 이후 1초마다 블라인드를 10퍼센트 씩 내려 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 1000\n        self.active = False\n        self.level = Tags('Blind').blindLevel_blindLevel\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('Window').windowControl_window == 'open')\n            Tags('Light').switch_off()\n            self.active = True\n        if self.active == True:\n            Tags('Blind').blindLevel_setBlindLevel(self.level)\n            self.level = self.level - 10\n            if self.level < 0:\n                break\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 1000,
        "code": "active := False\nlevel := (#Blind).blindLevel_blindLevel\nif (active == False) {\n    wait until((#Window).windowControl_window == 'open')\n    (#Light).switch_off()\n    active = True\n}\nif (active == True) {\n    (#Blind).blindLevel_setBlindLevel(level)\n    level = level - 10\n    if (level < 0) {\n        break\n    }\n}"
      }
    ]
  },
  {
    "command": "현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 알람의 사이렌을 한 번씩 울려 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = 3000\n        self.active = False\n\n    def run(self):\n        if self.active == False:\n            wait_until(Tags('DoorLock').doorControl_door == 'closed')\n            Tags('Light').switch_off()\n            self.active = True\n        if self.active == True:\n            Tags('Alarm').alarm_siren()\n```",
    "code": [
      {
        "name": "Scenario1",
        "cron": "",
        "period": 3000,
        "code": "active := False\nif (active == False) {\n    wait until((#DoorLock).doorControl_door == 'closed')\n    (#Light).switch_off()\n    active = True\n}\nif (active == True) {\n    (#Alarm).alarm_siren()\n}"
      }
    ]
  }
]