[
    {
        "command": "토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 3000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity <= 25.0)
            Tags('Irrigator').switch_on()
            self.active = True
        if self.active == True:
            if Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity >= 30.0:
                break
            Tags('Irrigator').switch_toggle()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 3000,
                "code": "active := False
if (active == False) {
    wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)
    (#Irrigator).switch_on()
    active = True
}
if (active == True) {
    if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 30.0) {
        break
    }
    (#Irrigator).switch_toggle()
}"
            }
        ]
    },
    {
        "command": "온도가 30도를 초과하는 순간 블라인드를 닫고, 이후 5초마다 알람의 사이렌을 울려 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 5000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('TemperatureSensor').temperatureMeasurement_temperature > 30.0)
            Tags('Blind').blind_close()
            self.active = True
        if self.active == True:
            Tags('Alarm').alarm_siren()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 5000,
                "code": "active := False
if (active == False) {
    wait until((#TemperatureSensor).temperatureMeasurement_temperature > 30.0)
    (#Blind).blind_close()
    active = True
}
if (active == True) {
    (#Alarm).alarm_siren()
}"
            }
        ]
    },
    {
        "command": "날씨 감지 센서에서 비가 감지되면 관개 장치를 바로 끄고, 이후 2초마다 알람을 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 2000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('WeatherProvider').weatherProvider_weather == 'rain')
            Tags('Irrigator').switch_off()
            self.active = True
        if self.active == True:
            Tags('Alarm').alarm_off()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 2000,
                "code": "active := False
if (active == False) {
    wait until((#WeatherProvider).weatherProvider_weather == 'rain')
    (#Irrigator).switch_off()
    active = True
}
if (active == True) {
    (#Alarm).alarm_off()
}"
            }
        ]
    },
    {
        "command": "일조량이 200룩스 이하가 되는 순간부터 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 4000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('LightSensor').lightLevel_light <= 200.0)
            self.active = True
        if self.active == True:
            Tags('Light').switch_on()
            Tags('Clock').clock_delay(0, 0, 2)
            Tags('Light').switch_off()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 4000,
                "code": "active := False
if (active == False) {
    wait until((#LightSensor).lightLevel_light <= 200.0)
    active = True
}
if (active == True) {
    (#Light).switch_on()
    (#Clock).clock_delay(0, 0, 2)
    (#Light).switch_off()
}"
            }
        ]
    },
    {
        "command": "문이 처음 열릴 때 환풍기를 켜고, 이후 3초마다 습도를 확인해서 70% 이하가 될 때까지 환풍기를 켜고 끄는 동작을 반복해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 3000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('DoorLock').doorControl_door == 'open')
            Tags('Fan').switch_on()
            self.active = True
        if self.active == True:
            if Tags('HumiditySensor').relativeHumidityMeasurement_humidity <= 70.0:
                break
            Tags('Fan').switch_toggle()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 3000,
                "code": "active := False
if (active == False) {
    wait until((#DoorLock).doorControl_door == 'open')
    (#Fan).switch_on()
    active = True
}
if (active == True) {
    if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 70.0) {
        break
    }
    (#Fan).switch_toggle()
}"
            }
        ]
    },
    {
        "command": "조명이 켜지는 순간 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 2000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('Light').switch_switch == 'on')
            Tags('Blind').blind_close()
            self.active = True
        if self.active == True:
            Tags('Curtain').curtain_open()
            Tags('Clock').clock_delay(0, 0, 1)
            Tags('Curtain').curtain_close()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 2000,
                "code": "active := False
if (active == False) {
    wait until((#Light).switch_switch == 'on')
    (#Blind).blind_close()
    active = True
}
if (active == True) {
    (#Curtain).curtain_open()
    (#Clock).clock_delay(0, 0, 1)
    (#Curtain).curtain_close()
}"
            }
        ]
    },
    {
        "command": "TV가 켜진 첫 순간부터 5초마다 스피커를 켜고 3초 후에 끄는 동작을 반복해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 5000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('Television').switch_switch == 'on')
            self.active = True
        if self.active == True:
            Tags('Speaker').switch_on()
            Tags('Clock').clock_delay(0, 0, 3)
            Tags('Speaker').switch_off()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 5000,
                "code": "active := False
if (active == False) {
    wait until((#Television).switch_switch == 'on')
    active = True
}
if (active == True) {
    (#Speaker).switch_on()
    (#Clock).clock_delay(0, 0, 3)
    (#Speaker).switch_off()
}"
            }
        ]
    },
    {
        "command": "공기청정기가 꺼지는 순간부터 2초마다 ‘공기청정기를 켜 주세요’라고 두 번 반복해서 스피커로 출력해줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 2000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('AirPurifier').switch_switch == 'off')
            self.active = True
        if self.active == True:
            Tags('Speaker').mediaPlayback_speak('공기청정기를 켜 주세요')
            Tags('Speaker').mediaPlayback_speak('공기청정기를 켜 주세요')
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 2000,
                "code": "active := False
if (active == False) {
    wait until((#AirPurifier).switch_switch == 'off')
    active = True
}
if (active == True) {
    (#Speaker).mediaPlayback_speak('공기청정기를 켜 주세요')
    (#Speaker).mediaPlayback_speak('공기청정기를 켜 주세요')
}"
            }
        ]
    },
    {
        "command": "창문이 열리는 순간 조명을 꺼 주고, 이후 1초마다 블라인드를 10퍼센트 씩 내려 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 1000
        self.active = False
        self.level = Tags('Blind').blindLevel_blindLevel

    def run(self):
        if self.active == False:
            wait_until(Tags('Window').windowControl_window == 'open')
            Tags('Light').switch_off()
            self.active = True
        if self.active == True:
            Tags('Blind').blindLevel_setBlindLevel(self.level)
            self.level = self.level - 10
            if self.level < 0:
                break
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 1000,
                "code": "active := False
level := (#Blind).blindLevel_blindLevel
if (active == False) {
    wait until((#Window).windowControl_window == 'open')
    (#Light).switch_off()
    active = True
}
if (active == True) {
    (#Blind).blindLevel_setBlindLevel(level)
    level = level - 10
    if (level < 0) {
        break
    }
}"
            }
        ]
    },
    {
        "command": "현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 알람의 사이렌을 한 번씩 울려 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 3000
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('DoorLock').doorControl_door == 'closed')
            Tags('Light').switch_off()
            self.active = True
        if self.active == True:
            Tags('Alarm').alarm_siren()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 3000,
                "code": "active := False
if (active == False) {
    wait until((#DoorLock).doorControl_door == 'closed')
    (#Light).switch_off()
    active = True
}
if (active == True) {
    (#Alarm).alarm_siren()
}"
            }
        ]
    }
]