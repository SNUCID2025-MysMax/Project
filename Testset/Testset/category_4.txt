[
    {
        "command": "창문이 열리면 알람의 사이렌을 울려 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('Window').windowControl_window == 'closed')
        wait_until(Tags('Window').windowControl_window == 'open')
        Tags('Alarm').alarm_siren()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#Window).windowControl_window == 'closed')
wait until((#Window).windowControl_window == 'open')
(#Alarm).alarm_siren()"
            }
        ]
    },
    {
        "command": "문이 닫히면 블라인드를 닫아 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('DoorLock').doorControl_door == 'open')
        wait_until(Tags('DoorLock').doorControl_door == 'closed')
        Tags('Blind').blind_close()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#DoorLock).doorControl_door == 'open')
wait until((#DoorLock).doorControl_door == 'closed')
(#Blind).blind_close()"
            }
        ]
    },
    {
        "command": "사람이 감지되면 조명을 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('PresenceSensor').presenceSensor_presence == 'not_present')
        wait_until(Tags('PresenceSensor').presenceSensor_presence == 'present')
        Tags('Light').switch_on()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#PresenceSensor).presenceSensor_presence == 'not_present')
wait until((#PresenceSensor).presenceSensor_presence == 'present')
(#Light).switch_on()"
            }
        ]
    },
    {
        "command": "TV가 꺼지면 스피커를 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('Television').switch_switch == 'on')
        wait_until(Tags('Television').switch_switch == 'off')
        Tags('Speaker').switch_off()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#Television).switch_switch == 'on')
wait until((#Television).switch_switch == 'off')
(#Speaker).switch_off()"
            }
        ]
    },
    {
        "command": "커튼이 열리면 조명을 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('Curtain').curtain_curtain != 'open')
        wait_until(Tags('Curtain').curtain_curtain == 'open')
        Tags('Light').switch_off()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#Curtain).curtain_curtain != 'open')
wait until((#Curtain).curtain_curtain == 'open')
(#Light).switch_off()"
            }
        ]
    },
    {
        "command": "블라인드가 닫히면 '블라인드가 닫혔습니다'라고 말해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('Blind').blind_blind != 'closed')
        wait_until(Tags('Blind').blind_blind == 'closed')
        Tags('Speaker').mediaPlayback_speak('블라인드가 닫혔습니다')
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#Blind).blind_blind != 'closed')
wait until((#Blind).blind_blind == 'closed')
(#Speaker).mediaPlayback_speak('블라인드가 닫혔습니다')"
            }
        ]
    },
    {
        "command": "제습기가 꺼지면 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('Dehumidifier').switch_switch == 'on')
        wait_until(Tags('Dehumidifier').switch_switch == 'off')
        Tags('Dehumidifier').switch_on()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#Dehumidifier).switch_switch == 'on')
wait until((#Dehumidifier).switch_switch == 'off')
(#Dehumidifier).switch_on()"
            }
        ]
    },
    {
        "command": "문이 열리면 ‘문이 열렸습니다’라고 말해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('DoorLock').doorControl_door == 'closed')
        wait_until(Tags('DoorLock').doorControl_door == 'open')
        Tags('Speaker').mediaPlayback_speak('문이 열렸습니다')
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#DoorLock).doorControl_door == 'closed')
wait until((#DoorLock).doorControl_door == 'open')
(#Speaker).mediaPlayback_speak('문이 열렸습니다')"
            }
        ]
    },
    {
        "command": "에어컨이 꺼지면 조명을 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('AirConditioner').switch_switch == 'on')
        wait_until(Tags('AirConditioner').switch_switch == 'off')
        Tags('Light').switch_off()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#AirConditioner).switch_switch == 'on')
wait until((#AirConditioner).switch_switch == 'off')
(#Light).switch_off()"
            }
        ]
    },
    {
        "command": "창문이 닫히면 블라인드를 열어 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1
    def run(self):
        wait_until(Tags('Window').windowControl_window != 'closed')
        wait_until(Tags('Window').windowControl_window == 'closed')
        Tags('Blind').blind_open()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
wait until((#Window).windowControl_window != 'closed')
wait until((#Window).windowControl_window == 'closed')
(#Blind).blind_open()"
            }
        ]
    }
]