[
    {
        "command": "실시간으로 확인하여 토양 습도 센서의 값이 30% 이하가 되면 관개 장치를 켜 줘, 또한 1초마다 체크해서 온도가 25도를 넘으면 펌프를 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = '' 
        self.period = 100  
        
    def run(self):
        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity
        if soil_humidity <= 30.0:
            Tags('Irrigator').switch_on()
            break

class Scenario2:
    def __init__(self):
        self.cron = '' 
        self.period = 1000  
        
    def run(self):
        temperature = Tags('TemperatureSensor').temperatureMeasurement_temperature
        if temperature > 25.0:
            Tags('Pump').switch_off()
            break```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "soil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
if (soil_humidity <= 30.0) {
    (#Irrigator).switch_on()
    break
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": 1000,
                "code": "temperature = (#TemperatureSensor).temperatureMeasurement_temperature
if (temperature > 25.0) {
    (#Pump).switch_off()
    break
}"
            }
        ]
    },
    {
        "command": "펌프가 꺼지면 스피커를 켜고, 토양 습도 센서의 값이 20% 이하가 되면 관개 장치를 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Pump').switch_switch == 'on')
        wait_until(Tags('Pump').switch_switch == 'off')
        Tags('Speaker').switch_on()
        break

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = 100

    def run(self):
        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity
        if soil_humidity <= 20.0:
            Tags('Irrigator').switch_on()
            break```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#Pump).switch_switch == 'on')
wait until((#Pump).switch_switch == 'off')
(#Speaker).switch_on()
break"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": 100,
                "code": "soil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
if (soil_humidity <= 20.0) {
    (#Irrigator).switch_on()
    break
}"
            }
        ]
    },
    {
        "command": "토양 습도 센서의 값이 25% 이하로 떨어진 후 10초 동안 값이 변하지 않으면 알람의 사이렌을 울려 줘. 그 후에는 알람의 사이렌이 울렸는지 여부와 상관 없이 조명을 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.stable_count = 0
        self.last_value = -1.0

    def run(self):
        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity
        if soil_humidity <= 25.0:
            if self.last_value == -1.0:
                self.last_value = soil_humidity
                self.stable_count = 0
            elif soil_humidity == self.last_value:
                self.stable_count = self.stable_count + 1
            else:
                self.last_value = soil_humidity
                self.stable_count = 0
            if self.stable_count >= 100:
                Tags('Alarm').alarm_siren()
                self.stable_count = 0
                self.last_value = -1.0
                Tags('Light').switch_off()
                break
        else:
            self.last_value = -1.0
            self.stable_count = 0```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "stable_count := 0
last_value := -1.0
soil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
if (soil_humidity <= 25.0) {
    if (last_value == -1.0) {
        last_value = soil_humidity
        stable_count = 0
    } else if (soil_humidity == last_value) {
        stable_count = stable_count + 1
    } else {
        last_value = soil_humidity
        stable_count = 0
    }
    if (stable_count >= 100) {
        (#Alarm).alarm_siren()
        stable_count = 0
        last_value = -1.0
        (#Light).switch_off()
        break
    }
} else {
    last_value = -1.0
    stable_count = 0
}"
            }
        ]
    },
    {
        "command": "실시간으로 확인하여 조명이 켜지면 펌프를 켜 줘, 토양 습도 센서의 값이 30% 이하로 떨어지면 블라인드를 닫아 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Light').switch_switch == 'off')
        wait_until(Tags('Light').switch_switch == 'on')
        Tags('Pump').switch_on()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = 100

    def run(self):
        soil_humidity = Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity
        if soil_humidity <= 30.0:
            Tags('Blind').blind_close()
            break```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#Light).switch_switch == 'off')
wait until((#Light).switch_switch == 'on')
(#Pump).switch_on()"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": 100,
                "code": "soil_humidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
if (soil_humidity <= 30.0) {
    (#Blind).blind_close()
    break
}"
            }
        ]
    },
    {
        "command": "관개 장치가 꺼지고 나서 토양 습도 센서의 값이 20% 이하로 떨어지면 알람의 사이렌을 울려 줘. 커튼이 닫혀 있으면 열어 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Irrigator').switch_switch == 'on')
        wait_until(Tags('Irrigator').switch_switch == 'off')
        wait_until(Tags('SoilMoistureSensor').soilHumidityMeasurement_soilHumidity <= 20.0)
        Tags('Alarm').alarm_siren()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        if Tags('Curtain').curtain_curtain == 'closed':
            Tags('Curtain').curtain_open()```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#Irrigator).switch_switch == 'on')
wait until((#Irrigator).switch_switch == 'off')
wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)
(#Alarm).alarm_siren()"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": -1,
                "code": "if ((#Curtain).curtain_curtain == 'closed') {
    (#Curtain).curtain_open()
}"
            }
        ]
    },
    {
        "command": "실시간으로 확인하여 문이 열릴 때마다 조명을 켜 줘, TV가 꺼지면 스피커를 끄고 블라인드를 닫아 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.last_state = 'closed'

    def run(self):
        door_state = Tags('DoorLock').doorControl_door
        if door_state != self.last_state:
            if door_state == 'open':
                Tags('Light').switch_on()
            self.last_state = door_state

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Television').switch_switch == 'on')
        wait_until(Tags('Television').switch_switch == 'off')
        Tags('Speaker').switch_off()
        Tags('Blind').blind_close()```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "last_state := 'closed'
door_state = (#DoorLock).doorControl_door
if (door_state != last_state) {
    if (door_state == 'open') {
        (#Light).switch_on()
    }
    last_state = door_state
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": -1,
                "code": "wait until((#Television).switch_switch == 'on')
wait until((#Television).switch_switch == 'off')
(#Speaker).switch_off()
(#Blind).blind_close()"
            }
        ]
    },
    {
        "command": "제습기가 꺼지면 켜 줘, 조명이 꺼져 있으면 밝기를 50으로 설정해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Dehumidifier').switch_switch == 'on')
        wait_until(Tags('Dehumidifier').switch_switch == 'off')
        Tags('Dehumidifier').switch_on()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        if Tags('Light').switch_switch == 'off':
            Tags('Light').switchLevel_setLevel(50, 0)```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#Dehumidifier).switch_switch == 'on')
wait until((#Dehumidifier).switch_switch == 'off')
(#Dehumidifier).switch_on()"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": -1,
                "code": "if ((#Light).switch_switch == 'off') {
    (#Light).switchLevel_setLevel(50, 0)
}"
            }
        ]
    },
    {
        "command": "창문이 열리면 블라인드를 닫고, 조명이 꺼지면 선풍기를 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Window').windowControl_window == 'closed')
        wait_until(Tags('Window').windowControl_window == 'open')
        Tags('Blind').blind_close()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Light').switch_switch == 'on')
        wait_until(Tags('Light').switch_switch == 'off')
        Tags('Fan').switch_on()```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#Window).windowControl_window == 'closed')
wait until((#Window).windowControl_window == 'open')
(#Blind).blind_close()"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": -1,
                "code": "wait until((#Light).switch_switch == 'on')
wait until((#Light).switch_switch == 'off')
(#Fan).switch_on()"
            }
        ]
    },
    {
        "command": "실시간으로 확인하여 움직임이 감지되면 커튼을 닫고, 지금 알람의 사이렌을 울려 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100

    def run(self):
        motion_state = Tags('MotionSensor').motionSensor_motion
        if motion_state == 'active':
            Tags('Curtain').curtain_close()
            break

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        Tags('Alarm').alarm_siren()```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "motion_state = (#MotionSensor).motionSensor_motion
if (motion_state == 'active') {
    (#Curtain).curtain_close()
    break
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": -1,
                "code": "(#Alarm).alarm_siren()"
            }
        ]
    },
    {
        "command": "창문이 열리면 10초 후 커튼을 열어 주고, 동시에 5초마다 조명을 켰다 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('Window').windowControl_window == 'closed')
        wait_until(Tags('Window').windowControl_window == 'open')
        Tags('Clock').clock_delay(0, 0, 10)
        Tags('Curtain').curtain_open()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = 5000

    def run(self):
        Tags('Light').switch_toggle()```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#Window).windowControl_window == 'closed')
wait until((#Window).windowControl_window == 'open')
(#Clock).clock_delay(0, 0, 10)
(#Curtain).curtain_open()"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "period": 5000,
                "code": "(#Light).switch_toggle()"
            }
        ]
    }
]