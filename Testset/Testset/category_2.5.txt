[
    {
        "command": "창문이 열려 있고 조명이 꺼져 있으며 커튼이 닫혀 있으면 조명을 켜고 커튼을 열어 줘. 또한 에어컨이 꺼져 있고 현재 온도가 27도 이상이면 에어컨의 모드를 냉방으로 설정하고 전원을 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        window = Tags('Window').windowControl_window
        light = Tags('Light').switch_switch
        curtain = Tags('Curtain').curtain_curtain
        if (window == 'open') and (light == 'off') and (curtain == 'closed'):
            Tags('Light').switch_on()
            Tags('Curtain').curtain_open()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        ac_power = Tags('AirConditioner').switch_switch
        temp = Tags('TemperatureSensor').temperatureMeasurement_temperature
        if (ac_power == 'off') and (temp >= 27.0):
            Tags('AirConditioner').airConditionerMode_setAirConditionerMode('cool')
            Tags('AirConditioner').switch_on()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
window = (#Window).windowControl_window
light = (#Light).switch_switch
curtain = (#Curtain).curtain_curtain
if ((window == 'open') and (light == 'off') and (curtain == 'closed')) {
    (#Light).switch_on()
    (#Curtain).curtain_open()
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
ac_power = (#AirConditioner).switch_switch
temp = (#TemperatureSensor).temperatureMeasurement_temperature
if ((ac_power == 'off') and (temp >= 27.0)) {
    (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')
    (#AirConditioner).switch_on()
}"
            }
        ]
    },
    {
        "command": "TV가 켜져 있고 스피커가 꺼져 있으며 블라인드가 열려 있을 경우 스피커를 켜고 블라인드를 닫아 줘. 에어컨이 송풍 모드로 설정되어 있고 문이 닫혀 있으면 에어컨을 끄고 창문이 닫혀 있으면 창문을 열어 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        tv = Tags('Television').switch_switch
        speaker = Tags('Speaker').switch_switch
        blind = Tags('Blind').blind_blind
        if (tv == 'on') and (speaker == 'off') and (blind == 'open'):
            Tags('Speaker').switch_on()
            Tags('Blind').blind_close()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        ac_mode = Tags('AirConditioner').airConditionerMode_airConditionerMode
        door = Tags('DoorLock').doorControl_door
        if (ac_mode == 'auto') and (door == 'closed'):
            Tags('AirConditioner').switch_off()
        window = Tags('Window').windowControl_window
        if window == 'closed':
            Tags('Window').windowControl_open()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
tv = (#Television).switch_switch
speaker = (#Speaker).switch_switch
blind = (#Blind).blind_blind
if ((tv == 'on') and (speaker == 'off') and (blind == 'open')) {
    (#Speaker).switch_on()
    (#Blind).blind_close()
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
ac_mode = (#AirConditioner).airConditionerMode_airConditionerMode
door = (#DoorLock).doorControl_door
if ((ac_mode == 'auto') and (door == 'closed')) {
    (#AirConditioner).switch_off()
}
window = (#Window).windowControl_window
if (window == 'closed') {
    (#Window).windowControl_open()
}"
            }
        ]
    },
    {
        "command": "문이 닫혀 있고 움직임이 감지되지 않으며 조명이 켜져 있으면 조명을 꺼 주고 커튼이 열려 있으면 커튼도 닫아 줘. TV가 꺼져 있으면서도 스피커가 켜져 있으면 스피커도 함께 꺼 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        door = Tags('DoorLock').doorControl_door
        motion = Tags('MotionSensor').motionSensor_motion
        light = Tags('Light').switch_switch
        if (door == 'closed') and (motion == 'inactive') and (light == 'on'):
            Tags('Light').switch_off()
            curtain = Tags('Curtain').curtain_curtain
            if curtain == 'open':
                Tags('Curtain').curtain_close()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        tv = Tags('Television').switch_switch
        speaker = Tags('Speaker').switch_switch
        if (tv == 'off') and (speaker == 'on'):
            Tags('Speaker').switch_off()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
door = (#DoorLock).doorControl_door
motion = (#MotionSensor).motionSensor_motion
light = (#Light).switch_switch
if ((door == 'closed') and (motion == 'inactive') and (light == 'on')) {
    (#Light).switch_off()
    curtain = (#Curtain).curtain_curtain
    if (curtain == 'open') {
        (#Curtain).curtain_close()
    }
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
tv = (#Television).switch_switch
speaker = (#Speaker).switch_switch
if ((tv == 'off') and (speaker == 'on')) {
    (#Speaker).switch_off()
}"
            }
        ]
    },
    {
        "command": "에어컨이 꺼져 있고 온도가 28도 이상이며 습도가 60% 이상이면 에어컨을 켜고 제습 모드로 설정해 줘. 조명이 꺼져 있고 창문이 열려 있으면 조명을 켜고 창문을 닫아 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        ac_power = Tags('AirConditioner').switch_switch
        temp = Tags('TemperatureSensor').temperatureMeasurement_temperature
        humidity = Tags('HumiditySensor').relativeHumidityMeasurement_humidity
        if (ac_power == 'off') and (temp >= 28.0) and (humidity >= 60.0):
            Tags('AirConditioner').switch_on()
            Tags('AirConditioner').airConditionerMode_setAirConditionerMode('dry')

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        light = Tags('Light').switch_switch
        window = Tags('Window').windowControl_window
        if (light == 'off') and (window == 'open'):
            Tags('Light').switch_on()
            Tags('Window').windowControl_close()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
ac_power = (#AirConditioner).switch_switch
temp = (#TemperatureSensor).temperatureMeasurement_temperature
humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity
if ((ac_power == 'off') and (temp >= 28.0) and (humidity >= 60.0)) {
    (#AirConditioner).switch_on()
    (#AirConditioner).airConditionerMode_setAirConditionerMode('dry')
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
light = (#Light).switch_switch
window = (#Window).windowControl_window
if ((light == 'off') and (window == 'open')) {
    (#Light).switch_on()
    (#Window).windowControl_close()
}"
            }
        ]
    },
    {
        "command": "TV가 켜져 있고 음량이 20 이상이며 커튼이 열려 있으면 음량을 15로 낮춰 주고 커튼을 닫아 줘. 스피커가 정지 상태이고 조명이 꺼져 있으면 스피커를 재생 상태로 만들고 조명도 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        tv = Tags('Television').switch_switch
        volume = Tags('Television').audioVolume_volume
        curtain = Tags('Curtain').curtain_curtain
        if (tv == 'on') and (volume >= 20) and (curtain == 'open'):
            Tags('Television').audioVolume_setVolume(15)
            Tags('Curtain').curtain_close()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        speaker_status = Tags('Speaker').mediaPlayback_playbackStatus
        light = Tags('Light').switch_switch
        if (speaker_status == 'stopped') and (light == 'off'):
            Tags('Speaker').mediaPlayback_play('')
            Tags('Light').switch_on()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
tv = (#Television).switch_switch
volume = (#Television).audioVolume_volume
curtain = (#Curtain).curtain_curtain
if ((tv == 'on') and (volume >= 20) and (curtain == 'open')) {
    (#Television).audioVolume_setVolume(15)
    (#Curtain).curtain_close()
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
speaker_status = (#Speaker).mediaPlayback_playbackStatus
light = (#Light).switch_switch
if ((speaker_status == 'stopped') and (light == 'off')) {
    (#Speaker).mediaPlayback_play('')
    (#Light).switch_on()
}"
            }
        ]
    },
    {
        "command": "창문이 열려 있고 커튼이 닫혀 있으며 블라인드가 열린 상태이면 커튼을 열고 블라인드를 닫아 줘. 에어컨이 자동 모드가 아닌 상태이고 전원이 꺼져 있으면 자동 모드로 설정한 후 전원을 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        window = Tags('Window').windowControl_window
        curtain = Tags('Curtain').curtain_curtain
        blind = Tags('Blind').blind_blind
        if (window == 'open') and (curtain == 'closed') and (blind == 'open'):
            Tags('Curtain').curtain_open()
            Tags('Blind').blind_close()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        ac_mode = Tags('AirConditioner').airConditionerMode_airConditionerMode
        ac_power = Tags('AirConditioner').switch_switch
        if (ac_mode != 'auto') and (ac_power == 'off'):
            Tags('AirConditioner').airConditionerMode_setAirConditionerMode('auto')
            Tags('AirConditioner').switch_on()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
window = (#Window).windowControl_window
curtain = (#Curtain).curtain_curtain
blind = (#Blind).blind_blind
if ((window == 'open') and (curtain == 'closed') and (blind == 'open')) {
    (#Curtain).curtain_open()
    (#Blind).blind_close()
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
ac_mode = (#AirConditioner).airConditionerMode_airConditionerMode
ac_power = (#AirConditioner).switch_switch
if ((ac_mode != 'auto') and (ac_power == 'off')) {
    (#AirConditioner).airConditionerMode_setAirConditionerMode('auto')
    (#AirConditioner).switch_on()
}"
            }
        ]
    },
    {
        "command": "조명이 켜져 있고 밝기가 80 이상이며 선풍기가 꺼져 있을 경우 조명을 50으로 줄이고 선풍기를 켜 줘. TV가 꺼져 있고 블라인드가 닫혀 있으면 TV를 켜고 블라인드를 열어 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        light = Tags('Light').switch_switch
        level = Tags('Light').switchLevel_level
        fan = Tags('Fan').switch_switch
        if (light == 'on') and (level >= 80) and (fan == 'off'):
            Tags('Light').switchLevel_setLevel(50, 0)
            Tags('Fan').switch_on()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        tv = Tags('Television').switch_switch
        blind = Tags('Blind').blind_blind
        if (tv == 'off') and (blind == 'closed'):
            Tags('Television').switch_on()
            Tags('Blind').blind_open()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
light = (#Light).switch_switch
level = (#Light).switchLevel_level
fan = (#Fan).switch_switch
if ((light == 'on') and (level >= 80) and (fan == 'off')) {
    (#Light).switchLevel_setLevel(50, 0)
    (#Fan).switch_on()
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
tv = (#Television).switch_switch
blind = (#Blind).blind_blind
if ((tv == 'off') and (blind == 'closed')) {
    (#Television).switch_on()
    (#Blind).blind_open()
}"
            }
        ]
    },
    {
        "command": "문이 열려 있고 알람이 꺼져 있으면 알람의 사이렌을 울려 주고 커튼이 열려 있으면 커튼을 닫아 줘. 에어컨이 꺼져 있고 현재 온도가 30도 이상이면 에어컨을 냉방 모드로 설정한 후 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        contact = Tags('ContactSensor').contactSensor_contact
        alarm_state = Tags('Alarm').alarm_alarm

        if contact == 'open' and alarm_state == 'off':
            Tags('Alarm').alarm_siren()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        curtain_state = Tags('Curtain').curtain_curtain

        if curtain_state == 'open':
            Tags('Curtain').curtain_close()

class Scenario3:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        ac_state = Tags('AirConditioner').switch_switch
        temperature = Tags('AirQualityDetector').temperatureMeasurement_temperature

        if ac_state == 'off' and temperature >= 30.0:
            Tags('AirConditioner').airConditionerMode_setAirConditionerMode('cool')
            Tags('AirConditioner').switch_on()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
contact = (#ContactSensor).contactSensor_contact
alarm_state = (#Alarm).alarm_alarm
if ((contact == 'open') and (alarm_state == 'off')) {
    (#Alarm).alarm_siren()
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
curtain_state = (#Curtain).curtain_curtain
if (curtain_state == 'open') {
    (#Curtain).curtain_close()
}"
            },
            {
                "name": "Scenario3",
                "cron": "",
                "code": "period := -1
ac_state = (#AirConditioner).switch_switch
temperature = (#AirQualityDetector).temperatureMeasurement_temperature
if ((ac_state == 'off') and (temperature >= 30.0)) {
    (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')
    (#AirConditioner).switch_on()
}"
            }
        ]
    },
    {
        "command": "스피커가 재생 중이고 조명이 꺼져 있으며 커튼이 열려 있을 경우 조명을 켜고 커튼을 닫아 줘. TV가 꺼져 있고 선풍기가 꺼져 있을 경우 둘 다 켜 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        speaker_status = Tags('Speaker').mediaPlayback_playbackStatus
        light = Tags('Light').switch_switch
        curtain = Tags('Curtain').curtain_curtain
        if (speaker_status == 'playing') and (light == 'off') and (curtain == 'open'):
            Tags('Light').switch_on()
            Tags('Curtain').curtain_close()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        tv = Tags('Television').switch_switch
        fan = Tags('Fan').switch_switch
        if (tv == 'off') and (fan == 'off'):
            Tags('Television').switch_on()
            Tags('Fan').switch_on()
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
speaker_status = (#Speaker).mediaPlayback_playbackStatus
light = (#Light).switch_switch
curtain = (#Curtain).curtain_curtain
if ((speaker_status == 'playing') and (light == 'off') and (curtain == 'open')) {
    (#Light).switch_on()
    (#Curtain).curtain_close()
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
tv = (#Television).switch_switch
fan = (#Fan).switch_switch
if ((tv == 'off') and (fan == 'off')) {
    (#Television).switch_on()
    (#Fan).switch_on()
}"
            }
        ]
    },
    {
        "command": "에어컨이 난방 모드이고 현재 온도가 20도 이상이면 에어컨을 끄고 블라인드가 열려 있으면 닫아 줘. TV가 켜져 있고 조명이 켜져 있으며 스피커가 꺼져 있으면 스피커를 켜고 조명을 40으로 조절해 줘.",
        "python": "```python
class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        ac_mode = Tags('AirConditioner').airConditionerMode_airConditionerMode
        temp = Tags('TemperatureSensor').temperatureMeasurement_temperature
        if (ac_mode == 'heat') and (temp >= 20.0):
            Tags('AirConditioner').switch_off()
            blind = Tags('Blind').blind_blind
            if blind == 'open':
                Tags('Blind').blind_close()

class Scenario2:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        tv = Tags('Television').switch_switch
        light = Tags('Light').switch_switch
        speaker = Tags('Speaker').switch_switch
        if (tv == 'on') and (light == 'on') and (speaker == 'off'):
            Tags('Speaker').switch_on()
            Tags('Light').switchLevel_setLevel(40, 0)
```",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "code": "period := -1
ac_mode = (#AirConditioner).airConditionerMode_airConditionerMode
temp = (#TemperatureSensor).temperatureMeasurement_temperature
if ((ac_mode == 'heat') and (temp >= 20.0)) {
    (#AirConditioner).switch_off()
    blind = (#Blind).blind_blind
    if (blind == 'open') {
        (#Blind).blind_close()
    }
}"
            },
            {
                "name": "Scenario2",
                "cron": "",
                "code": "period := -1
tv = (#Television).switch_switch
light = (#Light).switch_switch
speaker = (#Speaker).switch_switch
if ((tv == 'on') and (light == 'on') and (speaker == 'off')) {
    (#Speaker).switch_on()
    (#Light).switchLevel_setLevel(40, 0)
}"
            }
        ]
    }
]