- command: 매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘.
  command_translated: Every morning at 7 am, if the irrigation is off and the windows are closed, turn on the irrigation and open the windows. Then, when the irrigation turns on, close the blinds.
  devices:
  - Clock
  - Irrigator
  - Window
  - Curtain
  - GasValve
  - Blind
  - DoorLock
  - Speaker
  - Pump
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: "0 7 * * *"
    period: 0
    code: |-
      if ((#Irrigator).switch_switch == "off" and (#Window).windowControl_window == "closed") {
        (#Irrigator).switch_on()
        (#Window).windowControl_open()
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |-
      wait until((#Irrigator).switch_switch == "on")
      (#Blind).blind_close()
  model_info:
    elapsed_time: 5.612
    bge_elapsed_time: 0.098
    llm_elapsed_time: 5.467
    validation_elapsed_time: 0.047
- command: 실시간으로 확인하여 5초마다 토양 습도 센서의 값이 20 퍼센트 이하이면 관개 장치를 켜고, 60 퍼센트 이상이면 관개 장치를 꺼 줘.
  command_translated: Check in real time and turn on the irrigation every 5 seconds if the soil moisture sensor reads 20 percent or less, and turn off the irrigation if it reads 60 percent or more.
  devices:
  - Clock
  - LeakSensor
  - Irrigator
  - HumiditySensor
  - SoilMoistureSensor
  - Speaker
  - SoundSensor
  - TemperatureSensor
  - ContactSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0) {
        (#Irrigator).switch_on()
      } else if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 60.0) {
        (#Irrigator).switch_off()
      }
  model_info:
    elapsed_time: 4.806
    bge_elapsed_time: 0.096
    llm_elapsed_time: 4.693
    validation_elapsed_time: 0.017
- command: 실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘.
  command_translated: Check in real time, turn on the fan if the temperature is above 28 degrees; and turn on the dehumidifier if the humidity is above 80%.
  devices:
  - Humidifier
  - Clock
  - Fan
  - AirQualityDetector
  - HumiditySensor
  - SoilMoistureSensor
  - Speaker
  - Dehumidifier
  - WeatherProvider
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 28.0) {
        (#Fan).switch_on()
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {
        (#Dehumidifier).switch_on()
      }
  model_info:
    elapsed_time: 5.138
    bge_elapsed_time: 0.092
    llm_elapsed_time: 5.007
    validation_elapsed_time: 0.04
- command: 실시간으로 확인하여 조명이 켜져 있을 때마다 블라인드를 닫고, 꺼져 있으면 블라인드를 열어 줘.
  command_translated: Check in real-time to close the blinds whenever the lights are on and open the blinds when they're off.
  devices:
  - LightSensor
  - Clock
  - Valve
  - Light
  - Curtain
  - Window
  - Blind
  - DoorLock
  - Speaker
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      if ((#Light).switch_switch == "on") {
        (#Blind).blind_close()
      } else {
        (#Blind).blind_open()
      }
  model_info:
    elapsed_time: 3.354
    bge_elapsed_time: 0.09
    llm_elapsed_time: 3.244
    validation_elapsed_time: 0.02
- command: 주말에는 5초마다 펌프가 꺼져 있으면 켜고, 켜져 있으면 꺼 주고, 선풍기 속도를 10으로 설정해 줘.
  command_translated: On weekends, every 5 seconds, turn the pump on if it's off, off if it's on, and set the fan speed to 10.
  devices:
  - Clock
  - Fan
  - Irrigator
  - Window
  - GasValve
  - Blind
  - Charger
  - Speaker
  - Calculator
  - Pump
  generated_code:
  - name: Scenario1
    cron: ''
    period: -1
    code: ""
  model_info:
    elapsed_time: 6.095
    bge_elapsed_time: 0.091
    llm_elapsed_time: 5.983
    validation_elapsed_time: 0.021
- command: 실시간으로 확인하여 움직임이 감지될 때마다 조명을 켜고, 선풍기 속도를 10 높여 줘.
  command_translated: Check in real-time to turn on lights and increase fan speed by 10 whenever motion is detected.
  devices:
  - LightSensor
  - MotionSensor
  - FallDetector
  - Clock
  - Fan
  - Light
  - SmokeDetector
  - Speaker
  - TemperatureSensor
  - ContactSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#MotionSensor).motionSensor_motion == "active") {
        (#Light).switch_on()
        (#Fan).fanControl_setPercent(#Fan).fanControl_percent + 10)
      }
  model_info:
    elapsed_time: 3.512
    bge_elapsed_time: 0.088
    llm_elapsed_time: 3.407
    validation_elapsed_time: 0.017
- command: 실시간으로 확인하여 창문이 열려 있으면 블라인드를 닫고, 창문이 닫혀 있으면 커튼을 열어 줘. 또한 실시간으로 확인하여 알람의 사이렌이 울리고 있지 않다면 즉시 알람의 사이렌을 울려 줘.
  command_translated: Check in real time. if the window is open, close the blinds. if it is closed, open the curtains. Also, if the alarm's siren is not sounding, sound it immediately.
  devices:
  - Clock
  - Siren
  - Curtain
  - Window
  - Alarm
  - Blind
  - DoorLock
  - Speaker
  - Pump
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#Window).windowControl_window == "open") {
        (#Blind).blind_close()
      } else {
        (#Curtain).curtain_open()
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |-
      if ((#Alarm).alarm_alarm != "siren") {
        (#Alarm).alarm_siren()
      }
  model_info:
    elapsed_time: 5.01
    bge_elapsed_time: 0.096
    llm_elapsed_time: 4.875
    validation_elapsed_time: 0.04
- command: 매주 금요일 오후 6시에 조명이 켜져 있으면 밝기를 30으로 낮추고, TV가 꺼져 있으면 TV를 켜 줘. 선풍기가 꺼져 있으면 선풍기도 켜 줘.
  command_translated: Every Friday at 6pm, if the lights are on, turn them down to 30, and if the TV is off, turn it on. If the fan is off, turn it on.
  devices:
  - LightSensor
  - Clock
  - Fan
  - Light
  - Siren
  - Irrigator
  - Television
  - Speaker
  - Calculator
  - Timer
  generated_code:
  - name: "Scenario1"
    cron: "0 18 * * 5"
    period: 0
    code: |-
      if ((#Light).switch_switch == "on") {
        (#Light).switchLevel_setLevel(30, 1000)
      }
      if ((#Television).switch_switch == "off") {
        (#Television).switch_on()
      }
      if ((#Fan).switch_switch == "off") {
        (#Fan).switch_on()
      }
  model_info:
    elapsed_time: 5.592
    bge_elapsed_time: 0.095
    llm_elapsed_time: 5.477
    validation_elapsed_time: 0.021
- command: 창문이 닫혔을 때부터 5초마다 블라인드를 열었다 닫았다 반복해 줘.
  command_translated: Open, close, and repeat the blinds every 5 seconds from the time when the window is closed.
  devices:
  - Clock
  - Timer
  - Valve
  - Curtain
  - Window
  - Blind
  - DoorLock
  - Speaker
  - Pump
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      windowState := (#Window).windowControl_window
      if (windowState == "closed") {
        blind_close()
        wait until(windowState != "closed")
        blind_open()
        wait until(windowState != "open")
      }
      repeat
  model_info:
    elapsed_time: 3.987
    bge_elapsed_time: 0.087
    llm_elapsed_time: 3.88
    validation_elapsed_time: 0.02
- command: 매일 아침 8시에 스피커가 꺼져 있으면 스피커를 켜고 ‘오늘 날씨입니다’라고 말해 줘. 이후 조명이 꺼져 있으면 켜고 블라인드를 열어 줘.
  command_translated: Every morning at 8am, if the speaker is off, turn it on and announce 'This is the weather today' via the speaker. Then, if the lights are off, turn them on and open the blinds.
  devices:
  - Clock
  - MenuProvider
  - Light
  - Window
  - Blind
  - Speaker
  - Shade
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: "0 8 * * *"
    period: 0
    code: |-
      if ((#Speaker).switch_switch == "off") {
        (#Speaker).switch_on()
        (#Speaker).mediaPlayback_speak("This is the weather today")
      }
  - name: "Scenario2"
    cron: "0 8 * * *"
    period: 0
    code: |-
      if ((#Light).switch_switch == "off") {
        (#Light).switch_on()
        (#Blind).blind_open()
      }
  model_info:
    elapsed_time: 5.972
    bge_elapsed_time: 0.096
    llm_elapsed_time: 5.843
    validation_elapsed_time: 0.033
