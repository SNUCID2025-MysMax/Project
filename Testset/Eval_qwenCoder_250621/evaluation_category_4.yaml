- command: "창문이 열리면 알람의 사이렌을 울려 줘."
  command_translated: "Sound the alarm's siren when the window opens."
  devices:
  - DoorLock
  - Clock
  - Siren
  - Speaker
  - Alarm
  - Valve
  - Curtain
  - Shade
  - Blind
  - Window
  - Pump
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Window).windowControl_window == "open")
      (#Alarm).alarm_siren()
  elapsed_time: 7.257 seconds
- command: "토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘."
  command_translated: "Turn on irrigation when soil moisture is above and below 20%."
  devices:
  - Clock
  - TemperatureSensor
  - WeatherProvider
  - Speaker
  - Humidifier
  - Dehumidifier
  - Irrigator
  - SoilMoistureSensor
  - Pump
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      moistureLevel = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
      if (moistureLevel <= 20.0 || moistureLevel >= 80.0) {
        (#Irrigator).irrigatorOperatingState_startWatering()
      } else {
        (#Irrigator).irrigatorOperatingState_startWatering()
      }
      break
  elapsed_time: 11.423 seconds
- command: "움직임이 감지되면 최대 3번까지 조명을 켜 줘."
  command_translated: "Turn on the light up to 3 times when motion is detected."
  devices:
  - Clock
  - Buttonx4
  - Light
  - LightSensor
  - FallDetector
  - MotionSensor
  - Siren
  - Button
  - Speaker
  - SmokeDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      motionDetected := false
      count := 0

      if (!motionDetected && (#MotionSensor).motionSensor_motion == "active") {
        motionDetected := true
      }

      if (motionDetected) {
        count += 1
        if (count <= 3) {
          (#Light).switch_on()
        }
      } else {
        wait until(motionDetected || (#MotionSensor).motionSensor_motion != "active")
      }

      if (count >= 3) {
        break
      }
  elapsed_time: 13.578 seconds
- command: "온도가 35도 이상이 되면 에어컨을 켜 줘."
  command_translated: "Turn on the air conditioner when the temperature is above 35 degrees."
  devices:
  - Clock
  - TemperatureSensor
  - WeatherProvider
  - AirConditioner
  - RobotCleaner
  - AirPurifier
  - Fan
  - Dehumidifier
  - Speaker
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      tempThreshold := 35.0
      currentTemp = (#TemperatureSensor).temperatureMeasurement_temperature
      if (currentTemp > tempThreshold) {
        (#AirConditioner).airConditionerMode_setAirConditionerMode("cool")
        (#AirConditioner).switch_on()
      } else {
        (#AirConditioner).switch_off()
      }
  elapsed_time: 8.068 seconds
- command: "습도가 80% 이상이 되면 블라인드를 내려 줘."
  command_translated: "Lower the blinds when the humidity is above 80%."
  devices:
  - Clock
  - WeatherProvider
  - Humidifier
  - Dehumidifier
  - AirQualityDetector
  - SoilMoistureSensor
  - HumiditySensor
  - Shade
  - Blind
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {
        (#Blind).blind_close()
      }
  elapsed_time: 6.199 seconds
- command: "블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘."
  command_translated: "When the blinds are closed, say 'Blinds are closed'."
  devices:
  - DoorLock
  - Clock
  - Speaker
  - GasValve
  - Curtain
  - Shade
  - Window
  - Blind
  - Pump
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Blind).blind_blind == "closed") {
        (#Speaker).mediaPlayback_speak("Blinds are closed")
      }
  elapsed_time: 7.392 seconds
- command: "TV가 꺼지면 스피커를 꺼 줘."
  command_translated: "Turn off the speakers when the TV is turned off."
  devices:
  - Clock
  - SoundSensor
  - GasValve
  - AirQualityDetector
  - Timer
  - Window
  - Blind
  - Speaker
  - Television
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Television).switch_switch == "off")
      (#Speaker).switch_off()
  elapsed_time: 5.699 seconds
- command: "커튼이 3번 열렸다 닫히면 조명을 꺼 줘."
  command_translated: "Turn off the light when the curtain opens and closes 3 times."
  devices:
  - DoorLock
  - Clock
  - Siren
  - Speaker
  - Light
  - Valve
  - Curtain
  - Window
  - Blind
  - Shade
  - Pump
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      count := 0

      if ((#Curtain).curtain_curtain == "opening" or (#Curtain).curtain_curtain == "closing") {
        count += 1

        if (count == 3) {
          (#Light).switch_off()
          break
        }
      }
  elapsed_time: 10.518 seconds
- command: "제습기가 꺼지면 다시 켜 줘."
  command_translated: "Turn the dehumidifier back on when it turns off."
  devices:
  - Clock
  - Speaker
  - AirPurifier
  - Humidifier
  - Refrigerator
  - Dehumidifier
  - GasValve
  - Irrigator
  - Valve
  - Pump
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Dehumidifier).dehumidifierMode_dehumidifierMode != "off")
      (#Dehumidifier).switch_on()
  elapsed_time: 12.448 seconds
- command: "재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘."
  command_translated: "When the occupancy sensor no longer detects it, say 'Door is open'."
  devices:
  - Clock
  - TemperatureSensor
  - ContactSensor
  - SoundSensor
  - PresenceSensor
  - LeakSensor
  - LightSensor
  - OccupancySensor
  - MotionSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence != "present")
      (#Speaker).mediaPlayback_speak("Door is open")
  elapsed_time: 3.638 seconds
