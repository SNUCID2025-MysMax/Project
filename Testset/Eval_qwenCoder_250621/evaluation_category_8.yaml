- command: "토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘."
  command_translated: "Turn on the irrigator when the soil humidity is below 25% and check the status every 3 seconds thereafter, cycling the irrigator off and on until the humidity is above 30%."
  devices:
  - Clock
  - WeatherProvider
  - Humidifier
  - Refrigerator
  - Irrigator
  - AirQualityDetector
  - SoilMoistureSensor
  - HumiditySensor
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |
      initialCheck := false

      if (!initialCheck) {
        initialCheck := true
        if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) {
          (#Irrigator).switch_on()
        }
      }

      currentHumidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
      if (currentHumidity < 30.0) {
        (#Irrigator).switch_toggle()
      } else {
        (#Irrigator).switch_off()
        break
      }
  elapsed_time: 15.126 seconds
- command: "온도가 30도를 초과하면 블라인드를 닫고, 이후 5초마다 알람의 사이렌을 울려 줘."
  command_translated: "Close the blinds when the temperature exceeds 30 degrees, and sound the alarm's siren every 5 seconds thereafter."
  devices:
  - Clock
  - WeatherProvider
  - TemperatureSensor
  - SoundSensor
  - Alarm
  - Curtain
  - Window
  - Blind
  - Siren
  - Shade
  - Speaker
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |
      tempThreshold := 30.0
      temperature = (#TemperatureSensor).temperatureMeasurement_temperature

      if (temperature > tempThreshold) {
        all(#Blind).blind_close()
      }

      if (temperature > tempThreshold) {
        while (true) {
          wait until(all(#Blind).blind_blind != closed)
          all(#Alarm).alarm_siren()
          wait until(all(#Alarm).alarm_alarm != sounding)
        }
      }
      break
  elapsed_time: 13.758 seconds
- command: "날씨 감지 센서에서 비가 감지되면 관개 장치를 바로 끄고, 이후 2초마다 알람을 꺼 줘."
  command_translated: "Turn off the irrigator immediately when the weather sensor detects rain, and then turn off the alarm every two seconds thereafter."
  devices:
  - Clock
  - WeatherProvider
  - TemperatureSensor
  - ContactSensor
  - SoundSensor
  - Irrigator
  - LeakSensor
  - Alarm
  - HumiditySensor
  - MotionSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#LightSensor).fallDetection_fall == true) {
        (#Irrigator).switch_off()
        break
      }

      (#Alarm).alarm_setAlarmVolume("off")
      break
  elapsed_time: 10.636 seconds
- command: "일조량이 200룩스 이하가 되면 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘."
  command_translated: "When the sunlight is below 200 lux, turn on the light every 4 seconds and turn it off after 2 seconds."
  devices:
  - Clock
  - WeatherProvider
  - TemperatureSensor
  - Buttonx4
  - Light
  - Alarm
  - LightSensor
  - Shade
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 4000
    code: |
      sunlightIntensity = (#LightSensor).lightLevel_light
      if (sunlightIntensity < 200.0) {
        (#Light).switch_on()
        wait until(#LightSensor).lightLevel_light >= 200.0
        (#Light).switch_off()
      } else {
        break
      }
  elapsed_time: 11.878 seconds
- command: "문이 처음 열릴 때 환풍기를 켜고, 이후 3초마다 습도를 확인해서 70% 이하가 될 때까지 환풍기를 켜고 끄는 동작을 반복해 줘."
  command_translated: "Turn on the fan when the door first opens, then check the humidity every 3 seconds and cycle the fan on and off until it's below 70%."
  devices:
  - DoorLock
  - WeatherProvider
  - Clock
  - Humidifier
  - Fan
  - AirQualityDetector
  - SoilMoistureSensor
  - HumiditySensor
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |
      break = Y

      if ((#DoorLock).doorControl_door == "unknown" || (#DoorLock).doorControl_door == "closing") {
        wait until((#DoorLock).doorControl_door == "open")
      }

      fanOn := false
      while (true) {
        humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity
        if (humidity < 70.0) {
          break
        }
        if (!fanOn) {
          (#Fan).switch_on()
          fanOn = true
        } else {
          (#Fan).switch_off()
          fanOn = false
        }
        wait until(period)
      }
  elapsed_time: 14.818 seconds
- command: "조명이 켜지면 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘."
  command_translated: "Close the blinds when the lights come on, then open and close the curtains every two seconds thereafter."
  devices:
  - DoorLock
  - Clock
  - Siren
  - Light
  - Valve
  - Alarm
  - Curtain
  - LightSensor
  - Shade
  - Window
  - Blind
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |
      break = Y

      if ((#Light).switch_switch == "on" && !blindsClosed) {
        (#Blind).blind_close()
        blindsClosed = TRUE
      }

      if (!blindsClosed) {
        break
      }

      if (blindsClosed) {
        (#Curtain).curtain_curtain = "opening"
        wait until((#Curtain).curtain_curtain != "opening")
        (#Curtain).curtain_curtain = "closing"
        wait until((#Curtain).curtain_curtain != "closing")
        (#Curtain).curtain_curtain = "opening"
        wait until((#Curtain).curtain_curtain != "opening")
        (#Curtain).curtain_curtain = "closing"
        wait until((#Curtain).curtain_curtain != "closing")
        blindsClosed = FALSE
      }
  elapsed_time: 20.236 seconds
- command: "TV가 처음 켜지면 5초마다 스피커를 켜고 3초 후에 끄는 동작을 반복해 줘."
  command_translated: "When the TV first turns on, turn on the speakers every 5 seconds and turn them off after 3 seconds."
  devices:
  - Clock
  - Buttonx4
  - GasValve
  - Irrigator
  - AirQualityDetector
  - Blind
  - Speaker
  - Television
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Television).switch_switch == "on")
      (#Speaker).speakerControl_turnOn()
      wait until((#Television).audioMute_muteStatus == "unmuted")
      repeat(5000) {
        wait until((#Television).audioMute_muteStatus == "unmuted")
        (#Speaker).audioRecord_record(sound: "sound_name_here")
      }
      wait until((#Television).audioMute_muteStatus == "unmuted")
      (#Speaker).switch_off()
      break
  elapsed_time: 11.850 seconds
- command: "공기청정기가 꺼지면 2초마다 ‘공기청정기를 켜 주세요’라고 두 번 반복해서 스피커로 출력해줘."
  command_translated: "When the air purifier is turned off, repeat \"Please turn on the air purifier\" twice every 2 seconds to the speaker."
  devices:
  - Clock
  - AirConditioner
  - AirPurifier
  - Humidifier
  - Fan
  - Dehumidifier
  - GasValve
  - Irrigator
  - AirQualityDetector
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |
      if ((#AirPurifier).switch_switch == "off") {
        (#Speaker).mediaPlayback_play("Please turn on the air purifier")
        wait until(((#Speaker).mediaPlayback_supportedPlaybackCommands != null) and ((#Speaker).mediaPlayback_supportedPlaybackCommands.includes("playing")))
        (#Speaker).mediaPlayback_play("Please turn on the air purifier")
        wait until(((#Speaker).mediaPlayback_supportedPlaybackCommands != null) and ((#Speaker).mediaPlayback_supportedPlaybackCommands.includes("playing")))
      }
  elapsed_time: 11.404 seconds
- command: "창문이 열리면 조명을 꺼 주고, 이후 1초마다 블라인드를 10퍼센트 씩 내려 줘."
  command_translated: "Turn off the lights when the window opens, and lower the blinds by 10% every second thereafter."
  devices:
  - DoorLock
  - Clock
  - Siren
  - GasValve
  - Light
  - Alarm
  - LightSensor
  - Curtain
  - Shade
  - Window
  - Blind
  - Speaker
  generated_code: []
  elapsed_time: 12.019 seconds
- command: "현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 경광등을 켜 줘."
  command_translated: "Turn off the lights as soon as the front door closes, and then every three seconds thereafter."
  devices:
  - DoorLock
  - Clock
  - Light
  - Alarm
  - LightSensor
  - Valve
  - Window
  - Blind
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |
      break = Y
      if ((#DoorLock).doorControl_door == "closed") {
        (#Light).switch_off()
        break
      }

      (#Light).switch_off()
  elapsed_time: 11.409 seconds
