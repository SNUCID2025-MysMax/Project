- command: "창문이 열리면 알람의 사이렌을 울려 줘."
  command_translated: "Sound the alarm's siren when the window opens."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Window).windowControl_window == "open")
      (#Alarm).alarm_siren()
  elapsed_time: 3.628 seconds
- command: "토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘."
  command_translated: "Turn on irrigation when soil moisture is above and below 20%."
  devices:
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - Speaker
  - TemperatureSensor
  - Irrigator
  - Dehumidifier
  - Pump
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0) or ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 20.0))
      all(#Irrigator).switch_on()
  elapsed_time: 5.422 seconds
- command: "움직임이 감지되면 최대 3번까지 조명을 켜 줘."
  command_translated: "Turn on the light up to 3 times when motion is detected."
  devices:
  - Siren
  - Light
  - Speaker
  - MotionSensor
  - LightSensor
  - Button
  - Buttonx4
  - Clock
  - SmokeDetector
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      counter := 0
      repeat_until(counter >= 3)
        wait until(#MotionSensor).motionSensor_motion == active
        counter += 1
        (#Light).colorControl_setColor("WHITE")
        (#Light).switchLevel_setLevel(100, 100)
      repeat_end
      (#Light).switchLevel_setLevel(0, 100)
  elapsed_time: 5.986 seconds
- command: "온도가 35도 이상이 되면 에어컨을 켜 줘."
  command_translated: "Turn on the air conditioner when the temperature is above 35 degrees."
  devices:
  - WeatherProvider
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Calculator
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#TemperatureSensor).temperatureMeasurement_temperature > 35.0)
      (#AirConditioner).airConditionerMode_setAirConditionerMode("cool")
      (#AirConditioner).airConditionerMode_setTemperature(25.0)
  elapsed_time: 4.913 seconds
- command: "습도가 80% 이상이 되면 블라인드를 내려 줘."
  command_translated: "Lower the blinds when the humidity is above 80%."
  devices:
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Clock
  - Shade
  - AirQualityDetector
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0)
      (#Blind).blindLevel_setBlindLevel(50)
  elapsed_time: 4.338 seconds
- command: "블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘."
  command_translated: "When the blinds are closed, say 'Blinds are closed'."
  devices:
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - GasValve
  - Clock
  - Shade
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Blind).blind_blind == closed)
      (#Speaker).mediaPlayback_speak("Blinds are closed")
  elapsed_time: 3.749 seconds
- command: "TV가 꺼지면 스피커를 꺼 줘."
  command_translated: "Turn off the speakers when the TV is turned off."
  devices:
  - Window
  - Speaker
  - GasValve
  - Timer
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Television
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Television).switch_switch == "off")
      (#Speaker).switch_off()
  elapsed_time: 3.472 seconds
- command: "커튼이 3번 열렸다 닫히면 조명을 꺼 줘."
  command_translated: "Turn off the light when the curtain opens and closes 3 times."
  devices:
  - Siren
  - Light
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      counter := 0
      repeat_until(counter == 3) {
        wait until(#Curtain).curtain_curtain == open
        wait until(#Curtain).curtain_curtain == closed
        counter += 1
      }

      (#Light).switch_off()
  elapsed_time: 5.268 seconds
- command: "제습기가 꺼지면 다시 켜 줘."
  command_translated: "Turn the dehumidifier back on when it turns off."
  devices:
  - Humidifier
  - AirPurifier
  - Speaker
  - Irrigator
  - Dehumidifier
  - Pump
  - GasValve
  - Clock
  - Refrigerator
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Dehumidifier).dehumidifierMode_dehumidifierMode == "off")
      (#Dehumidifier).switch_on()
  elapsed_time: 4.142 seconds
- command: "재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘."
  command_translated: "When the occupancy sensor no longer detects it, say 'Door is open'."
  devices:
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - PresenceSensor
  - OccupancySensor
  - Clock
  - SoundSensor
  - LightSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == presenceEnum.not_present)
      (#Speaker).mediaPlayback_speak("Door is open")
  elapsed_time: 3.450 seconds
