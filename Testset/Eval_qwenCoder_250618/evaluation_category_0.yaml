- command: "사이렌을 울려줘."
  command_translated: "Sound the siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - Recorder
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).alarm_siren()
  elapsed_time: 2.745 seconds
- command: "사이렌을 울려줘."
  command_translated: "Sound the siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - Recorder
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).alarm_siren()
  elapsed_time: 2.740 seconds
- command: "경광등을 켜 줘."
  command_translated: "Turn on the strobe."
  devices:
  - Siren
  - Light
  - Speaker
  - Timer
  - Clock
  - Relay
  - Shade
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_strobe()
  elapsed_time: 2.815 seconds
- command: "경광등을 켜 줘."
  command_translated: "Turn on the strobe."
  devices:
  - Siren
  - Light
  - Speaker
  - Timer
  - Clock
  - Relay
  - Shade
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_strobe()
  elapsed_time: 2.796 seconds
- command: "사이렌과 경광등을 동시에 켜 줘"
  command_translated: "Turn on the siren and the strobe at the same time"
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).sirenMode_setSirenMode("both")
  elapsed_time: 2.976 seconds
- command: "사이렌과 경광등을 동시에 켜 줘"
  command_translated: "Turn on the siren and the strobe at the same time"
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).sirenMode_setSirenMode("both")
  elapsed_time: 2.996 seconds
- command: "사이렌과 경광등을 둘 다 꺼 줘"
  command_translated: "Turn off both the siren and the strobe"
  devices:
  - Siren
  - Speaker
  - GasValve
  - Timer
  - Relay
  - SoundSensor
  - Clock
  - Valve
  - Alarm
  generated_code: []
  elapsed_time: 47.127 seconds
- command: "사이렌과 경광등을 둘 다 꺼 줘"
  command_translated: "Turn off both the siren and the strobe"
  devices:
  - Siren
  - Speaker
  - GasValve
  - Timer
  - Relay
  - SoundSensor
  - Clock
  - Valve
  - Alarm
  generated_code: []
  elapsed_time: 48.282 seconds
- command: "재실 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the occupancy sensor is detected."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - PresenceSensor
  - OccupancySensor
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == present)
      (#Alarm).alarm_siren()
  elapsed_time: 3.299 seconds
- command: "재실 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the occupancy sensor is detected."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - PresenceSensor
  - OccupancySensor
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == present)
      (#Alarm).alarm_siren()
  elapsed_time: 3.300 seconds
- command: "에어컨의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner is powered on."
  devices:
  - Siren
  - Window
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Dehumidifier
  - AirConditioner
  - Clock
  - Relay
  - Recorder
  - Fan
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirConditioner).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.746 seconds
- command: "에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner is in cooling mode."
  devices:
  - Siren
  - Feeder
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - AirConditioner
  - Dehumidifier
  - Clock
  - Refrigerator
  - Recorder
  - Fan
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirConditioner).airConditionerMode_airConditionerMode == "cool") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.407 seconds
- command: "에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner's target temperature is 30 degrees."
  devices:
  - Siren
  - WeatherProvider
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - AirConditioner
  - Dehumidifier
  - Clock
  - Fan
  - Recorder
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirConditioner).airConditionerMode_targetTemperature == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.222 seconds
- command: "에어컨이 지원하는 모드를 스피커로 출력해줘"
  command_translated: "Speaker out the modes supported by the air conditioner"
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - AirConditioner
  - Dehumidifier
  - Clock
  - Recorder
  - Fan
  - SoundSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).mediaPlayback_speak("The air conditioner supports modes: auto, cool, and heat.")
  elapsed_time: 3.722 seconds
- command: "에어컨을 꺼줘."
  command_translated: "Turn off the air conditioner."
  devices:
  - Humidifier
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Dehumidifier
  - Clock
  - Fan
  - Recorder
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_off()
  elapsed_time: 3.091 seconds
- command: "에어컨을 켜줘."
  command_translated: "Turn on the air conditioner."
  devices:
  - Humidifier
  - Feeder
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - Recorder
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_on()
  elapsed_time: 3.105 seconds
- command: "에어컨의 전원을 토글해줘."
  command_translated: "Toggle the power of the air conditioner."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Relay
  - Fan
  - RobotCleaner
  - SmartPlug
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_toggle()
  elapsed_time: 3.083 seconds
- command: "에어컨을 자동 모드로 설정해줘."
  command_translated: "Set the air conditioner to auto mode."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - Recorder
  - RobotCleaner
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).airConditionerMode_setAirConditionerMode("auto")
  elapsed_time: 3.553 seconds
- command: "에어컨의 목표 온도를 18도로 설정해줘."
  command_translated: "Set the target temperature for the air conditioner to 18 degrees."
  devices:
  - WeatherProvider
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - RobotCleaner
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).airConditionerMode_setTemperature(18.0)
  elapsed_time: 3.467 seconds
- command: "공기청정기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air purifier is powered on."
  devices:
  - Siren
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Relay
  - Fan
  - AirQualityDetector
  - SmartPlug
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirPurifier).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.035 seconds
- command: "공기청정기가 수면 모드면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air purifier is in sleep mode."
  devices:
  - Siren
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - SoundSensor
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirPurifier).airPurifierFanMode_airPurifierFanMode == "sleep") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.422 seconds
- command: "공기청정기가 지원하는 모드를 스피커로 출력해줘"
  command_translated: "Speaker out the modes the air purifier supports"
  devices:
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - Recorder
  - SoundSensor
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).mediaPlayback_speak("The air purifier supports modes like auto, low, medium, high, sleep, quiet, wind free, and off.")
  elapsed_time: 4.411 seconds
- command: "공기청정기를 꺼줘."
  command_translated: "Turn off the air purifier."
  devices:
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Pump
  - GasValve
  - Clock
  - Fan
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_off()
  elapsed_time: 3.208 seconds
- command: "공기청정기를 켜줘."
  command_translated: "Turn on the air purifier."
  devices:
  - Humidifier
  - WeatherProvider
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - SmokeDetector
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_on()
  elapsed_time: 3.150 seconds
- command: "공기청정기의 전원을 토글해줘."
  command_translated: "Toggle the air purifier's power."
  devices:
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Clock
  - Relay
  - Fan
  - AirQualityDetector
  - SmartPlug
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_toggle()
  elapsed_time: 3.139 seconds
- command: "공기청정기의 모드를 자동으로 설정해줘."
  command_translated: "Set the air purifier's mode to automatic."
  devices:
  - Humidifier
  - AirPurifier
  - Speaker
  - Irrigator
  - Dehumidifier
  - AirConditioner
  - Clock
  - Fan
  - RobotCleaner
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode("auto")
  elapsed_time: 3.777 seconds
- command: "공기질 측정기의 측정 온도가 20도이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren If the temperature measured by the air quality meter is 20 degrees."
  devices:
  - Siren
  - WeatherProvider
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Dehumidifier
  - HumiditySensor
  - Clock
  - AirQualityDetector
  - GasMeter
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).temperatureMeasurement_temperature == 20.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.834 seconds
- command: "이산화탄소 농도가 800ppm 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the carbon dioxide concentration is above 800 ppm."
  devices:
  - Siren
  - WeatherProvider
  - LeakSensor
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - AirQualityDetector
  - Clock
  - SoundSensor
  - SmokeDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 800.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.996 seconds
- command: "공기질 측정기의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the relative humidity on the air quality meter is above 70 percent."
  devices:
  - Siren
  - WeatherProvider
  - Humidifier
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Clock
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).relativeHumidityMeasurement_humidity > 70.0)
      (#Alarm).alarm_siren()
  elapsed_time: 4.026 seconds
- command: "실내 황사 농도가 150마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the indoor yellow dust concentration is 150 micrograms or more."
  devices:
  - Siren
  - WeatherProvider
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - HumiditySensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#LightSensor).dustSensor_dustLevel >= 150)
      (#Alarm).alarm_siren()
  elapsed_time: 3.792 seconds
- command: "실내 미세먼지 농도가 35마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if indoor particulate matter concentration is 35 micrograms or higher."
  devices:
  - Siren
  - WeatherProvider
  - Window
  - Speaker
  - TemperatureSensor
  - Calculator
  - HumiditySensor
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).dustSensor_dustLevel >= 35)
      (#Alarm).alarm_siren()
  elapsed_time: 3.694 seconds
- command: "실내 초미세먼지 농도가 15마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the indoor fine particulate matter concentration is 15 micrograms or more."
  devices:
  - Siren
  - WeatherProvider
  - Window
  - AirPurifier
  - Speaker
  - HumiditySensor
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).dustSensor_fineDustLevel >= 15)
      (#Alarm).alarm_siren()
  elapsed_time: 3.991 seconds
- command: "총 휘발성 유기 화합물 농도가 0.5ppm 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the total volatile organic compound concentration is greater than 0.5 ppm."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Pump
  - HumiditySensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - AirQualityDetector
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).tvocMeasurement_tvocLevel > 0.5)
      (#Alarm).alarm_siren()
  elapsed_time: 3.740 seconds
- command: "알람이 경광등 모드이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the alarm is in strobe mode."
  devices:
  - Siren
  - Window
  - Speaker
  - ContactSensor
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#Alarm).alarm_alarm == "strobe") and ((#Alarm).alarm_alarmVolume != "mute")) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.011 seconds
- command: "알람의 볼륨이 높음이면 알람의 사이렌을 울려줘."
  command_translated: "If the volume of the alarm is high, sound the alarm's siren."
  devices:
  - Siren
  - LeakSensor
  - Window
  - Speaker
  - Timer
  - Clock
  - SoundSensor
  - Recorder
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).alarm_alarmVolume == high) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.531 seconds
- command: "알람 배터리 상태가 20퍼센트 이하이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the alarm battery is below 20 percent."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - Timer
  - HumiditySensor
  - Clock
  - SoundSensor
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).battery_battery < 20.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.585 seconds
- command: "알람의 사이렌과 경광등을 모두 켜줘."
  command_translated: "Turn on both the alarm's siren and strobe."
  devices:
  - Siren
  - Window
  - Speaker
  - Timer
  - Clock
  - Relay
  - SmokeDetector
  - FallDetector
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_both()
  elapsed_time: 2.785 seconds
- command: "알람을 꺼줘."
  command_translated: "Turn off the alarm."
  devices:
  - Siren
  - Speaker
  - MotionSensor
  - ContactSensor
  - Dehumidifier
  - GasValve
  - Timer
  - Clock
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_off()
  elapsed_time: 2.840 seconds
- command: "알람의 볼륨을 낮음으로 설정해줘."
  command_translated: "Set the volume of the alarm to low."
  devices:
  - Siren
  - Speaker
  - Dehumidifier
  - Timer
  - Clock
  - SoundSensor
  - GasMeter
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_setAlarmVolume(low)
  elapsed_time: 2.989 seconds
- command: "알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - Recorder
  - SoundSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 2.912 seconds
- command: "알람의 경광등을 켜줘."
  command_translated: "Turn on the alarm's light."
  devices:
  - Siren
  - Light
  - Speaker
  - ContactSensor
  - Timer
  - Clock
  - Relay
  - LightSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_strobe()
  elapsed_time: 2.944 seconds
- command: "블라인드가 50 퍼센트 이상 열려있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the blinds are more than 50 percent open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - FallDetector
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Blind).blindLevel_blindLevel > 50) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.860 seconds
- command: "블라인드가 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the blinds are open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - FallDetector
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Blind).blind_blind == open) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.609 seconds
- command: "블라인드를 70 퍼센트로 설정해줘."
  command_translated: "Set the blinds to 70 percent."
  devices:
  - Humidifier
  - Light
  - Window
  - Curtain
  - Speaker
  - Buttonx4
  - Clock
  - Shade
  - FallDetector
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      blindLevel_setBlindLevel(blindLevel: 70) -> VOID
  elapsed_time: 3.419 seconds
- command: "블라인드를 닫아줘."
  command_translated: "Close the blinds."
  devices:
  - Window
  - Curtain
  - Speaker
  - Buttonx4
  - Pump
  - Dehumidifier
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_close()
  elapsed_time: 2.925 seconds
- command: "블라인드를 열어줘."
  command_translated: "Open the blinds."
  devices:
  - Humidifier
  - Window
  - Curtain
  - Speaker
  - Buttonx4
  - Pump
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_open()
  elapsed_time: 2.908 seconds
- command: "블라인드 움직임을 멈춰줘."
  command_translated: "Stop blind movement."
  devices:
  - Curtain
  - Speaker
  - MotionSensor
  - ContactSensor
  - Timer
  - Clock
  - Relay
  - Shade
  - FallDetector
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_pause()
  elapsed_time: 2.701 seconds
- command: "버튼이 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the button is pressed."
  devices:
  - Siren
  - Speaker
  - MotionSensor
  - Button
  - Buttonx4
  - ContactSensor
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code: []
  elapsed_time: 3.422 seconds
- command: "버튼의 개수가 4개 이상이면 알람의 사이렌을 울려줘."
  command_translated: "If there are more than four buttons, sound the alarm's siren."
  devices:
  - Siren
  - Speaker
  - Button
  - Buttonx4
  - ContactSensor
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Buttonx4).buttonx4_numberOfButtons > 4) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.920 seconds
- command: "버튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the button's supported states via the speaker."
  devices:
  - Window
  - Speaker
  - Button
  - Buttonx4
  - ContactSensor
  - Pump
  - Clock
  - Recorder
  - SoundSensor
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      buttonSupportedStates := (#Button).button_supportedButtonValues
      (#Speaker).mediaPlayback_speak("The button supports these states: " + buttonSupportedStates)
  elapsed_time: 3.979 seconds
- command: "버튼1이 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if button 1 is pressed."
  devices:
  - Siren
  - Window
  - Speaker
  - MotionSensor
  - Button
  - Buttonx4
  - ContactSensor
  - Timer
  - Clock
  - SoundSensor
  - Alarm
  generated_code: []
  elapsed_time: 3.555 seconds
- command: "버튼2가 눌린 상태면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if button 2 is pressed."
  devices:
  - Siren
  - Window
  - Speaker
  - MotionSensor
  - Button
  - Buttonx4
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code: []
  elapsed_time: 3.596 seconds
- command: "버튼3이 두 번 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "if button 3 is pressed twice, sound the alarm's siren."
  devices:
  - Siren
  - Speaker
  - Button
  - Buttonx4
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Recorder
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      buttonPressedTwice := false
      if (((#Buttonx4).buttonx4_button3 == pushed_2x) and (not buttonPressedTwice)) {
        buttonPressedTwice = true
        wait until(((#Buttonx4).buttonx4_button3 != pushed_2x))
        buttonPressedTwice = false
        (#Alarm).alarm_siren()
      }
  elapsed_time: 6.269 seconds
- command: "버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘."
  command_translated: "if button 4 is swiped up, sound the alarm's siren."
  devices:
  - Siren
  - Speaker
  - MotionSensor
  - Button
  - Buttonx4
  - ContactSensor
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#Buttonx4).buttonx4_button4 == swipe_up)) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.881 seconds
- command: "버튼 개수가 4개면 알람의 사이렌을 울려줘."
  command_translated: "If the number of buttons is 4, sound the alarm's siren."
  devices:
  - Siren
  - Speaker
  - MotionSensor
  - Button
  - Buttonx4
  - ContactSensor
  - Timer
  - Clock
  - SoundSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Buttonx4).buttonx4_numberOfButtons == 4) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.979 seconds
- command: "4개짜리 버튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the button x4 via the speaker."
  devices:
  - Siren
  - Window
  - Speaker
  - Button
  - Buttonx4
  - ContactSensor
  - Timer
  - Clock
  - SoundSensor
  - Recorder
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      button_values := (#Buttonx4).buttonx4_supportedButtonValues
      (#Speaker).mediaPlayback_speak("The supported button values are: " + button_values)
  elapsed_time: 4.113 seconds
- command: "5와 3을 더해줘."
  command_translated: "Add 5 and 3."
  devices:
  - Siren
  - Feeder
  - Speaker
  - Calculator
  - Buttonx4
  - Clock
  - Relay
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      sum_result := (#Calculator).calculator_add(5, 3)
      (#Speaker).mediaPlayback_speak("The sum is \(sum_result)")
  elapsed_time: 3.753 seconds
- command: "10을 2로 나눠줘."
  command_translated: "Divide 10 by 2."
  devices:
  - Feeder
  - Speaker
  - Calculator
  - Buttonx4
  - Clock
  - Relay
  - Fan
  - Shade
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result := (#Calculator).calculator_div(10.0, 2.0)
      (#Speaker).mediaPlayback_speak("The result is " + result.toString())
  elapsed_time: 3.986 seconds
- command: "10을 3으로 나눈 나머지를 구해."
  command_translated: "Find the remainder of 10 divided by 3."
  devices:
  - Feeder
  - Speaker
  - Calculator
  - Buttonx4
  - Clock
  - Relay
  - Shade
  - FallDetector
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      remainder = (#Calculator).calculator_mod(10, 3)
      (#Speaker).mediaPlayback_speak("The remainder of 10 divided by 3 is \(remainder\)")
  elapsed_time: 4.047 seconds
- command: "7과 8을 곱해줘."
  command_translated: "Multiply 7 and 8."
  devices:
  - Siren
  - Feeder
  - Humidifier
  - Speaker
  - Calculator
  - Clock
  - Relay
  - Fan
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result := (#Calculator).calculator_mul(7, 8)
      (#Speaker).mediaPlayback_speak("The result is " + result.toString())
  elapsed_time: 3.668 seconds
- command: "15에서 4를 빼줘."
  command_translated: "Subtract 4 from 15."
  devices:
  - Feeder
  - Curtain
  - Speaker
  - Calculator
  - Button
  - Buttonx4
  - Timer
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result := (#Calculator).calculator_sub(15.0, 4.0)
      (#Speaker).mediaPlayback_speak("The result is \(result)")
  elapsed_time: 3.899 seconds
- command: "카메라의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the camera is powered on."
  devices:
  - Siren
  - Window
  - Speaker
  - MotionSensor
  - Timer
  - Clock
  - Relay
  - Recorder
  - Camera
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Camera).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.509 seconds
- command: "가장 최근에 찍은 사진을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘."
  command_translated: "Send an email with the most recent photo as an attachment to 'test@example.com' with the subject line \"Photo\" and the content \"This is a photo\"."
  devices:
  - DoorLock
  - Window
  - EmailProvider
  - Speaker
  - ContactSensor
  - Clock
  - LightSensor
  - Camera
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).camera_take() => lastImage
      (#EmailProvider).emailProvider_sendMailWithFile(
        toAddress: "test@example.com",
        title: "Photo",
        text: "This is a photo.",
        file: lastImage
      )
  elapsed_time: 4.337 seconds
- command: "가장 최근에 찍은 동영상을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘"
  command_translated: "Send an email with the most recent video as an attachment to 'test@example.com' with the subject line \"Video\" and the content \"This is a video."
  devices:
  - DoorLock
  - Window
  - EmailProvider
  - Speaker
  - Clock
  - Recorder
  - Camera
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      video = (#Camera).camera_takeTimelapse(duration: 10, speed: 1)
      (#EmailProvider).emailProvider_sendMailWithFile(toAddress: "test@example.com", title: "Video", text: "This is a video.", file: video)
  elapsed_time: 4.675 seconds
- command: "카메라를 꺼줘."
  command_translated: "Turn off the camera."
  devices:
  - Speaker
  - MotionSensor
  - Dehumidifier
  - GasValve
  - Timer
  - Clock
  - Recorder
  - Camera
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_off()
  elapsed_time: 2.957 seconds
- command: "카메라를 켜줘."
  command_translated: "Turn on the camera."
  devices:
  - Speaker
  - Buttonx4
  - Irrigator
  - Timer
  - Clock
  - Relay
  - Recorder
  - Valve
  - Camera
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_on()
  elapsed_time: 2.860 seconds
- command: "카메라의 전원을 토글해줘."
  command_translated: "Toggle the camera's power."
  devices:
  - Switch
  - Speaker
  - Button
  - Buttonx4
  - Clock
  - Relay
  - Camera
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_toggle()
  elapsed_time: 2.904 seconds
- command: "카메라로 사진을 찍어줘."
  command_translated: "Take a photo with the camera."
  devices:
  - Window
  - Speaker
  - ContactSensor
  - Timer
  - Clock
  - Recorder
  - FallDetector
  - Camera
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).camera_take()
  elapsed_time: 2.719 seconds
- command: "카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘."
  command_translated: "Take a time-lapse video with the camera at speed 2 for 10 seconds."
  devices:
  - Speaker
  - Buttonx4
  - Timer
  - Clock
  - Recorder
  - Fan
  - Camera
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      cameraVideo := (#Camera).camera_takeTimelapse(duration: 10.0, speed: 2.0)
      (#Camera).mediaPlayback_play(cameraVideo)
      (#Speaker).mediaPlayback_speak("Time-lapse video recorded successfully.")
  elapsed_time: 4.826 seconds
- command: "충전기의 전압이 230볼트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the charger's voltage is above 230 volts."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - ContactSensor
  - Clock
  - Relay
  - SoundSensor
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Charger).voltageMeasurement_voltage > 230.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.748 seconds
- command: "충전기의 상태가 충전 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the charger's status is charging."
  devices:
  - Siren
  - Window
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - FallDetector
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Charger).chargingState_chargingState == "charging") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.648 seconds
- command: "충전기의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the charger is drawing more than 10 amps."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - Pump
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Charger).currentMeasurement_current > 10.0)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.840 seconds
- command: "충전기가 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Annonce the status supported by the charger via the speaker."
  devices:
  - Window
  - Speaker
  - TemperatureSensor
  - ContactSensor
  - Pump
  - Clock
  - Relay
  - Recorder
  - SoundSensor
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("The supported charging states are: " + (#Charger).chargingState_supportedChargingStates)
  elapsed_time: 3.672 seconds
- command: "오늘 날짜가 2025년 5월 12일이면 알람의 사이렌을 울려줘."
  command_translated: "If today's date is May 12, 2025, sound the alarm's siren."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Alarm
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(#Clock).clock_datetime == 202505120000
      (#Alarm).alarm_siren()
  elapsed_time: 3.785 seconds
- command: "현재 시간이 2025년 5월 12일 오후 3시 15분이면 알람의 사이렌을 울려줘."
  command_translated: "If the current time is 3:15 PM on May 12, 2025, sound the alarm's siren."
  devices:
  - Siren
  - WeatherProvider
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - SoundSensor
  - Camera
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: "15 15 12 5 2025"
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 3.604 seconds
- command: "오늘이 20일이면 알람의 사이렌을 울려줘"
  command_translated: "If today is the 20th, sound the alarm siren"
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - FallDetector
  - Alarm
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(clockDay == 20)
      (#Alarm).alarm_siren()
  elapsed_time: 3.199 seconds
- command: "현재 시간이 오후 3시이면 알람의 사이렌을 울려줘."
  command_translated: "If the current time is 3pm, sound the alarm's siren."
  devices:
  - Siren
  - Window
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - SoundSensor
  - Camera
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: "0 15 * * *"
    period: -1
    code: |
      wait until(clock.clock_time == 1500)
      (#Alarm).alarm_siren()
  elapsed_time: 4.803 seconds
- command: "오늘이 공휴일이면 알람의 사이렌을 울려줘."
  command_translated: "If today is a holiday, sound the alarm's siren."
  devices:
  - Siren
  - Window
  - Speaker
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_isHoliday == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.453 seconds
- command: "지금이 30분이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 30 minutes from now, sound the alarm's siren."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Calculator
  - Timer
  - Clock
  - SoundSensor
  - Recorder
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(clock.clock_time + 30 == clock_time)
      (#Alarm).alarm_siren()
  elapsed_time: 3.361 seconds
- command: "지금이 5월이면 알람의 사이렌을 울려줘."
  command_translated: "If it's May, sound the alarm siren."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Recorder
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_month == 5) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.436 seconds
- command: "지금이 40초이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 40 seconds now, sound the alarm's siren."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Camera
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(#Clock).clock_second == 40
      (#Alarm).alarm_siren()
  elapsed_time: 3.313 seconds
- command: "지금이 오후 3시 15분이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 3:15pm, blare the siren on the alarm."
  devices:
  - Siren
  - Window
  - Speaker
  - Timer
  - Clock
  - Relay
  - Recorder
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: "0 15 * * *"
    period: 0
    code: |
      wait until(clock.clock_time == 1515)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.725 seconds
- command: "현재 Unix timestamp가 1747031637.23이면 알람의 사이렌을 울려줘."
  command_translated: "If the current Unix timestamp is 1747031637.23, sound the alarm siren."
  devices:
  - Siren
  - Window
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - SoundSensor
  - Camera
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(#Clock).clock_timestamp == 1747031637.23
      (#Alarm).alarm_siren()
  elapsed_time: 3.825 seconds
- command: "오늘이 금요일이면 알람의 사이렌을 울려줘."
  command_translated: "If today is Friday, sound the alarm siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Recorder
  - Alarm
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_weekday == "friday") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.551 seconds
- command: "올해가 2025년이면 알람의 사이렌을 울려줘."
  command_translated: "If the year is 2025, sound the alarm siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - SmokeDetector
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_year == 2025) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.508 seconds
- command: "1시간 20분 30초 뒤에 알람의 사이렌을 울려줘"
  command_translated: "Sound the alarm's siren in 1 hour, 20 minutes, 30 seconds"
  devices:
  - Siren
  - Speaker
  - ContactSensor
  - Timer
  - Clock
  - Relay
  - Recorder
  - SoundSensor
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Clock).clock_delay(ms: 7230000)
      (#Alarm).alarm_siren()
  elapsed_time: 4.565 seconds
- command: "접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the contact sensor is in contact."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - PresenceSensor
  - OccupancySensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#ContactSensor).contactSensor_contact == "closed") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.379 seconds
- command: "커튼이 열림 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the curtain is open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Curtain).blind_blind == open) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.805 seconds
- command: "커튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the curtain via the speaker."
  devices:
  - Siren
  - Window
  - Curtain
  - Speaker
  - Clock
  - Relay
  - Recorder
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("The curtains support these commands: " + (#Curtain).curtain_supportedCurtainCommands)
  elapsed_time: 3.793 seconds
- command: "커튼을 닫아줘."
  command_translated: "Close the curtain."
  devices:
  - Humidifier
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - Pump
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).blind_close()
  elapsed_time: 2.922 seconds
- command: "커튼을 열어줘."
  command_translated: "Open the curtain."
  devices:
  - Humidifier
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - Pump
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).blind_open()
  elapsed_time: 2.927 seconds
- command: "커튼의 움직임을 멈춰줘."
  command_translated: "Stop the curtain from moving."
  devices:
  - Humidifier
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - Timer
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).curtain_pause()
  elapsed_time: 2.956 seconds
- command: "제습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the dehumidifier is powered on."
  devices:
  - Siren
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Refrigerator
  - Relay
  - SoundSensor
  - Clock
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Dehumidifier).dehumidifierMode_dehumidifierMode != "off")
      (#Alarm).alarm_siren()
  elapsed_time: 3.988 seconds
- command: "제습기의 모드가 제습 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the dehumidifier is in dehumidifying mode."
  devices:
  - Siren
  - Humidifier
  - LeakSensor
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Refrigerator
  - SoundSensor
  - Clock
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dehumidifier).dehumidifierMode_dehumidifierMode == "dehumidifying") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.256 seconds
- command: "제습기를 꺼줘."
  command_translated: "Turn off the dehumidifier."
  devices:
  - Humidifier
  - Window
  - AirPurifier
  - Speaker
  - Dehumidifier
  - Pump
  - HumiditySensor
  - Refrigerator
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode("off")
  elapsed_time: 3.497 seconds
- command: "제습기를 켜줘."
  command_translated: "Turn on the dehumidifier."
  devices:
  - Humidifier
  - Window
  - AirPurifier
  - Speaker
  - Irrigator
  - Dehumidifier
  - Pump
  - HumiditySensor
  - Refrigerator
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode("dehumidifying")
  elapsed_time: 3.726 seconds
- command: "제습기의 전원을 토글해줘."
  command_translated: "Toggle the dehumidifier's power."
  devices:
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - Clock
  - Relay
  - Refrigerator
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode("togglePower")
  elapsed_time: 3.550 seconds
- command: "제습기를 냉각 모드로 설정해줘."
  command_translated: "Set the dehumidifier to cooling mode."
  devices:
  - Humidifier
  - LeakSensor
  - Window
  - AirPurifier
  - Speaker
  - Dehumidifier
  - AirConditioner
  - Pump
  - Clock
  - Refrigerator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode("cooling")
  elapsed_time: 3.656 seconds
- command: "식기세척기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the dishwasher is powered on."
  devices:
  - Siren
  - Window
  - Speaker
  - Irrigator
  - Dishwasher
  - Timer
  - Clock
  - Relay
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dishwasher).dishwasherMode_dishwasherMode != "off") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.956 seconds
- command: "식기세척기의 모드가 에코 모드면 알람의 사이렌을 울려줘."
  command_translated: "If the dishwasher is in Eco mode, the alarm will sound a siren."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Dishwasher
  - Timer
  - Clock
  - Refrigerator
  - SoundSensor
  - SmokeDetector
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dishwasher).dishwasherMode_dishwasherMode == "eco") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.952 seconds
- command: "식기세척기를 꺼줘."
  command_translated: "Turn off the dishwasher."
  devices:
  - Humidifier
  - Speaker
  - Dehumidifier
  - Dishwasher
  - Pump
  - GasValve
  - Timer
  - Refrigerator
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).dishwasherMode_setDishwasherMode("off")
  elapsed_time: 3.326 seconds
- command: "식기세척기를 켜줘."
  command_translated: "Turn on the dishwasher."
  devices:
  - Humidifier
  - Feeder
  - Speaker
  - Irrigator
  - Dehumidifier
  - Dishwasher
  - Pump
  - Clock
  - Refrigerator
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).dishwasherMode_setDishwasherMode("auto")
      (#Dishwasher).switch_on()
  elapsed_time: 4.487 seconds
- command: "식기세척기의 전원을 토글해줘."
  command_translated: "Toggle the dishwasher's power."
  devices:
  - Switch
  - Speaker
  - Buttonx4
  - Dehumidifier
  - Dishwasher
  - Clock
  - Relay
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).dishwasherMode_setDishwasherMode("togglePower")
  elapsed_time: 3.307 seconds
- command: "식기세척기를 자동 모드로 설정해줘."
  command_translated: "Set the dishwasher to automatic mode."
  devices:
  - Humidifier
  - Feeder
  - Speaker
  - Irrigator
  - Dehumidifier
  - Dishwasher
  - Clock
  - Refrigerator
  - RobotCleaner
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).dishwasherMode_setDishwasherMode("auto")
  elapsed_time: 3.437 seconds
- command: "도어락이 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the door lock is open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - GasValve
  - Clock
  - Shade
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#DoorLock).doorControl_door == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.752 seconds
- command: "도어락을 닫아줘."
  command_translated: "Close the door lock."
  devices:
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Dehumidifier
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#DoorLock).doorControl_close()
  elapsed_time: 2.860 seconds
- command: "도어락을 열어줘."
  command_translated: "Open the door lock."
  devices:
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Relay
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#DoorLock).doorControl_open()
  elapsed_time: 2.849 seconds
- command: "이메일을 'test@example.com' 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘."
  command_translated: "Send an email to 'test@example.com' with the subject line \"Alert\" and the content \"This is an emergency\"."
  devices:
  - Siren
  - DoorLock
  - Window
  - EmailProvider
  - Speaker
  - ContactSensor
  - GasValve
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#EmailProvider).emailProvider_sendMail("test@example.com", "Alert", "This is an emergency.")
  elapsed_time: 3.164 seconds
- command: "선풍기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the fan is powered on."
  devices:
  - Siren
  - Window
  - Speaker
  - Timer
  - Clock
  - Relay
  - Fan
  - SoundSensor
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Fan).fanControl_fanSpeed == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.696 seconds
- command: "선풍기의 속도가 2000RPM 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the fan speed is above 2000 RPM."
  devices:
  - Siren
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - Fan
  - SoundSensor
  - SmokeDetector
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Fan).fanControl_fanSpeed > 2000) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.945 seconds
- command: "선풍기의 속도를 1500RPM으로 설정해줘."
  command_translated: "Set the speed of the fan to 1500 RPM."
  devices:
  - Humidifier
  - Window
  - AirPurifier
  - Curtain
  - Speaker
  - Dehumidifier
  - Clock
  - Fan
  - Valve
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).fanControl_setFanSpeed(1500)
  elapsed_time: 3.127 seconds
- command: "선풍기의 속도를 80퍼센트로 설정해줘."
  command_translated: "Set the speed of the fan to 80 percent."
  devices:
  - Humidifier
  - Window
  - AirPurifier
  - Curtain
  - Speaker
  - Dehumidifier
  - Clock
  - Fan
  - Shade
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).fanControl_setPercent(80)
  elapsed_time: 3.060 seconds
- command: "선풍기를 꺼줘."
  command_translated: "Turn off the fan."
  devices:
  - Humidifier
  - Window
  - Speaker
  - Dehumidifier
  - Pump
  - GasValve
  - Timer
  - Clock
  - Fan
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).switch_off()
  elapsed_time: 2.843 seconds
- command: "선풍기를 켜줘."
  command_translated: "Turn on the fan."
  devices:
  - Humidifier
  - Speaker
  - Irrigator
  - Dehumidifier
  - Pump
  - Timer
  - Clock
  - Relay
  - Fan
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).fanControl_setFanSpeed()
  elapsed_time: 2.938 seconds
- command: "선풍기의 전원을 토글해줘."
  command_translated: "Toggle the fan's power."
  devices:
  - Switch
  - Speaker
  - Buttonx4
  - Dehumidifier
  - Clock
  - Relay
  - Fan
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).fanControl_setFanSpeed()
  elapsed_time: 2.962 seconds
- command: "사료 공급기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the feeder is powered on."
  devices:
  - Siren
  - Feeder
  - AirPurifier
  - Speaker
  - Irrigator
  - Clock
  - Relay
  - Recorder
  - RobotCleaner
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Feeder).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.872 seconds
- command: "사료 공급기의 상태가 급식 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the feeder's status is feeding."
  devices:
  - Siren
  - Feeder
  - LeakSensor
  - Window
  - Speaker
  - Irrigator
  - AirConditioner
  - Clock
  - Recorder
  - RobotCleaner
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Feeder).feederOperatingState_feederOperatingState == feeding) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.007 seconds
- command: "사료 공급기를 꺼줘."
  command_translated: "Turn off the feeder."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - Pump
  - Dehumidifier
  - GasValve
  - Clock
  - Relay
  - Recorder
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_off()
  elapsed_time: 3.036 seconds
- command: "사료 공급기를 켜줘."
  command_translated: "Turn on the feeder."
  devices:
  - Humidifier
  - Feeder
  - AirPurifier
  - Speaker
  - Irrigator
  - Pump
  - Clock
  - Relay
  - Recorder
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_on()
  elapsed_time: 3.174 seconds
- command: "사료 공급기의 전원을 토글해줘."
  command_translated: "Toggle the power of the feeder."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Clock
  - Relay
  - Recorder
  - RobotCleaner
  - SmartPlug
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_toggle()
  elapsed_time: 2.927 seconds
- command: "사료 공급기의 사료 공급량을 100그램으로 설정해줘."
  command_translated: "Set the feeder's feed amount to 100 grams."
  devices:
  - Humidifier
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Clock
  - Recorder
  - RobotCleaner
  - Blind
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).feederPortion_setFeedPortion(portion: 100.0, unit: gram)
  elapsed_time: 3.834 seconds
- command: "사료 공급기의 사료 공급을 시작해줘."
  command_translated: "Start feeding the feeder."
  devices:
  - Humidifier
  - Feeder
  - AirPurifier
  - Speaker
  - Irrigator
  - AirConditioner
  - Pump
  - Clock
  - Recorder
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).feederOperatingState_startFeeding()
  elapsed_time: 3.280 seconds
- command: "가스 미터의 가스 사용량이 500kWh 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas meter shows gas usage of 500 kWh or more."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Pump
  - GasValve
  - HumiditySensor
  - Clock
  - SoundSensor
  - GasMeter
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#GasMeter).gasMeter_gasMeter >= 500.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.817 seconds
- command: "가스 미터의 가스 발열량이 1000kcal 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas meter reads more than 1000 kcal of gas."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - GasValve
  - HumiditySensor
  - Timer
  - SoundSensor
  - Clock
  - SmokeDetector
  - GasMeter
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#GasMeter).gasMeter_gasMeterCalorific > 1000.0)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.838 seconds
- command: "가스 미터의 누적 가스 사용 시간이 10000초 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the siren of the alarm if the gas meter has a cumulative gas usage time of 10000 seconds or more."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - GasValve
  - Timer
  - HumiditySensor
  - Clock
  - SoundSensor
  - GasMeter
  - Camera
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#GasMeter).gasMeter_gasMeterTime >= 10000)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.716 seconds
- command: "가스 미터의 가스 사용량이 20세제곱미터 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas meter reads more than 20 cubic meters of gas."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - Pump
  - GasValve
  - HumiditySensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - GasMeter
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#GasMeter).gasMeter_gasMeterVolume > 20.0)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.711 seconds
- command: "가스 밸브가 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas valve is open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - GasValve
  - Clock
  - Shade
  - GasMeter
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#GasValve).valve_valve == open) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.803 seconds
- command: "가스 밸브를 닫아줘."
  command_translated: "Close the gas valve."
  devices:
  - Humidifier
  - Window
  - AirPurifier
  - Speaker
  - Pump
  - Dehumidifier
  - GasValve
  - Clock
  - Relay
  - GasMeter
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#GasValve).valve_close()
  elapsed_time: 2.944 seconds
- command: "가스 밸브를 열어줘."
  command_translated: "Open the gas valve."
  devices:
  - Humidifier
  - Window
  - AirPurifier
  - Speaker
  - Pump
  - Dehumidifier
  - GasValve
  - Clock
  - Relay
  - GasMeter
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#GasValve).valve_open()
  elapsed_time: 2.987 seconds
- command: "가스 밸브의 가스 사용량이 1000kWh 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve's gas usage is over 1000 kWh."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Pump
  - GasValve
  - Clock
  - SoundSensor
  - SmokeDetector
  - GasMeter
  - Valve
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#GasValve).gasMeter_gasMeter > 1000.0)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.992 seconds
- command: "가스 밸브의 가스 발열량이 500kcal 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve has a gas calorific value of 500 kcal or more."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - GasValve
  - Timer
  - Clock
  - SoundSensor
  - Fan
  - SmokeDetector
  - GasMeter
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#GasValve).gasMeter_gasMeterCalorific >= 500.0)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.898 seconds
- command: "가스 밸브의 누적 가스 사용 시간이 5000초 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve has a cumulative gas usage time of 5000 seconds or more."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Camera
  - GasValve
  - Timer
  - Clock
  - SoundSensor
  - GasMeter
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#GasValve).gasMeter_gasMeterTime >= 5000.0)
      all(#Alarm).alarm_siren()
  elapsed_time: 3.904 seconds
- command: "가스 밸브의 가스 사용량이 34세제곱미터 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas valve is using more than 34 cubic meters of gas."
  devices:
  - Siren
  - LeakSensor
  - Window
  - Speaker
  - Pump
  - GasValve
  - HumiditySensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - GasMeter
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#GasValve).gasMeter_gasMeterVolume > 34.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.770 seconds
- command: "가습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the humidifier is powered on."
  devices:
  - Humidifier
  - Siren
  - WeatherProvider
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Relay
  - Clock
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Humidifier).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.752 seconds
- command: "가습기의 모드가 자동이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the humidifier's mode is Auto."
  devices:
  - Humidifier
  - Siren
  - WeatherProvider
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Clock
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Humidifier).humidifierMode_humidifierMode == "auto") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.104 seconds
- command: "가습기를 꺼줘."
  command_translated: "Turn off the humidifier."
  devices:
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Dehumidifier
  - Pump
  - HumiditySensor
  - Clock
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_off()
  elapsed_time: 2.971 seconds
- command: "가습기를 켜줘."
  command_translated: "Turn on the humidifier."
  devices:
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Irrigator
  - Dehumidifier
  - HumiditySensor
  - Clock
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_on()
  elapsed_time: 2.949 seconds
- command: "가습기의 전원을 토글해줘."
  command_translated: "Toggle the humidifier's power."
  devices:
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Relay
  - Clock
  - AirQualityDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_toggle()
  elapsed_time: 2.869 seconds
- command: "가습기를 강 모드로 설정해줘."
  command_translated: "Set the humidifier to strong mode."
  devices:
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - AirPurifier
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Clock
  - AirQualityDetector
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).humidifierMode_setHumidifierMode("high")
  elapsed_time: 3.348 seconds
- command: "습도 센서의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the humidity sensor reads a relative humidity of 70 percent or higher."
  devices:
  - Siren
  - WeatherProvider
  - Humidifier
  - SoilMoistureSensor
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - HumiditySensor
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.880 seconds
- command: "관개 장치의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator is powered on."
  devices:
  - Siren
  - Humidifier
  - LeakSensor
  - Speaker
  - Irrigator
  - Pump
  - Clock
  - Relay
  - Refrigerator
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (all(#Irrigator).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.960 seconds
- command: "관개 장치의 급수량이 3리터이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator has 3 liters of water."
  devices:
  - Siren
  - Feeder
  - LeakSensor
  - Humidifier
  - SoilMoistureSensor
  - Speaker
  - Irrigator
  - Pump
  - Clock
  - Refrigerator
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Irrigator).irrigatorPortion_waterPortion >= 3.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.126 seconds
- command: "관개 장치의 상태가 급수 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator's status is watering."
  devices:
  - Siren
  - Feeder
  - LeakSensor
  - SoilMoistureSensor
  - Window
  - Speaker
  - Irrigator
  - Pump
  - Clock
  - Refrigerator
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (all(#Irrigator).irrigatorOperatingState_irrigatorOperatingState == "watering") {
        all(#Alarm).alarm_siren()
      }
  elapsed_time: 4.239 seconds
- command: "관개 장치를 꺼줘."
  command_translated: "Turn off the irrigator."
  devices:
  - Humidifier
  - Feeder
  - LeakSensor
  - Speaker
  - Irrigator
  - Pump
  - Dehumidifier
  - Clock
  - Refrigerator
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_off()
  elapsed_time: 2.994 seconds
- command: "관개 장치를 켜줘."
  command_translated: "Turn on the irrigator."
  devices:
  - Humidifier
  - Feeder
  - LeakSensor
  - Speaker
  - Irrigator
  - Pump
  - Dehumidifier
  - Clock
  - Refrigerator
  - Relay
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).irrigatorOperatingState_startWatering()
  elapsed_time: 3.342 seconds
- command: "관개 장치의 전원을 토글해줘."
  command_translated: "Toggle the power of the irrigator."
  devices:
  - Humidifier
  - Feeder
  - Speaker
  - Irrigator
  - Pump
  - Clock
  - Refrigerator
  - Relay
  - SmartPlug
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_toggle()
  elapsed_time: 3.013 seconds
- command: "관개 장치의 급수량을 5리터로 설정해줘."
  command_translated: "Set the water supply of the irrigator to 5 liters."
  devices:
  - Humidifier
  - Feeder
  - LeakSensor
  - AirPurifier
  - Speaker
  - Irrigator
  - Pump
  - Dehumidifier
  - Clock
  - Refrigerator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).irrigatorPortion_setWaterPortion(5.0, liters)
  elapsed_time: 3.673 seconds
- command: "관개 장치의 급수를 시작해줘."
  command_translated: "Start watering the irrigator."
  devices:
  - Humidifier
  - Feeder
  - LeakSensor
  - AirPurifier
  - Speaker
  - Irrigator
  - Pump
  - Dehumidifier
  - Clock
  - Refrigerator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).irrigatorOperatingState_startWatering()
  elapsed_time: 3.419 seconds
- command: "누수가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a leak is detected."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#LeakSensor).leakSensor_leakage == "detected")
      (#Alarm).alarm_siren()
  elapsed_time: 3.503 seconds
- command: "조명이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the light is on."
  devices:
  - Siren
  - Light
  - Window
  - Speaker
  - MotionSensor
  - Timer
  - Clock
  - Relay
  - LightSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.569 seconds
- command: "조명의 색조가 30이면 알람의 사이렌을 울려줘."
  command_translated: "If the light has a hue of 30, sound the alarm's siren."
  devices:
  - Siren
  - WeatherProvider
  - Light
  - LeakSensor
  - Speaker
  - Timer
  - Clock
  - SoundSensor
  - LightSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#Light)).colorControl_hue == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.889 seconds
- command: "조명의 채도가 30이면 알람의 사이렌을 울려줘."
  command_translated: "If the light has a saturation of 30, sound the alarm's siren."
  devices:
  - Siren
  - Light
  - LeakSensor
  - Speaker
  - Timer
  - Clock
  - SoundSensor
  - SmokeDetector
  - LightSensor
  - Alarm
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).colorControl_saturation == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.835 seconds
- command: "조명 밝기가 100이면 알람의 사이렌을 울려줘"
  command_translated: "Sound the alarm's siren if the light brightness is 100"
  devices:
  - Siren
  - Light
  - Speaker
  - Clock
  - SoundSensor
  - Shade
  - SmokeDetector
  - LightSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).colorControl_color == "on") and ((#Light).switchLevel_level == 100) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.641 seconds
- command: "조명을 빨간색으로 설정해줘."
  command_translated: "Set the light to red."
  devices:
  - Siren
  - WeatherProvider
  - Light
  - Speaker
  - Clock
  - Relay
  - Shade
  - LightSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).colorControl_setColor("red")
  elapsed_time: 3.137 seconds
- command: "조명의 색조를 70으로 설정해줘."
  command_translated: "Set the hue of the light to 70."
  devices:
  - Siren
  - WeatherProvider
  - Light
  - Humidifier
  - Speaker
  - Clock
  - Shade
  - LightSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).colorControl_setHue(70.0)
  elapsed_time: 3.339 seconds
- command: "조명의 채도를 90으로 설정해줘."
  command_translated: "Set the saturation of the light to 90."
  devices:
  - Siren
  - WeatherProvider
  - Light
  - Humidifier
  - Speaker
  - Clock
  - Shade
  - LightSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).colorControl_setSaturation(90.0)
  elapsed_time: 3.340 seconds
- command: "5의 속도로 조명의 밝기를 80으로 설정해줘."
  command_translated: "Set the brightness of the light to 80 with a speed of 5."
  devices:
  - Siren
  - Light
  - Speaker
  - Clock
  - Fan
  - Shade
  - LightSensor
  - Alarm
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).colorControl_setColor(level: 80, rate: 5)
  elapsed_time: 3.541 seconds
- command: "조명의 경고 모드를 켜줘."
  command_translated: "Turn on alert mode for lights."
  devices:
  - Siren
  - WeatherProvider
  - Light
  - Speaker
  - Clock
  - Relay
  - LightSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Light).alarm_setAlarmVolume(true)
  elapsed_time: 3.082 seconds
- command: "조명을 꺼줘."
  command_translated: "Turn off the lights."
  devices:
  - Siren
  - Light
  - Speaker
  - Dehumidifier
  - GasValve
  - Clock
  - Relay
  - LightSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_off()
  elapsed_time: 2.972 seconds
- command: "조명을 켜줘."
  command_translated: "Turn on the lights."
  devices:
  - Siren
  - WeatherProvider
  - Light
  - Speaker
  - Buttonx4
  - Clock
  - Relay
  - LightSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_on()
  elapsed_time: 3.005 seconds
- command: "조명의 전원을 토글해줘."
  command_translated: "Toggle the power of the light."
  devices:
  - Siren
  - Light
  - Switch
  - Speaker
  - Clock
  - Relay
  - LightSensor
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_toggle()
  elapsed_time: 2.852 seconds
- command: "조도 센서의 밝기 값이 500룩스 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the light sensor's brightness value is above 500 lux."
  devices:
  - Siren
  - Light
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - MotionSensor
  - PresenceSensor
  - HumiditySensor
  - OccupancySensor
  - SoundSensor
  - Clock
  - LightSensor
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#LightSensor).lightLevel_light > 500.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.667 seconds
- command: "오늘 학생식당 점심 메뉴를 스피커로 출력해줘."
  command_translated: "Announce today's 학생식당 lunch menu via the speaker."
  devices:
  - Feeder
  - Speaker
  - Dishwasher
  - Timer
  - Clock
  - OccupancySensor
  - Recorder
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_todayMenu()
      (#Speaker).mediaPlayback_speak("Today"s 학생식당 lunch menu is " + menu)
  elapsed_time: 3.818 seconds
- command: "오늘의 메뉴를 스피커로 출력해줘."
  command_translated: "Announce today's menu via the speaker."
  devices:
  - Feeder
  - Speaker
  - Buttonx4
  - Timer
  - Clock
  - Recorder
  - Blind
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_todayMenu()
      (#Speaker).mediaPlayback_speak("Today"s menu is " + menu)
  elapsed_time: 3.683 seconds
- command: "오늘의 식당을 스피커로 출력해줘."
  command_translated: "Announce today's restaurant via the speaker."
  devices:
  - Feeder
  - Speaker
  - Pump
  - Timer
  - Clock
  - Recorder
  - Blind
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("Today"s restaurant is " + (#MenuProvider).menuProvider_todayPlace())
  elapsed_time: 3.573 seconds
- command: "모션 센서가 활성 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the motion sensor is active."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - PresenceSensor
  - OccupancySensor
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#MotionSensor).motionSensor_motion == active) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.382 seconds
- command: "움직임이 감지되고 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if motion is detected."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#MotionSensor).motionSensor_motion == active)
      (#Alarm).alarm_siren()
  elapsed_time: 3.208 seconds
- command: "존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a presence sensor is detected."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - PresenceSensor
  - OccupancySensor
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(any(#PresenceSensor).presenceSensor_presence == present)
      (#Alarm).alarm_siren()
  elapsed_time: 3.236 seconds
- command: "펌프의 현재 동작 모드가 최대이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the pump's current operating mode is maximum."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - Pump
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (all(#Pump).pumpOperationMode_currentOperationMode == "maximum") {
        all(#Alarm).alarm_siren()
      }
  elapsed_time: 3.768 seconds
- command: "펌프의 설정 동작 모드가 기본이면 알람의 사이렌을 울려줘."
  command_translated: "If the pump's set operation mode is default, sound the alarm's siren."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Irrigator
  - Pump
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#Pump).pumpOperationMode_currentOperationMode == "default") and ((#Alarm).alarm_alarm != "off")) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 4.420 seconds
- command: "펌프의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the pump is powered on."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - Irrigator
  - Pump
  - Timer
  - Clock
  - Relay
  - Valve
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Pump).pump_pump == "on")
      (#Alarm).alarm_siren()
  elapsed_time: 3.674 seconds
- command: "펌프가 지원하는 모드를 스피커로 출력해줘."
  command_translated: "Announce the modes supported by the pump via the speaker."
  devices:
  - LeakSensor
  - Speaker
  - ContactSensor
  - Pump
  - Clock
  - Relay
  - SoundSensor
  - Recorder
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("The supported pump operation modes include normal, minimum, maximum, and local setting.")
  elapsed_time: 3.542 seconds
- command: "펌프가 열려있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the pump is open."
  devices:
  - Siren
  - LeakSensor
  - DoorLock
  - Window
  - Speaker
  - Pump
  - GasValve
  - Clock
  - Shade
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Pump).pump_pump == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.806 seconds
- command: "펌프의 동작 모드를 최대로 설정해줘."
  command_translated: "Set the pump's operation mode to maximum."
  devices:
  - Humidifier
  - Speaker
  - Calculator
  - Buttonx4
  - Pump
  - Irrigator
  - Clock
  - Relay
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      pumpOperationMode_setOperationMode("maximum")
  elapsed_time: 3.073 seconds
- command: "펌프를 꺼줘."
  command_translated: "Turn off the pump."
  devices:
  - Humidifier
  - LeakSensor
  - Speaker
  - Pump
  - Dehumidifier
  - GasValve
  - Timer
  - Relay
  - Clock
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_off()
  elapsed_time: 3.017 seconds
- command: "펌프를 켜줘."
  command_translated: "Turn on the pump."
  devices:
  - Humidifier
  - LeakSensor
  - Speaker
  - Irrigator
  - Pump
  - Dehumidifier
  - Clock
  - Relay
  - Valve
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pump_open()
  elapsed_time: 2.902 seconds
- command: "펌프의 전원을 토글해줘."
  command_translated: "Toggle the power of the pump."
  devices:
  - Humidifier
  - Switch
  - Speaker
  - Pump
  - Dehumidifier
  - Clock
  - Relay
  - Valve
  - SmartPlug
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pumpOperationMode_setOperationMode(pumpOpModeEnum.normal)
      (#Pump).switch_toggle()
  elapsed_time: 4.287 seconds
- command: "펌프를 닫아줘."
  command_translated: "Close the pump."
  devices:
  - Humidifier
  - LeakSensor
  - Speaker
  - Pump
  - Dehumidifier
  - Timer
  - Clock
  - Relay
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pump_close()
  elapsed_time: 2.873 seconds
- command: "펌프를 열어줘."
  command_translated: "Open the pump."
  devices:
  - Humidifier
  - LeakSensor
  - Speaker
  - Pump
  - Dehumidifier
  - Clock
  - Relay
  - RobotCleaner
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pump_open()
  elapsed_time: 2.869 seconds
- command: "냉장고의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the refrigerator is powered on."
  devices:
  - Siren
  - Switch
  - Window
  - Speaker
  - TemperatureSensor
  - Irrigator
  - Clock
  - Refrigerator
  - Relay
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.720 seconds
- command: "냉장고의 성에 제거 기능이 켜저 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the refrigerator's defrost function is on."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - Irrigator
  - Dehumidifier
  - Clock
  - Refrigerator
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).refrigeration_defrost == on) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.700 seconds
- command: "냉장고의 급속 냉각 기능이 꺼져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the refrigerator's rapid cooling function is turned off."
  devices:
  - Siren
  - Feeder
  - LeakSensor
  - Speaker
  - Irrigator
  - AirConditioner
  - Timer
  - Clock
  - Refrigerator
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).refrigeration_rapidCooling == off) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.886 seconds
- command: "냉장고의 급속 냉동 기능이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the refrigerator's rapid freezing function is on."
  devices:
  - Siren
  - DoorLock
  - Window
  - Speaker
  - TemperatureSensor
  - Irrigator
  - Timer
  - Clock
  - Refrigerator
  - Relay
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).refrigeration_rapidFreezing == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.793 seconds
- command: "냉장고를 꺼줘."
  command_translated: "Turn off the refrigerator."
  devices:
  - Humidifier
  - Feeder
  - Speaker
  - Irrigator
  - Dehumidifier
  - GasValve
  - Clock
  - Refrigerator
  - Relay
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).switch_off()
  elapsed_time: 2.946 seconds
- command: "냉장고의 전원을 토글해줘."
  command_translated: "Toggle the refrigerator's power."
  devices:
  - Feeder
  - Switch
  - Speaker
  - Irrigator
  - Clock
  - Refrigerator
  - Relay
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).refrigeration_mode_togglePower()
  elapsed_time: 3.104 seconds
- command: "냉장고의 성에 제거 기능을 켜줘."
  command_translated: "Turn on the refrigerator's defrost function."
  devices:
  - Feeder
  - Window
  - Speaker
  - Irrigator
  - Dehumidifier
  - Dishwasher
  - Clock
  - Refrigerator
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      refrigeration_setDefrost("ON")
  elapsed_time: 2.869 seconds
- command: "냉장고의 급속 냉각 기능을 켜줘."
  command_translated: "Turn on the refrigerator's rapid cooling function."
  devices:
  - Feeder
  - Window
  - Speaker
  - Irrigator
  - AirConditioner
  - Dehumidifier
  - Dishwasher
  - Clock
  - Refrigerator
  - Fan
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      refrigeration_setRapidCooling(on: ON)
  elapsed_time: 3.116 seconds
- command: "냉장고의 급속 냉동 기능을 꺼줘."
  command_translated: "Turn off the refrigerator's rapid freezing function."
  devices:
  - Speaker
  - Irrigator
  - Dehumidifier
  - Dishwasher
  - GasValve
  - Clock
  - Refrigerator
  - Fan
  - Relay
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).refrigeration_setRapidFreezing(off)
  elapsed_time: 3.193 seconds
- command: "로봇 청소기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the robot vacuum is powered on."
  devices:
  - Siren
  - Switch
  - Speaker
  - Pump
  - Clock
  - Relay
  - SoundSensor
  - RobotCleaner
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#RobotCleaner).powerPowerOnStatus == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.614 seconds
- command: "로봇 청소기가 자동 모드이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the robot vacuum is in automatic mode."
  devices:
  - Siren
  - Speaker
  - Irrigator
  - Pump
  - Timer
  - Clock
  - SoundSensor
  - RobotCleaner
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == auto) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.938 seconds
- command: "로봇 청소기를 꺼줘."
  command_translated: "Turn off the robot vacuum."
  devices:
  - Humidifier
  - Speaker
  - Dehumidifier
  - Pump
  - GasValve
  - Clock
  - Relay
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).robotCleanerCleaningMode_setRobotCleanerCleaningMode()
  elapsed_time: 2.990 seconds
- command: "로봇 청소기를 켜줘."
  command_translated: "Turn on the robot vacuum."
  devices:
  - Humidifier
  - AirPurifier
  - Speaker
  - Dehumidifier
  - Pump
  - Clock
  - Relay
  - RobotCleaner
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).robotCleanerCleaningMode_setRobotCleanerCleaningMode("manual")
      (#RobotCleaner).switch_on()
  elapsed_time: 3.712 seconds
- command: "로봇 청소기의 전원을 토글해줘."
  command_translated: "Toggle the robot vacuum's power."
  devices:
  - Switch
  - Speaker
  - Button
  - Clock
  - Relay
  - RobotCleaner
  - Valve
  - SmartPlug
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      robot_cleaner.switch_toggle()
  elapsed_time: 2.672 seconds
- command: "로봇 청소기의 청소 모드를 수동으로 설정해줘."
  command_translated: "Set the robot vacuum's cleaning mode to manual."
  devices:
  - Switch
  - Speaker
  - Dehumidifier
  - Dishwasher
  - Pump
  - Clock
  - RobotCleaner
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      robot_cleanerCleaningMode_setRobotCleanerCleaningMode("manual")
  elapsed_time: 3.055 seconds
- command: "쉐이드가 40퍼센트 이상 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the shade is more than 40% open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - FallDetector
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(windowShadeLevel_shadeLevel > 40)
      (#Alarm).alarm_siren()
  elapsed_time: 3.554 seconds
- command: "쉐이드가 완전히 열려 있는 상태면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the shade is fully open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - FallDetector
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Shade).windowShadeLevel_shadeLevel == 100)
      (#Alarm).alarm_siren()
  elapsed_time: 3.781 seconds
- command: "쉐이드가 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the shade via the speaker."
  devices:
  - Siren
  - Window
  - Speaker
  - ContactSensor
  - Clock
  - Recorder
  - Shade
  - FallDetector
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("The shades support these commands: windowShadeLevel_setShadeLevel, windowShade_close, windowShade_open.")
  elapsed_time: 3.854 seconds
- command: "쉐이드를 50퍼 센트로 설정해줘."
  command_translated: "Set the shade to 50 percent."
  devices:
  - Humidifier
  - Light
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - Clock
  - Fan
  - Shade
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShadeLevel_setShadeLevel(50)
  elapsed_time: 3.300 seconds
- command: "쉐이드를 닫아줘."
  command_translated: "Close the shade."
  devices:
  - Humidifier
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - Pump
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_close()
  elapsed_time: 2.903 seconds
- command: "쉐이드를 열어줘."
  command_translated: "Open the shade."
  devices:
  - Humidifier
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - Pump
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_open()
  elapsed_time: 2.861 seconds
- command: "쉐이드 움직임을 일시 중지해줘."
  command_translated: "Pause the shade movement."
  devices:
  - Curtain
  - Speaker
  - MotionSensor
  - Dehumidifier
  - Timer
  - Clock
  - Relay
  - Shade
  - FallDetector
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_pause()
  elapsed_time: 2.835 seconds
- command: "사이렌이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the siren is on."
  devices:
  - Siren
  - DoorLock
  - Window
  - Speaker
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).alarm_alarm != alarmEnum.off) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.464 seconds
- command: "사이렌 모드가 사이렌이면 알람의 사이렌을 울려줘."
  command_translated: "If the siren mode is Siren, sound the alarm's siren."
  devices:
  - Siren
  - Window
  - Speaker
  - MotionSensor
  - PresenceSensor
  - Timer
  - Clock
  - SoundSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).alarm_alarm == "siren") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.459 seconds
- command: "사이렌을 꺼줘."
  command_translated: "Turn off the siren."
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Recorder
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_off()
  elapsed_time: 2.792 seconds
- command: "사이렌을 켜줘."
  command_translated: "Turn on the siren."
  devices:
  - Siren
  - Speaker
  - Pump
  - Timer
  - Clock
  - Relay
  - Recorder
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_on()
  elapsed_time: 2.860 seconds
- command: "사이렌 전원을 토글해줘."
  command_translated: "Toggle the siren power."
  devices:
  - Siren
  - Switch
  - Speaker
  - Timer
  - Clock
  - Relay
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_toggle()
  elapsed_time: 2.835 seconds
- command: "사이렌 모드를 경광등으로 설정해줘."
  command_translated: "Set the siren mode to strobe."
  devices:
  - Siren
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Shade
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).sirenMode_setSirenMode("strobe")
  elapsed_time: 3.223 seconds
- command: "스마트 플러그의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is powered on."
  devices:
  - Siren
  - DoorLock
  - Speaker
  - Timer
  - Clock
  - Relay
  - RobotCleaner
  - Television
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#SmartPlug).powerMeter_power != 0.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.833 seconds
- command: "스마트 플러그의 전압이 220볼트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is over 220 volts."
  devices:
  - Siren
  - DoorLock
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - Refrigerator
  - SoundSensor
  - RobotCleaner
  - SmartPlug
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SmartPlug).voltageMeasurement_voltage > 220.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.855 seconds
- command: "스마트 플러그의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is drawing more than 10 amps."
  devices:
  - Siren
  - LeakSensor
  - DoorLock
  - Speaker
  - Timer
  - Clock
  - SoundSensor
  - RobotCleaner
  - Television
  - SmartPlug
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#SmartPlug).currentMeasurement_current > 10.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.876 seconds
- command: "스마트 플러그의 소비 전력이 1000와트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if a smart plug draws more than 1000 watts."
  devices:
  - Siren
  - DoorLock
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - RobotCleaner
  - Television
  - SmartPlug
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#SmartPlug).powerMeter_power > 1000.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.897 seconds
- command: "스마트 플러그를 꺼줘."
  command_translated: "Turn off the smart plug."
  devices:
  - DoorLock
  - Speaker
  - Timer
  - Clock
  - Refrigerator
  - Relay
  - RobotCleaner
  - Television
  - SmartPlug
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_off()
  elapsed_time: 2.937 seconds
- command: "스마트 플러그를 켜줘."
  command_translated: "Turn on the smart plug."
  devices:
  - DoorLock
  - Speaker
  - Timer
  - Clock
  - Refrigerator
  - Relay
  - RobotCleaner
  - Television
  - SmartPlug
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_on()
  elapsed_time: 2.954 seconds
- command: "스마트 플러그의 전원을 토글해줘."
  command_translated: "Toggle the power of the smart plug."
  devices:
  - DoorLock
  - Switch
  - Speaker
  - Timer
  - Clock
  - Relay
  - RobotCleaner
  - Television
  - SmartPlug
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_toggle()
  elapsed_time: 2.838 seconds
- command: "연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if smoke is detected by the smoke detector."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - AirQualityDetector
  - Clock
  - SoundSensor
  - SmokeDetector
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SmokeDetector).smokeDetector_smoke == "detected")
      (#Alarm).alarm_siren()
  elapsed_time: 3.571 seconds
- command: "토양 습도 센서의 토양 습도 측정값이 30퍼센트 이하이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the soil moisture sensor's soil moisture reading is 30 percent or less."
  devices:
  - Siren
  - LeakSensor
  - SoilMoistureSensor
  - Speaker
  - TemperatureSensor
  - MotionSensor
  - Dehumidifier
  - PresenceSensor
  - HumiditySensor
  - Clock
  - SoundSensor
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.978 seconds
- command: "소리 센서에서 소리가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if sound is detected by the sound sensor."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - LightSensor
  - ContactSensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SoundSensor).soundPressureLevel_soundPressureLevel > 0.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.550 seconds
- command: "소리 감지 레벨이 70dB 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the sound detection level is above 70 dB."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - HumiditySensor
  - Clock
  - SoundSensor
  - Shade
  - LightSensor
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SoundSensor).soundPressureLevel_soundPressureLevel > 70.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.713 seconds
- command: "스피커의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the speaker is powered on."
  devices:
  - Siren
  - Window
  - Speaker
  - Timer
  - Clock
  - Relay
  - SoundSensor
  - Recorder
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Speaker).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.603 seconds
- command: "스피커가 재생 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the speaker is playing."
  devices:
  - Siren
  - Window
  - Speaker
  - PresenceSensor
  - Timer
  - OccupancySensor
  - Clock
  - SoundSensor
  - Recorder
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Speaker).mediaPlayback_playbackStatus == playing) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.548 seconds
- command: "스피커가 지원하는 명령어를 스피커로 출력해줘."
  command_translated: "Announce commands that the speaker supports via the speaker."
  devices:
  - Siren
  - Window
  - Speaker
  - Buttonx4
  - ContactSensor
  - Clock
  - SoundSensor
  - Recorder
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("The speaker supports pause, play, rewind, fast forward, stop, speak, and volume control.")
  elapsed_time: 3.745 seconds
- command: "스피커를 꺼줘."
  command_translated: "Turn off the speaker."
  devices:
  - Speaker
  - Dehumidifier
  - GasValve
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_off()
  elapsed_time: 2.790 seconds
- command: "스피커를 켜줘."
  command_translated: "Turn on the speaker."
  devices:
  - Humidifier
  - Speaker
  - Irrigator
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_on()
  elapsed_time: 2.785 seconds
- command: "스피커의 전원을 토글해줘."
  command_translated: "Toggle the power of the speaker."
  devices:
  - Switch
  - Speaker
  - Clock
  - Relay
  - Recorder
  - SoundSensor
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_toggle()
  elapsed_time: 2.750 seconds
- command: "스피커의 재생을 빨리 감기 해줘."
  command_translated: "Fast-forward the playback of the speaker."
  devices:
  - Speaker
  - Button
  - Camera
  - Timer
  - Clock
  - Relay
  - Recorder
  - Fan
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_fastForward()
  elapsed_time: 2.843 seconds
- command: "스피커의 재생을 일시 정지해줘."
  command_translated: "Pause playback on the speaker."
  devices:
  - Siren
  - Humidifier
  - Speaker
  - Pump
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_pause()
  elapsed_time: 2.825 seconds
- command: "스피커의 재생을 되감아줘."
  command_translated: "Rewind the speaker's playback."
  devices:
  - Humidifier
  - Speaker
  - Camera
  - Timer
  - Clock
  - Relay
  - Recorder
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_rewind()
  elapsed_time: 2.820 seconds
- command: "스피커의 재생을 멈춰줘."
  command_translated: "Stop the speaker from playing."
  devices:
  - Siren
  - Speaker
  - Pump
  - Dehumidifier
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_stop()
  elapsed_time: 2.870 seconds
- command: "스피커에서 music.mp3를 재생해줘."
  command_translated: "Play 'music.mp3' on the speaker."
  devices:
  - Humidifier
  - Speaker
  - Dehumidifier
  - Pump
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_play("music.mp3")
  elapsed_time: 3.000 seconds
- command: "스피커에서 '지금은 테스트 중입니다.'를 말해줘."
  command_translated: "Speak \"This is a test\" through the speaker."
  devices:
  - Window
  - Speaker
  - Calculator
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - Shade
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("This is a test")
  elapsed_time: 2.972 seconds
- command: "녹음기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the recorder is powered on."
  devices:
  - Siren
  - Speaker
  - Clock
  - Relay
  - Recorder
  - SoundSensor
  - RobotCleaner
  - Camera
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Recorder).audioRecord_recordStatus == recording)
      (#Alarm).alarm_siren()
  elapsed_time: 3.544 seconds
- command: "녹음기가 녹음 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the recorder is recording."
  devices:
  - Siren
  - Feeder
  - Window
  - Speaker
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - RobotCleaner
  - Camera
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (audioRecord_recordStatus == recording) {
        alarm_siren()
      }
  elapsed_time: 3.383 seconds
- command: "녹음기를 꺼줘."
  command_translated: "Turn off the recorder."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - Timer
  - GasValve
  - Clock
  - Recorder
  - RobotCleaner
  - Camera
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_off()
  elapsed_time: 2.933 seconds
- command: "녹음기를 켜줘."
  command_translated: "Turn on the recorder."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Timer
  - Clock
  - Recorder
  - RobotCleaner
  - Valve
  - Camera
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_on()
  elapsed_time: 2.851 seconds
- command: "녹음기의 전원을 토글해줘."
  command_translated: "Toggle the recorder's power."
  devices:
  - Feeder
  - Speaker
  - Buttonx4
  - Clock
  - Relay
  - Recorder
  - RobotCleaner
  - Camera
  - SmartPlug
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_toggle()
  elapsed_time: 2.857 seconds
- command: "녹음기로 10초 동안 녹음해서 test.wav로 저장해줘."
  command_translated: "Record 10 seconds with a recorder and save it as test.wav."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Clock
  - Recorder
  - SoundSensor
  - RobotCleaner
  - Valve
  - Camera
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).audioRecord_record("test.wav", 10.0)
  elapsed_time: 3.241 seconds
- command: "스위치의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the switch is powered on."
  devices:
  - Siren
  - DoorLock
  - Switch
  - Speaker
  - Button
  - ContactSensor
  - Clock
  - Relay
  - Television
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Switch).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.631 seconds
- command: "스위치를 꺼줘."
  command_translated: "Switch off."
  devices:
  - Humidifier
  - Switch
  - Speaker
  - ContactSensor
  - GasValve
  - Timer
  - Relay
  - Clock
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_off()
  elapsed_time: 2.679 seconds
- command: "스위치를 켜줘."
  command_translated: "Switch on."
  devices:
  - Humidifier
  - Switch
  - Speaker
  - Button
  - Irrigator
  - Buttonx4
  - Timer
  - Clock
  - Relay
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_on()
  elapsed_time: 2.818 seconds
- command: "스위치의 전원을 토글해줘."
  command_translated: "Toggle the power of the switch."
  devices:
  - Switch
  - Speaker
  - Button
  - ContactSensor
  - Clock
  - Relay
  - Television
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_toggle()
  elapsed_time: 2.839 seconds
- command: "TV의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the TV is powered on."
  devices:
  - Siren
  - Window
  - Speaker
  - Timer
  - Clock
  - Relay
  - Television
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.644 seconds
- command: "현재 TV 채널 이름이 '9시 뉴스'이면 알람의 사이렌을 울려줘."
  command_translated: "If the current TV channel is named \"9 o'clock news\" sound the alarm's siren."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - SoundSensor
  - FallDetector
  - Television
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).tvChannel_tvChannelName == "9 o"clock news") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.797 seconds
- command: "TV의 볼륨이 50 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the volume on the TV is above 50."
  devices:
  - Siren
  - GasMeter
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Television
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Television).audioVolume_volume > 50)
      (#Alarm).alarm_siren()
  elapsed_time: 3.704 seconds
- command: "TV가 음소거 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the TV is muted."
  devices:
  - Siren
  - Window
  - Speaker
  - MotionSensor
  - Timer
  - Clock
  - SoundSensor
  - Television
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).audioMute_muteStatus == muted) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.809 seconds
- command: "TV를 꺼줘."
  command_translated: "Turn off the TV."
  devices:
  - Speaker
  - Dehumidifier
  - Timer
  - GasValve
  - Clock
  - AirQualityDetector
  - Television
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_off()
  elapsed_time: 2.921 seconds
- command: "TV를 켜줘."
  command_translated: "Turn on the TV."
  devices:
  - Humidifier
  - Speaker
  - Timer
  - Clock
  - Relay
  - Recorder
  - AirQualityDetector
  - Television
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_on()
  elapsed_time: 2.881 seconds
- command: "TV의 전원을 토글해줘."
  command_translated: "Toggle the power of the TV."
  devices:
  - Switch
  - Speaker
  - Clock
  - Relay
  - AirQualityDetector
  - Television
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_toggle()
  elapsed_time: 2.886 seconds
- command: "TV 채널을 하나 내려줘."
  command_translated: "Turn down a TV channel."
  devices:
  - Speaker
  - Button
  - Buttonx4
  - Pump
  - Timer
  - Clock
  - Television
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_channelDown()
  elapsed_time: 3.136 seconds
- command: "TV 채널을 하나 올려줘."
  command_translated: "Upload a TV channel."
  devices:
  - Speaker
  - Pump
  - Clock
  - Relay
  - Recorder
  - Valve
  - AirQualityDetector
  - Television
  - Camera
  generated_code: []
  elapsed_time: 48.164 seconds
- command: "TV 채널을 7번으로 설정해줘."
  command_translated: "Set the TV channel to 7."
  devices:
  - Curtain
  - Speaker
  - Calculator
  - Clock
  - Shade
  - AirQualityDetector
  - Television
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_setTvChannel(7)
  elapsed_time: 3.080 seconds
- command: "TV 채널을 '9시 뉴스'로 설정해줘."
  command_translated: "Set the TV channel to \"9 o'clock news\"."
  devices:
  - Window
  - Speaker
  - Dehumidifier
  - Clock
  - AirQualityDetector
  - Television
  - Valve
  - Blind
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      tvChannel = 9
      (#Television).tvChannel_setTvChannel(tvChannel)
      (#Television).tvChannel_setTvChannelName("9 o"clock news")
  elapsed_time: 4.021 seconds
- command: "TV의 볼륨을 30으로 설정해줘."
  command_translated: "Set the volume on the TV to 30."
  devices:
  - GasMeter
  - Speaker
  - Calculator
  - Clock
  - SoundSensor
  - Recorder
  - AirQualityDetector
  - Television
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_setVolume(30)
  elapsed_time: 3.032 seconds
- command: "TV의 볼륨을 낮춰줘."
  command_translated: "Turn down the volume on the TV."
  devices:
  - Speaker
  - Button
  - Dehumidifier
  - Timer
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Television
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_volumeDown()
  elapsed_time: 2.998 seconds
- command: "TV의 볼륨을 높여줘."
  command_translated: "Turn up the volume on the TV."
  devices:
  - GasMeter
  - Speaker
  - Button
  - Timer
  - Clock
  - SoundSensor
  - Recorder
  - AirQualityDetector
  - Television
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_volumeUp()
  elapsed_time: 2.917 seconds
- command: "TV를 음소거해줘."
  command_translated: "Mute the TV."
  devices:
  - Window
  - Speaker
  - Dehumidifier
  - Clock
  - Recorder
  - AirQualityDetector
  - Television
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_setMute("muted")
  elapsed_time: 3.249 seconds
- command: "TV의 음소거 상태를 해제해줘."
  command_translated: "Unmute the TV."
  devices:
  - Window
  - Speaker
  - Dehumidifier
  - Timer
  - Clock
  - AirQualityDetector
  - Television
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_unmute()
  elapsed_time: 3.077 seconds
- command: "TV의 음소거 상태를 음소거로 설정해줘."
  command_translated: "Set the TV's mute state to Mute."
  devices:
  - Window
  - Speaker
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Television
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_setMute(muteEnum: muted)
  elapsed_time: 3.288 seconds
- command: "현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the current room temperature is above 25 degrees."
  devices:
  - Siren
  - WeatherProvider
  - Window
  - Speaker
  - TemperatureSensor
  - MotionSensor
  - PresenceSensor
  - OccupancySensor
  - HumiditySensor
  - Clock
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.615 seconds
- command: "밸브가 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the valve is open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - GasValve
  - Clock
  - Shade
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Valve).valve_valve == open) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.743 seconds
- command: "밸브를 닫아줘."
  command_translated: "Close the valve."
  devices:
  - Humidifier
  - Window
  - Speaker
  - Pump
  - Dehumidifier
  - GasValve
  - Clock
  - Relay
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Valve).valve_close()
  elapsed_time: 2.910 seconds
- command: "밸브를 열어줘."
  command_translated: "Open the valve."
  devices:
  - Humidifier
  - Window
  - Speaker
  - Pump
  - Dehumidifier
  - GasValve
  - Clock
  - Relay
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Valve).valve_open()
  elapsed_time: 2.913 seconds
- command: "바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the humidity outside is above 80 percent."
  devices:
  - Siren
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - HumiditySensor
  - Clock
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.833 seconds
- command: "바깥의 미세먼지 농도가 100 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the particulate matter concentration outside is above 100."
  devices:
  - Siren
  - WeatherProvider
  - LeakSensor
  - Window
  - Speaker
  - TemperatureSensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#AirQualityDetector).dustSensor_dustLevel > 100)
      (#Alarm).alarm_siren()
  elapsed_time: 3.682 seconds
- command: "바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the outside fine particulate matter concentration is above 50."
  devices:
  - Siren
  - WeatherProvider
  - LeakSensor
  - Window
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Clock
  - SoundSensor
  - AirQualityDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#AirQualityDetector).dustSensor_fineDustLevel > 50)
      (#Alarm).alarm_siren()
  elapsed_time: 3.855 seconds
- command: "기압이 1020hPa 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the barometric pressure is above 1020 hPa."
  devices:
  - Siren
  - WeatherProvider
  - LeakSensor
  - Speaker
  - TemperatureSensor
  - Pump
  - Clock
  - SoundSensor
  - Valve
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#WeatherProvider).weatherProvider_pressureWeather > 1020.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.835 seconds
- command: "현재 바깥의 기온이 30도 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if it's currently above 30 degrees outside."
  devices:
  - Siren
  - WeatherProvider
  - LeakSensor
  - Window
  - Speaker
  - TemperatureSensor
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#TemperatureSensor).temperatureMeasurement_temperature > 30.0)
      (#Alarm).alarm_siren()
  elapsed_time: 3.587 seconds
- command: "현재 날씨가 비가 오고 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the current weather is rainy."
  devices:
  - Siren
  - WeatherProvider
  - LeakSensor
  - Window
  - Speaker
  - TemperatureSensor
  - Clock
  - Relay
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_weather == "rainy") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.499 seconds
- command: "위도 37.5665, 경도 126.9780의 현재 날씨 정보를 스피커로 출력해줘."
  command_translated: "Announce the current weather information for latitude 37.5665 and longitude 126.9780 via the speaker."
  devices:
  - Siren
  - WeatherProvider
  - Window
  - Speaker
  - TemperatureSensor
  - Clock
  - Recorder
  - MenuProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      weatherInfo = (#WeatherProvider).weatherProvider_getWeatherInfo(lat: 37.5665, lon: 126.9780)
      (#Speaker).mediaPlayback_speak(weatherInfo)
  elapsed_time: 4.414 seconds
- command: "창문이 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a window is open."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Pump
  - Clock
  - Shade
  - Valve
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Window).windowControl_window == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.768 seconds
- command: "창문을 닫아줘."
  command_translated: "Close the window."
  devices:
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - Pump
  - Timer
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Window).windowControl_close()
  elapsed_time: 2.837 seconds
- command: "창문을 열어줘."
  command_translated: "Open a window."
  devices:
  - Humidifier
  - Window
  - Curtain
  - Speaker
  - Buttonx4
  - Pump
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Window).windowControl_open()
  elapsed_time: 2.875 seconds
- command: "낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a fall is detected by the fall detection sensor."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - Clock
  - SoundSensor
  - SmokeDetector
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#FallDetector).fallDetection_fall == "fall")
      all(#Alarm).alarm_siren()
  elapsed_time: 3.347 seconds
- command: "점유 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if an occupancy sensor is detected."
  devices:
  - Siren
  - LeakSensor
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - ContactSensor
  - PresenceSensor
  - OccupancySensor
  - Clock
  - SoundSensor
  - FallDetector
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(any(#OccupancySensor).presenceSensor_presence == present)
      (#Alarm).alarm_siren()
  elapsed_time: 3.276 seconds
- command: "릴레이의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the relay is powered on."
  devices:
  - Siren
  - LeakSensor
  - DoorLock
  - Switch
  - Speaker
  - Timer
  - Clock
  - Relay
  - SmartPlug
  - Alarm
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Relay).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.558 seconds
- command: "릴레이를 꺼줘."
  command_translated: "Turn off the relay."
  devices:
  - Speaker
  - Pump
  - Dehumidifier
  - GasValve
  - Timer
  - Relay
  - Clock
  - FallDetector
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_off()
  elapsed_time: 2.846 seconds
- command: "릴레이를 켜줘."
  command_translated: "Turn on the relay."
  devices:
  - Humidifier
  - Speaker
  - Irrigator
  - Pump
  - Timer
  - Clock
  - Relay
  - FallDetector
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_on()
  elapsed_time: 2.830 seconds
- command: "릴레이의 전원을 토글해줘."
  command_translated: "Toggle the power of the relay."
  devices:
  - Switch
  - Speaker
  - Button
  - Pump
  - Clock
  - Relay
  - Valve
  - SmartPlug
  - Blind
  - Charger
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_toggle()
  elapsed_time: 2.836 seconds
- command: "테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘."
  command_translated: "Add a 60-second timer named Test Timer."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Timer
  - Clock
  - Recorder
  - RobotCleaner
  - Camera
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_add("Test Timer", 60.0)
  elapsed_time: 3.191 seconds
- command: "테스트 타이머라는 이름의 타이머가 존재하면 알람의 사이렌을 울려줘."
  command_translated: "If a timer named Test Timer exists, sound the alarm siren."
  devices:
  - Siren
  - Feeder
  - AirPurifier
  - Speaker
  - PresenceSensor
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - RobotCleaner
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (timer_isExist("Test Timer") == true) {
        alarm_siren()
      }
  elapsed_time: 3.655 seconds
- command: "테스트 타이머라는 이름의 타이머가 하면 알람의 사이렌을 울려줘."
  command_translated: "if a timer named Test Timer goes off, sound an alarm siren."
  devices:
  - Siren
  - Feeder
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Timer
  - Clock
  - Recorder
  - SoundSensor
  - RobotCleaner
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(timer.isset("Test Timer"))
      (#Alarm).alarm_siren()
  elapsed_time: 3.472 seconds
- command: "테스트 타이머라는 이름의 타이머를 리셋해줘."
  command_translated: "Reset a timer named Test Timer."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Timer
  - Clock
  - Relay
  - Recorder
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      timer.timer_reset("Test Timer")
  elapsed_time: 2.823 seconds
- command: "테스트 타이머라는 이름의 타이머를 120초로 설정해줘."
  command_translated: "Set a timer named Test Timer to 120 seconds."
  devices:
  - Feeder
  - AirPurifier
  - Speaker
  - AirConditioner
  - Timer
  - Clock
  - Recorder
  - RobotCleaner
  - Camera
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_add("Test Timer", 120.0)
  elapsed_time: 3.217 seconds
- command: "테스트 타이머라는 이름의 타이머를 시작해줘."
  command_translated: "Start a timer named Test Timer."
  devices:
  - Feeder
  - Window
  - AirPurifier
  - Speaker
  - AirConditioner
  - Timer
  - Clock
  - Recorder
  - RobotCleaner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_add("Test Timer", 10.0)
      (#Timer).timer_start("Test Timer")
  elapsed_time: 4.587 seconds
