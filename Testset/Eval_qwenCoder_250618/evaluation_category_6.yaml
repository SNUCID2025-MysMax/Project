- command: "5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이면 급수기를 끄고 반복도 종료해 줘."
  command_translated: "Measure soil moisture every 5 seconds, and if it is below 30%, turn on the irrigator. If the temperature is above 35 degrees at that time, turn off the irrigator and stop the loop."
  devices:
  - WeatherProvider
  - SoilMoistureSensor
  - Speaker
  - TemperatureSensor
  - Calculator
  - Irrigator
  - Dehumidifier
  - HumiditySensor
  - Refrigerator
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |
      moistureLevel := (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
      temperature := (#TemperatureSensor).temperatureMeasurement_temperature

      if (moistureLevel < 30.0) {
        (#Irrigator).switch_on()
      }

      if (temperature > 35.0) {
        (#Irrigator).switch_off()
        break
      }
  elapsed_time: 6.177 seconds
- command: "3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘."
  command_translated: "Blink the light 10 times in 3-second intervals. Check after each blink and stop the loop the moment the rain sensor detects rain."
  devices:
  - WeatherProvider
  - Light
  - LeakSensor
  - Speaker
  - MotionSensor
  - ContactSensor
  - HumiditySensor
  - Clock
  - LightSensor
  - FallDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      counter := 0
      repeat_until(counter >= 10)
        wait until((#LightSensor).weatherProvider_humidityWeather == 0.0)
        counter += 1
        (#Light).colorControl_setColor(1000, 1000)
      end_repeat
      (#Speaker).mediaPlayback_speak("Loop stopped due to rain.")
      break
  elapsed_time: 5.789 seconds
- command: "1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘."
  command_translated: "Repeat the toggle action of powering the fan on and off every second. Check the humidity just before each action and stop the loop immediately if it's above 80%."
  devices:
  - Humidifier
  - WeatherProvider
  - SoilMoistureSensor
  - Speaker
  - GasValve
  - HumiditySensor
  - Relay
  - Fan
  - Clock
  - AirQualityDetector
  generated_code: []
  elapsed_time: 48.253 seconds
- command: "5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지."
  command_translated: "Close the blinds by 10 percent every 5 seconds. Until you can't lower them anymore."
  devices:
  - Window
  - Curtain
  - Speaker
  - TemperatureSensor
  - Button
  - Buttonx4
  - Clock
  - Shade
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |
      blindsClosed := false
      repeat := true

      while repeat {
        wait until(all(#Blind).blind_blind != closed)

        if (all(#Blind).blindLevel_blindLevel != 0) {
          all(#Blind).blindLevel_setBlindLevel(all(#Blind).blindLevel_blindLevel - 10)
        } else {
          blindsClosed := true
          repeat := false
        }
      }

      if (blindsClosed) {
        (#Speaker).mediaPlayback_speak("All blinds have been lowered.")
      }
  elapsed_time: 7.649 seconds
- command: "10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘."
  command_translated: "Turn on the irrigator every 10 seconds and turn it off after 5 seconds. Check the irrigator both on and off, and if the sunlight is above 500 lux, turn off the irrigator and stop the loop."
  devices:
  - Window
  - Speaker
  - Irrigator
  - Dehumidifier
  - Timer
  - GasValve
  - Refrigerator
  - Clock
  - Shade
  - LightSensor
  generated_code: []
  elapsed_time: 48.638 seconds
- command: "2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘."
  command_translated: "Turn the living room light on and off every two seconds. Check each time it turns off the light and stop the loop immediately if it detects that a window is open."
  devices:
  - Light
  - DoorLock
  - Window
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - HumiditySensor
  - Clock
  - Shade
  - LightSensor
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |
      lightOn := false
      repeat :
        wait until(lightOn == false)
        (#Light).switch_on()
        lightOn = true

        wait until(lightOn == true)
        (#Light).switch_off()
        lightOn = false

        if ((#Window).windowControl_window == "open") {
          break
        }

        continue repeat
      end repeat
  elapsed_time: 6.069 seconds
- command: "3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘."
  command_translated: "Every 3 seconds, increase the television volume by 1 level. When it reaches level 5, reset it to the initial value. Repeat this cycle. If motion is detected at the moment of reset, stop the repetition."
  devices:
  - Speaker
  - MotionSensor
  - LightSensor
  - Buttonx4
  - Clock
  - SoundSensor
  - Shade
  - AirQualityDetector
  - Television
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |
      volume_level := 0
      max_volume := 5
      reset_flag := false

      repeat_until(reset_flag == true) {
        wait until(((#MotionSensor).motionSensor_motion == active))
        reset_flag = true
      }

      repeat_until(true) {
        repeat_until(volume_level == max_volume) {
          (#Television).audioVolume_volumeUp()
          volume_level += 1
          wait until(clock_delay(3000))
        }

        if (reset_flag == true) {
          break
        }

        (#Television).audioVolume_setVolume()
        volume_level = 0
        reset_flag = false
      }
  elapsed_time: 8.641 seconds
- command: "10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해."
  command_translated: "Every 10 seconds, close the blinds completely. Check each time and end the loop immediately if the TV is on."
  devices:
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Timer
  - Clock
  - Shade
  - Television
  - Valve
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |
      checkTVOn := false
      if (any(#Television).switch_switch == "on") {
        checkTVOn = true
      }

      blindsClosed := false
      if (!blindsClosed && !checkTVOn) {
        all(#Blind).blind_close()

        wait until(all(#Blind).blind_blind == "closed")

        blindsClosed = true
      } else {
        break
      }
  elapsed_time: 6.347 seconds
- command: "2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘."
  command_translated: "Every two seconds, turn the alarm siren on for 1 second, then turn it off, and every time it turn on the siren, make sure the window is closed and stop the loop if it is."
  devices:
  - Siren
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Timer
  - GasValve
  - Clock
  - Shade
  - Alarm
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |
      var alarmOn := false
      repeat_until(window.windowControl_window != "closed") {
        wait until(!alarmOn)
        (#Alarm).alarm_siren()
        alarmOn = true

        wait until(window.windowControl_window == "closed")

        (#Alarm).alarm_off()
        alarmOn = false
      }

      (#Window).windowControl_close()

      break
  elapsed_time: 5.963 seconds
- command: "5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘."
  command_translated: "Every 5 seconds, switch the room air purifier to 'auto' mode. Check each time and stop the loop if a window is open."
  devices:
  - Humidifier
  - Switch
  - Window
  - AirPurifier
  - Speaker
  - Button
  - Dehumidifier
  - HumiditySensor
  - Clock
  - Fan
  - Shade
  - AirQualityDetector
  generated_code: []
  elapsed_time: 49.986 seconds
