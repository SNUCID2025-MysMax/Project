- command: "1초마다 확인하여 관개 장치가 꺼졌다 켜진 횟수가 4번을 초과하고 펌프가 2번 이상 작동했으면 블라인드를 닫고 커튼을 내려 줘."
  command_translated: "Check every second and close the blinds and lower the curtains if the number of times the irrigation has turned off and on exceeds 4 and the pump has run more than 2 times."
  devices:
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - TemperatureSensor
  - Button
  - Buttonx4
  - Irrigator
  - Pump
  - Clock
  - Shade
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      counter := 0
      pumpRunCount := 0

      if (all(#Irrigator).irrigatorOperatingState_irrigatorOperatingState == "error") {
        counter += 1
      }

      if (all(#Pump).switch_switch == "off") {
        pumpRunCount += 1
      }

      if (counter >= 4 && pumpRunCount >= 2) {
        all(#Blind).blind_close()
        all(#Curtain).windowShadeLevel_setShadeLevel(0)
        counter := 0
        pumpRunCount := 0
        break
      }
  elapsed_time: 8.519 seconds
- command: "실시간으로 검사해서 창문이 열렸다 닫힌 횟수가 3번 이상이고, 그 사이 선풍기가 한 번도 꺼지지 않았으면 선풍기를 꺼 주고 블라인드를 닫아 줘."
  command_translated: "If the real-time check shows that the window has been opened and closed more than three times, and the fan hasn't turned off in between, turn off the fan and close the blinds."
  devices:
  - DoorLock
  - Window
  - Curtain
  - Speaker
  - Button
  - Buttonx4
  - Pump
  - GasValve
  - Clock
  - Fan
  - Shade
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      counter := 0
      lastClosedAt := 0

      if (((#Window).windowControl_window == open) and ((#Window).windowControl_window == closed)) {
        counter += 1
      }

      if (counter > 3) {
        lastClosedAt = (#Clock).clock_timestamp

        if ((#Fan).fanControl_fanSpeed != off) {
          (#Fan).switch_off()
        }

        if ((#Blind).blind_blind != closed) {
          (#Blind).blind_close()
        }

        wait until(#Clock).clock_timestamp > (lastClosedAt + 10000)
        break
      }
  elapsed_time: 9.683 seconds
- command: "2초마다 체크해서 매일 오전 6시부터 9시 사이에 조명이 켜져 있는 누적 시간이 10분 이상이고, 관개 장치가 세 번 이상 꺼졌다 켜졌으면 스피커로 '관수 완료되었습니다'라고 말해 줘."
  command_translated: "Check every two seconds, and if the cumulative time the lights are on between 6 a.m. and 9 a.m. each day is 10 minutes or more, and the irrigator has been turned off and on three or more times during that same period, announce \"Watering complete\" via the speaker."
  devices:
  - Siren
  - WeatherProvider
  - Light
  - Window
  - Speaker
  - Irrigator
  - Timer
  - Clock
  - LightSensor
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |
      totalOnTime := 0
      irratorToggleCount := 0
      lastSwitchOffTimestamp := 0

      if ((#Light).colorControl_color == "on") {
        totalOnTime += 2
      }

      if (((#Irrigator).switch_switch == "off")) && (lastSwitchOffTimestamp != 0)) {
        irratorToggleCount++
        lastSwitchOffTimestamp = 0
      } else if ((#Irrigator).switch_switch == "on") {
        lastSwitchOffTimestamp = (#Clock).clock_timestamp
      }

      if (totalOnTime >= 600) and (irratorToggleCount >= 3) {
        (#Speaker).mediaPlayback_speak("Watering complete.")
        totalOnTime := 0
        irratorToggleCount := 0
        lastSwitchOffTimestamp := 0
      }
  elapsed_time: 11.092 seconds
- command: "실시간으로 확인하여 토양 습도 센서 값이 연속으로 3회 15 이하를 기록하고 그 중 두 번째 값이 가장 낮았다면 관개 장치를 켜고 블라인드를 닫아 줘. 단, 3월은 제외하고."
  command_translated: "Check in real time, and if the soil moisture sensor value is below 15 three times in a row, and the second value is the lowest, turn on the irrigation device and close the blinds. However, this does not apply to March."
  devices:
  - LeakSensor
  - SoilMoistureSensor
  - Speaker
  - TemperatureSensor
  - MotionSensor
  - Irrigator
  - ContactSensor
  - HumiditySensor
  - Clock
  - LightSensor
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |
      checkCount := 0
      lowValueFound := false
      lowestValue := 100.0

      repeat_until(checkCount >= 3):
        wait until(cron != "")
        latestValue := (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity

        if (latestValue < 15.0) {
          checkCount += 1

          if (!lowValueFound || latestValue < lowestValue) {
            lowestValue := latestValue
            lowValueFound := true

            if (currentMonth != 3) {
              (#Irrigator).irrigatorOperatingState_startWatering()
              (#Blind).blind_close()
            }
          }
        } else {
          checkCount = 0
          lowValueFound = false
        }

        break
      end_repeat
  elapsed_time: 16.224 seconds
- command: "매시간 0분부터 30분까지, 3초마다 확인해서 제습기가 켜졌다 꺼진 횟수가 4번 이상이고, 그 때 습도가 65% 이상이면 사이렌을 1초간, 3초 간격으로 두 번 울리고 그 후 커튼을 닫아 줘."
  command_translated: "Check every hour from 0 to 30 minutes, every 3 seconds, and if the dehumidifier has turned on and off more than 4 times and the humidity is above 65%, sound the siren twice at 3-second intervals, each time for 1 second, then close the curtains."
  devices:
  - Siren
  - Humidifier
  - SoilMoistureSensor
  - Window
  - Curtain
  - Speaker
  - Dehumidifier
  - HumiditySensor
  - Clock
  - AirQualityDetector
  - Alarm
  generated_code: []
  elapsed_time: 48.662 seconds
- command: "10분마다 확인하여 온도가 5도 이상 연속으로 세 번 상승하고 에어컨이 꺼져 있으면 에어컨을 키고 냉방 모드로 설정해줘"
  command_translated: "Check every 10 minutes and if the temperature rises by more than 5 degrees three times in a row and the air conditioner is off, turn on the air conditioner and set it to cooling mode."
  devices:
  - WeatherProvider
  - Window
  - AirPurifier
  - Speaker
  - TemperatureSensor
  - Button
  - AirConditioner
  - Dehumidifier
  - Clock
  - Refrigerator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 600000
    code: |
      counter := 0
      previousTemp := 0.0

      repeat_until(counter >= 3) {
        wait until(((#TemperatureSensor).temperatureMeasurement_temperature - previousTemp) > 5.0)

        if (((#AirConditioner).airConditionerMode_airConditionerMode != "cool")) {
          counter += 1
          previousTemp = (#TemperatureSensor).temperatureMeasurement_temperature

          if (counter >= 3) {
            (#AirConditioner).airConditionerMode_setAirConditionerMode("cool")
            (#AirConditioner).switch_on()
          }
        } else {
          counter = 0
          previousTemp = (#TemperatureSensor).temperatureMeasurement_temperature
        }
      }

      counter = 0
      previousTemp = 0.0
  elapsed_time: 16.670 seconds
- command: "시각 상관없이 항상, 5초마다 체크해서 TV가 10분 동안 꺼져 있었다가 켜지는 이벤트가 두 번 이상 발생했으면, 스피커를 켜고 조명을 60으로 맞춰 줘. 단, 수요일에는 빼고"
  command_translated: "Always, regardless of the time of day, check every 5 seconds and if there are two or more events where the TV has been off for 10 minutes and then turned on, turn on the speakers and set the lights to 60. Except on Wednesdays"
  devices:
  - Siren
  - Light
  - DoorLock
  - Window
  - Speaker
  - Clock
  - LightSensor
  - Television
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |
      weekendOnly := false
      if (clockWeekday != wednesday) {
        weekendOnly = true
      }

      previousTVState := false
      currentTVState := (#Television).switch_switch == on
      tvOffDuration := 0

      if (currentTVState && !previousTVState) {
        previousTVState = true
        tvOnTime := clockTimestamp
      } else if (!currentTVState && previousTVState) {
        previousTVState = false
        tvOffDuration += clockTimestamp - tvOnTime

        if (tvOffDuration >= 600000) {
          if (weekendOnly || clockWeekday != wednesday) {
            (#Speaker).mediaPlayback_play("Event Detected! Turning On Speakers.")
            (#Light).colorControl_setColor("WHITE")
            (#Light).switchLevel_setLevel(60, 100)
          }

          tvOffDuration = 0
        }
      } else {
        previousTVState = currentTVState
        tvOffDuration = 0
      }
  elapsed_time: 12.468 seconds
- command: "3초마다 확인해서 조명이 꺼진 상태에서 3분 이상 유지되다가 다시 켜지는 일이 2번 연속 발생하면 블라인드를 모두 닫아 줘."
  command_translated: "Check every 3 seconds and close all blinds if the lights stay off for more than 3 minutes and then come back on twice in a row."
  devices:
  - Siren
  - Light
  - DoorLock
  - Window
  - Speaker
  - Buttonx4
  - Clock
  - Shade
  - LightSensor
  - Alarm
  - Blind
  generated_code: []
  elapsed_time: 49.654 seconds
- command: "월요일 오후에, 1초마다 확인하여 창문이 열렸을 때부터 닫힐 때까지 걸린 시간이 15초 이상인 경우가 3회 연속 발생했으면 알람의 사이렌을 1초간, 3초 간격으로 세 번 울려 줘."
  command_translated: "On Monday afternoon, check every second and if there are three consecutive occasions where the time from window opening to window closing is 15 seconds or more, sound the alarm's siren three times, each for 1 second, at 3-second intervals."
  devices:
  - Siren
  - DoorLock
  - Window
  - Speaker
  - Button
  - Timer
  - Clock
  - HumiditySensor
  - SoundSensor
  - Shade
  - Alarm
  generated_code: []
  elapsed_time: 12.545 seconds
- command: "실시간으로 확인하여 움직임이 감지됐을 때 창문이 열려 있던 비율이 50%를 넘으면, 이후 조명이 켜질 때마다 창문도 함께 열어 줘."
  command_translated: "Check in real time. If the percentage of windows that are open when motion is detected is greater than 50%, then open the windows whenever the lights are turned on afterward."
  devices:
  - Light
  - DoorLock
  - Window
  - Speaker
  - MotionSensor
  - TemperatureSensor
  - HumiditySensor
  - Clock
  - Shade
  - LightSensor
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      openWindowsPercentage := 0
      totalWindows := 0


      foreach(#Window) |window|
      {
        totalWindows += 1
        if (window.windowControl_window == "open") {
          openWindowsPercentage += 1
        }
      }


      foreach(#Window) |window|
      {
        if (window.motionSensor_motion == true) {
          openWindowsPercentage += 1
        }
      }


      openWindowsPercentage = round(openWindowsPercentage / totalWindows * 100)


      if (openWindowsPercentage > 50) {
        foreach(#Window) |window|
        {
          if (window.switch_switch == "off") {
            window.windowControl_open()
          }
        }
      }
  elapsed_time: 12.437 seconds
