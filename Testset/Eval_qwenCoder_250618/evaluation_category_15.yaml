- command: "매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘."
  command_translated: "Every weekday at 9 a.m., if the windows are closed, the carbon dioxide concentration is above 1000 ppm, and the temperature is above 30 degrees, open the windows after 5 seconds and turn on the fans if they are off.Then, check in real time and if the particulate matter concentration remains above 50 for one continuous minute, close the windows again and turn off the fans.If the humidity in the greenhouse is below 40% at that time, turn on the humidifier. Similarly, if the soil humidity is below 25% and the irrigation is turned off, water the plants."
  devices:
  - Dehumidifier
  - Pump
  - Irrigator
  - DoorLock
  - Window
  - WeatherProvider
  - AirQualityDetector
  - TemperatureSensor
  - Clock
  - SoilMoistureSensor
  - Speaker
  - HumiditySensor
  - Fan
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: "0 9 ? * MON,TUE,WED,THU,FRI"
    period: 10000
    code: |
      windowsClosed := false
      fansOn := false
      particulatesHigh := false
      greenhouseDry := false
      irrigationOff := false


      if (((#Window).windowControl_window == closed) and (#TemperatureSensor).carbonDioxideMeasurement_carbonDioxide > 1000.0) and (#TemperatureSensor).temperatureMeasurement_temperature > 30.0) {
        wait until(#Clock).clock_delay(5000)
        (#Window).windowControl_open()
        windowsClosed = true

        if (#Fan).fanControl_fanSpeed == off) {
          (#Fan).switch_toggle()
          fansOn = true
        }


        repeat while (true) {
          wait until(#Clock).clock_delay(10000)

          if (#LightSensor).dustSensor_dustLevel > 50) {
            particulatesHigh = true


            (#Window).windowControl_close()
            windowsClosed = false
            if (fansOn) {
              (#Fan).switch_toggle()
              fansOn = false
            }


            if (#HumiditySensor).relativeHumidityMeasurement_humidity < 40.0) {
              (#Humidifier).humidifierMode_setHumidifierMode("high")
            }


            if (#HumiditySensor).soilHumidityMeasurement_soilHumidity < 25.0 and (#Irrigator).irrigatorOperatingState_irrigatorOperatingState != idle) {
              (#Irrigator).irrigatorOperatingState_startWatering()
            }
          } else {
            particulatesHigh = false
            break
          }
        }
      }


      if (windowsClosed) {
        (#Window).windowControl_close()
        windowsClosed = false
      }
      if (fansOn) {
        (#Fan).switch_toggle()
        fansOn = false
      }
      if (particulatesHigh) {
        (#Window).windowControl_close()
        windowsClosed = false
        if (fansOn) {
          (#Fan).switch_toggle()
          fansOn = false
        }
        if (greenhouseDry) {
          (#Humidifier).humidifierMode_setHumidifierMode("high")
        }
        if (irrigationOff) {
          (#Irrigator).irrigatorOperatingState_startWatering()
        }
      }
  elapsed_time: 42.910 seconds
- command: "매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘."
  command_translated: "Every day at 9am, if the lights are off and the window with the odd tag at the bottom is closed, open all the blinds. Then, when that window turns open, wait 5 seconds and sound the alarm's siren. After the siren sounds, monitor in real time for 10 seconds, and if the window remains open the entire time, blink the lights every 2 seconds. If the blinds were opened, and within the next 10 seconds the door was opened and closed more than once, then if the second opening lasted longer than the first, turn off all air conditioners on the wall."
  devices:
  - Alarm
  - Siren
  - GasValve
  - DoorLock
  - Curtain
  - Shade
  - AirConditioner
  - Timer
  - Window
  - AirQualityDetector
  - Blind
  - Clock
  - TemperatureSensor
  - Speaker
  - Light
  - HumiditySensor
  generated_code: []
  elapsed_time: 25.455 seconds
- command: "에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘."
  command_translated: "Starting from the moment when the window is opened while the air conditioner is off, check the humidity every 10 seconds, and if it exceeds 60%, lower the blinds and turn off the lights. Then, when the door turns closed, wait 5 seconds and sound the alarm. For the next 1 minute after the alarm, blink the lights every second while the door remains open, and if the door closes during that time, announce \"The door is now closed\" via the speaker."
  devices:
  - Alarm
  - Siren
  - DoorLock
  - Curtain
  - Shade
  - AirConditioner
  - Window
  - WeatherProvider
  - AirQualityDetector
  - Blind
  - TemperatureSensor
  - Clock
  - Speaker
  - Light
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      doorClosed := false
      blindsDown := false
      lightsOn := false
      alarmTriggered := false

      if (((#Window).windowControl_window == open) and ((#AirConditioner).switch_switch == off)) {
        if (!blindsDown) {
          (#Blind).blind_close()
          blindsDown = true
        }

        if (!lightsOn) {
          (#Light).switch_on()
          lightsOn = true
        }

        humi = (#HumiditySensor).relativeHumidityMeasurement_humidity
        if (humi > 60.0) {
          (#Blind).blindLevel_setBlindLevel(0)
          (#Light).switchLevel_setLevel(0, 100)
        }
      }

      if ((#DoorLock).doorControl_door == closed) {
        if (!doorClosed) {
          (#DoorLock).doorControl_close()
          doorClosed = true
        }

        if (!alarmTriggered) {
          (#Alarm).alarm_siren()
          alarmTriggered = true
        }

        wait until(doorClosed == true)
        (#Speaker).mediaPlayback_speak("이제 문이 닫힙니다.")
        break
      }
  elapsed_time: 20.082 seconds
- command: "습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘."
  command_translated: "Wait until the humidity reaches or exceeds 70%. If the window is open at that moment, turn on the dehumidifier after 5 seconds. After the dehumidifier is turned on, when the temperature reaches or exceeds 30°C, turn on the air conditioner. check in real-time. Once the blinds turns opened while the air conditioner is on, start opening and closing the curtains every 10 seconds from that moment. While doing so, if motion is detected, immediately turn off the alarm. If no motion is detected for following 5 seconds, sound the alarm again."
  devices:
  - MotionSensor
  - Dehumidifier
  - Alarm
  - Siren
  - Curtain
  - DoorLock
  - AirConditioner
  - AirPurifier
  - Window
  - Humidifier
  - AirQualityDetector
  - Blind
  - TemperatureSensor
  - WeatherProvider
  - Clock
  - Speaker
  - HumiditySensor
  generated_code: []
  elapsed_time: 15.831 seconds
- command: "조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘."
  command_translated: "When the lights are on and the windows are closed, and then the door turns opened, wait 3 seconds before sounding the siren. Check in real-time. If the window remains closed for 10 seconds after the siren sounds, close the curtains, turn off the lights, and turn on the fan at 50% speed. Then, if the temperature is above 27 degrees, switch the air conditioner to cooling mode. If motion is being detected, repeat the action of opening and closing the blinds every second, three times. At any point, if the speaker turns on, immediately stop all actions and turn off the speaker."
  devices:
  - MotionSensor
  - Alarm
  - Siren
  - Curtain
  - DoorLock
  - Shade
  - AirConditioner
  - Window
  - WeatherProvider
  - Blind
  - TemperatureSensor
  - Clock
  - Speaker
  - Switch
  - Fan
  - Light
  generated_code: []
  elapsed_time: 57.666 seconds
- command: "실시간으로 확인해서 조명이 꺼져 있고 창문이 열려 있는 상태에서 움직임 감지되면 3초 대기 후 조명을 켜고, 5초 후 블라인드를 닫아 줘. 이후 10초마다 알람을 한 번 1초간 울리되, 알람이 두 번 울린 후에는 에어컨을 ‘cool’ 모드로 전환해 줘. 단, 움직임이 감지된 이후 문이 열리면 모든 동작을 중지하고 커튼을 닫아 줘."
  command_translated: "Check in real-time. when a motion is detected with the lights off and the windows open, wait 3 seconds before turning on the lights, and then wait another 5 seconds to close the blinds. After that, sound the alarm once for one second every 10 seconds, and after the second alarm, switch the air conditioner to 'cool' mode. However, when the door opens after a motion is detected, immediately stop all ongoing actions and close the curtains."
  devices:
  - MotionSensor
  - Alarm
  - SoundSensor
  - Siren
  - Curtain
  - DoorLock
  - AirConditioner
  - LightSensor
  - Window
  - AirQualityDetector
  - Blind
  - TemperatureSensor
  - Clock
  - Speaker
  - Switch
  - Light
  - ContactSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      localVar := false
      if (((#MotionSensor).motionSensor_motion == true) and ((#Light).chargingState_chargingState == off) and ((#Window).windowStatus == open)) {
        localVar = true
        wait until(localVar == true)
        wait until(((#DoorLock).doorStatus != open))
        (#Light).switch_on()
        wait until(waitTime(3000))
        (#Blind).curtain_close()
        repeat(10) {
          (#Alarm).soundOnceForOneSecond()
          wait until(waitTime(10000))
        }
        (#AirConditioner).refrigeration_setRapidCooling()
      }

      if ((#DoorLock).doorStatus == open) {
        (#Light).switch_off()
        (#Blind).stopAllOngoingActionsAndCloseThe Curtains()
        break
      }
  elapsed_time: 21.918 seconds
- command: "매주 월요일 아침 7시에 조명을 20으로 설정해 줘. 이후 실시간으로 확인해서 자정까지 움직임이 감지될 때마다 블라인드를 열고, 3초 간격으로 커튼을 두 번 열었다 닫아 줘. 커튼을 조정할 때마다 창문이 열려 있으면 선풍기를 켜고, 닫혀 있으면 에어컨을 꺼 줘."
  command_translated: "Every Monday morning at 7 a.m., set the lights to 20. From then until midnight, monitor for motion in real-time, and each time it is detected, open the blinds and open and close the curtains twice with a 3-second interval. Each time the curtains are adjusted, if the windows are open, turn on the fan; if they are closed, turn off the air conditioner."
  devices:
  - MotionSensor
  - Siren
  - Curtain
  - DoorLock
  - Shade
  - AirConditioner
  - LightSensor
  - Window
  - AirQualityDetector
  - Blind
  - Clock
  - TemperatureSensor
  - Speaker
  - Fan
  - Light
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: "0 7 * * 1"
    period: 0
    code: |
      (#Light).colorControl_setColor("FFFFFF")
  - name: "Scenario2"
    cron: "0 7 * * 1"
    period: 1000
    code: |
      wait until(clock.clock_weekday == monday and clock.clock_hour == 7 and clock.clock_minute == 0)
      repeat while (true):
        wait until(any(#MotionSensor).motionSensor_motion == active)
        repeat 2 times:
          all(#Blind).blind_open()
          all(#Curtain).bl blind_open()
          (#Window).windowControl_open(windowState == open)
          all(#Fan).fanControl_setFanSpeed()
          (#Window).windowControl_open(windowState == closed)
          all(#AirConditioner).airConditionerMode_setAirConditionerMode()
        break
  elapsed_time: 12.478 seconds
- command: "매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘."
  command_translated: "Sound the siren every night at 10 p.m. if the window located at the bottom is open and a light with an even-numbered tag is on. If the siren is sounded, close the blinds after 5 seconds. Starting 5 seconds later, regardless of whether the siren was triggered, monitor in real-time: when a door with an odd-numbered tag has opened and closed twice in total, close the curtains. After closing the curtains, turn on the alarm's strobe for the total duration the door remained open across the two events, then turn it off."
  devices:
  - SoundSensor
  - Alarm
  - MotionSensor
  - Irrigator
  - Siren
  - Curtain
  - DoorLock
  - Shade
  - Window
  - Blind
  - TemperatureSensor
  - Clock
  - Speaker
  - HumiditySensor
  - Light
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: "0 22 * * *"
    period: 0
    code: |
      if (((#Window).windowControl_window == open) and (any(#Even #Light).switch_switch == on)) {
        (#Siren).alarm_siren()
        wait until(#Blind).blind_blind != closed
        (#Blind).blind_close()
      }
  - name: "Scenario2"
    cron: "0 22 * * *"
    period: 10000
    code: |
      doorCount := 0
      totalDuration := 0
      lastClosedTime := 0
      currentOpenedTime := 0

      if (any(#Odd #DoorLock).doorControl_door == open) {
        doorCount += 1
        lastClosedTime = 0
        currentOpenedTime = (#Clock).clock_timestamp
      }

      if (any(#Odd #DoorLock).doorControl_door == closed) {
        if (lastClosedTime != 0) {
          doorCount -= 1
          totalDuration += (#Clock).clock_timestamp - lastClosedTime
          lastClosedTime = (#Clock).clock_timestamp
        }

        if (doorCount == 0) {
          (#Curtain).windowShade_close()
          (#Alarm).alarm_setAlarmVolume("strobe")
          wait until(#Alarm).alarm_alarm == stopped
          (#Alarm).alarm_off()
        }
      }
  elapsed_time: 35.968 seconds
- command: "매일 실시간으로 검사해서 로봇청소기가 작동 중이면서 움직임이 감지될 때마다 10초 후 스피커로 “청소 중입니다”라는 음성을 재생해 줘. 또한 습도가 60%를 넘으면 홀수 태그가 붙은 공기청정기를 켜 줘. 공기청정기가 켜져 있는 동안 TV 전원을 3초마다 껐다 켰다 해 줘. 창문이 5분 연속으로 열려 있을 때마다 닫아 줘."
  command_translated: "Monitor in real-time every day, and whenever motion is detected while the robot vacuum is running, announce \"Cleaning in progress\" via the speaker after a 10-second delay. Turn on air purifiers with odd-numbered tags when the humidity exceeds 60%. While the air purifier is on, toggle the TV power every 3 seconds. Close the window each time it has remained open continuously for 5 minutes."
  devices:
  - MotionSensor
  - Dehumidifier
  - Television
  - AirPurifier
  - RobotCleaner
  - Window
  - Humidifier
  - AirQualityDetector
  - Clock
  - WeatherProvider
  - SoilMoistureSensor
  - Speaker
  - HumiditySensor
  generated_code:
  - name: "Scenario2"
    cron: "0 0 * * *"
    period: 0
    code: |
      cleaning_in_progress := false
      air_purifier_on := false
      last_window_state := closed
  elapsed_time: 42.002 seconds
- command: "실시간으로 확인해서 벽면 조명이 꺼져 있고 홀수 태그가 붙은 커튼이 닫힌 상태에서 문이 열리면, 5초 후 그 조명을 켜고 창문을 열어 줘. 이후 30초 동안 움직임이 감지되지 않으면 알람의 사이렌을 울려 줘. 30초가 모두 지난 뒤 에어컨이 꺼져 있고 실내 온도가 28도 이상이면 에어컨을 켜 줘. 또한 그 때 짝수 태그가 붙은 선풍기가 켜져 있으면 꺼 주고, 켜져 있지 않으면 그대로 두도록 해 줘."
  command_translated: "Check in real-time. When a door turns opened while the wall lights are off and odd-tagged curtains are closed, then after 5 seconds, turn on the wall lights and open the window. Then, if no motion is detected during the following 30 seconds, sound the alarm's siren. After the 30 seconds have passed, if the air conditioner is off and the room temperature is 28°C or higher, turn it on. Also, if any fans with even-numbered tags are on at that time, turn them off; otherwise, leave them as they are."
  devices:
  - MotionSensor
  - Alarm
  - SoundSensor
  - Siren
  - GasValve
  - Curtain
  - DoorLock
  - Shade
  - AirConditioner
  - Window
  - AirQualityDetector
  - TemperatureSensor
  - Clock
  - Speaker
  - Fan
  - Light
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      doorOpened := false
      wallLightsOn := false
      motionDetected := false
      fanStatusChecked := false
      checkAgain := false

      if (((#DoorLock).doorControl_door == "open")) and ((not (#Light).switch_switch == "on"))) and ((all(#Curtain).curtain_curtain == "closed"))) {
        doorOpened = true
      }

      if (doorOpened) {
        wait until(doorOpened == true)

        (#Light).switch_on()
        (#Window).windowControl_open()

        wait until(checkAgain == true)

        if (not motionDetected) {
          (#Alarm).alarm_siren()
        }

        if (not (#AirConditioner).switch_switch == "on") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 28.0)) {
          (#AirConditioner).switch_on()
        }

        if (not fanStatusChecked) {
          if (any(#Even).switch_switch == "on") {
            all(#Even).switch_off()
          }

          fanStatusChecked = true
        }
      }
  elapsed_time: 32.698 seconds
