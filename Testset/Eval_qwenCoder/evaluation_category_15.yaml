- command: 매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘.
  command_translated: Every weekday at 9 a.m., if the windows are closed, the carbon dioxide concentration is above 1000 ppm, and the temperature is above 30 degrees, open the windows after 5 seconds and turn on the fans if they are off.Then, check in real time and if the particulate matter concentration remains above 50 for one continuous minute, close the windows again and turn off the fans.If the humidity in the greenhouse is below 40% at that time, turn on the humidifier. Similarly, if the soil humidity is below 25% and the irrigation is turned off, water the plants.
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - Speaker
  - Window
  - DoorLock
  - Humidifier
  - WeatherProvider
  - Irrigator
  - TemperatureSensor
  - HumiditySensor
  - Fan
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * 1-5"
    period: 1000
    code: |-
      co2_threshold := 1000
      temperature_threshold := 30.0
      pm25_threshold := 50.0
      humidity_threshold := 40.0
      soil_moisture_threshold := 25.0
      window_open_duration := 0
      fan_on := false
      windows_open := false
      if ((#Clock).clock_hour == 9) and ((#Clock).clock_minute == 0) and ((#Clock).clock_weekday == "weekdayEnum") {
        if ((#Window).windowControl_window == "closed") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > co2_threshold) and ((#TemperatureSensor).temperatureMeasurement_temperature > temperature_threshold) {
          wait until(window_open_duration >= 5000)
          (#Window).windowControl_open()
          windows_open := true
          if ((#Fan).switch_switch == "off") {
            (#Fan).switch_on()
            fan_on := true
          }
        }
      }
      if (windows_open) {
        if ((#AirQualityDetector).dustSensor_dustLevel > pm25_threshold) {
          wait until(window_open_duration >= 60000)
          (#Window).windowControl_close()
          windows_open := false
          if (fan_on) {
            (#Fan).switch_off()
            fan_on := false
          }
        }
      }
      if (windows_open) {
        if ((#HumiditySensor).relativeHumidityMeasurement_humidity < humidity_threshold) {
          (#Humidifier).switch_on()
        } else {
          (#Humidifier).switch_off()
        }
      }
      if (windows_open) {
        if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < soil_moisture_threshold) and ((#Irrigator).switch_switch == "off") {
          (#Irrigator).switch_on()
        } else {
          (#Irrigator).switch_off()
        }
      }
  - name: "Scenario2"
    cron: "0 9 * * 1-5"
    period: 1000
    code: |-
      co2_threshold := 1000
      temperature_threshold := 30.0
      pm25_threshold := 50.0
      humidity_threshold := 40.0
      soil_moisture_threshold := 25.0
      window_open_duration := 0
      fan_on := false
      windows_open := false
      if ((#Clock).clock_hour == 9) and ((#Clock).clock_minute == 0) and ((#Clock).clock_weekday == "weekdayEnum") {
        if ((#Window).windowControl_window == "closed") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > co2_threshold) and ((#TemperatureSensor).temperatureMeasurement_temperature > temperature_threshold) {
          wait until(window_open_duration >= 5000)
          (#Window).windowControl_open()
          windows_open := true
          if ((#Fan).switch_switch == "off") {
            (#Fan).switch_on()
            fan_on := true
          }
        }
      }
      if (windows_open) {
        if ((#AirQualityDetector).dustSensor_dustLevel > pm25_threshold) {
          wait until(window_open_duration >= 60000)
          (#Window).windowControl_close()
          windows_open := false
          if (fan_on) {
            (#Fan).switch_off()
            fan_on := false
          }
        }
      }
      if (windows_open) {
        if ((#HumiditySensor).relativeHumidityMeasurement_humidity < humidity_threshold) {
          (#Humidifier).switch_on()
        } else {
          (#Humidifier).switch_off()
        }
      }
      if (windows_open) {
        if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < soil_moisture_threshold) and ((#Irrigator).switch_switch == "off") {
          (#Irrigator).switch_on()
        } else {
          (#Irrigator).switch_off()
        }
      }
  model_info:
    elapsed_time: 47.808
    bge_elapsed_time: 0.121
    llm_elapsed_time: 47.643
    validation_elapsed_time: 0.044
- command: 매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘.
  command_translated: Every day at 9am, if the lights are off and the window with the odd tag at the bottom is closed, open all the blinds. Then, when that window turns open, wait 5 seconds and sound the alarm's siren. After the siren sounds, monitor in real time for 10 seconds, and if the window remains open the entire time, blink the lights every 2 seconds. If the blinds were opened, and within the next 10 seconds the door was opened and closed more than once, then if the second opening lasted longer than the first, turn off all air conditioners on the wall.
  devices:
  - Shade
  - Alarm
  - Blind
  - Clock
  - Speaker
  - Window
  - DoorLock
  - GasValve
  - AirConditioner
  - TemperatureSensor
  - Light
  - HumiditySensor
  - Siren
  - Curtain
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: 100
    code: |-
      # Initialize variables
      blindsOpened := false
      doorOpenCount := 0
      firstDoorOpenDuration := 0
      lastDoorOpenStart := 0
      # Open blinds at 9am
      if (((#Clock).clock_hour == 9) and ((#Clock).clock_minute == 0)) {
        if ((#Light).switch_switch == 'off') {
          if ((#Window).windowControl_window == 'closed') {
            all(#Blind).blind_open()
            blindsOpened := true
          }
        }
      }
      # Wait until window opens
      wait until(#Window).windowControl_window == 'open'
      # Wait 5 seconds
      (#Clock).clock_delay(5000)
      # Sound alarm siren
      (#Alarm).alarm_siren()
      # Monitor window for 10 seconds
      monitor_start := (#Clock).clock_timestamp
      monitor_end := monitor_start + 10000
      # Blink lights if window remains open
      while (#Clock).clock_timestamp < monitor_end {
        if (#Window).windowControl_window == 'open' {
          (#Light).switchLevel_setLevel(50, 100)
          wait until(#Clock).clock_timestamp < monitor_end
          (#Light).switchLevel_setLevel(0, 100)
          wait until(#Clock).clock_timestamp < monitor_end
        }
      }
      # Monitor door for 10 seconds
      while (#Clock).clock_timestamp < monitor_end {
        if (#DoorLock).doorControl_door == 'open' {
          doorOpenCount = doorOpenCount + 1
          lastDoorOpenStart = (#Clock).clock_timestamp
        }
      }
      # Calculate door open duration
      if (doorOpenCount > 1) {
        currentDoorOpenDuration := (#Clock).clock_timestamp - lastDoorOpenStart
        if (currentDoorOpenDuration > firstDoorOpenDuration) {
          firstDoorOpenDuration := currentDoorOpenDuration
        }
      }
      # Turn off air conditioners if blinds were opened and door opened more than once
      if (blindsOpened and doorOpenCount > 1) {
        all(#AirConditioner).switch_off()
      }
  model_info:
    elapsed_time: 28.742
    bge_elapsed_time: 0.46
    llm_elapsed_time: 28.239
    validation_elapsed_time: 0.043
- command: 에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘.
  command_translated: Starting from the moment when the window is opened while the air conditioner is off, check the humidity every 10 seconds, and if it exceeds 60%, lower the blinds and turn off the lights. Then, when the door turns closed, wait 5 seconds and sound the alarm. For the next 1 minute after the alarm, blink the lights every second while the door remains open, and if the door closes during that time, announce “The door is now closed” via the speaker.
  devices:
  - Shade
  - Alarm
  - Blind
  - AirQualityDetector
  - Speaker
  - Clock
  - Window
  - DoorLock
  - AirConditioner
  - TemperatureSensor
  - Light
  - HumiditySensor
  - Siren
  - Curtain
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      windowOpened := false
      blindsLowered := false
      lightsTurnedOff := false
      doorClosed := false
      alarmTriggered := false
      alertStarted := false
      alertDuration := 60000
      alertCount := 0
      if ((#Window).windowControl_window == "open") {
        windowOpened = true
      }
      if (windowOpened and (#AirConditioner).switch_switch == "off") {
        wait until(all(#HumiditySensor).relativeHumidityMeasurement_humidity > 60.0)
        all(#Blind).blind_close()
        all(#Light).switch_off()
        blindsLowered = true
        lightsTurnedOff = true
      }
      if ((#DoorLock).doorControl_door == "closed") {
        doorClosed = true
        wait until(doorClosed)
        wait until(#Clock).clock_delay(hour: 0, minute: 5, second: 0)
        (#Alarm).alarm_siren()
        alarmTriggered = true
      }
      if (alarmTriggered) {
        alertStarted = true
        alertDuration = 60000
        alertCount = 0
        all(#Light).switchLevel_setLevel(level: 50, rate: 100)
        all(#Light).switchLevel_alert()
        if (alertStarted and alertDuration > 0) {
          alertDuration = alertDuration - 1000
          alertCount = alertCount + 1
          if (alertCount >= 60) {
            alertStarted = false
          }
        }
        if (alertStarted and alertDuration > 0 and (#DoorLock).doorControl_door == "closed") {
          (#Speaker).mediaPlayback_speak("The door is now closed.")
          alertStarted = false
        }
      }
  model_info:
    elapsed_time: 20.902
    bge_elapsed_time: 0.113
    llm_elapsed_time: 20.756
    validation_elapsed_time: 0.033
- command: 습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘.
  command_translated: Wait until the humidity reaches or exceeds 70%. If the window is open at that moment, turn on the dehumidifier after 5 seconds. After the dehumidifier is turned on, when the temperature reaches or exceeds 30°C, turn on the air conditioner. check in real-time. Once the blinds turns opened while the air conditioner is on, start opening and closing the curtains every 10 seconds from that moment. While doing so, if motion is detected, immediately turn off the alarm. If no motion is detected for following 5 seconds, sound the alarm again.
  devices:
  - Alarm
  - Blind
  - AirQualityDetector
  - Dehumidifier
  - MotionSensor
  - Clock
  - Speaker
  - Window
  - DoorLock
  - Humidifier
  - AirConditioner
  - WeatherProvider
  - TemperatureSensor
  - HumiditySensor
  - Curtain
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      # Initialize global variables
      humidity_reached := false
      air_conditioner_on := false
      blinds_opened := false
      motion_detected := false
      # Wait until humidity reaches or exceeds 70%
      wait until(relativeHumidityMeasurement_humidity >= 70.0)
      humidity_reached := true
      # Turn on dehumidifier after 5 seconds
      (#Dehumidifier).switch_on()
      wait until(#Dehumidifier).switch_switch == "on"
      wait until(#Clock).clock_delay(5000)
      # Check temperature in real-time
      while (true) {
        if (#AirConditioner).airConditionerMode_targetTemperature >= 30.0) {
          air_conditioner_on := true
          (#AirConditioner).switch_on()
        }
        # Check if blinds are opened while air conditioner is on
        if (#Curtain).curtain_curtain == "open" {
          blinds_opened := true
          (#Curtain).curtain_open()
          wait until(#Curtain).curtain_curtain == "open"
          repeat 10 {
            (#Curtain).curtain_close()
            wait until(#Curtain).curtain_curtain == "closed"
            (#Curtain).curtain_open()
            wait until(#Curtain).curtain_curtain == "open"
          }
        }
        # Check for motion detection
        if (#MotionSensor).motionSensor_motion == "active") {
          motion_detected := true
          (#Alarm).alarm_off()
        }
        # Check for no motion detection for 5 seconds
        if (#MotionSensor).motionSensor_motion == "inactive") {
          wait until(#Clock).clock_delay(5000)
          if (#MotionSensor).motionSensor_motion == "inactive") {
            motion_detected := false
            (#Alarm).alarm_siren()
          }
        }
      }
  model_info:
    elapsed_time: 24.096
    bge_elapsed_time: 0.492
    llm_elapsed_time: 23.583
    validation_elapsed_time: 0.021
- command: 조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘.
  command_translated: When the lights are on and the windows are closed, and then the door turns opened, wait 3 seconds before sounding the siren. Check in real-time. If the window remains closed for 10 seconds after the siren sounds, close the curtains, turn off the lights, and turn on the fan at 50% speed. Then, if the temperature is above 27 degrees, switch the air conditioner to cooling mode. If motion is being detected, repeat the action of opening and closing the blinds every second, three times. At any point, if the speaker turns on, immediately stop all actions and turn off the speaker.
  devices:
  - Shade
  - Alarm
  - Blind
  - MotionSensor
  - Speaker
  - Clock
  - Window
  - Switch
  - DoorLock
  - AirConditioner
  - TemperatureSensor
  - Light
  - Fan
  - Siren
  - Curtain
  generated_code:
  - name: Scenario1
    cron: ''
    period: -1
    code: ""
  model_info:
    elapsed_time: 52.954
    bge_elapsed_time: 0.119
    llm_elapsed_time: 52.81
    validation_elapsed_time: 0.025
- command: 실시간으로 확인해서 조명이 꺼져 있고 창문이 열려 있는 상태에서 움직임 감지되면 3초 대기 후 조명을 켜고, 5초 후 블라인드를 닫아 줘. 이후 10초마다 알람을 한 번 1초간 울리되, 알람이 두 번 울린 후에는 에어컨을 ‘cool’ 모드로 전환해 줘. 단, 움직임이 감지된 이후 문이 열리면 모든 동작을 중지하고 커튼을 닫아 줘.
  command_translated: Check in real-time. when a motion is detected with the lights off and the windows open, wait 3 seconds before turning on the lights, and then wait another 5 seconds to close the blinds. After that, sound the alarm once for one second every 10 seconds, and after the second alarm, switch the air conditioner to 'cool' mode. However, when the door opens after a motion is detected, immediately stop all ongoing actions and close the curtains.
  devices:
  - SoundSensor
  - Alarm
  - ContactSensor
  - Blind
  - MotionSensor
  - Clock
  - Speaker
  - Window
  - Switch
  - DoorLock
  - AirConditioner
  - TemperatureSensor
  - Light
  - Siren
  - Curtain
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      motionDetected := false
      lightsOn := false
      blindsClosed := false
      doorOpened := false
      if ((#MotionSensor).motionSensor_motion == "active") {
        if ((#Light).switch_switch == "off") {
          if ((#Window).windowControl_window == "open") {
            motionDetected = true
          }
        }
      }
      if (motionDetected) {
        wait until(motionDetected)
        wait until((#Light).switch_switch == "on")
        lightsOn = true
        wait until(lightsOn)
        wait until((#Blind).blind_blind == "closed")
        blindsClosed = true
        wait until(blindsClosed)
        wait until(doorOpened == false)
        wait until((#DoorLock).doorControl_door == "closed")
        (#Alarm).alarm_siren()
        wait until((#Alarm).alarm_alarm == "siren")
        wait until((#Alarm).alarm_alarm == "off")
        (#AirConditioner).airConditionerMode_setAirConditionerMode("cool")
        wait until((#AirConditioner).airConditionerMode_airConditionerMode == "cool")
        (#Curtain).curtain_close()
        wait until((#Curtain).curtain_curtain == "closed")
      }
      if ((#DoorLock).doorControl_door == "open") {
        doorOpened = true
        wait until(doorOpened)
        wait until((#DoorLock).doorControl_door == "closed")
        (#Curtain).curtain_close()
        wait until((#Curtain).curtain_curtain == "closed")
      }
      if ((#DoorLock).doorControl_door == "closed") {
        doorOpened = false
      }
      if ((#Window).windowControl_window == "closed") {
        blindsClosed = false
      }
      if ((#Light).switch_switch == "on") {
        lightsOn = false
      }
  model_info:
    elapsed_time: 23.461
    bge_elapsed_time: 0.11
    llm_elapsed_time: 23.326
    validation_elapsed_time: 0.025
- command: 매주 월요일 아침 7시에 조명을 20으로 설정해 줘. 이후 실시간으로 확인해서 자정까지 움직임이 감지될 때마다 블라인드를 열고, 3초 간격으로 커튼을 두 번 열었다 닫아 줘. 커튼을 조정할 때마다 창문이 열려 있으면 선풍기를 켜고, 닫혀 있으면 에어컨을 꺼 줘.
  command_translated: Every Monday morning at 7 a.m., set the lights to 20. From then until midnight, monitor for motion in real-time, and each time it is detected, open the blinds and open and close the curtains twice with a 3-second interval. Each time the curtains are adjusted, if the windows are open, turn on the fan; if they are closed, turn off the air conditioner.
  devices:
  - Shade
  - Blind
  - MotionSensor
  - AirQualityDetector
  - Clock
  - Speaker
  - Window
  - DoorLock
  - AirConditioner
  - TemperatureSensor
  - Light
  - HumiditySensor
  - Fan
  - Curtain
  generated_code:
  - name: Scenario1
    cron: ''
    period: -1
    code: ""
  model_info:
    elapsed_time: 50.532
    bge_elapsed_time: 0.18
    llm_elapsed_time: 50.327
    validation_elapsed_time: 0.025
- command: 매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘.
  command_translated: 'Sound the siren every night at 10 p.m. if the window located at the bottom is open and a light with an even-numbered tag is on. If the siren is sounded, close the blinds after 5 seconds. Starting 5 seconds later, regardless of whether the siren was triggered, monitor in real-time: when a door with an odd-numbered tag has opened and closed twice in total, close the curtains. After closing the curtains, turn on the alarm''s strobe for the total duration the door remained open across the two events, then turn it off.'
  devices:
  - Shade
  - SoundSensor
  - Alarm
  - Blind
  - Clock
  - Speaker
  - Window
  - DoorLock
  - GasValve
  - TemperatureSensor
  - Light
  - HumiditySensor
  - Siren
  - Curtain
  generated_code:
  - name: Scenario1
    cron: ''
    period: -1
    code: ""
  model_info:
    elapsed_time: 30.257
    bge_elapsed_time: 0.118
    llm_elapsed_time: 30.114
    validation_elapsed_time: 0.024
- command: 매일 실시간으로 검사해서 로봇청소기가 작동 중이면서 움직임이 감지될 때마다 10초 후 스피커로 “청소 중입니다”라는 음성을 재생해 줘. 또한 습도가 60%를 넘으면 홀수 태그가 붙은 공기청정기를 켜 줘. 공기청정기가 켜져 있는 동안 TV 전원을 3초마다 껐다 켰다 해 줘. 창문이 5분 연속으로 열려 있을 때마다 닫아 줘.
  command_translated: Monitor in real-time every day, and whenever motion is detected while the robot vacuum is running, announce "Cleaning in progress"via the speaker after a 10-second delay. Turn on air purifiers with odd-numbered tags when the humidity exceeds 60%. While the air purifier is on, toggle the TV power every 3 seconds. Close the window each time it has remained open continuously for 5 minutes.
  devices:
  - AirQualityDetector
  - MotionSensor
  - Dehumidifier
  - Speaker
  - Clock
  - Window
  - RobotCleaner
  - Humidifier
  - AirPurifier
  - HumiditySensor
  - Television
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      lastMotionTime := 0
      windowOpenStartTime := 0
      windowOpenDuration := 0
      # Monitor in real-time
      if ((#Clock).clock_hour == 8) and ((#Clock).clock_minute == 44)) {
        # Announce cleaning in progress
        wait until(((#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == 'manual') or ((#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == 'part'))
        wait until(#Clock).clock_delay(hour: 0, minute: 0, second: 10)
        (#Speaker).mediaPlayback_speak("Cleaning in progress")
        # Turn on air purifiers with odd-numbered tags
        if (#HumiditySensor).relativeHumidityMeasurement_humidity > 60.0 {
          all(#AirPurifier[odd]).switch_on()
          # Toggle TV power every 3 seconds
          while (true) {
            wait until(#Clock).clock_delay(hour: 0, minute: 0, second: 3)
            (#Television).switch_toggle()
          }
        }
        # Close the window if it has remained open continuously for 5 minutes
        if (#Window).windowControl_window == 'open' {
          windowOpenStartTime = (#Clock).clock_timestamp
          windowOpenDuration = (#Clock).clock_timestamp - windowOpenStartTime
          if (windowOpenDuration >= 300000) {
            (#Window).windowControl_close()
          }
        }
      }
  model_info:
    elapsed_time: 18.919
    bge_elapsed_time: 0.108
    llm_elapsed_time: 18.791
    validation_elapsed_time: 0.02
- command: 실시간으로 확인해서 벽면 조명이 꺼져 있고 홀수 태그가 붙은 커튼이 닫힌 상태에서 문이 열리면, 5초 후 그 조명을 켜고 창문을 열어 줘. 이후 30초 동안 움직임이 감지되지 않으면 알람의 사이렌을 울려 줘. 30초가 모두 지난 뒤 에어컨이 꺼져 있고 실내 온도가 28도 이상이면 에어컨을 켜 줘. 또한 그 때 짝수 태그가 붙은 선풍기가 켜져 있으면 꺼 주고, 켜져 있지 않으면 그대로 두도록 해 줘.
  command_translated: Check in real-time. When a door turns opened while the wall lights are off and odd-tagged curtains are closed, then after 5 seconds, turn on the wall lights and open the window. Then, if no motion is detected during the following 30 seconds, sound the alarm’s siren. After the 30 seconds have passed, if the air conditioner is off and the room temperature is 28°C or higher, turn it on. Also, if any fans with even-numbered tags are on at that time, turn them off; otherwise, leave them as they are.
  devices:
  - Shade
  - SoundSensor
  - Alarm
  - MotionSensor
  - Clock
  - Speaker
  - Window
  - DoorLock
  - AirConditioner
  - TemperatureSensor
  - Light
  - HumiditySensor
  - Fan
  - Siren
  - Curtain
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      door_opened := false
      motion_detected := false
      fan_on := false
      if ((#DoorLock).doorControl_door == "open") {
        door_opened = true
      }
      if ((#Light).switch_switch == "off") and (door_opened) and (all(#DoorLock).curtain_curtain == "closed") {
        wait until(#Clock).clock_delay(second: 5)
        (#Light).switch_on()
        (#Window).windowControl_open()
        wait until(#Clock).clock_delay(second: 30)
        if ((#MotionSensor).motionSensor_motion == "inactive") {
          motion_detected = true
        }
        if (not motion_detected) {
          if ((#AirConditioner).switch_switch == "off") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 28.0) {
            (#AirConditioner).switch_on()
          }
          if (any(#Fan).switch_switch == "on") {
            all(#Fan).switch_off()
          }
        }
      }
  model_info:
    elapsed_time: 20.639
    bge_elapsed_time: 0.115
    llm_elapsed_time: 20.473
    validation_elapsed_time: 0.05
