- command: From March through September, check in real-time and turn on the irrigation after a 5-second wait if the soil moisture sensor reads 30% or less, wait another 10 seconds, sound the alarm's siren, and then close the blinds if the humidity value remains below 30% for 15 seconds after that.
  devices:
  - Blind
  - HumiditySensor
  - TemperatureSensor
  - Shade
  - WeatherProvider
  - Clock
  - Alarm
  - LeakSensor
  - Siren
  - Humidifier
  - SoilMoistureSensor
  generated_code:
  - name: "Scenario1"
    cron: "0 3 * * 2-8"
    period: 1000
    code: ""
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0)
      (#Siren).blind_open("Irrigation system is on.")
      (#Clock).clock_delay(5000)
      (#Alarm).alarm_siren()
      (#Clock).clock_delay(10000)
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 30.0)
      (#Blind).blind_close()
  model_info:
    elapsed_time: 8.217
    bge_elapsed_time: 0.178
    llm_elapsed_time: 8.039
- command: If the soil moisture sensor drops below 25%, the alarm will sound the siren for one second for a total of five alarms at three-second intervals, followed by a 10-second wait before closing the blinds.
  devices:
  - Blind
  - HumiditySensor
  - TemperatureSensor
  - Shade
  - WeatherProvider
  - Clock
  - Alarm
  - LeakSensor
  - Siren
  - SoilMoistureSensor
  - SoundSensor
  generated_code: []
  model_info:
    elapsed_time: 25.153
    bge_elapsed_time: 0.158
    llm_elapsed_time: 24.995
- command: Check in real-time and turn on the lights after 5 seconds if motion is detected, open the curtains after 10 seconds, turn on the pump if it's off after 15 seconds, etc.
  devices:
  - Valve
  - MotionSensor
  - Light
  - SmokeDetector
  - Clock
  - Curtain
  - Camera
  - GasValve
  - DoorLock
  - PresenceSensor
  - Pump
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      wait until((#MotionSensor).motionSensor_motion == 'active')
      (#Light).switch_on()
      (#Curtain).curtain_open()
      wait until((#Pump).switch_switch == 'off')
      (#Pump).switch_on()
  model_info:
    elapsed_time: 4.652
    bge_elapsed_time: 0.159
    llm_elapsed_time: 4.493
- command: On January 1, check in real-time and when the lights go out, wait 3 seconds, turn off the pump, close the blinds after 5 seconds, turn the lights back on after an additional 7 seconds, and sound the alarm's siren.
  devices:
  - Blind
  - Light
  - Shade
  - SmokeDetector
  - Relay
  - Alarm
  - Clock
  - Siren
  - GasValve
  - Pump
  generated_code:
  - name: "Scenario1"
    cron: "0 1 1 * *"
    period: 100
    code: |-
      wait until((#Clock).clock_date == 20250101)
      wait until((#Light).switch_switch == 'off')
      (#Clock).clock_delay(3000)
      (#Pump).switch_off()
      (#Blind).blind_close()
      (#Clock).clock_delay(5000)
      (#Light).switch_on()
      (#Alarm).alarm_siren()
  model_info:
    elapsed_time: 6.677
    bge_elapsed_time: 0.174
    llm_elapsed_time: 6.504
- command: Check every 10 seconds to see if the soil moisture sensor reads 30% or less twice in a row, and if it stays that way for more than a minute, close the blinds and say "alarm" twice after 5 seconds.
  devices:
  - Blind
  - MotionSensor
  - LightSensor
  - HumiditySensor
  - TemperatureSensor
  - Shade
  - WeatherProvider
  - Clock
  - LeakSensor
  - Humidifier
  - SoilMoistureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      count := 0
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) {
        count = count + 1
      } else {
        count = 0
      }
      if (count >= 2) {
        wait until((#Clock).clock_timestamp >= (#Clock).clock_timestamp + 60000)
        (#Blind).blind_close()
        (#LightSensor).blind_open("alarm")
        (#LightSensor).blind_open("alarm")
      }
  model_info:
    elapsed_time: 7.333
    bge_elapsed_time: 0.165
    llm_elapsed_time: 7.168
- command: Check in real-time to open the curtains if they've been closed for 5 consecutive seconds, and turn off the lights if no motion is detected for the next 10 seconds.
  devices:
  - Blind
  - MotionSensor
  - ContactSensor
  - Light
  - SmokeDetector
  - Clock
  - Curtain
  - DoorLock
  - PresenceSensor
  - Camera
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      closed_duration := 0
      if ((#Curtain).curtain_curtain == "closed") {
        closed_duration = closed_duration + 1000
      } else {
        closed_duration = 0
      }
      if (closed_duration >= 5000) {
        (#Curtain).curtain_open()
        closed_duration = 0
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      motion_detected := false
      if ((#MotionSensor).motionSensor_motion == "active") {
        motion_detected = true
      }
      if (motion_detected == false) {
        wait until((#MotionSensor).motionSensor_motion == "active")
        motion_detected = true
      }
      wait until((#MotionSensor).motionSensor_motion == "inactive")
      wait until((#MotionSensor).motionSensor_motion == "active")
      wait until((#MotionSensor).motionSensor_motion == "inactive")
      wait until((#MotionSensor).motionSensor_motion == "active")
      wait until((#MotionSensor).motionSensor_motion == "inactive")
      wait until((#MotionSensor).motionSensor_motion == "active")
      wait until((#MotionSensor).motionSensor_motion == "inactive")
      wait until((#MotionSensor).motionSensor_motion == "active")
      wait until((#MotionSensor).motionSensor_motion == "inactive")
      (#Light).switch_off()
  model_info:
    elapsed_time: 15.19
    bge_elapsed_time: 0.16
    llm_elapsed_time: 15.029
- command: When the lights come on, blink the lights 3 times at 1 second intervals, wait 5 seconds before turning on the speakers, and from then on, check in real-time to turn on the air conditioner 10 seconds after it turns off.
  devices:
  - Timer
  - Speaker
  - Light
  - Clock
  - Relay
  - AirPurifier
  - Camera
  - Curtain
  - Siren
  - AirConditioner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      wait until((#Light).switch_switch == 'on')
      (#Light).switch_off()
      (#Light).switch_on()
      (#Light).switch_off()
      (#Light).switch_on()
      (#Light).switch_off()
      (#Light).switch_on()
      (#Speaker).mediaPlayback_speak("Wait 5 seconds before turning on the speakers.")
      (#Clock).clock_delay(5000)
      (#Speaker).switch_on()
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      if ((#Clock).clock_isHoliday == false) {
        if ((#AirConditioner).switch_switch == 'off') {
          (#Clock).clock_delay(10000)
          (#AirConditioner).switch_on()
        }
      }
  model_info:
    elapsed_time: 9.722
    bge_elapsed_time: 0.175
    llm_elapsed_time: 9.546
- command: When the air conditioner turns on, close the blinds after five seconds, wait another five seconds and close the curtains if they're open, and then turn the lights down to 10 percent brightness after 10 seconds.
  devices:
  - Blind
  - LightSensor
  - Light
  - Shade
  - WeatherProvider
  - Clock
  - AirPurifier
  - Curtain
  - DoorLock
  - Window
  - AirConditioner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      wait until((#AirConditioner).switch_switch == 'on')
      (#Blind).blind_close()
      (#Clock).clock_delay(5000)
      if ((#Curtain).windowControl_window == 'open') {
        (#Curtain).windowControl_close()
      }
      (#Clock).clock_delay(10000)
      (#Light).switchLevel_setLevel(10, 100)
  model_info:
    elapsed_time: 6.444
    bge_elapsed_time: 0.173
    llm_elapsed_time: 6.27
- command: Check in real-time to turn on the alarm if no motion is detected for 10 seconds after the door is opened, and turn on the lights to full brightness after 5 seconds.
  devices:
  - LightSensor
  - MotionSensor
  - ContactSensor
  - Light
  - SmokeDetector
  - Clock
  - Alarm
  - Siren
  - DoorLock
  - Camera
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      motion_detected := false
      wait until((#DoorLock).doorControl_door == 'open')
      (#Alarm).alarm_siren()
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      wait until((#DoorLock).doorControl_door == 'closed')
      wait until((#MotionSensor).motionSensor_motion == 'active')
      (#Light).switch_on()
      (#Light).switchLevel_setLevel(100, 0)
  model_info:
    elapsed_time: 6.466
    bge_elapsed_time: 0.158
    llm_elapsed_time: 6.309
- command: Every Monday morning, from 9 to 10 a.m., check in real-time and close the blinds if they're still open seven seconds after the window is opened, and close the curtains 10 seconds later. And during that time, check in real time and turn on the lights if they're off.
  devices:
  - Blind
  - Valve
  - ContactSensor
  - Light
  - Shade
  - Clock
  - Relay
  - Curtain
  - DoorLock
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      wait until((#Clock).clock_weekday == 'monday' and (#Clock).clock_hour == 9 and (#Clock).clock_minute == 0)
      (#Window).windowControl_open()
      wait until((#Clock).clock_second >= 7)
      if ((#Blind).blind_blind == 'open') {
        (#Blind).blind_close()
      }
      wait until((#Clock).clock_second >= 10)
      (#Curtain).curtain_close()
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      wait until((#Clock).clock_weekday == 'monday' and (#Clock).clock_hour == 9 and (#Clock).clock_minute == 0)
      wait until((#Window).windowControl_window == 'open')
      if ((#Light).switch_switch == 'off') {
        (#Light).switch_on()
      }
  model_info:
    elapsed_time: 10.557
    bge_elapsed_time: 0.166
    llm_elapsed_time: 10.391
