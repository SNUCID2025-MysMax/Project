- command: 매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘.
  devices:
  - AirQualityDetector
  - Humidifier
  - SoilMoistureSensor
  - WeatherProvider
  - Clock
  - AirConditioner
  - AirPurifier
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * 1-5"
    period: 60000
    code: |-
      wait until(((#Window).windowControl_window == 'closed') and ((#CarbonDi oxideSensor).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0))
      delay(5000)
      if ((#Fan).switch_switch == 'off') {
        (#Fan).switch_on()
      }
  - name: "Scenario2"
    cron: "0 9 * * 1-5"
    period: 60000
    code: |-
      wait until(((#Window).windowControl_window == 'closed') and ((#CarbonDi oxideSensor).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0))
      delay(5000)
      if ((#Fan).switch_switch == 'off') {
        (#Fan).switch_on()
      }
      count := 0
      loop:
        if (count >= 12) {
          break
        }
        delay(60000)
        if ((# mahd r dustSensor). Bibl ar dustMeasurement_ Bibl ar dustLevel >= 50.0) {
          count = count + 1
          if (count >= 5) {
            (#Window).windowControl_close()
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.242
- command: 매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘.
  devices:
  - Blind
  - Siren
  - Clock
  - Shade
  - Alarm
  - AirConditioner
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: 100
    code: |-
      count := 0
      open_duration := 0
      block_count := 0
      last_open_time := (#Clock).clock_time
      block_start_time := (#Clock).clock_time
      if (((#Light).switch_switch == 'off') and ((#Bottom #Odd).windowControl_window == 'closed')) {
        block_count = block_count + 1
        break_time = (#Clock).clock_time
        break_duration = break_time - block_start_time
        if (break_duration >= 10000) {
          if (last_open_time - break_time >= 1000) {
            all(#AirConditioner).switch_off()
          }
          break_time = (#Clock).clock_time
          break_duration = break_time - block_start_time
          block_count = 0
        }
        all(#Blind).blindControl_open()
        open_duration = open_duration + 100
        if (open_duration >= 5000) {
          (#Alarm).alarm_siren()
          open_duration = 0
        }
      }
      wait until((#Window).windowControl_window == 'open')
      block_start_time = (#Clock).clock_time
      wait until(block_count >= 2)
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.172
- command: 에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘.
  devices:
  - Blind
  - Humidifier
  - Clock
  - AirConditioner
  - ContactSensor
  - Window
  - DoorLock
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      previous_contact := (#ContactSensor).contactSensor_contact
      contact := (#ContactSensor).contactSensor_contact
      previous_contact = contact
      if ((contact == "open") and (previous_contact == "closed") and ((#AirConditioner).switch_switch == 'off')) {
        wait until((#Window).windowControl_window == 'open')
        wait until((#Clock).clock_delay(second: 10))
        temp = (# Szk)#⡘ xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos)# xPos
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 15.015
- command: 습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘.
  devices:
  - Blind
  - Humidifier
  - Curtain
  - Clock
  - Dehumidifier
  - AirConditioner
  - Window
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      wait until((#HumiditySensor).humidityMeasurement_humidity >= 70.0)
      if ((#Window).windowControl_window == 'open') {
        (#Clock).clock_delay(second: 5)
        (#Dehumidifier).switch_on()
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |-
      wait until((#Dehumidifier).switch_switch == 'on')
      if ((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0) {
        (#AirConditioner).switch_on()
      }
  - name: "Scenario3"
    cron: ""
    period: 10000
    code: |-
      if ((#AirConditioner).switch_switch == 'on') {
        if ((#Window).windowControl_window == 'open') {
          (#Blind).blindControl_open()
          if ((# Szk fy Sensor).sz fy Sensor_ Szk fy Sensor == 'open') {
            (#Blind).blindControl_close()
            if (all(# Szk fy Sensor).sz fy Sensor_ Szk fy Sensor == 'closed') {
              (#Alarm).alarm_off()
            } else {
              (#Alarm).alarm_on()
            }
          } else {
            (#Blind).blindControl_close()
            if (all(# Szk fy Sensor).sz fy Sensor_ Szk fy Sensor == 'closed') {
              (#Alarm).alarm_off()
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.251
- command: 조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘.
  devices:
  - Blind
  - Siren
  - Curtain
  - Clock
  - AirConditioner
  - ContactSensor
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#Light).switch_switch == 'on' and (#Window).windowControl_window == 'closed') {
        wait until((#ContactSensor).contactSensor_contact == 'open')
        (#Clock).clock_delay(3)
        (#Alarm).alarm_siren()
        wait until((#Window).windowControl_window == 'closed', timeout = 10000)
        if ((#Window).windowControl_window == 'closed') {
          (#Curtain).curtainControl_close()
          (#Light).switch_off()
        }
        (#Fan).fanControl_setSpeed(50)
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      if ((#AirConditioner).airConditionerMode_airConditionerMode == ' Cooling') {
        if ((#MotionSensor).motionSensor_motion == 'present') {
          if ((#Clock).clock_second % 2 == 0) {
            (#Blind).blindControl_open()
            (#Clock).clock_delay(1)
            (#Blind).blindControl_close()
          }
          count := 0
          count = count + 1
          if (count == 3) {
            break
          }
        }
      }
  - name: "Scenario3"
    cron: ""
    period: 10000
    code: ""
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.179
- command: 조명이 꺼져 있고 창문이 열려 있는 상태에서 사람이 감지되면 3초 대기 후 조명을 켜고, 5초 후 블라인드를 닫아 줘. 이후 10초마다 알람을 한 번 1초간 울리되, 알람이 두 번 울린 후에는 에어컨을 ‘cool’ 모드로 전환해 줘. 단, 사람이 감지된 이후 문이 열리면 모든 동작을 중지하고 커튼을 닫아 줘.
  devices:
  - Blind
  - Siren
  - Curtain
  - Clock
  - AirConditioner
  - ContactSensor
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      wait until((#Light).switch_switch == 'off')
      wait until((#Window).windowControl_window == 'open')
      wait until((#PresenceSensor).presenceSensor_presence == 'present')
      (#Light).switch_on()
      (#Clock).clock_delay(0, 0, 3)
      (# Blind).blindControl_close()
      (#Clock).clock_delay(0, 0, 5)
      break
  - name: "Scenario2"
    cron: ""
    period: 10000
    code: |-
      wait until((#Light).switch_switch == 'off')
      wait until((#Window).windowControl_window == 'open')
      wait until((#PresenceSensor).presenceSensor_presence == 'present')
      (#Light).switch_on()
      (#Clock).clock_delay(0, 0, 3)
      (# Blind).blindControl_close()
      (#Clock).clock_delay(0, 0, 5)
      break
  - name: "Scenario3"
    cron: ""
    period: 10000
    code: |-
      wait until((#Light).switch_switch == 'off')
      wait until((#Window).windowControl_window == 'open')
      wait until((#PresenceSensor).presenceSensor_presence == 'present')
      (#Light).switch_on()
      (#Clock).clock_delay(0, 0, 3)
      (# Blind).blindControl_close()
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.253
- command: 매주 월요일 아침 7시에 조명을 20으로 설정해 줘. 이후 실시간으로 확인해서 자정까지 움직임이 감지될 때마다 블라인드를 열고, 3초 간격으로 커튼을 두 번 열었다 닫아 줘. 커튼을 조정할 때마다 창문이 열려 있으면 선풍기를 켜고, 닫혀 있으면 에어컨을 꺼 줘.
  devices:
  - Blind
  - Curtain
  - Clock
  - Shade
  - AirConditioner
  - Light
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: "0 7 * * 1"
    period: -1
    code: |-
      (#Light).lightControl_setLightLevel(20)
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      if ((#Clock).clock_hour == 23) {
        break
      }
      if ((#MovementSensor).movementSensor_movement == 'move') {
        if ((#Blind).blindControl_blind == 'closed') {
          (#Fan).switch_on()
        } else {
          (#AirConditioner).switch_off()
        }
        (#Blind).blindControl_close()
        (#Blind).blindControl_close()
        (#Blind).blindControl_open()
        (#Blind).blindControl_open()
      }
  compare_results: []
  model_info:
    prompt_tokens: 2791
    generated_tokens: 181
    elapsed_time: 5.583
- command: 매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘.
  devices:
  - Blind
  - Siren
  - Curtain
  - Clock
  - Shade
  - Alarm
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 60000
    code: |-
      is_ Alarm_ siren_used := false
      if (((#Clock).clock_hour == 22) and ((#Clock).clock_minute == 0)) {
        if (((#Window)#Bottom).windowControl_window == 'open') {
          if ((#Light)#Odd).switch_switch == 'on') {
            if (is_ Alarm_ siren_used == false) {
              (#Alarm).alarm_siren()
              is_ Alarm_ siren_used = true
            }
            if (is_ Alarm_ siren_used == true) {
              wait until( (#Clock).clock_second == 5)
            }
            (#Blind).blindControl_close()
          }
        }
      }
      name = "Scenario2"
      cron = ""
      period = 100
      open_ count := 0
      if ((#Window)#Odd).windowControl_window == 'open') {
        open_ count = open_ count + 1
      }
      if (open_ count == 2) {
        (#Blind).blindControl_close()
        open_ count = open_ count + 1
      }
      if (open_ count >= 2) {
        wait until( (#Clock).clock_second == 5)
        (#Alarm).alarmLight_off()
      }
  compare_results: []
  model_info:
    prompt_tokens: 2838
    generated_tokens: 311
    elapsed_time: 9.503
- command: 매일 실시간으로 검사해서 로봇청소기가 작동 중이면서 사람이 움직일 때마다 10초 후 스피커로 “청소 중입니다”라는 음성을 재생해 줘. 또한 습도가 60%를 넘으면 홀수 태그가 붙은 공기청정기를 켜 줘. 공기청정기가 켜져 있는 동안 스마트 리모컨으로 TV 전원을 3초마다 껐다 켰다 해 줘. 창문이 5분 연속으로 열려 있을 때마다 닫아 줘.
  devices:
  - Speaker
  - AirQualityDetector
  - Television
  - RobotCleaner
  - Humidifier
  - Clock
  - AirConditioner
  - AirPurifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      isClean := false
      if (((#Clock).clock_minute == 26) and ((#Clock).clock_second == 3)) {
        isClean = true
      }
      if (isClean == false) {
        wait until((#RobotVac).switch_switch == 'on')
        wait until((#HumanSensor).presenceSensor_presence == 'present')
        (#Speaker).speech gend_say('clean')
        delay = 10000
        (#Clock).clock_delay(0, 0, delay / 1000)
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      if (all(#SectorA #HumiditySensor).humidityMeasurement_humidity >= 60.0) {
        if ((#AirConditioner).switch_switch == 'off') {
          all(#SectorA #AirConditioner).switch_on()
        }
      }
  - name: "Scenario3"
    cron: ""
    period: 1000
    code: |-
      delay = 3000
      if (all(#SmartTV #Switch).switch_switch == 'on') {
        (#SmartTV).tvControl_off()
        (#Clock).clock_delay(0, 0, delay / 1000)
        (#SmartTV).tvControl_on()
        (#Clock).clock_delay(0, 0, delay / 1000)
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.404
- command: 실시간으로 확인해서 벽면 조명이 꺼져 있고 홀수 태그가 붙은 커튼이 닫힌 상태에서 문이 열리면, 5초 후 그 조명을 켜고 창문을 열어 줘. 이후 30초 동안 움직임이 감지되지 않으면 알람의 사이렌을 울려 줘. 30초가 모두 지난 뒤 에어컨이 꺼져 있고 실내 온도가 28도 이상이면 에어컨을 켜 줘. 또한 그 때 짝수 태그가 붙은 스마트 선풍기가 켜져 있으면 꺼 주고, 켜져 있지 않으면 그대로 두도록 해 줘.
  devices:
  - Curtain
  - Clock
  - AirConditioner
  - DoorLock
  - TemperatureSensor
  - Light
  - Window
  - Siren
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      last_move_time := 0
      last_window_closed_time := 0
      if ((all(#WallLight).switch_switch == 'off') and ((any(#Window)#Window).windowControl_window == 'closed') and ((#ContactSensor).contactSensor_contact == 'open')) {
        wait until((#Clock).clock_delay(second: 5))
        (#WallLight).switch_on()
        (#Window).windowControl_open()
      }
      wait until((#Clock).clock_delay(second: 30))
      if ((#AirConditioner).switch_switch == 'off') {
        if ((#TemperatureSensor).temperatureMeasurement_temperature >= 28.0) {
          (#AirConditioner).switch_on()
        }
      }
      if ((last_move_time + 30000) < (#Clock).clock_time) {
        if ((last_window_closed_time + 30000) < (#Clock).clock_time) {
          if ((any(#Window)#Window).windowControl_window == 'closed') {
            last_window_closed_time = (#Clock).clock_time
            (#Alarm).alarm_siren()
          }
        }
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      if ((last_move_time + 30000) < (#Clock).clock_time) {
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.499
