- command: 5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이면 급수기를 끄고 반복도 종료해 줘.
  devices:
  - Humidifier
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - AirConditioner
  - Irrigator
  - TemperatureSensor
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      weight := 0.0
      temp := 0.0
      height := 0.0
      width := 0.0
      area := 0.0
      weight = (#WeightSensor).weightMeasurement_weight
      temp = (#TemperatureSensor).temperatureMeasurement_temperature
      height = (#HeightSensor).heightMeasurement_height
      width = (#WidthSensor).widthMeasurement_width
      area = width * height
      if ((area >= 10) and (area <= 20)) {
        if ((weight <= 2) and (weight >= 1)) {
          if ((temp >= 35.0)) {
            (#Irrigator).switch_off()
          } else {
            (#Irrigator).switch_on()
          }
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 2744
    generated_tokens: 188
    elapsed_time: 5.685
- command: 3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘.
  devices:
  - WeatherProvider
  - Clock
  - SmokeDetector
  - Light
  - LeakSensor
  - Irrigator
  - TemperatureSensor
  - LightSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |-
      counter := 0
      if (counter < 10) {
        (#Light).switch_toggle()
        counter = counter + 1
      } else {
        break
      }
  compare_results: []
  model_info:
    prompt_tokens: 2734
    generated_tokens: 61
    elapsed_time: 1.896
- command: 1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘.
  devices:
  - Humidifier
  - Clock
  - Dehumidifier
  - Dishwasher
  - Fan
  - AirConditioner
  - Irrigator
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      height := (# Szkb).heightMeasurement_height
      height = height + 1
      if (height >= 100) {
        break
      }
      height = height - 1
      if (height <= 50) {
        break
      }
      if ((# Szkb).heightMeasurement_height >= 80.0) {
        break
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |-
      height := (# Szkb).heightMeasurement_height
      height = height + 1
      if (height >= 100) {
        break
      }
      height = height - 1
      if (height <= 50) {
        break
      }
      if ((# Szkb).heightMeasurement_height >= 80.0) {
        break
      }
  - name: "Scenario3"
    cron: ""
    period: 1000
    code: |-
      height := (# Szkb).heightMeasurement_height
      height = height + 1
      if (height >= 100) {
        break
      }
      height = height - 1
      if (height <= 50) {
        break
      }
      if ((# Szkb).heightMeasurement_height >= 80.0) {
        break
      }
  compare_results: []
  model_info:
    prompt_tokens: 2743
    generated_tokens: 299
    elapsed_time: 9.036
- command: 5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지.
  devices:
  - Blind
  - Curtain
  - Clock
  - Shade
  - Button
  - GasValve
  - Valve
  - Relay
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      height := (#Blind).blindControl_height
      if (height > 10) {
        height = height - 10
      } else {
        break
      }
      (#Blind).blindControl_setHeight(height)
  compare_results: []
  model_info:
    prompt_tokens: 2712
    generated_tokens: 69
    elapsed_time: 2.137
- command: 10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘.
  devices:
  - Humidifier
  - WeatherProvider
  - Clock
  - Dishwasher
  - AirConditioner
  - Irrigator
  - Light
  - LightSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      prev := -1
      current := (#Clock).clock_hour * 3600 + (#Clock).clock_minute * 60 + (#Clock).clock_second
      if (current - prev >= 10) {
        prev = current
        if ((#Clock).clock_hour * 3600 + (#Clock).clock_minute * 60 + (#Clock).clock_second - current >= 5) {
          if ((#LightSensor).lightSensor_light >= 500) {
            break
          }
          (#Irrigator).switch_on()
          (#Clock).clock_delay(5)
          (#Irrigator).switch_off()
        }
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |-
      break
  compare_results: []
  model_info:
    prompt_tokens: 2746
    generated_tokens: 199
    elapsed_time: 6.066
- command: 2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘.
  devices:
  - Curtain
  - Clock
  - Light
  - ContactSensor
  - Camera
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |-
      checked := false
      checked2 := false
      if ((checked == false)) {
        checked = true
        (#Light).switch_off()
        if ((checked2 == false) and ((#Window).windowControl_window == 'open')) {
          checked2 = true
          break
        }
      } else {
        checked = false
        (#Light).switch_on()
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      checked3 := false
      checked4 := false
      checked5 := false
      checked6 := false
      checked7 := false
      checked8 := false
      checked9 := false
      checked10 := false
      checked11 := false
      checked12 := false
      checked13 := false
      checked14 := false
      checked15 := false
      checked16 := false
      checked17 := false
      checked18 := false
      checked19 := false
      checked20 := false
      checked21 := false
      checked22 := false
      checked23 := false
      checked24 := false
      checked25 := false
      checked26 := false
      checked27 := false
      checked28 := false
      checked29 := false
      checked30 := false
      checked31 := false
      checked32 := false
      checked33 := false
      checked34 := false
      checked35 := false
      checked36 := false
      checked37 := false
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.034
- command: 3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘.
  devices:
  - Television
  - Clock
  - MotionSensor
  - Alarm
  - Button
  - Irrigator
  - Light
  - Relay
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |-
      volume := (#Television).tvVolume_tvVolume
      if (volume >= 5) {
        break
      } else {
        (#Television).tvVolume_setTvVolume(volume + 1)
      }
  compare_results: []
  model_info:
    prompt_tokens: 2753
    generated_tokens: 68
    elapsed_time: 2.153
- command: 10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해.
  devices:
  - Blind
  - Television
  - Curtain
  - RobotCleaner
  - Clock
  - Shade
  - GasValve
  - Relay
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      bl vt := (# Blind). blindControl_blindPosition == "closed"
      tv vt := (# TV). switch_switch == "on"
      if (bl vt) {
        (# Blind). blindControl_setBlindPosition("closed")
      }
      if (tv vt) {
        break
      }
  - name: "Scenario2"
    cron: ""
    period: 10000
    code: |-
      bl vt := (# Blind). blindControl_blindPosition == "closed"
      tv vt := (# TV). switch_switch == "on"
      if (bl vt) {
        (# Blind). blindControl_setBlindPosition("closed")
      }
      if (tv vt) {
        break
      }
  - name: "Scenario3"
    cron: ""
    period: 10000
    code: |-
      bl vt := (# Blind). blindControl_blindPosition == "closed"
      tv vt := (# TV). switch_switch == "on"
      if (bl vt) {
        (# Blind). blindControl_setBlindPosition("closed")
      }
      if (tv vt) {
        break
      }
  - name: "Scenario4"
    cron: ""
    period: 10000
    code: |-
      bl vt := (# Blind). blindControl_blindPosition == "closed"
      tv vt := (# TV). switch_switch == "on"
      if (bl vt) {
        (# Blind). blindControl_setBlindPosition("closed")
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.304
- command: 2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘.
  devices:
  - Siren
  - Curtain
  - Clock
  - Alarm
  - ContactSensor
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |-
      alert := False
      alert_count := 0
      if (alert == False) {
        alert = True
        alert_count = alert_count + 1
        (#Alarm).alarm_siren()
        (#Alarm).alarm_off()
        if ((#Window).windowControl_window == 'closed') {
          break
        }
      } else {
        break
      }
  compare_results: []
  model_info:
    prompt_tokens: 4076
    generated_tokens: 105
    elapsed_time: 4.33
- command: 5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘.
  devices:
  - Humidifier
  - AirQualityDetector
  - RobotCleaner
  - Clock
  - Dehumidifier
  - AirConditioner
  - AirPurifier
  - Window
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      state := (#Window).windowControl_window
      if (state == "open") {
        break
      }
      (#AirCleaner).airCleanerMode_setAirCleanerMode("auto")
  compare_results: []
  model_info:
    prompt_tokens: 2730
    generated_tokens: 60
    elapsed_time: 3.288
