- command: 1초마다 확인하여 관개 장치가 꺼졌다 켜진 횟수가 4번을 초과하고 펌프가 2번 이상 작동했으면 블라인드를 닫고 커튼을 내려 줘.
  devices:
  - Pump
  - Blind
  - Curtain
  - WeatherProvider
  - Clock
  - GasValve
  - Irrigator
  - Valve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      count := 0
      counter := 0
      if ((#Irrigator).switch_switch == 'off') {
        counter = counter + 1
      }
      if ((#Irrigator).switch_switch == 'on') {
        if (counter > 4) {
          if (count > 1) {
            (#Blind).blindControl_close()
            (#Blind).blindControl_open()
          }
        }
      }
      if ((#Pump).switch_switch == 'on') {
        count = count + 1
      }
  compare_results: []
  model_info:
    prompt_tokens: 2740
    generated_tokens: 144
    elapsed_time: 4.424
- command: 실시간으로 검사해서 창문이 열렸다 닫힌 횟수가 3번 이상이고, 그 사이 선풍기가 한 번도 꺼지지 않았으면 선풍기를 꺼 주고 블라인드를 닫아 줘.
  devices:
  - Blind
  - Curtain
  - Clock
  - Shade
  - Valve
  - ContactSensor
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      count := 0
      window_close_count := 0
      fan_turn_off_count := 0
      window_open := false
      if ((#Window).windowControl_window == 'open') {
        if (window_open == false) {
          count = count + 1
          if (count == 3) {
            break
          }
        }
        window_open = true
      } else {
        if (window_open == true) {
          window_close_count = window_close_count + 1
          if (window_close_count == 3) {
            break
          }
        }
        window_open = false
      }
      if (fan_turn_off_count == 0) {
        if (any(#Fan).switch_switch == 'on') {
          (#Fan).switch_off()
        }
      }
      if (window_close_count >= 3) {
        if (any(#Window).windowControl_window == 'open') {
          (#Window).windowControl_close()
        }
      }
      if (window_close_count >= 3) {
        fan_turn_off_count = fan_turn_off_count + 1
      }
  compare_results: []
  model_info:
    prompt_tokens: 2741
    generated_tokens: 299
    elapsed_time: 9.096
- command: 매시간 0분부터 30분까지, 3초마다 확인해서 제습기가 켜졌다 꺼진 횟수가 4번 이상이고, 그 때 습도가 65% 이상이면 사이렌을 1초간, 3초 간격으로 두 번 울리고 그 후 커튼을 닫아 줘.
  devices:
  - Humidifier
  - Curtain
  - AirQualityDetector
  - Clock
  - Dehumidifier
  - AirConditioner
  - Siren
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      count := 0
      hum = (#HumiditySensor).humidityMeasurement_humidity
      if (((#Clock).clock_minute >= 0) and ((#Clock).clock_minute < 30)) {
        if ((count >= 4) and (hum >= 65.0)) {
          (#Alarm).alarm_siren()
          break
        } else {
          count = count + 1
          wait until((#Clock).clock_second % 3 == 0)
        }
      } else {
        break
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      if ((count >= 4) and (hum >= 65.0)) {
        (#Window).windowControl_close()
      }
  - name: "Scenario3"
    cron: ""
    period: 1000
    code: |-
      count := 0
      hum = (#HumiditySensor).humidityMeasurement_humidity
      if ((count >= 4) and (hum >= 65.0)) {
        (#Window).windowControl_close()
      }
  - name: "Scenario4"
    cron: ""
    period: 1000
    code: |-
      if ((count >= 4) and (hum >= 65.0)) {
        (#Window).windowControl_close()
      }
  - name: "Scenario5"
    cron: ""
    period: 1000
    code: ""
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.037
- command: 10분마다 확인하여 온도가 5도 이상 연속으로 세 번 상승하고 에어컨이 꺼져 있으면 에어컨을 키고 냉방 모드로 설정해줘
  devices:
  - Humidifier
  - AirQualityDetector
  - Clock
  - Dehumidifier
  - Dishwasher
  - AirConditioner
  - TemperatureSensor
  - Refrigerator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 600000
    code: |-
      temp_45min_ago := (#TemperatureSensor).temperatureMeasurement_temperature
      temp_15min_ago := (#TemperatureSensor).temperatureMeasurement_temperature
      temp_5min_ago := (#TemperatureSensor).temperatureMeasurement_temperature
      temp_current := (#TemperatureSensor).temperatureMeasurement_temperature
      if ((temp_45min_ago - temp_15min_ago > 5) and (temp_15min_ago - temp_5min_ago > 5) and (temp_5min_ago - temp_current > 5)) {
        if ((#AirConditioner).airConditionerMode_airConditionerMode == 'cool') {
          (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 2730
    generated_tokens: 192
    elapsed_time: 5.893
- command: 시각 상관없이 항상, 5초마다 체크해서 TV가 10분 동안 꺼져 있었다가 켜지는 이벤트가 두 번 이상 발생했으면, 스피커를 켜고 조명을 60으로 맞춰 줘. 단, 수요일에는 빼고
  devices:
  - Speaker
  - Television
  - Clock
  - Light
  - Relay
  - Camera
  - LightSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      days := (#Clock).clock_weekday
      tv_state := (#TV).switch_switch
      tv_state_prev := 'on'
      tv_on_duration := 0
      tv_off_count := 0
      if (tv_state == 'off') {
        tv_state_prev = tv_state
      } else if (tv_state == 'on') {
        if (tv_state_prev == 'on') {
          tv_on_duration = tv_on_duration + 5000
        } else {
          tv_state_prev = tv_state
          tv_on_duration = 0
        }
        if (tv_on_duration >= 600000) {
          tv_off_count = tv_off_count + 1
          tv_on_duration = 0
        }
      }
      if (tv_off_count >= 2 and days != 'thursday') {
        (#Speaker).switch_on()
        (#Light).lightControl_setLightLevel(60)
      }
  compare_results: []
  model_info:
    prompt_tokens: 2755
    generated_tokens: 260
    elapsed_time: 7.956
- command: 3초마다 확인해서 조명이 꺼진 상태에서 3분 이상 유지되다가 다시 켜지는 일이 2번 연속 발생하면 블라인드를 모두 닫아 줘.
  devices:
  - Blind
  - LightSensor
  - Curtain
  - Clock
  - Shade
  - Light
  - Relay
  - Siren
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |-
      previousState := (#Light).switch_switch
      previousTime := (#Clock).clock_time
      count := 0
      if ((previousState == 'off') and ((#Clock).clock_time - previousTime) >= 180000) {
        if ((#Light).switch_switch == 'on') {
          count = count + 1
        }
        if (count == 2) {
          all(#Blind).blindControl_close()
        }
      }
      previousState = (#Light).switch_switch
      previousTime = (#Clock).clock_time
  compare_results: []
  model_info:
    prompt_tokens: 2731
    generated_tokens: 148
    elapsed_time: 4.534
- command: 월요일 오후에, 1초마다 확인하여 문이 열렸을 때부터 닫힐 때까지 걸린 시간이 15초 이상인 경우가 3회 연속 발생했으면 알람의 사이렌을 1초간, 3초 간격으로 세 번 울려 줘.
  devices:
  - Siren
  - Curtain
  - Clock
  - Alarm
  - ContactSensor
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: "1"
    period: -1
    code: |-
      wait until((#Clock).clock_weekday == 'monday')
      wait until((#Clock).clock_hour >= 15)
      wait until((#Clock).clock_minute >= 0)
      wait until((#Clock).clock_second >= 29)
      start := (#Clock).clock_timestamp
      wait until((#ContactSensor).contactSensor_contact == 'open')
      wait until((#Clock).clock_timestamp - start >= 15.0)
      count := 0
      count = count + 1
      if (count >= 3) {
        (#Alarm).alarm_siren()
        (#Alarm).alarm_off()
        (#Alarm).alarm_siren()
        (#Alarm).alarm_off()
        (#Alarm).alarm_siren()
      }
  compare_results: []
  model_info:
    prompt_tokens: 4087
    generated_tokens: 188
    elapsed_time: 6.996
- command: 실시간으로 확인하여 움직임이 감지됐을 때 문이 열려 있던 비율이 50%를 넘으면, 이후 조명이 켜질 때마다 창문도 함께 열어 줘.
  devices:
  - Blind
  - LightSensor
  - Clock
  - Shade
  - MotionSensor
  - ContactSensor
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      is_door_open := false
      is_motion_ Triggered := false
      motion_trigger_count := 0
      door_open_time := 0.0
      total_light_on_time := 0.0
      light_on_time := 0.0
      previous_light_on := false
      light_on_count := 0
      if ((#MotionSensor).motionSensor_motion == 'active') {
        is_motion_Triggered = true
        motion_trigger_count = motion_trigger_count + 1
      }
      if ((#DoorLock).doorControl_door == 'open') {
        is_door_open = true
        door_open_time = door_open_time + 1.0
      }
      if ((#Light).switch_switch == 'on') {
        light_on_time = light_on_time + 1.0
        if (previous_light_on == false) {
          light_on_count = light_on_count + 1
  compare_results: []
  model_info:
    prompt_tokens: null
    generated_tokens: null
    elapsed_time: 10.196
