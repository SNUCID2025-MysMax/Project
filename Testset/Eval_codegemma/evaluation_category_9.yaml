- command: 매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘.
  devices:
  - Blind
  - Curtain
  - WeatherProvider
  - Shade
  - Clock
  - Valve
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: "0 7 * * *"
    period: -1
    code: |-
      if (((#Clock).clock_hour == 7) and ((#Clock).clock_minute == 0)) {
        if ((#Irrigator).switch_switch == 'off') {
          if ((#Window).windowControl_window == 'closed') {
            (#Irrigator).switch_on()
            (#Window).windowControl_open()
            wait until((#Irrigator).switch_switch == 'on')
            (#Blind).blindControl_close()
          }
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 2747
    generated_tokens: 138
    elapsed_time: 4.2
- command: 실시간으로 확인하여 5초마다 토양 습도 센서의 값이 20 퍼센트 이하이면 관개 장치를 켜고, 60 퍼센트 이상이면 관개 장치를 꺼 줘.
  devices:
  - Humidifier
  - SoilMoistureSensor
  - WeatherProvider
  - Clock
  - Irrigator
  - TemperatureSensor
  - LeakSensor
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0) {
        (#Irrigator).switch_on()
      } else if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 60.0) {
        (#Irrigator).switch_off()
      }
  compare_results: []
  model_info:
    prompt_tokens: 2744
    generated_tokens: 90
    elapsed_time: 2.789
- command: 실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘.
  devices:
  - Humidifier
  - SoilMoistureSensor
  - Clock
  - Dehumidifier
  - Fan
  - AirConditioner
  - TemperatureSensor
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 60000
    code: |-
      temp = (#TemperatureSensor).temperatureMeasurement_temperature
      hum = (#HumiditySensor).humidityMeasurement_humidity
      if (temp >= 28.0) {
        (#Fan).switch_on()
      }
      if (hum >= 80.0) {
        (#Dryer).switch_on()
      }
  compare_results: []
  model_info:
    prompt_tokens: 2724
    generated_tokens: 90
    elapsed_time: 2.787
- command: 실시간으로 확인하여 조명이 켜져 있을 때마다 블라인드를 닫고, 꺼져 있으면 블라인드를 열어 줘.
  devices:
  - Blind
  - Clock
  - Shade
  - Light
  - Valve
  - Relay
  - Switch
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#Light).switch_switch == 'on') {
        (#Blind).blindControl_close()
      } else {
        (#Blind).blindControl_open()
      }
  compare_results: []
  model_info:
    prompt_tokens: 2723
    generated_tokens: 57
    elapsed_time: 1.791
- command: 주말에는 5초마다 펌프가 꺼져 있으면 켜고, 켜져 있으면 꺼 주고, 선풍기 속도를 10으로 설정해 줘.
  devices:
  - Pump
  - Humidifier
  - Clock
  - Dehumidifier
  - Fan
  - AirConditioner
  - AirPurifier
  - Irrigator
  generated_code:
  - name: "Scenario1"
    cron: "0 5 * * 6"
    period: 5000
    code: |-
      if ((#Clock).clock_isHoliday == true) {
        if ((#Pump).switch_switch == 'off') {
          (#Pump).switch_on()
          (#Fan).fanControl_setSpeed(10)
        } else {
          (#Pump).switch_off()
          (#Fan).fanControl_setSpeed(10)
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 2729
    generated_tokens: 113
    elapsed_time: 3.475
- command: 실시간으로 확인하여 움직임이 감지되었을 때마다 조명을 켜고, 선풍기 속도를 10 높여 줘.
  devices:
  - Humidifier
  - Clock
  - MotionSensor
  - Fan
  - SmokeDetector
  - Light
  - TemperatureSensor
  - LightSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      current := (#Clock).clock_second
      if (current == 0) {
        if (all(#ContactSensor).contactSensor_contact == "open") {
          all(#Light).switch_on()
          all(#Fan).fanControl_setSpeed(10)
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 2721
    generated_tokens: 86
    elapsed_time: 2.631
- command: 실시간으로 확인하여 창문이 열려 있으면 블라인드를 닫고, 창문이 닫혀 있으면 커튼을 열어 줘. 또한 실시간으로 확인하여 알람의 사이렌이 울리고 있지 않다면 즉시 알람의 사이렌을 울려 줘.
  devices:
  - Blind
  - Siren
  - Curtain
  - Clock
  - Shade
  - Alarm
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      cur_window := (#Window).windowControl_window
      cur_blinds := (#Blinds).blindsControl_blinds
      cur_curtain := (#Curtain).curtainControl_curtain
      cur_alarm := (#Alarm).alarm_alarm
      if (cur_window == 'open') {
        (#Blinds).blindsControl_close()
      } else if (cur_window == 'closed') {
        (#Curtain).curtainControl_open()
      } else {
        break
      }
      if (cur_alarm == 'off') {
        (#Alarm).alarm_siren()
      } else {
        break
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      cur_window := (#Window).windowControl_window
      cur_blinds := (#Blinds).blindsControl_blinds
      cur_curtain := (#Curtain).curtainControl_curtain
      cur_alarm := (#Alarm).alarm_alarm
      if (cur_window == 'open') {
        (#Blinds).blindsControl_close()
      } else if (cur_window == 'closed') {
        (#Curtain).curtainControl_open()
      } else {
        break
      }
      if (cur_alarm == 'off') {
        (#Alarm).alarm_siren()
      } else {
        break
      }
  compare_results: []
  model_info:
    prompt_tokens: 2756
    generated_tokens: 323
    elapsed_time: 9.828
- command: 매주 금요일 오후 6시에 조명이 켜져 있으면 밝기를 30으로 낮추고, TV가 꺼져 있으면 TV를 켜 줘. 선풍기가 꺼져 있으면 선풍기도 켜 줘.
  devices:
  - Television
  - Humidifier
  - Clock
  - Fan
  - AirConditioner
  - AirPurifier
  - Light
  - LightSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      wait until(((#Clock).clock_weekday == 5) and ((#Clock).clock_hour == 18) and ((#Clock).clock_minute == 0))
      if ((#Light).switch_switch == 'on') {
        (#Light).switch_set gendicity(30)
      }
      wait until(((#TV).switch_switch == 'off'))
      (#TV).switch_on()
      wait until(((#Fan).switch_switch == 'off'))
      (#Fan).switch_on()
  compare_results: []
  model_info:
    prompt_tokens: 2745
    generated_tokens: 129
    elapsed_time: 3.96
- command: 창문이 닫혔을 때부터 5초마다 블라인드를 열었다 닫았다 반복해 줘.
  devices:
  - Blind
  - Curtain
  - Clock
  - Shade
  - ContactSensor
  - Camera
  - Window
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      closed := false
      if ((#Window).windowControl_window == 'closed') {
        closed = true
      }
      if (closed) {
        (#Blind).blindControl_close()
      } else {
        (#Blind).blindControl_open()
      }
  compare_results: []
  model_info:
    prompt_tokens: 2714
    generated_tokens: 78
    elapsed_time: 2.416
- command: 매일 아침 8시에 스피커가 꺼져 있으면 스피커를 켜고 ‘오늘 날씨입니다’라고 말해 줘. 이후 조명이 꺼져 있으면 켜고 블라인드를 열어 줘.
  devices:
  - Speaker
  - Blind
  - Curtain
  - Clock
  - WeatherProvider
  - Relay
  - Siren
  generated_code:
  - name: "Scenario1"
    cron: "0 8 * * *"
    period: -1
    code: |-
      if ((#Speaker).switch_switch == 'off') {
        (#Speaker).switch_on()
        (#Speaker).mediaPlayer_sayText('오늘 날씨입니다')
      }
      if ((#Light).switch_switch == 'off') {
        (#Light).switch_on()
        (#Blind).blindControl_open()
      }
  compare_results: []
  model_info:
    prompt_tokens: 2743
    generated_tokens: 100
    elapsed_time: 3.09
