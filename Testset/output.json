[
  {
    "command": "섹터 에이에 있는 선풍기를 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        Tags('sectorA', 'Fan').switch_off()```"
  },
  {
    "command": "섹터 비와 섹터 에이에 있는 선풍기가 모두 켜져 있으면 홀수 태그가 붙은 블라인드 중 하나를 닫아 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        sectorA_on = Tags('sectorA', 'Fan').switch_switch == 'on'\n        sectorB_on = Tags('sectorB', 'Fan').switch_switch == 'on'\n        if (sectorA_on == True) and (sectorB_on == True):\n            Tags('odd', 'Blind').blind_close()```"
  },
  {
    "command": "홀수 태그가 붙은 선풍기 중 하나라도 켜져 있으면, 하단부에 있는 모든 관개 장치를 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if Any(Tags('odd', 'Fan').switch_switch == 'on'):\n            All(Tags('lower', 'Irrigator').switch_off())```"
  },
  {
    "command": "짝수 태그가 붙은 창문이 열려 있으면 섹터 에이에 있는 선풍기를 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if Tags('even', 'Window').windowControl_window == 'open':\n            Tags('sectorA', 'Fan').switch_off()```"
  },
  {
    "command": "섹터 비에 있는 홀수 태그가 붙은 관개 장치를 모두 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        All(Tags('sectorB', 'odd', 'Irrigator').switch_off())```"
  },
  {
    "command": "상단부에 있는 짝수 태그가 붙은 창문이 열려 있으면 커튼을 닫아 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if Tags('upper', 'even', 'Window').windowControl_window == 'open':\n            Tags('Curtain').curtain_close()```"
  },
  {
    "command": "상단부에 있는 조명이 모두 꺼져 있으면, 홀수 태그가 붙은 모든 창문을 열어 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if All(Tags('upper', 'Light').switch_switch == 'off'):\n            All(Tags('odd', 'Window').windowControl_open())```"
  },
  {
    "command": "짝수 태그가 붙은 스피커 중 하나라도 켜져 있으면 섹터 비에 있는 조명을 모두 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if Any(Tags('even', 'Speaker').switch_switch == 'on'):\n            All(Tags('sectorB', 'Light').switch_off())```"
  },
  {
    "command": "벽에 있는 홀수 태그가 붙은 모든 블라인드가 열려 있으면 조명을 꺼 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        if All(Tags('wall', 'odd', 'Blind').blind_blind == 'open'):\n            Tags('Light').switch_off()```"
  },
  {
    "command": "상단부에 있거나 섹터 에이에 있는 조명 중 하나가 켜져 있으면 선풍기를 모두 켜 줘.",
    "python": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = ''\n        self.period = -1\n\n    def run(self):\n        upper_on = Any(Tags('upper', 'Light').switch_switch == 'on')\n        sectorA_on = Any(Tags('sectorA', 'Light').switch_switch == 'on')\n        if (upper_on == True) or (sectorA_on == True):\n            All(Tags('Fan').switch_on())```"
  }
]
