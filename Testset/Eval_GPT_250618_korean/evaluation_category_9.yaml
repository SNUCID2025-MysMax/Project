- command: "매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘."
  command_translated: "매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘."
  devices:
  - Blind
  - Irrigator
  - Speaker
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: "0 7 * * *"
    period: 0
    code: |
      if (((#Irrigator).switch_switch == "off") and ((#Window).windowControl_window == "closed")) {
        (#Irrigator).switch_on()
        (#Window).windowControl_open()
      }
  - name: "Scenario2"
    cron: "0 7 * * *"
    period: 100
    code: |
      triggered := false
      if (((#Irrigator).switch_switch == "on") and (triggered == false)) {
        (#Blind).blind_close()
        triggered = true
      } else if ((#Irrigator).switch_switch != "on") {
        triggered = false
        break
      }
  elapsed_time: 4.866 seconds
- command: "실시간으로 확인하여 5초마다 토양 습도 센서의 값이 20 퍼센트 이하이면 관개 장치를 켜고, 60 퍼센트 이상이면 관개 장치를 꺼 줘."
  command_translated: "실시간으로 확인하여 5초마다 토양 습도 센서의 값이 20 퍼센트 이하이면 관개 장치를 켜고, 60 퍼센트 이상이면 관개 장치를 꺼 줘."
  devices:
  - WeatherProvider
  - Clock
  - HumiditySensor
  - Irrigator
  - Speaker
  - LeakSensor
  - TemperatureSensor
  - Calculator
  - SoilMoistureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0) {
        all(#Irrigator).switch_on()
      } else if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 60.0) {
        all(#Irrigator).switch_off()
      }
      break
  elapsed_time: 3.280 seconds
- command: "실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘."
  command_translated: "실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘."
  devices:
  - WeatherProvider
  - Humidifier
  - Clock
  - HumiditySensor
  - Speaker
  - SmartPlug
  - Buttonx4
  - Refrigerator
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#TemperatureSensor).temperatureMeasurement_temperature >= 28.0) {
        all(#Fan).switch_on()
      } else {
        all(#Fan).switch_off()
      }
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) {
        all(#Humidifier).switch_on()
      } else {
        all(#Humidifier).switch_off()
      }
      break
  elapsed_time: 2.538 seconds
- command: "실시간으로 확인하여 조명이 켜져 있을 때마다 블라인드를 닫고, 꺼져 있으면 블라인드를 열어 줘."
  command_translated: "실시간으로 확인하여 조명이 켜져 있을 때마다 블라인드를 닫고, 꺼져 있으면 블라인드를 열어 줘."
  devices:
  - Blind
  - Speaker
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if (any(#SmartPlug).switch_switch == on) {
        all(#Blind).blind_close()
      } else {
        all(#Blind).blind_open()
      }
      break
  elapsed_time: 3.100 seconds
- command: "주말에는 5초마다 펌프가 꺼져 있으면 켜고, 켜져 있으면 꺼 주고, 선풍기 속도를 10으로 설정해 줘."
  command_translated: "주말에는 5초마다 펌프가 꺼져 있으면 켜고, 켜져 있으면 꺼 주고, 선풍기 속도를 10으로 설정해 줘."
  devices:
  - Fan
  - Pump
  - Speaker
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: "0 0 * * 6,0"
    period: 5000
    code: |
      if ((#Pump).switch_switch == off) {
        (#Pump).switch_on()
      } else {
        (#Pump).switch_off()
      }
      (#Fan).fanControl_setFanSpeed(10)
      break
  elapsed_time: 3.350 seconds
- command: "실시간으로 확인하여 움직임이 감지될 때마다 조명을 켜고, 선풍기 속도를 10 높여 줘."
  command_translated: "실시간으로 확인하여 움직임이 감지될 때마다 조명을 켜고, 선풍기 속도를 10 높여 줘."
  devices:
  - Speaker
  - MotionSensor
  - SmartPlug
  - Buttonx4
  - Refrigerator
  - Timer
  - Shade
  - Camera
  - Clock
  generated_code: []
  elapsed_time: 4.351 seconds
- command: "실시간으로 확인하여 창문이 열려 있으면 블라인드를 닫고, 창문이 닫혀 있으면 커튼을 열어 줘. 또한 실시간으로 확인하여 알람의 사이렌이 울리고 있지 않다면 즉시 알람의 사이렌을 울려 줘."
  command_translated: "실시간으로 확인하여 창문이 열려 있으면 블라인드를 닫고, 창문이 닫혀 있으면 커튼을 열어 줘. 또한 실시간으로 확인하여 알람의 사이렌이 울리고 있지 않다면 즉시 알람의 사이렌을 울려 줘."
  devices:
  - Speaker
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Window).windowControl_window == "open") {
        (#Shade).windowShade_close()
      } else if ((#Window).windowControl_window == "closed") {
        (#Shade).windowShade_open()
      }
      if ((#Alarm).alarm_siren() == false) {
        (#Alarm).alarm_siren()
      }
      break
  elapsed_time: 6.177 seconds
- command: "매주 금요일 오후 6시에 조명이 켜져 있으면 밝기를 30으로 낮추고, TV가 꺼져 있으면 TV를 켜 줘. 선풍기가 꺼져 있으면 선풍기도 켜 줘."
  command_translated: "매주 금요일 오후 6시에 조명이 켜져 있으면 밝기를 30으로 낮추고, TV가 꺼져 있으면 TV를 켜 줘. 선풍기가 꺼져 있으면 선풍기도 켜 줘."
  devices:
  - Blind
  - Speaker
  - AirQualityDetector
  - Television
  - Window
  - Curtain
  - Shade
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: "0 18 * * 5"
    period: -1
    code: |
      if ((#Light).switch_switch == "on") {
        (#Light).blindLevel_setBlindLevel(30)
      }
      if ((#Television).switch_switch == "off") {
        (#Television).switch_on()
      }
      if ((#Fan).switch_switch == "off") {
        (#Fan).switch_on()
      }
  elapsed_time: 3.951 seconds
- command: "창문이 닫혔을 때부터 5초마다 블라인드를 열었다 닫았다 반복해 줘."
  command_translated: "창문이 닫혔을 때부터 5초마다 블라인드를 열었다 닫았다 반복해 줘."
  devices:
  - Blind
  - Speaker
  - Valve
  - Window
  - Curtain
  - Shade
  - DoorLock
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      count := 0
      if ((#Window).windowControl_window == closed) {
        count = count + 100
        if (count >= 5000) {
          count = 0
          if ((#Blind).blind_blind == open) {
            all(#Blind).blind_close()
          } else {
            all(#Blind).blind_open()
          }
        }
      } else {
        count = 0
        break
      }
  elapsed_time: 4.247 seconds
- command: "매일 아침 8시에 스피커가 꺼져 있으면 스피커를 켜고 ‘오늘 날씨입니다’라고 말해 줘. 이후 조명이 꺼져 있으면 켜고 블라인드를 열어 줘."
  command_translated: "매일 아침 8시에 스피커가 꺼져 있으면 스피커를 켜고 ‘오늘 날씨입니다’라고 말해 줘. 이후 조명이 꺼져 있으면 켜고 블라인드를 열어 줘."
  devices:
  - Blind
  - Speaker
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: "0 8 * * *"
    period: -1
    code: |
      if ((#Speaker).switch_switch == "off") {
        (#Speaker).switch_on()
        (#Speaker).mediaPlayback_speak("오늘 날씨입니다")
      }
      if ((#Speaker).switch_switch == "on") {
        if ((#Blind).blind_blind == "closed") {
          (#Blind).blind_open()
        }
      }
  elapsed_time: 2.912 seconds
