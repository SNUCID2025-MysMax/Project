- command: "매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘."
  command_translated: "매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘."
  devices:
  - WeatherProvider
  - Dehumidifier
  - Clock
  - HumiditySensor
  - Irrigator
  - Speaker
  - AirQualityDetector
  - Window
  - Shade
  - TemperatureSensor
  - Calculator
  - SoilMoistureSensor
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * 1-5"
    period: -1
    code: |
      if (((#Window).windowControl_window == closed) and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#AirQualityDetector).temperatureMeasurement_temperature >= 30.0)) {
          (#Clock).clock_delay(5000)
          (#Window).windowControl_open()
          if ((#Fan).switch_switch == off) {
              (#Fan).switch_on()
          }
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |
      windowCloseTriggered := false
      humidifierStarted := false
      irrigatorStarted := false

      if (((#AirQualityDetector).dustSensor_dustLevel >= 50) and (windowCloseTriggered == false)) {
          triggeredDuration := 0
          wait until((#AirQualityDetector).dustSensor_dustLevel < 50)
      } else if ((#AirQualityDetector).dustSensor_dustLevel >= 50) {
          triggeredDuration = triggeredDuration + 1000
          if (triggeredDuration >= 60000) {
              (#Window).windowControl_close()
              if ((#Fan).switch_switch == on) {
                  (#Fan).switch_off()
              }
              windowCloseTriggered = true
              if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0) {
                  (#Humidifier).switch_on()
                  humidifierStarted = true
              }
              if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) and ((#Irrigator).switch_switch == off)) {
                  (#Irrigator).switch_on()
                  irrigatorStarted = true
              }
              break
          }
      } else {
          windowCloseTriggered = false
          humidifierStarted = false
          irrigatorStarted = false
          break
      }
  elapsed_time: 8.984 seconds
- command: "매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘."
  command_translated: "매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘."
  devices:
  - Alarm
  - Blind
  - Speaker
  - Window
  - Buttonx4
  - Timer
  - Shade
  - DoorLock
  - Siren
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: -1
    code: |
      if ((all(#Light).switch_switch == false) and (all(#Window #Lower #Odd).windowControl_window == "closed")) {
        all(#Blind).blind_open()
      }
  - name: "Scenario2"
    cron: "0 9 * * *"
    period: 100
    code: |
      triggered := false
      alarm_triggered := false
      light_blinking := false
      window_open_time1 := 0
      window_open_time2 := 0
      door_open_close_count := 0
      waited_5_sec := false

      if (triggered == false) {
        if (all(#Blind).blind_blind == "open") {
          triggered = true
        } else {
          break
        }
      } else {
        window_open := (any(#Window #Lower #Odd).windowControl_window == "open")
        if ((window_open == true) and (alarm_triggered == false)) {
          wait until((window_open == true))
          (#Clock).clock_delay(5000)

          if ((#Alarm).alarm_alarm) {
            all(#Alarm).alarm_siren()
          } else {
            all(#Siren).sirenMode_setSirenMode("siren")
          }
          alarm_triggered = true
        }
        if (alarm_triggered == true) {
          duration := 0
          while (duration < 10000) {
            if (any(#Window #Lower #Odd).windowControl_window == "closed") {
              light_blinking = false
              break
            }
            (#Light).switch_toggle()
            (#Clock).clock_delay(2000)
            duration = duration + 2000
          }
        }








        if (door_open_close_count == 0) {
          if ((any(#DoorLock).doorControl_door == "open")) {
            window_open_time1 = (#Clock).clock_timestamp
            door_open_close_count = 1
          }
        } else if (door_open_close_count == 1) {
          if ((any(#DoorLock).doorControl_door == "closed")) {
            door_open_close_count = 2
          }
        } else if (door_open_close_count == 2) {
          if ((any(#DoorLock).doorControl_door == "open")) {
            window_open_time2 = (#Clock).clock_timestamp
            door_open_close_count = 3
          }
        }

        blind_open_time := 0




        if (triggered == true) {
          if (blind_open_time == 0) {
            blind_open_time = (#Clock).clock_timestamp
          }
          elapsed := (#Clock).clock_timestamp - blind_open_time
          if ((door_open_close_count >= 3) and (elapsed >= 10000)) {
            open_duration1 := window_open_time2 - window_open_time1
            open_duration2 := (#Clock).clock_timestamp - window_open_time2
            if (open_duration2 > open_duration1) {
              all(#AirConditioner #Wall).airConditionerMode_setTemperature(0)
              break
            }
          }
        }
        break
      }
  elapsed_time: 21.636 seconds
- command: "에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘."
  command_translated: "에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘."
  devices:
  - HumiditySensor
  - Speaker
  - AirQualityDetector
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |
      triggered := false
      if (((#AirConditioner).switch_switch == off) and ((#Window).windowControl_window == open)) {
        if (triggered == false) {
          triggered = true
        }
        humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity
        if (humidity > 60.0) {
          all(#Shade).windowShade_close()
          all(#Light).switch_off()
        }
      } else {
        triggered = false
        break
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until((#Window).windowControl_window == closed)
      (#Clock).clock_delay(5000)
      all(#Alarm).alarm_siren()
  - name: "Scenario3"
    cron: ""
    period: 1000
    code: |
      alarmTriggered := false
      startBlink := false
      startTimestamp := 0
      if (any(#Alarm).alarm_siren() == true) {
        alarmTriggered = true
        startTimestamp = (#Clock).clock_timestamp
        startBlink = true
      }
      if (startBlink == true) {
        currentDuration = (#Clock).clock_timestamp - startTimestamp
        if (currentDuration <= 60000) {
          if ((#Window).windowControl_window == open) {
            all(#Light).switch_toggle()
          } else if ((#Window).windowControl_window == closed) {
            all(#Speaker).mediaPlayback_speak("문이 닫혔습니다")
            startBlink = false
            alarmTriggered = false
            break
          }
        } else {
          startBlink = false
          alarmTriggered = false
          break
        }
      } else {
        break
      }
  elapsed_time: 12.203 seconds
- command: "습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘."
  command_translated: "습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘."
  devices:
  - WeatherProvider
  - Blind
  - Clock
  - AirConditioner
  - HumiditySensor
  - Speaker
  - AirQualityDetector
  - Window
  - Curtain
  - Shade
  - TemperatureSensor
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)
      if ((#Window).windowControl_window == "open") {
        (#Clock).clock_delay(5000)
        (#Dehumidifier).switch_on()
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      dehumidifier_on := false
      temp := 0.0
      if ((#Dehumidifier).switch_switch == "on") {
        dehumidifier_on = true
      }
      if ((dehumidifier_on == true) and ((#AirConditioner).switch_switch == "off")) {
        temp = (#AirQualityDetector).temperatureMeasurement_temperature
        if (temp >= 30.0) {
          (#AirConditioner).switch_on()
        }
      }
      if ((#AirConditioner).switch_switch == "off") {
        dehumidifier_on = false
      }
      break
  - name: "Scenario3"
    cron: ""
    period: 100
    code: |
      curtain_open := false
      curtain_close := false
      if ((#AirConditioner).switch_switch == "on") {
        if ((#Blind).blind_blind == "open") {
          if (curtain_open == false) {
            (#Curtain).curtain_open()
            curtain_open = true
            curtain_close = false
            curtain_timer := (#Clock).clock_timestamp
          } else {
            elapsed := (#Clock).clock_timestamp - curtain_timer
            if (elapsed >= 10000) {
              if (curtain_open == true) {
                (#Curtain).curtain_close()
                curtain_open = false
                curtain_close = true
                curtain_timer = (#Clock).clock_timestamp
              } else if (curtain_close == true) {
                (#Curtain).curtain_open()
                curtain_open = true
                curtain_close = false
                curtain_timer = (#Clock).clock_timestamp
              }
            }
          }
        } else {
          curtain_open = false
          curtain_close = false
        }
      } else {
        curtain_open = false
        curtain_close = false
      }
      break
  - name: "Scenario4"
    cron: ""
    period: 100
    code: |
      alarm_active := true
      motion_detected := false
      if (((#PresenceSensor).presenceSensor_presence == true) or ((#OccupancySensor).presenceSensor_presence == true)) {
        motion_detected = true
      }
      if (motion_detected == true) {
        if (alarm_active == true) {
          (#Alarm).alarm_off()
          alarm_active = false
        }
        no_motion_start := -1
      } else {
        if (alarm_active == false) {
          if (no_motion_start == -1) {
            no_motion_start = (#Clock).clock_timestamp
          }
          elapsed_no_motion := (#Clock).clock_timestamp - no_motion_start
          if (elapsed_no_motion >= 5000) {
            (#Alarm).alarm_off()
            alarm_active = true
            no_motion_start = -1
          }
        }
      }
      break
  elapsed_time: 15.676 seconds
- command: "조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘."
  command_translated: "조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘."
  devices:
  - Blind
  - Clock
  - AirConditioner
  - Speaker
  - Window
  - Buttonx4
  - Curtain
  - Shade
  - Siren
  - SoundSensor
  - TemperatureSensor
  - Alarm
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      step := 0
      sirenStartTimestamp := 0.0
      blindToggleCount := 0
      blindOpen := false

      if ((#Speaker).mediaPlayback_playbackStatus != null) {
        if (((#Speaker).mediaPlayback_playbackStatus != "") and (step != 0)) {
          (#Speaker).mediaPlayback_speak("")
          step = 0
          blindToggleCount = 0
          break
        }
      }

      if (step == 0) {
        if (((#Light).switch_switch == "on") and ((#Window).windowControl_window == "closed") and ((#DoorLock).doorControl_door == "open")) {
          step = 1
        }
      } else if (step == 1) {
        (#Clock).clock_delay(3000)
        (#Siren).sirenMode_setSirenMode("siren")
        sirenStartTimestamp = (#Clock).clock_timestamp
        step = 2
      } else if (step == 2) {
        elapsed = (#Clock).clock_timestamp - sirenStartTimestamp
        windowOpened = false
        if ((#Window).windowControl_window == "open") {
          windowOpened = true
        }
        if ((elapsed >= 10000) and (windowOpened == false)) {
          (#Curtain).curtain_close()
          all(#Light).switch_off()
          all(#Fan).fanControl_setFanSpeed(50)
          step = 3
        }
      } else if (step == 3) {
        temp = (#TemperatureSensor).temperatureMeasurement_temperature
        presence = false
        if (((#PresenceSensor).presenceSensor_presence == true) or ((#OccupancySensor).presenceSensor_presence == true)) {
          presence = true
        }
        if (temp >= 27.0) {
          all(#AirConditioner).airConditionerMode_setAirConditionerMode("cool")
        }
        if (presence == true) {
          blindToggleCount = 0
          blindOpen = false
          step = 4
        }
      } else if (step == 4) {
        if (blindToggleCount >= 6) {
          step = 0
        } else {
          if (blindOpen == false) {
            all(#Blind).blind_open()
            blindOpen = true
          } else {
            all(#Blind).blind_close()
            blindOpen = false
          }
          blindToggleCount = blindToggleCount + 1
          (#Clock).clock_delay(1000)
        }
      }
  elapsed_time: 12.120 seconds
- command: "실시간으로 확인해서 조명이 꺼져 있고 창문이 열려 있는 상태에서 움직임 감지되면 3초 대기 후 조명을 켜고, 5초 후 블라인드를 닫아 줘. 이후 10초마다 알람을 한 번 1초간 울리되, 알람이 두 번 울린 후에는 에어컨을 ‘cool’ 모드로 전환해 줘. 단, 움직임이 감지된 이후 문이 열리면 모든 동작을 중지하고 커튼을 닫아 줘."
  command_translated: "실시간으로 확인해서 조명이 꺼져 있고 창문이 열려 있는 상태에서 움직임 감지되면 3초 대기 후 조명을 켜고, 5초 후 블라인드를 닫아 줘. 이후 10초마다 알람을 한 번 1초간 울리되, 알람이 두 번 울린 후에는 에어컨을 ‘cool’ 모드로 전환해 줘. 단, 움직임이 감지된 이후 문이 열리면 모든 동작을 중지하고 커튼을 닫아 줘."
  devices:
  - Speaker
  - MotionSensor
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Camera
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      alarmCount := 0
      airconModeSet := false

      if ((#Light).switch_switch == "off") and ((#Window).windowControl_window == "open") and ((#MotionSensor).motionSensor_motion == "active") {
        if (triggered == false) {
          triggered = true
          alarmCount = 0
          airconModeSet = false
        }

        wait until (triggered == true)
        (#Clock).clock_delay(3000)
        (#Light).switch_on()

        (#Clock).clock_delay(5000)
        (#Shade).windowShade_close()

        wait until (((triggered == true) and ((alarmCount < 2))) or ((#Window).windowControl_window == "closed"))
        if ((#Window).windowControl_window == "open") {
          (#Shade).windowShade_close()
          triggered = false
          break
        }

        (#Alarm).alarm_siren()
        (#Clock).clock_delay(1000)
        alarmCount = alarmCount + 1

        if (alarmCount >= 2 and airconModeSet == false) {
          (#AirConditioner).airConditionerMode_setAirConditionerMode("cool")
          airconModeSet = true
        }

        (#Clock).clock_delay(9000)
        break

      } else if ((#MotionSensor).motionSensor_motion != "active") or ((#Window).windowControl_window == "closed") {
        triggered = false
        alarmCount = 0
        airconModeSet = false
        break
      }
  elapsed_time: 7.722 seconds
- command: "매주 월요일 아침 7시에 조명을 20으로 설정해 줘. 이후 실시간으로 확인해서 자정까지 움직임이 감지될 때마다 블라인드를 열고, 3초 간격으로 커튼을 두 번 열었다 닫아 줘. 커튼을 조정할 때마다 창문이 열려 있으면 선풍기를 켜고, 닫혀 있으면 에어컨을 꺼 줘."
  command_translated: "매주 월요일 아침 7시에 조명을 20으로 설정해 줘. 이후 실시간으로 확인해서 자정까지 움직임이 감지될 때마다 블라인드를 열고, 3초 간격으로 커튼을 두 번 열었다 닫아 줘. 커튼을 조정할 때마다 창문이 열려 있으면 선풍기를 켜고, 닫혀 있으면 에어컨을 꺼 줘."
  devices:
  - Blind
  - Speaker
  - Window
  - Buttonx4
  - Curtain
  - Shade
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: "0 7 * * 1"
    period: -1
    code: |
      (#Light).switchLevel_setLevel(20)
  elapsed_time: 8.229 seconds
- command: "매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘."
  command_translated: "매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘."
  devices:
  - Alarm
  - Blind
  - Camera
  - Speaker
  - Window
  - Buttonx4
  - Curtain
  - Shade
  - DoorLock
  - Siren
  - Clock
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: "0 22 * * *"
    period: 0
    code: |
      triggered := false
      if (((any(#Lower #Window).windowControl_window == "open") and (any(#Even #Light).switch_switch == "on")) == true) {
        if (triggered == false) {
          (#Siren).sirenMode_setSirenMode("siren")
          triggered = true
        }
      } else {
        triggered = false
      }

      if (triggered == true) {
        wait until(true)
        (#Clock).clock_delay(5000)
        all(#Blind #Lower).blind_close()
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      doorOpenCount_odd := 0
      doorOpenTimestamp := 0
      curtainClosed := false
      alarmBlinking := false
      alarmBlinkStart := 0
      alarmBlinkDuration := 0


      if ((doorOpenTimestamp == 0) or ((#Clock).clock_timestamp - doorOpenTimestamp > 60000)) {

        doorOpenCount_odd = 0
      }
      for_door_opened = false
      if (any(#Odd #DoorLock).doorControl_door == "open") {
        if (doorOpenCount_odd % 2 == 0) {
          doorOpenCount_odd = doorOpenCount_odd + 1
          doorOpenTimestamp = (#Clock).clock_timestamp
          for_door_opened = true
        }
      } else if (any(#Odd #DoorLock).doorControl_door == "closed") {
        if ((doorOpenCount_odd % 2 == 1) and for_door_opened == true) {
          doorOpenCount_odd = doorOpenCount_odd + 1
          doorOpenTimestamp = (#Clock).clock_timestamp
        }
        for_door_opened = false
      }


      if ((doorOpenCount_odd >= 4) and (curtainClosed == false)) {
        all(#Curtain).curtain_close()
        curtainClosed = true
        alarmBlinkStart = (#Clock).clock_timestamp
        alarmBlinkDuration = doorOpenTimestamp - alarmBlinkStart
        alarmBlinking = true
      }


      if (alarmBlinking == true) {
        elapsedBlink = (#Clock).clock_timestamp - alarmBlinkStart
        if (elapsedBlink < alarmBlinkDuration) {
          all(#Alarm).alarm_strobe()
        } else {
          all(#Alarm).alarm_off()
          alarmBlinking = false

          curtainClosed = false
          doorOpenCount_odd = 0
          doorOpenTimestamp = 0
        }
      }

      break
  elapsed_time: 16.767 seconds
- command: "매일 실시간으로 검사해서 로봇청소기가 작동 중이면서 움직임이 감지될 때마다 10초 후 스피커로 “청소 중입니다”라는 음성을 재생해 줘. 또한 습도가 60%를 넘으면 홀수 태그가 붙은 공기청정기를 켜 줘. 공기청정기가 켜져 있는 동안 TV 전원을 3초마다 껐다 켰다 해 줘. 창문이 5분 연속으로 열려 있을 때마다 닫아 줘."
  command_translated: "매일 실시간으로 검사해서 로봇청소기가 작동 중이면서 움직임이 감지될 때마다 10초 후 스피커로 “청소 중입니다”라는 음성을 재생해 줘. 또한 습도가 60%를 넘으면 홀수 태그가 붙은 공기청정기를 켜 줘. 공기청정기가 켜져 있는 동안 TV 전원을 3초마다 껐다 켰다 해 줘. 창문이 5분 연속으로 열려 있을 때마다 닫아 줘."
  devices:
  - HumiditySensor
  - Speaker
  - AirQualityDetector
  - Television
  - Window
  - RobotCleaner
  - DoorLock
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if (((#RobotCleaner).switch_switch == "on") and ((#PresenceSensor).presenceSensor_presence == true)) {
        if (triggered == false) {
          triggered = true
          (#Clock).clock_delay(10000)
          (#Speaker).mediaPlayback_speak("청소 중입니다")
        }
      } else {
        triggered = false
        break
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      if (any(#AirQualityDetector #Odd).relativeHumidityMeasurement_humidity > 60.0) {
        all(#AirQualityDetector #Odd).switch_on()
      } else {
        break
      }
  - name: "Scenario3"
    cron: ""
    period: 3000
    code: |
      if (any(#AirQualityDetector #Odd).switch_switch == "on") {
        all(#Television).switch_off()
        (#Clock).clock_delay(1500)
        all(#Television).switch_on()
      } else {
        break
      }
  - name: "Scenario4"
    cron: ""
    period: 100
    code: |
      window_open_start := 0
      if (any(#Window).windowControl_window == "open") {
        if (window_open_start == 0) {
          window_open_start = (#Clock).clock_timestamp
        }
        duration = (#Clock).clock_timestamp - window_open_start
        if (duration >= 300000) {
          all(#Window #Window).windowControl_close()
          window_open_start = 0
          break
        }
      } else {
        window_open_start = 0
        break
      }
  elapsed_time: 9.064 seconds
- command: "실시간으로 확인해서 벽면 조명이 꺼져 있고 홀수 태그가 붙은 커튼이 닫힌 상태에서 문이 열리면, 5초 후 그 조명을 켜고 창문을 열어 줘. 이후 30초 동안 움직임이 감지되지 않으면 알람의 사이렌을 울려 줘. 30초가 모두 지난 뒤 에어컨이 꺼져 있고 실내 온도가 28도 이상이면 에어컨을 켜 줘. 또한 그 때 짝수 태그가 붙은 선풍기가 켜져 있으면 꺼 주고, 켜져 있지 않으면 그대로 두도록 해 줘."
  command_translated: "실시간으로 확인해서 벽면 조명이 꺼져 있고 홀수 태그가 붙은 커튼이 닫힌 상태에서 문이 열리면, 5초 후 그 조명을 켜고 창문을 열어 줘. 이후 30초 동안 움직임이 감지되지 않으면 알람의 사이렌을 울려 줘. 30초가 모두 지난 뒤 에어컨이 꺼져 있고 실내 온도가 28도 이상이면 에어컨을 켜 줘. 또한 그 때 짝수 태그가 붙은 선풍기가 켜져 있으면 꺼 주고, 켜져 있지 않으면 그대로 두도록 해 줘."
  devices:
  - Alarm
  - Blind
  - Clock
  - HumiditySensor
  - Speaker
  - Window
  - Curtain
  - Shade
  - DoorLock
  - Siren
  - TemperatureSensor
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      waited5sec := false
      waited30sec := false
      startWait30 := false
      startTime30 := 0.0

      curtainClosed := false
      lightOff := false
      doorOpenTriggered := false
      motionDetected := false
      alarmSounded := false
      acChecked := false


      curtainClosed = (#Curtain #Odd).curtain_curtain == "closed"
      lightOff = (#Wall).switch_switch == "off" or (#Wall).switch_switch != "on"







      if ((#Curtain #Odd).curtain_curtain == "closed") {
        curtainClosed = true
      } else {
        curtainClosed = false
        waited5sec = false
        waited30sec = false
        startWait30 = false
        doorOpenTriggered = false
        alarmSounded = false
        acChecked = false
        break
      }

      if ((#Wall).alarm_alarm == "off") {
        lightOff = true
      } else {
        lightOff = false
        waited5sec = false
        waited30sec = false
        startWait30 = false
        doorOpenTriggered = false
        alarmSounded = false
        acChecked = false
        break
      }

      if ((#DoorLock).doorControl_door == "open") {
        doorOpenTriggered = true
      } else {
        doorOpenTriggered = false
        waited5sec = false
        waited30sec = false
        startWait30 = false
        alarmSounded = false
        acChecked = false
        break
      }

      if ((curtainClosed == true) and (lightOff == true) and (doorOpenTriggered == true)) {
        if (waited5sec == false) {
          c := (#Clock).clock_timestamp
          startWait5 := c
          waited5sec = true
        }
        currentTime := (#Clock).clock_timestamp
        diff := currentTime - startWait5
        if (diff >= 5000) {
          (#Wall).alarm_both()
          (#Window).windowControl_open()
          waited30sec = false
          startWait30 = true
          startTime30 = currentTime
        } else {
          break
        }
      } else {
        waited5sec = false
        waited30sec = false
        startWait30 = false
        alarmSounded = false
        acChecked = false
        break
      }

      if (startWait30 == true) {
        currentTime := (#Clock).clock_timestamp
        diff30 := currentTime - startTime30

        if (diff30 >= 30000) {
          startWait30 = false


          if (alarmSounded == false) {
            if (((#PresenceSensor).presenceSensor_presence == false) or ((#OccupancySensor).presenceSensor_presence == false)) {
              all(#Alarm).alarm_siren()
              alarmSounded = true
            }
          }


          if (acChecked == false) {
            if ((#AirConditioner).airConditionerMode_targetTemperature == 0) {
              acChecked = true
            }
          }

        } else {

          if (((#PresenceSensor).presenceSensor_presence == true) or ((#OccupancySensor).presenceSensor_presence == true)) {

            break
          }
        }
      }


      if (acChecked == true) {

        if ((#Fan #Even).switch_switch == "on") {
          all(#Fan #Even).switch_off()
        }
        break
      }
  elapsed_time: 28.186 seconds
