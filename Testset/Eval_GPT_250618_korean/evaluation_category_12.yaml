- command: "실시간으로 확인하여 토양 습도 센서의 값이 30% 이하가 되면 관개 장치를 켜 줘, 또한 1초마다 체크해서 온도가 25도를 넘으면 펌프를 꺼 줘."
  command_translated: "실시간으로 확인하여 토양 습도 센서의 값이 30% 이하가 되면 관개 장치를 켜 줘, 또한 1초마다 체크해서 온도가 25도를 넘으면 펌프를 꺼 줘."
  devices:
  - WeatherProvider
  - Clock
  - HumiditySensor
  - Irrigator
  - Speaker
  - LeakSensor
  - Buttonx4
  - TemperatureSensor
  - SoilMoistureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) {
        if (triggered == false) {
          all(#Irrigator).switch_on()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) {
        all(#Irrigator).switch_off()
        break
      }
  elapsed_time: 4.211 seconds
- command: "펌프가 꺼지면 스피커를 켜고, 토양 습도 센서의 값이 20% 이하가 되면 관개 장치를 켜 줘."
  command_translated: "펌프가 꺼지면 스피커를 켜고, 토양 습도 센서의 값이 20% 이하가 되면 관개 장치를 켜 줘."
  devices:
  - WeatherProvider
  - Humidifier
  - Irrigator
  - Speaker
  - LeakSensor
  - Shade
  - Charger
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      pumpOffTriggered := false
      if ((#Irrigator).switch_switch == off) {
        if (pumpOffTriggered == false) {
          all(#Speaker).mediaPlayback_speak("펌프가 꺼졌습니다.")
          pumpOffTriggered = true
        }
      } else {
        pumpOffTriggered = false
        break
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)
      all(#Irrigator).switch_on()
  elapsed_time: 4.039 seconds
- command: "토양 습도 센서의 값이 25% 이하로 떨어진 후 10초 동안 값이 변하지 않으면 알람의 사이렌을 울려 줘. 그리고 조명은 그냥 꺼 줘."
  command_translated: "토양 습도 센서의 값이 25% 이하로 떨어진 후 10초 동안 값이 변하지 않으면 알람의 사이렌을 울려 줘. 그리고 조명은 그냥 꺼 줘."
  devices:
  - WeatherProvider
  - Speaker
  - LeakSensor
  - Shade
  - Camera
  - Siren
  - SoundSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      stableDuration := 0
      prevSoilHumidity := -1.0
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {
        currentHumidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
        if (prevSoilHumidity == currentHumidity) {
          stableDuration = stableDuration + 100
          if (stableDuration >= 10000) {
            all(#Alarm).alarm_siren()
            all(#Light).switch_off()
            break
          }
        } else {
          stableDuration = 0
          prevSoilHumidity = currentHumidity
        }
      } else {
        stableDuration = 0
        prevSoilHumidity = -1.0
      }
  elapsed_time: 4.191 seconds
- command: "실시간으로 확인하여 조명이 켜지면 펌프를 켜 줘, 토양 습도 센서의 값이 30% 이하로 떨어지면 블라인드를 닫아 줘."
  command_translated: "실시간으로 확인하여 조명이 켜지면 펌프를 켜 줘, 토양 습도 센서의 값이 30% 이하로 떨어지면 블라인드를 닫아 줘."
  devices:
  - WeatherProvider
  - Blind
  - Speaker
  - LeakSensor
  - RobotCleaner
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggeredPump := false
      if ((#Light).switch_switch == "on") {
        if (triggeredPump == false) {
          (#Pump).switch_on()
          triggeredPump = true
        }
      } else {
        triggeredPump = false
        break
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      triggeredBlind := false
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) {
        if (triggeredBlind == false) {
          all(#Blind).blind_close()
          triggeredBlind = true
        }
      } else {
        triggeredBlind = false
        break
      }
  elapsed_time: 4.419 seconds
- command: "관개 장치가 꺼지고 나서 토양 습도 센서의 값이 20% 이하로 떨어지면 사이렌과 경광등을 켜 줘. 커튼이 닫혀 있으면 열어 줘."
  command_translated: "관개 장치가 꺼지고 나서 토양 습도 센서의 값이 20% 이하로 떨어지면 사이렌과 경광등을 켜 줘. 커튼이 닫혀 있으면 열어 줘."
  devices:
  - WeatherProvider
  - Blind
  - Irrigator
  - Speaker
  - AirQualityDetector
  - LeakSensor
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      irrigator_off := false
      if ((#Irrigator).switch_switch == off) {
        irrigator_off = true
      }
      if ((irrigator_off == true) and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)) {
        (#Siren).sirenMode_setSirenMode("siren")
        (#Alarm).alarm_siren()
        if ((#Blind).blind_blind == closed) {
          (#Blind).blind_open()
        }
        break
      }
  elapsed_time: 3.250 seconds
- command: "실시간으로 확인하여 문이 열릴 때마다 조명을 켜 줘, TV가 꺼지면 스피커를 끄고 블라인드를 닫아 줘."
  command_translated: "실시간으로 확인하여 문이 열릴 때마다 조명을 켜 줘, TV가 꺼지면 스피커를 끄고 블라인드를 닫아 줘."
  devices:
  - Blind
  - Speaker
  - AirQualityDetector
  - Television
  - Window
  - SmartPlug
  - Buttonx4
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      doorOpened := false
      if ((#Window).windowControl_window == open) {
        if (doorOpened == false) {
          doorOpened = true
          all(#Light).switch_on()
        }
      } else {
        doorOpened = false
      }
      break
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      tvWasOn := false
      if ((#Television).switch_switch == on) {
        tvWasOn = true
      } else {
        if (tvWasOn == true) {
          tvWasOn = false
          all(#Speaker).switch_off()
          all(#Blind).blind_close()
        }
      }
      break
  elapsed_time: 3.934 seconds
- command: "제습기가 꺼지면 켜 줘, 조명이 꺼져 있으면 밝기를 50퍼센트로 설정해 줘."
  command_translated: "제습기가 꺼지면 켜 줘, 조명이 꺼져 있으면 밝기를 50퍼센트로 설정해 줘."
  devices:
  - Blind
  - Dishwasher
  - Speaker
  - SmartPlug
  - Buttonx4
  - Refrigerator
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      dehumidifierWasOff := false
      if ((#Dehumidifier).switch_switch == off) {
        if (dehumidifierWasOff == false) {
          (#Dehumidifier).switch_on()
          dehumidifierWasOff = true
        }
      } else {
        dehumidifierWasOff = false
      }
      if ((#Light).switch_switch == off) {
        (#Light).switchLevel_setLevel(50)
      }
      break
  elapsed_time: 2.749 seconds
- command: "창문이 열리면 블라인드를 닫고, 조명이 꺼지면 선풍기를 켜 줘."
  command_translated: "창문이 열리면 블라인드를 닫고, 조명이 꺼지면 선풍기를 켜 줘."
  devices:
  - Blind
  - Speaker
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered_blindClose := false
      triggered_fanOn := false
      if ((#Window).windowControl_window == open) {
        if (triggered_blindClose == false) {
          (#Blind).blind_close()
          triggered_blindClose = true
        }
      } else {
        triggered_blindClose = false
      }
      if ((#Light).switch_switch == off) {
        if (triggered_fanOn == false) {
          (#Fan).switch_on()
          triggered_fanOn = true
        }
      } else {
        triggered_fanOn = false
      }
      break
  elapsed_time: 4.913 seconds
- command: "실시간으로 확인하여 움직임이 감지되면 커튼을 닫고, 지금 알람의 사이렌을 울려 줘."
  command_translated: "실시간으로 확인하여 움직임이 감지되면 커튼을 닫고, 지금 알람의 사이렌을 울려 줘."
  devices:
  - Speaker
  - MotionSensor
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#MotionSensor).motionSensor_motion == active) {
        if (triggered == false) {
          (#Window).windowControl_close()
          (#Speaker).mediaPlayback_speak("알람 사이렌을 울립니다.")
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.740 seconds
- command: "창문이 열리면 10초 후 커튼을 열어 줘. 창문과 상관없이, 5초마다 조명을 켰다 꺼 줘."
  command_translated: "창문이 열리면 10초 후 커튼을 열어 줘. 창문과 상관없이, 5초마다 조명을 켰다 꺼 줘."
  devices:
  - Blind
  - Speaker
  - Window
  - Buttonx4
  - Timer
  - Curtain
  - Shade
  - Clock
  - Calculator
  generated_code:
  - name: "OpenCurtainAfterWindowOpened"
    cron: ""
    period: 100
    code: |
      windowOpened := false
      timerAdded := false
      if ((#Window).windowControl_window == open) {
        if (windowOpened == false) {
          windowOpened = true
          if (timerAdded == false) {
            (#Timer).timer_add("openCurtainDelay", 10)
            timerAdded = true
          }
          (#Timer).timer_set("openCurtainDelay", 10)
          (#Timer).timer_start("openCurtainDelay")
        }
        if ((#Timer).timer_isSet("openCurtainDelay") == false) {
          (#Curtain).curtain_open()
          windowOpened = false
          timerAdded = false
          break
        }
      } else {
        windowOpened = false
        timerAdded = false
      }
  - name: "ToggleLightEvery5Seconds"
    cron: ""
    period: 100
    code: |
      toggle := false
      elapsed := 0
      if (elapsed == 0) {
        startTime := (#Clock).clock_timestamp
      }
      currentTime := (#Clock).clock_timestamp
      elapsed = currentTime - startTime
      if (elapsed >= 5000) {
        if (toggle == false) {
          all(#Light).switch_on()
          toggle = true
        } else {
          all(#Light).switch_off()
          toggle = false
        }
        startTime = currentTime
      }
      break
  elapsed_time: 6.884 seconds
