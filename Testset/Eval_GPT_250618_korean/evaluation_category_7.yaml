- command: "실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘."
  command_translated: "실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘."
  devices:
  - WeatherProvider
  - Irrigator
  - Speaker
  - SmartPlug
  - LeakSensor
  - Buttonx4
  - Timer
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {
        if (triggered == false) {
          all(#Irrigator).switch_on()
          (#Speaker).mediaPlayback_speak("급수 시작")
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 3.312 seconds
- command: "1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘."
  command_translated: "1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘."
  devices:
  - Fan
  - Clock
  - Speaker
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - TemperatureSensor
  - Calculator
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      triggered := false
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {
        if (triggered == false) {
          all(#Fan).switch_on()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.603 seconds
- command: "3초마다 일조량을 확인해서 200룩스 이하로 떨어지면 조명을 켜 줘."
  command_translated: "3초마다 일조량을 확인해서 200룩스 이하로 떨어지면 조명을 켜 줘."
  devices:
  - Light
  - Blind
  - Speaker
  - Window
  - Buttonx4
  - Timer
  - Shade
  - LightSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |
      if ((#LightSensor).lightLevel_light <= 200.0) {
        all(#Light).switch_on()
      }
      break
  elapsed_time: 1.823 seconds
- command: "문이 열릴 때마다 경광등과 조명을 켜 줘. 실시간으로 확인해서 상태를 계속 검사해서 반응해 줘."
  command_translated: "문이 열릴 때마다 경광등과 조명을 켜 줘. 실시간으로 확인해서 상태를 계속 검사해서 반응해 줘."
  devices:
  - Blind
  - Speaker
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      previous_opened := false
      opened = ((#Window).windowControl_window == open)
      if ((opened == true) and (previous_opened == false)) {
        all(#Alarm).alarm_siren()
        all(#Light).switch_on()
        previous_opened = true
      } else if (opened == false) {
        previous_opened = false
      }
      break
  elapsed_time: 3.113 seconds
- command: "현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자."
  command_translated: "현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자."
  devices:
  - Speaker
  - MotionSensor
  - SmartPlug
  - Window
  - LeakSensor
  - Buttonx4
  - Refrigerator
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 60000
    code: |
      rainDetected := false
      if ((#LeakSensor).leakSensor_leakage == detected) {
        if (rainDetected == false) {
          all(#Irrigator).switch_off()
          (#Speaker).mediaPlayback_speak("비가 감지되었습니다")
          rainDetected = true
        }
      } else {
        rainDetected = false
        break
      }
  elapsed_time: 3.603 seconds
- command: "실시간으로 확인해서 거실 창문이 열릴 때마다 블라인드를 닫아 줘."
  command_translated: "실시간으로 확인해서 거실 창문이 열릴 때마다 블라인드를 닫아 줘."
  devices:
  - Blind
  - Speaker
  - Window
  - Timer
  - RobotCleaner
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Window).windowControl_window == open) {
        if (triggered == false) {
          (#Blind).blind_close()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 3.386 seconds
- command: "조명이 켜질 때마다 커튼을 동시에 열어 줘. 실시간으로 조명을 체크해야 해."
  command_translated: "조명이 켜질 때마다 커튼을 동시에 열어 줘. 실시간으로 조명을 체크해야 해."
  devices:
  - Blind
  - Speaker
  - SmartPlug
  - Window
  - Buttonx4
  - Refrigerator
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#Light).switch_switch == on) {
        if (triggered == false) {
          all(#Curtain).blind_open()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.906 seconds
- command: "2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘."
  command_translated: "2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘."
  devices:
  - Speaker
  - AirQualityDetector
  - SmartPlug
  - Television
  - Buttonx4
  - Refrigerator
  - Timer
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |
      triggered := false
      if ((#Television).switch_switch == on) {
        if (triggered == false) {
          (#Speaker).switch_on()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 2.822 seconds
- command: "현관 문이 열릴 때마다 즉시 알람의 경광등을 켜 줘. 확인은 실시간으로 하구."
  command_translated: "현관 문이 열릴 때마다 즉시 알람의 경광등을 켜 줘. 확인은 실시간으로 하구."
  devices:
  - Light
  - Blind
  - Speaker
  - LeakSensor
  - Timer
  - Shade
  - Camera
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      triggered := false
      if ((#DoorLock).doorControl_door == open) {
        if (triggered == false) {
          (#Alarm).alarm_strobe()
          triggered = true
        }
      } else {
        triggered = false
        break
      }
  elapsed_time: 3.209 seconds
- command: "1초마다 공기청정기 상태를 확인해서 꺼지면 자동 모드로 다시 켜 줘."
  command_translated: "1초마다 공기청정기 상태를 확인해서 꺼지면 자동 모드로 다시 켜 줘."
  devices:
  - Blind
  - Speaker
  - AirQualityDetector
  - Window
  - Buttonx4
  - Timer
  - RobotCleaner
  - AirPurifier
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      triggered := false
      if ((#AirPurifier).switch_switch == on) {
        triggered = false
      } else {
        if (triggered == false) {
          (#AirPurifier).switch_on()
          (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode("auto")
          triggered = true
        }
      }
      break
  elapsed_time: 7.989 seconds
