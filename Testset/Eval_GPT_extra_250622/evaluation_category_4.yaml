- command: "창문이 열리면 알람의 사이렌을 울려 줘."
  command_translated: "Sound the alarm's siren when the window opens."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - DoorLock
  - Siren
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Window).windowControl_window == "open")
      (#Alarm).alarm_siren()
  elapsed_time: 1.335 seconds
- command: "토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘."
  command_translated: "Turn on irrigation when soil moisture is above and below 20%."
  devices:
  - SoilMoistureSensor
  - Clock
  - Humidifier
  - Irrigator
  - Pump
  - WeatherProvider
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      soilMoisture = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
      if ((soilMoisture > 20.0) or (soilMoisture < 20.0)) {
        all(#Irrigator).switch_on()
      }
  elapsed_time: 1.962 seconds
- command: "움직임이 감지되면 최대 3번까지 조명을 켜 줘."
  command_translated: "Turn on the light up to 3 times when motion is detected."
  devices:
  - Button
  - Buttonx4
  - Clock
  - MotionSensor
  - FallDetector
  - Light
  - SmokeDetector
  - Siren
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      count := 0
      motion = (#MotionSensor).motionSensor_motion
      if ((motion == "active") and (count < 3)) {
        (#Light).switch_on()
        count = count + 1
        wait until((#MotionSensor).motionSensor_motion == "inactive")
      } else if (count >= 3) {
        break
      }
  elapsed_time: 2.018 seconds
- command: "온도가 35도 이상이 되면 에어컨을 켜 줘."
  command_translated: "Turn on the air conditioner when the temperature is above 35 degrees."
  devices:
  - Calculator
  - Clock
  - AirPurifier
  - AirConditioner
  - Fan
  - RobotCleaner
  - WeatherProvider
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      temp = (#TemperatureSensor).temperatureMeasurement_temperature
      if (temp > 35.0) {
        (#AirConditioner).switch_on()
      }
  elapsed_time: 1.826 seconds
- command: "습도가 80% 이상이 되면 블라인드를 내려 줘."
  command_translated: "Lower the blinds when the humidity is above 80%."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Blind
  - Clock
  - Humidifier
  - Shade
  - HumiditySensor
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity
      if (humidity > 80.0) {
        (#Blind).blind_close()
      }
  elapsed_time: 1.568 seconds
- command: "블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘."
  command_translated: "When the blinds are closed, say 'Blinds are closed'."
  devices:
  - GasValve
  - Blind
  - Clock
  - Shade
  - DoorLock
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Blind).blind_blind == "closed")
      (#Speaker).mediaPlayback_speak("Blinds are closed")
  elapsed_time: 1.564 seconds
- command: "TV가 꺼지면 스피커를 꺼 줘."
  command_translated: "Turn off the speakers when the TV is turned off."
  devices:
  - GasValve
  - AirQualityDetector
  - Blind
  - SoundSensor
  - Clock
  - Timer
  - Television
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).switch_switch == "off") {
        (#Speaker).switch_off()
      }
  elapsed_time: 1.545 seconds
- command: "커튼이 3번 열렸다 닫히면 조명을 꺼 줘."
  command_translated: "Turn off the light when the curtain opens and closes 3 times."
  devices:
  - Blind
  - Clock
  - Shade
  - Valve
  - Light
  - DoorLock
  - Siren
  - Curtain
  - Pump
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      cnt := 0

      curtainState = (#Curtain).curtain_curtain
      if ((curtainState == "open") or (curtainState == "opening")) {
        cnt = cnt + 1
        wait until((#Curtain).curtain_curtain == "closed")
      }
      if (cnt >= 3) {
        (#Light).switch_off()
        break
      }
  elapsed_time: 2.172 seconds
- command: "제습기가 꺼지면 다시 켜 줘."
  command_translated: "Turn the dehumidifier back on when it turns off."
  devices:
  - GasValve
  - Refrigerator
  - Clock
  - AirPurifier
  - Humidifier
  - Irrigator
  - Valve
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      dehumidifier_state := "off"

      current_state = (#Dehumidifier).switch_switch
      if ((dehumidifier_state == "off") and (current_state == "off")) {

      }
      else if ((dehumidifier_state == "on") and (current_state == "off")) {
        (#Dehumidifier).switch_on()
      }
      dehumidifier_state = current_state
  elapsed_time: 1.903 seconds
- command: "재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘."
  command_translated: "When the occupancy sensor no longer detects it, say 'Door is open'."
  devices:
  - PresenceSensor
  - SoundSensor
  - ContactSensor
  - Clock
  - MotionSensor
  - LeakSensor
  - OccupancySensor
  - TemperatureSensor
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == "not_present")
      (#Speaker).mediaPlayback_speak("Door is open")
  elapsed_time: 1.498 seconds
