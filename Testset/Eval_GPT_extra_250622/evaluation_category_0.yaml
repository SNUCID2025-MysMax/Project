- command: "사이렌을 울려줘."
  command_translated: "Sound the siren."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.244 seconds
- command: "사이렌을 울려줘."
  command_translated: "Sound the siren."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.346 seconds
- command: "경광등을 켜 줘."
  command_translated: "Turn on the strobe."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Relay
  - Timer
  - Light
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_strobe()
  elapsed_time: 1.498 seconds
- command: "경광등을 켜 줘."
  command_translated: "Turn on the strobe."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Relay
  - Timer
  - Light
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_strobe()
  elapsed_time: 1.874 seconds
- command: "사이렌과 경광등을 동시에 켜 줘"
  command_translated: "Turn on the siren and the strobe at the same time"
  devices:
  - Blind
  - Clock
  - Alarm
  - Relay
  - Timer
  - Valve
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_both()
  elapsed_time: 1.312 seconds
- command: "사이렌과 경광등을 동시에 켜 줘"
  command_translated: "Turn on the siren and the strobe at the same time"
  devices:
  - Blind
  - Clock
  - Alarm
  - Relay
  - Timer
  - Valve
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_both()
  elapsed_time: 1.540 seconds
- command: "사이렌과 경광등을 둘 다 꺼 줘"
  command_translated: "Turn off both the siren and the strobe"
  devices:
  - GasValve
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - Valve
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_off()
  elapsed_time: 1.565 seconds
- command: "사이렌과 경광등을 둘 다 꺼 줘"
  command_translated: "Turn off both the siren and the strobe"
  devices:
  - GasValve
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - Valve
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_off()
  elapsed_time: 1.490 seconds
- command: "재실 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the occupancy sensor is detected."
  devices:
  - PresenceSensor
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - OccupancySensor
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#OccupancySensor).presenceSensor_presence == present) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.802 seconds
- command: "재실 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the occupancy sensor is detected."
  devices:
  - PresenceSensor
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - OccupancySensor
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#OccupancySensor).presenceSensor_presence == present) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.870 seconds
- command: "에어컨의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner is powered on."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Alarm
  - Relay
  - Fan
  - Window
  - Siren
  - AirConditioner
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirConditioner).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.559 seconds
- command: "에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner is in cooling mode."
  devices:
  - Recorder
  - Refrigerator
  - Clock
  - AirPurifier
  - Alarm
  - Fan
  - Siren
  - AirConditioner
  - Dehumidifier
  - TemperatureSensor
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      mode = (#AirConditioner).airConditionerMode_airConditionerMode
      if (mode == "cool") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.583 seconds
- command: "에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air conditioner's target temperature is 30 degrees."
  devices:
  - Recorder
  - AirQualityDetector
  - Clock
  - Alarm
  - AirPurifier
  - AirConditioner
  - Fan
  - Siren
  - WeatherProvider
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      targetTemp = (#AirConditioner).airConditionerMode_targetTemperature
      if (targetTemp == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.950 seconds
- command: "에어컨이 지원하는 모드를 스피커로 출력해줘"
  command_translated: "Speaker out the modes supported by the air conditioner"
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - AirPurifier
  - Fan
  - AirConditioner
  - Dehumidifier
  - TemperatureSensor
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      modes = (#AirConditioner).airConditionerMode_supportedAcModes
      (#Speaker).mediaPlayback_speak(modes)
  elapsed_time: 1.578 seconds
- command: "에어컨을 꺼줘."
  command_translated: "Turn off the air conditioner."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Humidifier
  - Fan
  - RobotCleaner
  - AirConditioner
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_off()
  elapsed_time: 2.038 seconds
- command: "에어컨을 켜줘."
  command_translated: "Turn on the air conditioner."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Humidifier
  - Fan
  - RobotCleaner
  - AirConditioner
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_on()
  elapsed_time: 1.438 seconds
- command: "에어컨의 전원을 토글해줘."
  command_translated: "Toggle the power of the air conditioner."
  devices:
  - Clock
  - AirPurifier
  - Relay
  - SmartPlug
  - Fan
  - RobotCleaner
  - AirConditioner
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).switch_toggle()
  elapsed_time: 1.725 seconds
- command: "에어컨을 자동 모드로 설정해줘."
  command_translated: "Set the air conditioner to auto mode."
  devices:
  - Recorder
  - AirQualityDetector
  - Clock
  - AirPurifier
  - Fan
  - RobotCleaner
  - AirConditioner
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).airConditionerMode_setAirConditionerMode("auto")
  elapsed_time: 1.456 seconds
- command: "에어컨의 목표 온도를 18도로 설정해줘."
  command_translated: "Set the target temperature for the air conditioner to 18 degrees."
  devices:
  - AirQualityDetector
  - Clock
  - AirPurifier
  - AirConditioner
  - Fan
  - RobotCleaner
  - WeatherProvider
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirConditioner).airConditionerMode_setTemperature(18.0)
  elapsed_time: 1.530 seconds
- command: "공기청정기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air purifier is powered on."
  devices:
  - AirQualityDetector
  - Clock
  - AirPurifier
  - Alarm
  - Humidifier
  - Relay
  - SmartPlug
  - Fan
  - Siren
  - AirConditioner
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirPurifier).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.791 seconds
- command: "공기청정기가 수면 모드면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the air purifier is in sleep mode."
  devices:
  - AirQualityDetector
  - SoundSensor
  - Clock
  - AirPurifier
  - Alarm
  - Humidifier
  - Fan
  - Siren
  - AirConditioner
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      mode = (#AirPurifier).airPurifierFanMode_airPurifierFanMode
      if (mode == "sleep") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.834 seconds
- command: "공기청정기가 지원하는 모드를 스피커로 출력해줘"
  command_translated: "Speaker out the modes the air purifier supports"
  devices:
  - Recorder
  - AirQualityDetector
  - SoundSensor
  - Clock
  - AirPurifier
  - Humidifier
  - Fan
  - AirConditioner
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      modes = (#AirPurifier).airPurifierFanMode_supportedAirPurifierFanModes
      (#Speaker).mediaPlayback_speak(modes)
  elapsed_time: 1.766 seconds
- command: "공기청정기를 꺼줘."
  command_translated: "Turn off the air purifier."
  devices:
  - GasValve
  - AirQualityDetector
  - Clock
  - AirPurifier
  - Humidifier
  - Fan
  - Pump
  - AirConditioner
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_off()
  elapsed_time: 1.436 seconds
- command: "공기청정기를 켜줘."
  command_translated: "Turn on the air purifier."
  devices:
  - AirQualityDetector
  - Clock
  - AirPurifier
  - Humidifier
  - SmokeDetector
  - Fan
  - WeatherProvider
  - AirConditioner
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_on()
  elapsed_time: 1.426 seconds
- command: "공기청정기의 전원을 토글해줘."
  command_translated: "Toggle the air purifier's power."
  devices:
  - AirQualityDetector
  - Clock
  - AirPurifier
  - Humidifier
  - Relay
  - SmartPlug
  - Fan
  - AirConditioner
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).switch_toggle()
  elapsed_time: 1.470 seconds
- command: "공기청정기의 모드를 자동으로 설정해줘."
  command_translated: "Set the air purifier's mode to automatic."
  devices:
  - AirQualityDetector
  - Clock
  - AirPurifier
  - Humidifier
  - Irrigator
  - Fan
  - RobotCleaner
  - AirConditioner
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode("auto")
  elapsed_time: 1.518 seconds
- command: "공기질 측정기의 측정 온도가 20도이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren If the temperature measured by the air quality meter is 20 degrees."
  devices:
  - AirQualityDetector
  - GasMeter
  - Clock
  - Alarm
  - AirPurifier
  - HumiditySensor
  - Siren
  - WeatherProvider
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      temp = (#AirQualityDetector).temperatureMeasurement_temperature
      if (temp == 20.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.559 seconds
- command: "이산화탄소 농도가 800ppm 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the carbon dioxide concentration is above 800 ppm."
  devices:
  - AirQualityDetector
  - SoundSensor
  - Clock
  - Alarm
  - AirPurifier
  - LeakSensor
  - SmokeDetector
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      co2 = (#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide
      if (co2 > 800.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.654 seconds
- command: "공기질 측정기의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the relative humidity on the air quality meter is above 70 percent."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - Alarm
  - Humidifier
  - AirPurifier
  - HumiditySensor
  - Siren
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirQualityDetector).relativeHumidityMeasurement_humidity > 70.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.749 seconds
- command: "실내 황사 농도가 150마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the indoor yellow dust concentration is 150 micrograms or more."
  devices:
  - AirQualityDetector
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - SmokeDetector
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirQualityDetector).dustSensor_dustLevel >= 150) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.990 seconds
- command: "실내 미세먼지 농도가 35마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if indoor particulate matter concentration is 35 micrograms or higher."
  devices:
  - AirQualityDetector
  - Calculator
  - SoundSensor
  - Clock
  - Alarm
  - HumiditySensor
  - Window
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      pm25 = (#AirQualityDetector).dustSensor_fineDustLevel
      if (pm25 >= 35) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.734 seconds
- command: "실내 초미세먼지 농도가 15마이크로그램 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the indoor fine particulate matter concentration is 15 micrograms or more."
  devices:
  - AirQualityDetector
  - SoundSensor
  - Clock
  - Alarm
  - AirPurifier
  - HumiditySensor
  - Siren
  - WeatherProvider
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#AirQualityDetector).dustSensor_fineDustLevel >= 15) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.536 seconds
- command: "총 휘발성 유기 화합물 농도가 0.5ppm 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the total volatile organic compound concentration is greater than 0.5 ppm."
  devices:
  - AirQualityDetector
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - Valve
  - SmokeDetector
  - Siren
  - Pump
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      tvoc = (#AirQualityDetector).tvocMeasurement_tvocLevel
      if (tvoc > 0.5) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.606 seconds
- command: "알람이 경광등 모드이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the alarm is in strobe mode."
  devices:
  - SoundSensor
  - Blind
  - ContactSensor
  - Alarm
  - Clock
  - Timer
  - FallDetector
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).alarm_alarm == "strobe") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.437 seconds
- command: "알람의 볼륨이 높음이면 알람의 사이렌을 울려줘."
  command_translated: "If the volume of the alarm is high, sound the alarm's siren."
  devices:
  - Recorder
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - LeakSensor
  - Timer
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).alarm_alarmVolume == "high") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.967 seconds
- command: "알람 배터리 상태가 20퍼센트 이하이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the alarm battery is below 20 percent."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - Timer
  - Siren
  - Charger
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Alarm).battery_battery < 20) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.580 seconds
- command: "알람의 사이렌과 경광등을 모두 켜줘."
  command_translated: "Turn on both the alarm's siren and strobe."
  devices:
  - Blind
  - Clock
  - Alarm
  - Relay
  - Timer
  - FallDetector
  - SmokeDetector
  - Valve
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_both()
  elapsed_time: 1.469 seconds
- command: "알람을 꺼줘."
  command_translated: "Turn off the alarm."
  devices:
  - GasValve
  - Blind
  - ContactSensor
  - Alarm
  - MotionSensor
  - Clock
  - Timer
  - Siren
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_off()
  elapsed_time: 1.267 seconds
- command: "알람의 볼륨을 낮음으로 설정해줘."
  command_translated: "Set the volume of the alarm to low."
  devices:
  - GasMeter
  - Blind
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - Siren
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_setAlarmVolume("low")
  elapsed_time: 1.768 seconds
- command: "알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren."
  devices:
  - Recorder
  - Blind
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.921 seconds
- command: "알람의 경광등을 켜줘."
  command_translated: "Turn on the alarm's light."
  devices:
  - Blind
  - ContactSensor
  - Alarm
  - Relay
  - Clock
  - Timer
  - FallDetector
  - Light
  - Siren
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Alarm).alarm_strobe()
  elapsed_time: 1.501 seconds
- command: "블라인드가 50 퍼센트 이상 열려있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the blinds are more than 50 percent open."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - FallDetector
  - DoorLock
  - Siren
  - Curtain
  - Pump
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      blindLevel = (#Blind).blindLevel_blindLevel
      if (blindLevel > 50) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.647 seconds
- command: "블라인드가 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the blinds are open."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - FallDetector
  - DoorLock
  - Siren
  - Curtain
  - Pump
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Blind).blind_blind == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.531 seconds
- command: "블라인드를 70 퍼센트로 설정해줘."
  command_translated: "Set the blinds to 70 percent."
  devices:
  - Blind
  - Buttonx4
  - Clock
  - Shade
  - Humidifier
  - FallDetector
  - Light
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blindLevel_setBlindLevel(70)
  elapsed_time: 1.455 seconds
- command: "블라인드를 닫아줘."
  command_translated: "Close the blinds."
  devices:
  - Blind
  - Buttonx4
  - Clock
  - Shade
  - Valve
  - Pump
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_close()
  elapsed_time: 1.257 seconds
- command: "블라인드를 열어줘."
  command_translated: "Open the blinds."
  devices:
  - Blind
  - Buttonx4
  - Clock
  - Shade
  - Humidifier
  - Valve
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_open()
  elapsed_time: 1.446 seconds
- command: "블라인드 움직임을 멈춰줘."
  command_translated: "Stop blind movement."
  devices:
  - Blind
  - ContactSensor
  - Clock
  - Relay
  - MotionSensor
  - Shade
  - FallDetector
  - Timer
  - Curtain
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Blind).blind_pause()
  elapsed_time: 1.346 seconds
- command: "버튼이 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the button is pressed."
  devices:
  - Button
  - SoundSensor
  - Buttonx4
  - ContactSensor
  - Alarm
  - MotionSensor
  - Clock
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      buttonState = (#Button).button_button
      if (buttonState == pushed) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.468 seconds
- command: "버튼의 개수가 4개 이상이면 알람의 사이렌을 울려줘."
  command_translated: "If there are more than four buttons, sound the alarm's siren."
  devices:
  - Button
  - SoundSensor
  - Buttonx4
  - Blind
  - ContactSensor
  - Alarm
  - Clock
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      numButtons = (#Button).button_numberOfButtons
      if (numButtons > 4) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.561 seconds
- command: "버튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the button's supported states via the speaker."
  devices:
  - Recorder
  - Button
  - SoundSensor
  - Buttonx4
  - ContactSensor
  - Clock
  - Valve
  - Pump
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      text = (#Button).button_supportedButtonValues
      (#Speaker).mediaPlayback_speak(text)
  elapsed_time: 1.506 seconds
- command: "버튼1이 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if button 1 is pressed."
  devices:
  - Button
  - SoundSensor
  - Buttonx4
  - ContactSensor
  - Alarm
  - MotionSensor
  - Clock
  - Timer
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Buttonx4).buttonx4_button1 == "pushed") {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 1.496 seconds
- command: "버튼2가 눌린 상태면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if button 2 is pressed."
  devices:
  - Button
  - SoundSensor
  - Buttonx4
  - Clock
  - Alarm
  - MotionSensor
  - Timer
  - FallDetector
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Buttonx4).buttonx4_button2 == pushed) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.353 seconds
- command: "버튼3이 두 번 눌렸으면 알람의 사이렌을 울려줘."
  command_translated: "if button 3 is pressed twice, sound the alarm's siren."
  devices:
  - Recorder
  - Button
  - SoundSensor
  - Buttonx4
  - Clock
  - Alarm
  - Relay
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Buttonx4).buttonx4_button3 == "pushed_2x") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.543 seconds
- command: "버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘."
  command_translated: "if button 4 is swiped up, sound the alarm's siren."
  devices:
  - Button
  - SoundSensor
  - Buttonx4
  - ContactSensor
  - Alarm
  - MotionSensor
  - Clock
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Buttonx4).buttonx4_button4 == "swipe_up") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.701 seconds
- command: "버튼 개수가 4개면 알람의 사이렌을 울려줘."
  command_translated: "If the number of buttons is 4, sound the alarm's siren."
  devices:
  - Button
  - SoundSensor
  - Buttonx4
  - Blind
  - ContactSensor
  - Alarm
  - MotionSensor
  - Clock
  - Timer
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      numButtons = (#Buttonx4).buttonx4_numberOfButtons
      if (numButtons == 4) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.693 seconds
- command: "4개짜리 버튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the button x4 via the speaker."
  devices:
  - Recorder
  - Button
  - SoundSensor
  - Buttonx4
  - ContactSensor
  - Clock
  - Timer
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      supportedStates = (#Buttonx4).buttonx4_supportedButtonValues
      message = supportedStates
      (#Speaker).mediaPlayback_speak(message)
  elapsed_time: 1.707 seconds
- command: "5와 3을 더해줘."
  command_translated: "Add 5 and 3."
  devices:
  - Calculator
  - Buttonx4
  - Clock
  - Alarm
  - Relay
  - Valve
  - Siren
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_add(5, 3)
  elapsed_time: 1.287 seconds
- command: "10을 2로 나눠줘."
  command_translated: "Divide 10 by 2."
  devices:
  - Calculator
  - Buttonx4
  - Clock
  - Relay
  - Shade
  - Valve
  - Fan
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_div(10, 2)
  elapsed_time: 1.264 seconds
- command: "10을 3으로 나눈 나머지를 구해."
  command_translated: "Find the remainder of 10 divided by 3."
  devices:
  - Calculator
  - Buttonx4
  - Clock
  - Relay
  - Shade
  - Valve
  - FallDetector
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_mod(10, 3)
  elapsed_time: 1.254 seconds
- command: "7과 8을 곱해줘."
  command_translated: "Multiply 7 and 8."
  devices:
  - Calculator
  - Clock
  - Relay
  - Humidifier
  - Valve
  - Fan
  - Siren
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = (#Calculator).calculator_mul(7, 8)
  elapsed_time: 1.329 seconds
- command: "15에서 4를 빼줘."
  command_translated: "Subtract 4 from 15."
  devices:
  - Button
  - Calculator
  - Buttonx4
  - Clock
  - Timer
  - Valve
  - Curtain
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      result = 15
      result = result - 4
  elapsed_time: 1.357 seconds
- command: "카메라의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the camera is powered on."
  devices:
  - Recorder
  - Clock
  - Alarm
  - Relay
  - MotionSensor
  - Timer
  - SmartPlug
  - Siren
  - Charger
  - Camera
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Camera).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.603 seconds
- command: "가장 최근에 찍은 사진을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘."
  command_translated: "Send an email with the most recent photo as an attachment to 'test@example.com' with the subject line \"Photo\" and the content \"This is a photo\"."
  devices:
  - Clock
  - ContactSensor
  - DoorLock
  - EmailProvider
  - Camera
  - Window
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      img = (#Camera).camera_take()
      (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "Photo", "This is a photo", img)
  elapsed_time: 1.746 seconds
- command: "가장 최근에 찍은 동영상을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘"
  command_translated: "Send an email with the most recent video as an attachment to 'test@example.com' with the subject line \"Video\" and the content \"This is a video."
  devices:
  - Recorder
  - Clock
  - DoorLock
  - EmailProvider
  - Camera
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      video = (#Camera).camera_video
      (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "Video", "This is a video.", video)
  elapsed_time: 1.540 seconds
- command: "카메라를 꺼줘."
  command_translated: "Turn off the camera."
  devices:
  - Recorder
  - GasValve
  - Blind
  - Clock
  - MotionSensor
  - Timer
  - Camera
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_off()
  elapsed_time: 1.195 seconds
- command: "카메라를 켜줘."
  command_translated: "Turn on the camera."
  devices:
  - Recorder
  - Blind
  - Buttonx4
  - Clock
  - Relay
  - Irrigator
  - Timer
  - Valve
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_on()
  elapsed_time: 1.180 seconds
- command: "카메라의 전원을 토글해줘."
  command_translated: "Toggle the camera's power."
  devices:
  - Button
  - Blind
  - Buttonx4
  - Clock
  - Relay
  - SmartPlug
  - Charger
  - Camera
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).switch_toggle()
  elapsed_time: 1.309 seconds
- command: "카메라로 사진을 찍어줘."
  command_translated: "Take a photo with the camera."
  devices:
  - Recorder
  - Blind
  - ContactSensor
  - Clock
  - Timer
  - FallDetector
  - Charger
  - Camera
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).camera_take()
  elapsed_time: 1.260 seconds
- command: "카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘."
  command_translated: "Take a time-lapse video with the camera at speed 2 for 10 seconds."
  devices:
  - Recorder
  - Buttonx4
  - Clock
  - Timer
  - Fan
  - Charger
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Camera).camera_takeTimelapse(10, 2)
  elapsed_time: 1.502 seconds
- command: "충전기의 전압이 230볼트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the charger's voltage is above 230 volts."
  devices:
  - SoundSensor
  - ContactSensor
  - Alarm
  - Relay
  - LeakSensor
  - Clock
  - SmartPlug
  - Siren
  - Charger
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      voltage = (#Charger).voltageMeasurement_voltage
      if (voltage > 230.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.635 seconds
- command: "충전기의 상태가 충전 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the charger's status is charging."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - TemperatureSensor
  - Relay
  - Timer
  - FallDetector
  - Siren
  - Charger
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      chargingState = (#Charger).chargingState_chargingState
      if (chargingState == "charging") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.802 seconds
- command: "충전기의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the charger is drawing more than 10 amps."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - LeakSensor
  - Timer
  - Siren
  - Pump
  - Charger
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      current = (#Charger).currentMeasurement_current
      if (current > 10.0) {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
  elapsed_time: 2.036 seconds
- command: "충전기가 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Annonce the status supported by the charger via the speaker."
  devices:
  - Recorder
  - SoundSensor
  - ContactSensor
  - TemperatureSensor
  - Relay
  - Clock
  - Pump
  - Charger
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      status = (#Charger).chargingState_supportedChargingStates
      text = "The charger supports the following states: "
      (#Speaker).mediaPlayback_speak(text)
      (#Speaker).mediaPlayback_speak(status)
  elapsed_time: 1.786 seconds
- command: "오늘 날짜가 2025년 5월 12일이면 알람의 사이렌을 울려줘."
  command_translated: "If today's date is May 12, 2025, sound the alarm's siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - LeakSensor
  - Timer
  - MenuProvider
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#Clock).clock_year == 2025) and ((#Clock).clock_month == 5) and ((#Clock).clock_date == 20250512)) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.695 seconds
- command: "현재 시간이 2025년 5월 12일 오후 3시 15분이면 알람의 사이렌을 울려줘."
  command_translated: "If the current time is 3:15 PM on May 12, 2025, sound the alarm's siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - Siren
  - WeatherProvider
  - Camera
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#Clock).clock_year == 2025) and ((#Clock).clock_month == 5) and ((#Clock).clock_day == 12) and ((#Clock).clock_hour == 15) and ((#Clock).clock_minute == 15)) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 2.133 seconds
- command: "오늘이 20일이면 알람의 사이렌을 울려줘"
  command_translated: "If today is the 20th, sound the alarm siren"
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - FallDetector
  - MenuProvider
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_day == 20) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.631 seconds
- command: "현재 시간이 오후 3시이면 알람의 사이렌을 울려줘."
  command_translated: "If the current time is 3pm, sound the alarm's siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - Window
  - Siren
  - Camera
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: "0 15 * * *"
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.679 seconds
- command: "오늘이 공휴일이면 알람의 사이렌을 울려줘."
  command_translated: "If today is a holiday, sound the alarm's siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - FallDetector
  - MenuProvider
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_isHoliday == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.548 seconds
- command: "지금이 30분이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 30 minutes from now, sound the alarm's siren."
  devices:
  - Recorder
  - Calculator
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Timer
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      startMinute := (#Clock).clock_minute
      startHour := (#Clock).clock_hour


      targetMinute = startMinute + 30
      targetHour = startHour
      if (targetMinute >= 60) {
        targetMinute = targetMinute - 60
        targetHour = targetHour + 1
      }
      if (targetHour >= 24) {
        targetHour = targetHour - 24
      }


      wait until (((#Clock).clock_hour == targetHour) and ((#Clock).clock_minute == targetMinute))

      (#Alarm).alarm_siren()

      break
  elapsed_time: 3.938 seconds
- command: "지금이 5월이면 알람의 사이렌을 울려줘."
  command_translated: "If it's May, sound the alarm siren."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - LeakSensor
  - Timer
  - FallDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_month == 5) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.673 seconds
- command: "지금이 40초이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 40 seconds now, sound the alarm's siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Timer
  - FallDetector
  - Siren
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      sec = (#Clock).clock_second
      if (sec == 40) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.626 seconds
- command: "지금이 오후 3시 15분이면 알람의 사이렌을 울려줘."
  command_translated: "If it's 3:15pm, blare the siren on the alarm."
  devices:
  - Recorder
  - Blind
  - Clock
  - Alarm
  - Relay
  - Timer
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: "15 15 * * *"
    period: -1
    code: |
      (#Alarm).alarm_siren()
  elapsed_time: 1.643 seconds
- command: "현재 Unix timestamp가 1747031637.23이면 알람의 사이렌을 울려줘."
  command_translated: "If the current Unix timestamp is 1747031637.23, sound the alarm siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - Window
  - Siren
  - Camera
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      timestamp = (#Clock).clock_timestamp
      if (timestamp == 1747031637.23) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.510 seconds
- command: "오늘이 금요일이면 알람의 사이렌을 울려줘."
  command_translated: "If today is Friday, sound the alarm siren."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - MenuProvider
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_weekday == friday) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.395 seconds
- command: "올해가 2025년이면 알람의 사이렌을 울려줘."
  command_translated: "If the year is 2025, sound the alarm siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - FallDetector
  - SmokeDetector
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Clock).clock_year == 2025) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.474 seconds
- command: "1시간 20분 30초 뒤에 알람의 사이렌을 울려줘"
  command_translated: "Sound the alarm's siren in 1 hour, 20 minutes, 30 seconds"
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - ContactSensor
  - Relay
  - Timer
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Clock).clock_delay(4830000)
      (#Alarm).alarm_siren()
  elapsed_time: 2.033 seconds
- command: "접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the contact sensor is in contact."
  devices:
  - PresenceSensor
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - SmokeDetector
  - OccupancySensor
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#ContactSensor).contactSensor_contact == "closed") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.860 seconds
- command: "커튼이 열림 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the curtain is open."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - DoorLock
  - Siren
  - Curtain
  - Pump
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Curtain).curtain_curtain == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.847 seconds
- command: "커튼이 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the curtain via the speaker."
  devices:
  - Recorder
  - Blind
  - Clock
  - Shade
  - Relay
  - Valve
  - Siren
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      text = "Supported curtain commands are: "
      supported = (#Curtain).curtain_supportedCurtainCommands
      (#Speaker).mediaPlayback_speak(text)
      (#Speaker).mediaPlayback_speak(supported)
  elapsed_time: 1.790 seconds
- command: "커튼을 닫아줘."
  command_translated: "Close the curtain."
  devices:
  - Blind
  - Clock
  - Shade
  - Humidifier
  - Valve
  - Pump
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).curtain_close()
  elapsed_time: 1.449 seconds
- command: "커튼을 열어줘."
  command_translated: "Open the curtain."
  devices:
  - Blind
  - Clock
  - Shade
  - Humidifier
  - Valve
  - Pump
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).curtain_open()
  elapsed_time: 1.723 seconds
- command: "커튼의 움직임을 멈춰줘."
  command_translated: "Stop the curtain from moving."
  devices:
  - Blind
  - Clock
  - Shade
  - Humidifier
  - Valve
  - Timer
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Curtain).curtain_pause()
  elapsed_time: 1.455 seconds
- command: "제습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the dehumidifier is powered on."
  devices:
  - Refrigerator
  - SoundSensor
  - Clock
  - AirPurifier
  - Alarm
  - Humidifier
  - Relay
  - HumiditySensor
  - Siren
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dehumidifier).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.443 seconds
- command: "제습기의 모드가 제습 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the dehumidifier is in dehumidifying mode."
  devices:
  - Refrigerator
  - SoundSensor
  - SoilMoistureSensor
  - Clock
  - AirPurifier
  - Alarm
  - Humidifier
  - HumiditySensor
  - LeakSensor
  - Siren
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dehumidifier).dehumidifierMode_dehumidifierMode == "dehumidifying") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.501 seconds
- command: "제습기를 꺼줘."
  command_translated: "Turn off the dehumidifier."
  devices:
  - Refrigerator
  - Clock
  - AirPurifier
  - Humidifier
  - HumiditySensor
  - Valve
  - Pump
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).switch_off()
  elapsed_time: 1.528 seconds
- command: "제습기를 켜줘."
  command_translated: "Turn on the dehumidifier."
  devices:
  - Refrigerator
  - Clock
  - AirPurifier
  - Humidifier
  - Irrigator
  - HumiditySensor
  - Pump
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).switch_on()
  elapsed_time: 1.310 seconds
- command: "제습기의 전원을 토글해줘."
  command_translated: "Toggle the dehumidifier's power."
  devices:
  - Refrigerator
  - Blind
  - Clock
  - AirPurifier
  - Humidifier
  - Relay
  - SmartPlug
  - Charger
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).switch_toggle()
  elapsed_time: 1.304 seconds
- command: "제습기를 냉각 모드로 설정해줘."
  command_translated: "Set the dehumidifier to cooling mode."
  devices:
  - Refrigerator
  - Clock
  - AirPurifier
  - Humidifier
  - LeakSensor
  - Pump
  - AirConditioner
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode("cooling")
  elapsed_time: 1.785 seconds
- command: "식기세척기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the dishwasher is powered on."
  devices:
  - Clock
  - Alarm
  - Relay
  - Irrigator
  - Timer
  - SmartPlug
  - Siren
  - Charger
  - Dishwasher
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dishwasher).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.527 seconds
- command: "식기세척기의 모드가 에코 모드면 알람의 사이렌을 울려줘."
  command_translated: "If the dishwasher is in Eco mode, the alarm will sound a siren."
  devices:
  - Refrigerator
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Timer
  - FallDetector
  - SmokeDetector
  - Siren
  - Dishwasher
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      mode = (#Dishwasher).dishwasherMode_dishwasherMode
      if (mode == "eco") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.621 seconds
- command: "식기세척기를 꺼줘."
  command_translated: "Turn off the dishwasher."
  devices:
  - GasValve
  - Refrigerator
  - Clock
  - Humidifier
  - Timer
  - Valve
  - Pump
  - Dishwasher
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).switch_off()
  elapsed_time: 1.319 seconds
- command: "식기세척기를 켜줘."
  command_translated: "Turn on the dishwasher."
  devices:
  - Refrigerator
  - Clock
  - Humidifier
  - Irrigator
  - RobotCleaner
  - Pump
  - Dishwasher
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).switch_on()
  elapsed_time: 1.439 seconds
- command: "식기세척기의 전원을 토글해줘."
  command_translated: "Toggle the dishwasher's power."
  devices:
  - Dehumidifier
  - Blind
  - Buttonx4
  - Clock
  - Relay
  - SmartPlug
  - Charger
  - Dishwasher
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).switch_toggle()
  elapsed_time: 1.308 seconds
- command: "식기세척기를 자동 모드로 설정해줘."
  command_translated: "Set the dishwasher to automatic mode."
  devices:
  - Refrigerator
  - Blind
  - Clock
  - Humidifier
  - Irrigator
  - RobotCleaner
  - Dishwasher
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Dishwasher).dishwasherMode_setDishwasherMode("auto")
  elapsed_time: 1.358 seconds
- command: "도어락이 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the door lock is open."
  devices:
  - GasValve
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - DoorLock
  - Siren
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#DoorLock).doorControl_door == "open") {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
        break
      }
  elapsed_time: 1.948 seconds
- command: "도어락을 닫아줘."
  command_translated: "Close the door lock."
  devices:
  - Blind
  - Clock
  - Shade
  - Valve
  - DoorLock
  - Pump
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#DoorLock).doorControl_close()
  elapsed_time: 1.703 seconds
- command: "도어락을 열어줘."
  command_translated: "Open the door lock."
  devices:
  - Blind
  - Clock
  - Shade
  - Relay
  - Valve
  - DoorLock
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#DoorLock).doorControl_open()
  elapsed_time: 1.327 seconds
- command: "이메일을 'test@example.com' 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘."
  command_translated: "Send an email to 'test@example.com' with the subject line \"Alert\" and the content \"This is an emergency\"."
  devices:
  - GasValve
  - Clock
  - ContactSensor
  - DoorLock
  - Siren
  - EmailProvider
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#EmailProvider).emailProvider_sendMail("test@example.com", "Alert", "This is an emergency")
  elapsed_time: 1.410 seconds
- command: "선풍기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the fan is powered on."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - SmartPlug
  - Fan
  - Siren
  - Charger
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Fan).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.280 seconds
- command: "선풍기의 속도가 2000RPM 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the fan speed is above 2000 RPM."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - AirPurifier
  - Timer
  - SmokeDetector
  - Fan
  - Siren
  - Charger
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      fanSpeed = (#Fan).fanControl_fanSpeed
      if (fanSpeed > 2000) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.601 seconds
- command: "선풍기의 속도를 1500RPM으로 설정해줘."
  command_translated: "Set the speed of the fan to 1500 RPM."
  devices:
  - Clock
  - AirPurifier
  - Humidifier
  - Valve
  - Fan
  - Curtain
  - Charger
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).fanControl_setFanSpeed(1500)
  elapsed_time: 1.714 seconds
- command: "선풍기의 속도를 80퍼센트로 설정해줘."
  command_translated: "Set the speed of the fan to 80 percent."
  devices:
  - Clock
  - AirPurifier
  - Humidifier
  - Shade
  - Fan
  - Curtain
  - Charger
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      speed = 80
      (#Fan).fanControl_setPercent(speed)
  elapsed_time: 1.348 seconds
- command: "선풍기를 꺼줘."
  command_translated: "Turn off the fan."
  devices:
  - GasValve
  - Clock
  - Humidifier
  - Timer
  - Valve
  - Fan
  - Pump
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).switch_off()
  elapsed_time: 1.162 seconds
- command: "선풍기를 켜줘."
  command_translated: "Turn on the fan."
  devices:
  - Clock
  - Humidifier
  - Relay
  - Irrigator
  - Timer
  - Valve
  - Fan
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).switch_on()
  elapsed_time: 1.200 seconds
- command: "선풍기의 전원을 토글해줘."
  command_translated: "Toggle the fan's power."
  devices:
  - Dehumidifier
  - Blind
  - Buttonx4
  - Clock
  - Relay
  - SmartPlug
  - Fan
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Fan).switch_toggle()
  elapsed_time: 1.243 seconds
- command: "사료 공급기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the feeder is powered on."
  devices:
  - Recorder
  - Clock
  - Alarm
  - Relay
  - Irrigator
  - AirPurifier
  - SmartPlug
  - RobotCleaner
  - Siren
  - Charger
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Feeder).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.282 seconds
- command: "사료 공급기의 상태가 급식 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the feeder's status is feeding."
  devices:
  - Recorder
  - Clock
  - Alarm
  - LeakSensor
  - Irrigator
  - RobotCleaner
  - Siren
  - AirConditioner
  - Window
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Feeder).feederOperatingState_feederOperatingState == "feeding") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.678 seconds
- command: "사료 공급기를 꺼줘."
  command_translated: "Turn off the feeder."
  devices:
  - Recorder
  - GasValve
  - Clock
  - AirPurifier
  - Relay
  - RobotCleaner
  - Pump
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_off()
  elapsed_time: 1.304 seconds
- command: "사료 공급기를 켜줘."
  command_translated: "Turn on the feeder."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Relay
  - Irrigator
  - Humidifier
  - RobotCleaner
  - Pump
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_on()
  elapsed_time: 1.271 seconds
- command: "사료 공급기의 전원을 토글해줘."
  command_translated: "Toggle the power of the feeder."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Relay
  - SmartPlug
  - AirConditioner
  - RobotCleaner
  - Charger
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_toggle()
  elapsed_time: 1.268 seconds
- command: "사료 공급기의 사료 공급량을 100그램으로 설정해줘."
  command_translated: "Set the feeder's feed amount to 100 grams."
  devices:
  - Recorder
  - Blind
  - Clock
  - AirPurifier
  - Humidifier
  - MenuProvider
  - RobotCleaner
  - AirConditioner
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).feederPortion_setFeedPortion(100, "grams")
  elapsed_time: 1.645 seconds
- command: "사료 공급기의 사료 공급을 시작해줘."
  command_translated: "Start feeding the feeder."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Humidifier
  - Irrigator
  - RobotCleaner
  - Pump
  - AirConditioner
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Feeder).switch_on()
      (#Feeder).feederOperatingState_startFeeding()
  elapsed_time: 1.328 seconds
- command: "가스 미터의 가스 사용량이 500kWh 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas meter shows gas usage of 500 kWh or more."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - Siren
  - Pump
  - Charger
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#GasMeter).gasMeter_gasMeter >= 500.0)
      (#Alarm).alarm_siren()
  elapsed_time: 1.372 seconds
- command: "가스 미터의 가스 발열량이 1000kcal 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas meter reads more than 1000 kcal of gas."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - Timer
  - SmokeDetector
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      gasEnergy = (#GasMeter).gasMeter_gasMeterCalorific
      if (gasEnergy > 1000.0) {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
  elapsed_time: 1.859 seconds
- command: "가스 미터의 누적 가스 사용 시간이 10000초 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the siren of the alarm if the gas meter has a cumulative gas usage time of 10000 seconds or more."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - Timer
  - Siren
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      gasTime = (#GasMeter).gasMeter_gasMeterTime
      if (gasTime >= 10000) {
        (#Alarm).alarm_siren()
        break
      }
  elapsed_time: 1.617 seconds
- command: "가스 미터의 가스 사용량이 20세제곱미터 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas meter reads more than 20 cubic meters of gas."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - SmokeDetector
  - Siren
  - Pump
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#GasMeter).gasMeter_gasMeterVolume > 20.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.373 seconds
- command: "가스 밸브가 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas valve is open."
  devices:
  - GasValve
  - GasMeter
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - DoorLock
  - Siren
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#GasValve).valve_valve == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.458 seconds
- command: "가스 밸브를 닫아줘."
  command_translated: "Close the gas valve."
  devices:
  - GasValve
  - GasMeter
  - Clock
  - AirPurifier
  - Relay
  - Humidifier
  - Valve
  - Pump
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#GasValve).valve_close()
  elapsed_time: 1.326 seconds
- command: "가스 밸브를 열어줘."
  command_translated: "Open the gas valve."
  devices:
  - GasValve
  - GasMeter
  - Clock
  - AirPurifier
  - Relay
  - Humidifier
  - Valve
  - Pump
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#GasValve).valve_open()
  elapsed_time: 1.199 seconds
- command: "가스 밸브의 가스 사용량이 1000kWh 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve's gas usage is over 1000 kWh."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Valve
  - SmokeDetector
  - Siren
  - Pump
  - Charger
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      gasUsage = (#GasValve).gasMeter_gasMeter
      if (gasUsage > 1000.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.537 seconds
- command: "가스 밸브의 가스 발열량이 500kcal 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve has a gas calorific value of 500 kcal or more."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Valve
  - Timer
  - SmokeDetector
  - Fan
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      calorific = (#GasValve).gasMeter_gasMeterCalorific
      if (calorific >= 500.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.590 seconds
- command: "가스 밸브의 누적 가스 사용 시간이 5000초 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the gas valve has a cumulative gas usage time of 5000 seconds or more."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Valve
  - Timer
  - Siren
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#GasValve).gasMeter_gasMeterTime >= 5000.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.354 seconds
- command: "가스 밸브의 가스 사용량이 34세제곱미터 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the gas valve is using more than 34 cubic meters of gas."
  devices:
  - GasValve
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - HumiditySensor
  - Valve
  - SmokeDetector
  - Siren
  - Pump
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      gasVolume = (#GasValve).gasMeter_gasMeterVolume
      if (gasVolume > 34.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.369 seconds
- command: "가습기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the humidifier is powered on."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - Alarm
  - Humidifier
  - AirPurifier
  - HumiditySensor
  - Relay
  - Siren
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Humidifier).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.310 seconds
- command: "가습기의 모드가 자동이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the humidifier's mode is Auto."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - Alarm
  - Humidifier
  - AirPurifier
  - HumiditySensor
  - Siren
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Humidifier).humidifierMode_humidifierMode == "auto") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.538 seconds
- command: "가습기를 꺼줘."
  command_translated: "Turn off the humidifier."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - AirPurifier
  - Humidifier
  - HumiditySensor
  - Pump
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_off()
  elapsed_time: 1.232 seconds
- command: "가습기를 켜줘."
  command_translated: "Turn on the humidifier."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - AirPurifier
  - Humidifier
  - Irrigator
  - HumiditySensor
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_on()
  elapsed_time: 1.168 seconds
- command: "가습기의 전원을 토글해줘."
  command_translated: "Toggle the humidifier's power."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - AirPurifier
  - Humidifier
  - Relay
  - HumiditySensor
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).switch_toggle()
  elapsed_time: 1.422 seconds
- command: "가습기를 강 모드로 설정해줘."
  command_translated: "Set the humidifier to strong mode."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Blind
  - Clock
  - AirPurifier
  - Humidifier
  - HumiditySensor
  - WeatherProvider
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Humidifier).humidifierMode_setHumidifierMode("high")
  elapsed_time: 1.486 seconds
- command: "습도 센서의 상대 습도가 70퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the humidity sensor reads a relative humidity of 70 percent or higher."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - SoundSensor
  - Clock
  - Alarm
  - Humidifier
  - LeakSensor
  - HumiditySensor
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.568 seconds
- command: "관개 장치의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator is powered on."
  devices:
  - Refrigerator
  - Clock
  - Alarm
  - Relay
  - Irrigator
  - LeakSensor
  - Humidifier
  - SmartPlug
  - Siren
  - Pump
  - Charger
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Irrigator).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.379 seconds
- command: "관개 장치의 급수량이 3리터이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator has 3 liters of water."
  devices:
  - Refrigerator
  - SoilMoistureSensor
  - Clock
  - Alarm
  - Humidifier
  - LeakSensor
  - Irrigator
  - FallDetector
  - Pump
  - Siren
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      portion = (#Irrigator).irrigatorPortion_waterPortion
      if (portion == 3.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 2.901 seconds
- command: "관개 장치의 상태가 급수 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the irrigator's status is watering."
  devices:
  - Refrigerator
  - SoilMoistureSensor
  - Clock
  - Alarm
  - LeakSensor
  - Irrigator
  - FallDetector
  - Siren
  - Pump
  - Window
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Irrigator).irrigatorOperatingState_irrigatorOperatingState == "watering") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 3.008 seconds
- command: "관개 장치를 꺼줘."
  command_translated: "Turn off the irrigator."
  devices:
  - Refrigerator
  - Clock
  - Humidifier
  - Irrigator
  - LeakSensor
  - Valve
  - Pump
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_off()
  elapsed_time: 1.530 seconds
- command: "관개 장치를 켜줘."
  command_translated: "Turn on the irrigator."
  devices:
  - Refrigerator
  - Clock
  - Humidifier
  - Irrigator
  - LeakSensor
  - Relay
  - Pump
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_on()
  elapsed_time: 1.612 seconds
- command: "관개 장치의 전원을 토글해줘."
  command_translated: "Toggle the power of the irrigator."
  devices:
  - Refrigerator
  - Clock
  - Relay
  - Irrigator
  - Humidifier
  - SmartPlug
  - Pump
  - Charger
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).switch_toggle()
  elapsed_time: 1.404 seconds
- command: "관개 장치의 급수량을 5리터로 설정해줘."
  command_translated: "Set the water supply of the irrigator to 5 liters."
  devices:
  - Refrigerator
  - Clock
  - AirPurifier
  - Humidifier
  - LeakSensor
  - Irrigator
  - Pump
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).irrigatorPortion_setWaterPortion(5, liters)
  elapsed_time: 1.355 seconds
- command: "관개 장치의 급수를 시작해줘."
  command_translated: "Start watering the irrigator."
  devices:
  - Refrigerator
  - Clock
  - AirPurifier
  - Humidifier
  - LeakSensor
  - Irrigator
  - Pump
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Irrigator).irrigatorOperatingState_startWatering()
  elapsed_time: 1.256 seconds
- command: "누수가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a leak is detected."
  devices:
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - SmokeDetector
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#LeakSensor).leakSensor_leakage == detected)
      (#Alarm).alarm_siren()
  elapsed_time: 1.856 seconds
- command: "조명이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the light is on."
  devices:
  - Blind
  - Clock
  - Alarm
  - Relay
  - MotionSensor
  - Timer
  - FallDetector
  - Light
  - Siren
  - Window
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.441 seconds
- command: "조명의 색조가 30이면 알람의 사이렌을 울려줘."
  command_translated: "If the light has a hue of 30, sound the alarm's siren."
  devices:
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - LeakSensor
  - FallDetector
  - Timer
  - Light
  - Siren
  - WeatherProvider
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      hue = (#Light).colorControl_hue
      if (hue == 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.477 seconds
- command: "조명의 채도가 30이면 알람의 사이렌을 울려줘."
  command_translated: "If the light has a saturation of 30, sound the alarm's siren."
  devices:
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - LeakSensor
  - Timer
  - Light
  - SmokeDetector
  - Siren
  - Charger
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).colorControl_saturation == 30) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.463 seconds
- command: "조명 밝기가 100이면 알람의 사이렌을 울려줘"
  command_translated: "Sound the alarm's siren if the light brightness is 100"
  devices:
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - Shade
  - FallDetector
  - Light
  - SmokeDetector
  - Siren
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Light).switchLevel_level == 100) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.430 seconds
- command: "조명을 빨간색으로 설정해줘."
  command_translated: "Set the light to red."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Relay
  - Light
  - Siren
  - WeatherProvider
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).colorControl_setColor("255|0|0")
  elapsed_time: 1.234 seconds
- command: "조명의 색조를 70으로 설정해줘."
  command_translated: "Set the hue of the light to 70."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Humidifier
  - Light
  - Siren
  - WeatherProvider
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      hue = 70
      (#Light).colorControl_setHue(hue)
  elapsed_time: 1.265 seconds
- command: "조명의 채도를 90으로 설정해줘."
  command_translated: "Set the saturation of the light to 90."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Humidifier
  - Light
  - Siren
  - WeatherProvider
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      saturation = 90
      (#Light).colorControl_setSaturation(saturation)
  elapsed_time: 1.494 seconds
- command: "5의 속도로 조명의 밝기를 80으로 설정해줘."
  command_translated: "Set the brightness of the light to 80 with a speed of 5."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Light
  - Fan
  - Siren
  - Charger
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      level = 80
      rate = 5
      (#Light).switchLevel_setLevel(level, rate)
  elapsed_time: 1.372 seconds
- command: "조명의 경고 모드를 켜줘."
  command_translated: "Turn on alert mode for lights."
  devices:
  - Blind
  - Clock
  - Alarm
  - Relay
  - FallDetector
  - Light
  - Siren
  - WeatherProvider
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      all(#Light).switchLevel_alert()
  elapsed_time: 1.261 seconds
- command: "조명을 꺼줘."
  command_translated: "Turn off the lights."
  devices:
  - GasValve
  - Blind
  - Clock
  - Alarm
  - Relay
  - Light
  - Siren
  - Dehumidifier
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_off()
  elapsed_time: 1.465 seconds
- command: "조명을 켜줘."
  command_translated: "Turn on the lights."
  devices:
  - Blind
  - Buttonx4
  - Clock
  - Alarm
  - Relay
  - Light
  - Siren
  - WeatherProvider
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_on()
  elapsed_time: 1.191 seconds
- command: "조명의 전원을 토글해줘."
  command_translated: "Toggle the power of the light."
  devices:
  - Clock
  - Alarm
  - Relay
  - Light
  - SmartPlug
  - Siren
  - Charger
  - Switch
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Light).switch_toggle()
  elapsed_time: 1.185 seconds
- command: "조도 센서의 밝기 값이 500룩스 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the light sensor's brightness value is above 500 lux."
  devices:
  - PresenceSensor
  - SoundSensor
  - Clock
  - Alarm
  - MotionSensor
  - LeakSensor
  - HumiditySensor
  - Light
  - OccupancySensor
  - Siren
  - TemperatureSensor
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#LightSensor).lightLevel_light > 500) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.468 seconds
- command: "오늘 학생식당 점심 메뉴를 스피커로 출력해줘."
  command_translated: "Announce today's 학생식당 lunch menu via the speaker."
  devices:
  - Recorder
  - Clock
  - Timer
  - MenuProvider
  - OccupancySensor
  - Dishwasher
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_menu("오늘 학생식당 점심")
      (#Speaker).mediaPlayback_speak(menu)
  elapsed_time: 1.480 seconds
- command: "오늘의 메뉴를 스피커로 출력해줘."
  command_translated: "Announce today's menu via the speaker."
  devices:
  - Recorder
  - Blind
  - Buttonx4
  - Clock
  - Timer
  - MenuProvider
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_todayMenu()
      (#Speaker).mediaPlayback_speak(menu)
  elapsed_time: 1.472 seconds
- command: "오늘의 식당을 스피커로 출력해줘."
  command_translated: "Announce today's restaurant via the speaker."
  devices:
  - Recorder
  - Blind
  - Clock
  - Timer
  - MenuProvider
  - Pump
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      menu = (#MenuProvider).menuProvider_todayMenu()
      place = (#MenuProvider).menuProvider_todayPlace()
      text = menu + " at " + place
      (#Speaker).mediaPlayback_speak(text)
  elapsed_time: 1.662 seconds
- command: "모션 센서가 활성 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the motion sensor is active."
  devices:
  - PresenceSensor
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - OccupancySensor
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#MotionSensor).motionSensor_motion == active) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.512 seconds
- command: "움직임이 감지되고 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if motion is detected."
  devices:
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - SmokeDetector
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#MotionSensor).motionSensor_motion == active) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.432 seconds
- command: "존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a presence sensor is detected."
  devices:
  - PresenceSensor
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - OccupancySensor
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#PresenceSensor).presenceSensor_presence == present) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.422 seconds
- command: "펌프의 현재 동작 모드가 최대이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the pump's current operating mode is maximum."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - LeakSensor
  - Valve
  - Timer
  - Pump
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      opMode = (#Pump).pumpOperationMode_currentOperationMode
      if (opMode == "maximum") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.461 seconds
- command: "펌프의 설정 동작 모드가 기본이면 알람의 사이렌을 울려줘."
  command_translated: "If the pump's set operation mode is default, sound the alarm's siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Irrigator
  - Valve
  - Timer
  - FallDetector
  - Pump
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      opMode = (#Pump).pumpOperationMode_operationMode
      if (opMode == "normal") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.518 seconds
- command: "펌프의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the pump is powered on."
  devices:
  - Clock
  - Alarm
  - Relay
  - Irrigator
  - LeakSensor
  - Timer
  - Valve
  - SmartPlug
  - Pump
  - Siren
  - Charger
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      pumpPower = (#Pump).switch_switch
      if (pumpPower == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.649 seconds
- command: "펌프가 지원하는 모드를 스피커로 출력해줘."
  command_translated: "Announce the modes supported by the pump via the speaker."
  devices:
  - Recorder
  - SoundSensor
  - Blind
  - ContactSensor
  - Clock
  - Relay
  - LeakSensor
  - Valve
  - Pump
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      modes = (#Pump).pumpOperationMode_supportedOperationModes
      (#Speaker).mediaPlayback_speak(modes)
  elapsed_time: 1.654 seconds
- command: "펌프가 열려있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the pump is open."
  devices:
  - GasValve
  - Blind
  - Clock
  - Alarm
  - Shade
  - LeakSensor
  - Valve
  - DoorLock
  - Pump
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Pump).pump_pump == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.486 seconds
- command: "펌프의 동작 모드를 최대로 설정해줘."
  command_translated: "Set the pump's operation mode to maximum."
  devices:
  - Calculator
  - Blind
  - Buttonx4
  - Clock
  - Humidifier
  - Irrigator
  - Relay
  - Valve
  - Pump
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pumpOperationMode_setOperationMode("maximum")
  elapsed_time: 1.421 seconds
- command: "펌프를 꺼줘."
  command_translated: "Turn off the pump."
  devices:
  - GasValve
  - Clock
  - Humidifier
  - Relay
  - LeakSensor
  - Valve
  - Timer
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_off()
  elapsed_time: 1.214 seconds
- command: "펌프를 켜줘."
  command_translated: "Turn on the pump."
  devices:
  - Clock
  - Relay
  - Humidifier
  - Irrigator
  - Valve
  - LeakSensor
  - Pump
  - Charger
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_on()
  elapsed_time: 1.206 seconds
- command: "펌프의 전원을 토글해줘."
  command_translated: "Toggle the power of the pump."
  devices:
  - Dehumidifier
  - Clock
  - Relay
  - Humidifier
  - Valve
  - SmartPlug
  - Pump
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_toggle()
  elapsed_time: 1.199 seconds
- command: "펌프를 닫아줘."
  command_translated: "Close the pump."
  devices:
  - Blind
  - Clock
  - Humidifier
  - Relay
  - LeakSensor
  - Valve
  - Timer
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).pump_close()
  elapsed_time: 1.352 seconds
- command: "펌프를 열어줘."
  command_translated: "Open the pump."
  devices:
  - Blind
  - Clock
  - Humidifier
  - LeakSensor
  - Relay
  - Valve
  - RobotCleaner
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Pump).switch_on()
  elapsed_time: 1.167 seconds
- command: "냉장고의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the refrigerator is powered on."
  devices:
  - Refrigerator
  - Clock
  - Alarm
  - Relay
  - Irrigator
  - SmartPlug
  - Window
  - Siren
  - Charger
  - Switch
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.441 seconds
- command: "냉장고의 성에 제거 기능이 켜저 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the refrigerator's defrost function is on."
  devices:
  - Refrigerator
  - SoundSensor
  - Clock
  - Alarm
  - Irrigator
  - LeakSensor
  - FallDetector
  - Siren
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Refrigerator).refrigeration_defrost == "on") {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
  elapsed_time: 1.751 seconds
- command: "냉장고의 급속 냉각 기능이 꺼져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the refrigerator's rapid cooling function is turned off."
  devices:
  - Refrigerator
  - SoundSensor
  - Clock
  - Alarm
  - Irrigator
  - LeakSensor
  - Timer
  - FallDetector
  - Siren
  - AirConditioner
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Refrigerator).refrigeration_rapidCooling == "off") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.490 seconds
- command: "냉장고의 급속 냉동 기능이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the refrigerator's rapid freezing function is on."
  devices:
  - Refrigerator
  - Clock
  - Alarm
  - Relay
  - Irrigator
  - FallDetector
  - Timer
  - Window
  - DoorLock
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Refrigerator).refrigeration_rapidFreezing == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.540 seconds
- command: "냉장고를 꺼줘."
  command_translated: "Turn off the refrigerator."
  devices:
  - GasValve
  - Refrigerator
  - Clock
  - Relay
  - Irrigator
  - Humidifier
  - Valve
  - Dehumidifier
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).switch_off()
  elapsed_time: 1.423 seconds
- command: "냉장고의 전원을 토글해줘."
  command_translated: "Toggle the refrigerator's power."
  devices:
  - Refrigerator
  - Blind
  - Clock
  - Relay
  - Irrigator
  - SmartPlug
  - Charger
  - Switch
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).switch_toggle()
  elapsed_time: 1.413 seconds
- command: "냉장고의 성에 제거 기능을 켜줘."
  command_translated: "Turn on the refrigerator's defrost function."
  devices:
  - Refrigerator
  - Clock
  - Irrigator
  - Valve
  - Dishwasher
  - Dehumidifier
  - Window
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).refrigeration_setDefrost("on")
  elapsed_time: 1.394 seconds
- command: "냉장고의 급속 냉각 기능을 켜줘."
  command_translated: "Turn on the refrigerator's rapid cooling function."
  devices:
  - Refrigerator
  - Clock
  - Irrigator
  - Fan
  - AirConditioner
  - Dishwasher
  - Dehumidifier
  - Window
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).refrigeration_setRapidCooling("on")
  elapsed_time: 1.322 seconds
- command: "냉장고의 급속 냉동 기능을 꺼줘."
  command_translated: "Turn off the refrigerator's rapid freezing function."
  devices:
  - GasValve
  - Refrigerator
  - Clock
  - Relay
  - Irrigator
  - Valve
  - Fan
  - Dishwasher
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Refrigerator).refrigeration_setRapidFreezing("off")
  elapsed_time: 1.360 seconds
- command: "로봇 청소기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the robot vacuum is powered on."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - SmartPlug
  - RobotCleaner
  - Siren
  - Pump
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#RobotCleaner).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.463 seconds
- command: "로봇 청소기가 자동 모드이면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the robot vacuum is in automatic mode."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Irrigator
  - Timer
  - Valve
  - RobotCleaner
  - Siren
  - Pump
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      mode = (#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode
      if (mode == "auto") {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
  elapsed_time: 1.712 seconds
- command: "로봇 청소기를 꺼줘."
  command_translated: "Turn off the robot vacuum."
  devices:
  - GasValve
  - Clock
  - Relay
  - Humidifier
  - Valve
  - RobotCleaner
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).switch_off()
  elapsed_time: 1.275 seconds
- command: "로봇 청소기를 켜줘."
  command_translated: "Turn on the robot vacuum."
  devices:
  - Clock
  - AirPurifier
  - Relay
  - Humidifier
  - Valve
  - RobotCleaner
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).switch_on()
  elapsed_time: 1.358 seconds
- command: "로봇 청소기의 전원을 토글해줘."
  command_translated: "Toggle the robot vacuum's power."
  devices:
  - Button
  - Blind
  - Clock
  - Relay
  - Valve
  - SmartPlug
  - RobotCleaner
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).switch_toggle()
  elapsed_time: 1.242 seconds
- command: "로봇 청소기의 청소 모드를 수동으로 설정해줘."
  command_translated: "Set the robot vacuum's cleaning mode to manual."
  devices:
  - Switch
  - Blind
  - Clock
  - Valve
  - RobotCleaner
  - Pump
  - Dishwasher
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#RobotCleaner).robotCleanerCleaningMode_setRobotCleanerCleaningMode("manual")
  elapsed_time: 1.625 seconds
- command: "쉐이드가 40퍼센트 이상 열려 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the shade is more than 40% open."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - FallDetector
  - DoorLock
  - Siren
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      shadeLevel = (#Shade).windowShadeLevel_shadeLevel
      if (shadeLevel > 40) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.486 seconds
- command: "쉐이드가 완전히 열려 있는 상태면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the shade is fully open."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - FallDetector
  - DoorLock
  - Siren
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Shade).windowShade_windowShade == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.383 seconds
- command: "쉐이드가 지원하는 상태를 스피커로 출력해줘."
  command_translated: "Announce the states supported by the shade via the speaker."
  devices:
  - Recorder
  - Blind
  - ContactSensor
  - Clock
  - Shade
  - FallDetector
  - Valve
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      statesSupported = (#Shade).windowShade_supportedWindowShadeCommands
      (#Speaker).mediaPlayback_speak(statesSupported)
  elapsed_time: 1.523 seconds
- command: "쉐이드를 50퍼 센트로 설정해줘."
  command_translated: "Set the shade to 50 percent."
  devices:
  - Blind
  - Clock
  - Shade
  - Humidifier
  - Light
  - Fan
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShadeLevel_setShadeLevel(50)
  elapsed_time: 1.344 seconds
- command: "쉐이드를 닫아줘."
  command_translated: "Close the shade."
  devices:
  - Blind
  - Clock
  - Shade
  - Humidifier
  - Valve
  - Pump
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_close()
  elapsed_time: 1.426 seconds
- command: "쉐이드를 열어줘."
  command_translated: "Open the shade."
  devices:
  - Blind
  - Clock
  - Shade
  - Humidifier
  - Valve
  - Pump
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_open()
  elapsed_time: 1.272 seconds
- command: "쉐이드 움직임을 일시 중지해줘."
  command_translated: "Pause the shade movement."
  devices:
  - Blind
  - Clock
  - MotionSensor
  - Shade
  - Relay
  - Timer
  - FallDetector
  - Curtain
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Shade).windowShade_pause()
  elapsed_time: 1.752 seconds
- command: "사이렌이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the siren is on."
  devices:
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - Timer
  - FallDetector
  - DoorLock
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Siren).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.433 seconds
- command: "사이렌 모드가 사이렌이면 알람의 사이렌을 울려줘."
  command_translated: "If the siren mode is Siren, sound the alarm's siren."
  devices:
  - PresenceSensor
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - MotionSensor
  - Timer
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Siren).sirenMode_sirenMode == "siren") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.443 seconds
- command: "사이렌을 꺼줘."
  command_translated: "Turn off the siren."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - Valve
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_off()
  elapsed_time: 2.086 seconds
- command: "사이렌을 켜줘."
  command_translated: "Turn on the siren."
  devices:
  - Recorder
  - Clock
  - Alarm
  - Relay
  - Timer
  - Valve
  - Siren
  - Pump
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_on()
  elapsed_time: 1.285 seconds
- command: "사이렌 전원을 토글해줘."
  command_translated: "Toggle the siren power."
  devices:
  - Clock
  - Alarm
  - Relay
  - Timer
  - SmartPlug
  - Siren
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).switch_toggle()
  elapsed_time: 1.302 seconds
- command: "사이렌 모드를 경광등으로 설정해줘."
  command_translated: "Set the siren mode to strobe."
  devices:
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - Shade
  - Relay
  - Timer
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Siren).sirenMode_setSirenMode("strobe")
  elapsed_time: 1.314 seconds
- command: "스마트 플러그의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is powered on."
  devices:
  - Clock
  - Alarm
  - Relay
  - Timer
  - SmartPlug
  - DoorLock
  - RobotCleaner
  - Siren
  - Television
  - Charger
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      powerState = (#SmartPlug).switch_switch
      if (powerState == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.552 seconds
- command: "스마트 플러그의 전압이 220볼트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is over 220 volts."
  devices:
  - Refrigerator
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - SmartPlug
  - DoorLock
  - RobotCleaner
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      voltage = (#SmartPlug).voltageMeasurement_voltage
      if (voltage > 220.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.476 seconds
- command: "스마트 플러그의 전류가 10암페어 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the smart plug is drawing more than 10 amps."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Timer
  - SmartPlug
  - DoorLock
  - RobotCleaner
  - Siren
  - Television
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      current = (#SmartPlug).currentMeasurement_current
      if (current > 10.0) {
        (#Alarm).alarm_siren()
      } else {
        (#Alarm).alarm_off()
      }
  elapsed_time: 1.710 seconds
- command: "스마트 플러그의 소비 전력이 1000와트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if a smart plug draws more than 1000 watts."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - SmartPlug
  - DoorLock
  - RobotCleaner
  - Siren
  - Television
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      power = (#SmartPlug).powerMeter_power
      if (power > 1000.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.993 seconds
- command: "스마트 플러그를 꺼줘."
  command_translated: "Turn off the smart plug."
  devices:
  - Refrigerator
  - Clock
  - Relay
  - Timer
  - SmartPlug
  - Television
  - RobotCleaner
  - DoorLock
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_off()
  elapsed_time: 1.268 seconds
- command: "스마트 플러그를 켜줘."
  command_translated: "Turn on the smart plug."
  devices:
  - Refrigerator
  - Clock
  - Relay
  - Timer
  - SmartPlug
  - DoorLock
  - Television
  - RobotCleaner
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_on()
  elapsed_time: 1.229 seconds
- command: "스마트 플러그의 전원을 토글해줘."
  command_translated: "Toggle the power of the smart plug."
  devices:
  - Clock
  - Relay
  - Timer
  - SmartPlug
  - DoorLock
  - RobotCleaner
  - Television
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#SmartPlug).switch_toggle()
  elapsed_time: 1.296 seconds
- command: "연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if smoke is detected by the smoke detector."
  devices:
  - AirQualityDetector
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - SmokeDetector
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SmokeDetector).smokeDetector_smoke == "detected")
      (#Alarm).alarm_siren()
  elapsed_time: 1.590 seconds
- command: "토양 습도 센서의 토양 습도 측정값이 30퍼센트 이하이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the soil moisture sensor's soil moisture reading is 30 percent or less."
  devices:
  - PresenceSensor
  - SoilMoistureSensor
  - SoundSensor
  - Clock
  - Alarm
  - MotionSensor
  - LeakSensor
  - HumiditySensor
  - Siren
  - Dehumidifier
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0)
      (#Alarm).alarm_siren()
  elapsed_time: 1.547 seconds
- command: "소리 센서에서 소리가 감지되면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if sound is detected by the sound sensor."
  devices:
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - SmokeDetector
  - Siren
  - TemperatureSensor
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#SoundSensor).soundSensor_sound == detected) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.532 seconds
- command: "소리 감지 레벨이 70dB 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the sound detection level is above 70 dB."
  devices:
  - Blind
  - SoundSensor
  - Clock
  - Alarm
  - Shade
  - LeakSensor
  - HumiditySensor
  - Siren
  - TemperatureSensor
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      level = (#SoundSensor).soundPressureLevel_soundPressureLevel
      if (level > 70.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.502 seconds
- command: "스피커의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the speaker is powered on."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - Timer
  - SmartPlug
  - Siren
  - Charger
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Speaker).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.425 seconds
- command: "스피커가 재생 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the speaker is playing."
  devices:
  - Recorder
  - PresenceSensor
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - FallDetector
  - OccupancySensor
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Speaker).mediaPlayback_playbackStatus == "playing") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.502 seconds
- command: "스피커가 지원하는 명령어를 스피커로 출력해줘."
  command_translated: "Announce commands that the speaker supports via the speaker."
  devices:
  - Recorder
  - SoundSensor
  - Buttonx4
  - Blind
  - ContactSensor
  - Clock
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      supportedCommands = (#Speaker).mediaPlayback_supportedPlaybackCommands
      (#Speaker).mediaPlayback_speak(supportedCommands)
  elapsed_time: 1.596 seconds
- command: "스피커를 꺼줘."
  command_translated: "Turn off the speaker."
  devices:
  - Recorder
  - GasValve
  - SoundSensor
  - Blind
  - Clock
  - Timer
  - Valve
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_off()
  elapsed_time: 1.279 seconds
- command: "스피커를 켜줘."
  command_translated: "Turn on the speaker."
  devices:
  - Recorder
  - SoundSensor
  - Blind
  - Clock
  - Humidifier
  - Irrigator
  - Valve
  - Timer
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_on()
  elapsed_time: 1.233 seconds
- command: "스피커의 전원을 토글해줘."
  command_translated: "Toggle the power of the speaker."
  devices:
  - Recorder
  - Blind
  - SoundSensor
  - Clock
  - Relay
  - SmartPlug
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).switch_toggle()
  elapsed_time: 2.260 seconds
- command: "스피커의 재생을 빨리 감기 해줘."
  command_translated: "Fast-forward the playback of the speaker."
  devices:
  - Recorder
  - Button
  - Clock
  - Relay
  - Valve
  - Timer
  - Fan
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_fastForward()
  elapsed_time: 1.467 seconds
- command: "스피커의 재생을 일시 정지해줘."
  command_translated: "Pause playback on the speaker."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Humidifier
  - Valve
  - Timer
  - Pump
  - Siren
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_pause()
  elapsed_time: 1.278 seconds
- command: "스피커의 재생을 되감아줘."
  command_translated: "Rewind the speaker's playback."
  devices:
  - Recorder
  - Blind
  - Clock
  - Relay
  - Humidifier
  - Valve
  - Timer
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_rewind()
  elapsed_time: 1.594 seconds
- command: "스피커의 재생을 멈춰줘."
  command_translated: "Stop the speaker from playing."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Valve
  - Timer
  - Pump
  - Siren
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_stop()
  elapsed_time: 1.223 seconds
- command: "스피커에서 music.mp3를 재생해줘."
  command_translated: "Play 'music.mp3' on the speaker."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Humidifier
  - Timer
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_play("music.mp3")
  elapsed_time: 1.276 seconds
- command: "스피커에서 '지금은 테스트 중입니다.'를 말해줘."
  command_translated: "Speak \"This is a test\" through the speaker."
  devices:
  - Recorder
  - Calculator
  - SoundSensor
  - Clock
  - Shade
  - Timer
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Speaker).mediaPlayback_speak("This is a test")
  elapsed_time: 1.256 seconds
- command: "녹음기의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound an alarm siren if the recorder is powered on."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Relay
  - SmartPlug
  - RobotCleaner
  - Siren
  - Charger
  - Camera
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Recorder).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.614 seconds
- command: "녹음기가 녹음 중이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm siren if the recorder is recording."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - RobotCleaner
  - Siren
  - Camera
  - Window
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Recorder).audioRecord_recordStatus == "recording") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.488 seconds
- command: "녹음기를 꺼줘."
  command_translated: "Turn off the recorder."
  devices:
  - Recorder
  - GasValve
  - Clock
  - AirPurifier
  - Timer
  - RobotCleaner
  - Camera
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_off()
  elapsed_time: 1.228 seconds
- command: "녹음기를 켜줘."
  command_translated: "Turn on the recorder."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Timer
  - Valve
  - RobotCleaner
  - AirConditioner
  - Camera
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_on()
  elapsed_time: 1.387 seconds
- command: "녹음기의 전원을 토글해줘."
  command_translated: "Toggle the recorder's power."
  devices:
  - Recorder
  - Buttonx4
  - Clock
  - Relay
  - SmartPlug
  - RobotCleaner
  - Charger
  - Camera
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).switch_toggle()
  elapsed_time: 1.340 seconds
- command: "녹음기로 10초 동안 녹음해서 test.wav로 저장해줘."
  command_translated: "Record 10 seconds with a recorder and save it as test.wav."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - AirPurifier
  - Valve
  - RobotCleaner
  - AirConditioner
  - Camera
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Recorder).audioRecord_record("test.wav", 10.0)
  elapsed_time: 1.747 seconds
- command: "스위치의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the switch is powered on."
  devices:
  - Button
  - ContactSensor
  - Alarm
  - Relay
  - Clock
  - SmartPlug
  - Television
  - DoorLock
  - Siren
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Switch).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.454 seconds
- command: "스위치를 꺼줘."
  command_translated: "Switch off."
  devices:
  - GasValve
  - Blind
  - ContactSensor
  - Clock
  - Relay
  - Humidifier
  - Timer
  - Valve
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_off()
  elapsed_time: 1.765 seconds
- command: "스위치를 켜줘."
  command_translated: "Switch on."
  devices:
  - Button
  - Buttonx4
  - Clock
  - Relay
  - Irrigator
  - Humidifier
  - Timer
  - Valve
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_on()
  elapsed_time: 1.377 seconds
- command: "스위치의 전원을 토글해줘."
  command_translated: "Toggle the power of the switch."
  devices:
  - Button
  - Blind
  - ContactSensor
  - Clock
  - Relay
  - SmartPlug
  - Television
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Switch).switch_toggle()
  elapsed_time: 1.294 seconds
- command: "TV의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the TV is powered on."
  devices:
  - Clock
  - Alarm
  - Relay
  - Timer
  - SmartPlug
  - Television
  - Siren
  - Charger
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.737 seconds
- command: "현재 TV 채널 이름이 '9시 뉴스'이면 알람의 사이렌을 울려줘."
  command_translated: "If the current TV channel is named \"9 o'clock news\" sound the alarm's siren."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Timer
  - FallDetector
  - Television
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).tvChannel_tvChannelName == "9 o"clock news") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.616 seconds
- command: "TV의 볼륨이 50 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the volume on the TV is above 50."
  devices:
  - AirQualityDetector
  - GasMeter
  - SoundSensor
  - Clock
  - Alarm
  - Timer
  - Television
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      volume = (#Television).audioVolume_volume
      if (volume > 50) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.949 seconds
- command: "TV가 음소거 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the TV is muted."
  devices:
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - MotionSensor
  - Timer
  - Television
  - Siren
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Television).audioMute_muteStatus == "muted") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.411 seconds
- command: "TV를 꺼줘."
  command_translated: "Turn off the TV."
  devices:
  - GasValve
  - AirQualityDetector
  - Blind
  - Clock
  - Timer
  - Valve
  - Television
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_off()
  elapsed_time: 1.318 seconds
- command: "TV를 켜줘."
  command_translated: "Turn on the TV."
  devices:
  - Recorder
  - AirQualityDetector
  - Blind
  - Clock
  - Relay
  - Humidifier
  - Timer
  - Television
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_on()
  elapsed_time: 1.386 seconds
- command: "TV의 전원을 토글해줘."
  command_translated: "Toggle the power of the TV."
  devices:
  - AirQualityDetector
  - Blind
  - Clock
  - Relay
  - SmartPlug
  - Television
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).switch_toggle()
  elapsed_time: 1.199 seconds
- command: "TV 채널을 하나 내려줘."
  command_translated: "Turn down a TV channel."
  devices:
  - Button
  - Blind
  - Buttonx4
  - Clock
  - Valve
  - Timer
  - Television
  - Pump
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_channelDown()
  elapsed_time: 1.287 seconds
- command: "TV 채널을 하나 올려줘."
  command_translated: "Upload a TV channel."
  devices:
  - Recorder
  - AirQualityDetector
  - Clock
  - Relay
  - Valve
  - Television
  - Pump
  - Camera
  - Speaker
  generated_code: []
  elapsed_time: 1.838 seconds
- command: "TV 채널을 7번으로 설정해줘."
  command_translated: "Set the TV channel to 7."
  devices:
  - AirQualityDetector
  - Calculator
  - Blind
  - Clock
  - Shade
  - Valve
  - Television
  - Curtain
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_setTvChannel(7)
  elapsed_time: 1.254 seconds
- command: "TV 채널을 '9시 뉴스'로 설정해줘."
  command_translated: "Set the TV channel to \"9 o'clock news\"."
  devices:
  - AirQualityDetector
  - Blind
  - Clock
  - Valve
  - MenuProvider
  - Television
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).tvChannel_setTvChannelName("9 o"clock news")
  elapsed_time: 1.408 seconds
- command: "TV의 볼륨을 30으로 설정해줘."
  command_translated: "Set the volume on the TV to 30."
  devices:
  - Recorder
  - AirQualityDetector
  - Calculator
  - GasMeter
  - SoundSensor
  - Blind
  - Clock
  - Television
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_setVolume(30)
  elapsed_time: 1.319 seconds
- command: "TV의 볼륨을 낮춰줘."
  command_translated: "Turn down the volume on the TV."
  devices:
  - Button
  - AirQualityDetector
  - SoundSensor
  - Clock
  - Timer
  - Television
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_volumeDown()
  elapsed_time: 1.338 seconds
- command: "TV의 볼륨을 높여줘."
  command_translated: "Turn up the volume on the TV."
  devices:
  - Recorder
  - GasMeter
  - AirQualityDetector
  - SoundSensor
  - Button
  - Clock
  - Timer
  - Television
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioVolume_volumeUp()
  elapsed_time: 2.042 seconds
- command: "TV를 음소거해줘."
  command_translated: "Mute the TV."
  devices:
  - Recorder
  - AirQualityDetector
  - Clock
  - Alarm
  - Television
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_mute()
  elapsed_time: 1.285 seconds
- command: "TV의 음소거 상태를 해제해줘."
  command_translated: "Unmute the TV."
  devices:
  - AirQualityDetector
  - Blind
  - Clock
  - Alarm
  - Timer
  - Television
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_unmute()
  elapsed_time: 1.424 seconds
- command: "TV의 음소거 상태를 음소거로 설정해줘."
  command_translated: "Set the TV's mute state to Mute."
  devices:
  - AirQualityDetector
  - Blind
  - SoundSensor
  - Clock
  - Alarm
  - Television
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Television).audioMute_setMute("muted")
  elapsed_time: 1.734 seconds
- command: "현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the current room temperature is above 25 degrees."
  devices:
  - PresenceSensor
  - Clock
  - Alarm
  - MotionSensor
  - HumiditySensor
  - Window
  - OccupancySensor
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      temp = (#TemperatureSensor).temperatureMeasurement_temperature
      if (temp > 25.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.389 seconds
- command: "밸브가 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the valve is open."
  devices:
  - GasValve
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - DoorLock
  - Siren
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Valve).valve_valve == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.522 seconds
- command: "밸브를 닫아줘."
  command_translated: "Close the valve."
  devices:
  - GasValve
  - Blind
  - Clock
  - Relay
  - Humidifier
  - Valve
  - Pump
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Valve).valve_close()
  elapsed_time: 1.267 seconds
- command: "밸브를 열어줘."
  command_translated: "Open the valve."
  devices:
  - GasValve
  - Blind
  - Clock
  - Relay
  - Humidifier
  - Valve
  - Pump
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Valve).valve_open()
  elapsed_time: 1.254 seconds
- command: "바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the humidity outside is above 80 percent."
  devices:
  - AirQualityDetector
  - SoilMoistureSensor
  - Clock
  - Alarm
  - Humidifier
  - LeakSensor
  - HumiditySensor
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_humidityWeather > 80.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.678 seconds
- command: "바깥의 미세먼지 농도가 100 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the particulate matter concentration outside is above 100."
  devices:
  - AirQualityDetector
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - SmokeDetector
  - Window
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_pm10Weather > 100) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.437 seconds
- command: "바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the outside fine particulate matter concentration is above 50."
  devices:
  - AirQualityDetector
  - SoundSensor
  - Clock
  - Alarm
  - AirPurifier
  - LeakSensor
  - Window
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_pm25Weather > 50.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.667 seconds
- command: "기압이 1020hPa 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the barometric pressure is above 1020 hPa."
  devices:
  - SoundSensor
  - Clock
  - Alarm
  - LeakSensor
  - Valve
  - Siren
  - Pump
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_pressureWeather > 1020.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.424 seconds
- command: "현재 바깥의 기온이 30도 이상이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if it's currently above 30 degrees outside."
  devices:
  - SoundSensor
  - Blind
  - Clock
  - Alarm
  - LeakSensor
  - FallDetector
  - Window
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      temp = (#WeatherProvider).weatherProvider_temperatureWeather
      if (temp > 30.0) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.820 seconds
- command: "현재 날씨가 비가 오고 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the current weather is rainy."
  devices:
  - Clock
  - Alarm
  - Relay
  - LeakSensor
  - FallDetector
  - Window
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#WeatherProvider).weatherProvider_weather == "rain") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.426 seconds
- command: "위도 37.5665, 경도 126.9780의 현재 날씨 정보를 스피커로 출력해줘."
  command_translated: "Announce the current weather information for latitude 37.5665 and longitude 126.9780 via the speaker."
  devices:
  - Recorder
  - Clock
  - MenuProvider
  - Window
  - Siren
  - WeatherProvider
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      weatherInfo = (#WeatherProvider).weatherProvider_getWeatherInfo(37.5665, 126.9780)
      (#Speaker).mediaPlayback_speak(weatherInfo)
  elapsed_time: 2.094 seconds
- command: "창문이 열린 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a window is open."
  devices:
  - Blind
  - Clock
  - Alarm
  - Shade
  - Valve
  - DoorLock
  - Siren
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Window).windowControl_window == "open") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.359 seconds
- command: "창문을 닫아줘."
  command_translated: "Close the window."
  devices:
  - Blind
  - Clock
  - Shade
  - Valve
  - Timer
  - Pump
  - Curtain
  - Dehumidifier
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Window).windowControl_close()
  elapsed_time: 1.190 seconds
- command: "창문을 열어줘."
  command_translated: "Open a window."
  devices:
  - Blind
  - Buttonx4
  - Clock
  - Shade
  - Humidifier
  - Valve
  - Pump
  - Curtain
  - Window
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Window).windowControl_open()
  elapsed_time: 1.197 seconds
- command: "낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if a fall is detected by the fall detection sensor."
  devices:
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - SmokeDetector
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#FallDetector).fallDetection_fall == "fall")
      (#Alarm).alarm_siren()
  elapsed_time: 1.393 seconds
- command: "점유 센서가 감지 상태이면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if an occupancy sensor is detected."
  devices:
  - PresenceSensor
  - SoundSensor
  - ContactSensor
  - Alarm
  - MotionSensor
  - LeakSensor
  - Clock
  - FallDetector
  - OccupancySensor
  - Siren
  - TemperatureSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (any(#OccupancySensor).presenceSensor_presence == "present") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.377 seconds
- command: "릴레이의 전원이 켜져 있으면 알람의 사이렌을 울려줘."
  command_translated: "Sound the alarm's siren if the relay is powered on."
  devices:
  - Clock
  - Alarm
  - Relay
  - LeakSensor
  - Timer
  - SmartPlug
  - DoorLock
  - Siren
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Relay).switch_switch == "on") {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.348 seconds
- command: "릴레이를 꺼줘."
  command_translated: "Turn off the relay."
  devices:
  - GasValve
  - Blind
  - Clock
  - Relay
  - Timer
  - Valve
  - FallDetector
  - Pump
  - Dehumidifier
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_off()
  elapsed_time: 1.148 seconds
- command: "릴레이를 켜줘."
  command_translated: "Turn on the relay."
  devices:
  - Blind
  - Clock
  - Relay
  - Irrigator
  - Humidifier
  - FallDetector
  - Timer
  - Valve
  - Pump
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_on()
  elapsed_time: 1.153 seconds
- command: "릴레이의 전원을 토글해줘."
  command_translated: "Toggle the power of the relay."
  devices:
  - Button
  - Blind
  - Clock
  - Relay
  - Valve
  - SmartPlug
  - Pump
  - Charger
  - Switch
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Relay).switch_toggle()
  elapsed_time: 1.408 seconds
- command: "테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘."
  command_translated: "Add a 60-second timer named Test Timer."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Timer
  - RobotCleaner
  - AirConditioner
  - Camera
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_add("Test Timer", 60.0)
  elapsed_time: 1.201 seconds
- command: "테스트 타이머라는 이름의 타이머가 존재하면 알람의 사이렌을 울려줘."
  command_translated: "If a timer named Test Timer exists, sound the alarm siren."
  devices:
  - Recorder
  - PresenceSensor
  - SoundSensor
  - Clock
  - Alarm
  - AirPurifier
  - Timer
  - RobotCleaner
  - Siren
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Timer).timer_isExist("Test Timer") == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.456 seconds
- command: "테스트 타이머라는 이름의 타이머가 하면 알람의 사이렌을 울려줘."
  command_translated: "if a timer named Test Timer goes off, sound an alarm siren."
  devices:
  - Recorder
  - SoundSensor
  - Clock
  - Alarm
  - AirPurifier
  - Timer
  - RobotCleaner
  - Siren
  - TemperatureSensor
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      timer_exist = (#Timer).timer_isExist("Test Timer")
      if (timer_exist == true) {
        (#Alarm).alarm_siren()
      }
  elapsed_time: 1.621 seconds
- command: "테스트 타이머라는 이름의 타이머를 리셋해줘."
  command_translated: "Reset a timer named Test Timer."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Relay
  - Timer
  - RobotCleaner
  - AirConditioner
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_reset("Test Timer")
  elapsed_time: 1.431 seconds
- command: "테스트 타이머라는 이름의 타이머를 120초로 설정해줘."
  command_translated: "Set a timer named Test Timer to 120 seconds."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Timer
  - RobotCleaner
  - AirConditioner
  - Camera
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_set("Test Timer", 120)
  elapsed_time: 1.598 seconds
- command: "테스트 타이머라는 이름의 타이머를 시작해줘."
  command_translated: "Start a timer named Test Timer."
  devices:
  - Recorder
  - Clock
  - AirPurifier
  - Timer
  - RobotCleaner
  - AirConditioner
  - Window
  - Feeder
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      (#Timer).timer_add("Test Timer", 0)
  elapsed_time: 1.432 seconds
