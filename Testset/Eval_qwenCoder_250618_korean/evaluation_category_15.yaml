- command: "매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘."
  command_translated: "Every weekday at 9 a.m., if the windows are closed, the carbon dioxide concentration is above 1000 ppm, and the temperature is above 30 degrees, open the windows after 5 seconds and turn on the fans if they are off.Then, check in real time and if the particulate matter concentration remains above 50 for one continuous minute, close the windows again and turn off the fans.If the humidity in the greenhouse is below 40% at that time, turn on the humidifier. Similarly, if the soil humidity is below 25% and the irrigation is turned off, water the plants."
  devices:
  - Dehumidifier
  - Pump
  - Irrigator
  - DoorLock
  - Window
  - WeatherProvider
  - AirQualityDetector
  - TemperatureSensor
  - Clock
  - SoilMoistureSensor
  - Speaker
  - HumiditySensor
  - Fan
  - Humidifier
  generated_code:
  - name: "Scenario1"
    cron: "0 9 ? * MON,TUE,WED,THU,FRI"
    period: 10000
    code: |
      windowsClosed := false
      fansOn := false
      particulatesHigh := false
      greenhouseDry := false
      irrigationOff := false


      if (((#Window).windowControl_window == closed) and ((#TemperatureSensor).carbonDioxideMeasurement_carbonDioxide > 1000.0) and ((#TemperatureSensor).temperatureMeasurement_temperature > 30.0)) {
        wait until(#Clock).clock_delay(5000)
        (#Window).windowControl_open()
        windowsClosed = true

        if (#Fan).fanControl_fanSpeed == off) {
          (#Fan).switch_toggle()
          fansOn = true
        }


        repeat while (true) {
          wait until(#Clock).clock_delay(10000)

          if (#LightSensor).dustSensor_dustLevel > 50) {
            particulatesHigh = true


            (#Window).windowControl_close()
            windowsClosed = false

            if (#Fan).fanControl_fanSpeed == on) {
              (#Fan).switch_toggle()
              fansOn = false
            }


            if (#HumiditySensor).relativeHumidityMeasurement_humidity < 40.0) {
              (#Humidifier).humidifierMode_setHumidifierMode("high")
            }


            if ((#HumiditySensor).soilHumidityMeasurement_soilHumidity < 25.0) and ((#Irrigator).irrigatorOperatingState_irrigatorOperatingState != idle)) {
              (#Irrigator).irrigatorOperatingState_startWatering()
            }
          } else {
            particulatesHigh = false
            break
          }
        }
      }


      if (particulatesHigh == false) {
        if (windowsClosed == true) {
          (#Window).windowControl_close()
          windowsClosed = false
        }

        if (fansOn == true) {
          (#Fan).switch_toggle()
          fansOn = false
        }
      }
  elapsed_time: 42.049 seconds
- command: "매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘."
  command_translated: "Every day at 9am, if the lights are off and the window with the odd tag at the bottom is closed, open all the blinds. Then, when that window is opened, wait 5 seconds and sound the alarm's siren. After the siren sounds, check in real-time for 10 seconds to make sure that the window has never been closed, and blink the light every 2 seconds. If the blinds are open, if the door has been opened and closed more than once between then and the end of the 10 seconds, turn off all air conditioners in the wall if the second opening is longer than the first."
  devices:
  - Alarm
  - Pump
  - Siren
  - DoorLock
  - Curtain
  - Shade
  - AirConditioner
  - Window
  - Blind
  - Clock
  - TemperatureSensor
  - Buttonx4
  - Speaker
  - HumiditySensor
  - Light
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: 0
    code: |
      if (((#Blind #Odd)).blind_blind != open) && ((#Window #Lower #Odd)).windowControl_window == closed) {
        all(#Blind).blind_open()
      }
  - name: "Scenario2"
    cron: "0 9 * * *"
    period: 10000
    code: |
      var windowOpened := false
      var firstOpeningDuration := 0
      var secondOpeningDuration := 0
      var doorClosedCount := 0
      var lastDoorState := false

      if ((#Window #Lower #Odd)).windowControl_window == open) {
        windowOpened = true
        wait until(windowOpened == false)

        (#Alarm).alarm_siren()
        wait until(((#Window #Lower #Odd)).windowControl_window == open))
        var startTime := (#Clock).clock_timestamp

        while (startTime + 10000 > (#Clock).clock_timestamp) {
          if ((#Window #Lower #Odd)).windowControl_window == closed) {
            windowOpened = false
            break
          }

          if (doorClosedCount > 1) {
            var currentTime := (#Clock).clock_timestamp
            if (currentTime > startTime + firstOpeningDuration) {
              firstOpeningDuration = currentTime - startTime
            }

            if (currentTime > startTime + secondOpeningDuration) {
              secondOpeningDuration = currentTime - startTime
            }

            if (secondOpeningDuration > firstOpeningDuration) {
              all(#AirConditioner #Wall).switch_off()
            }
          }

          if ((#DoorLock #Wall)).doorControl_door == closed) {
            doorClosedCount++
          }

          wait until(currentTime + 2000 > (#Clock).clock_timestamp)
        }

        if (firstOpeningDuration > 0) {
          (#Light #Wall).colorControl_setColor("YELLOW")
          repeat 5 times {
            wait until(#Clock).clock_delay(2000)
            (#Light #Wall).colorControl_setColor("OFF")
            wait until(#Clock).clock_delay(2000)
            (#Light #Wall).colorControl_setColor("YELLOW")
          }
          (#Light #Wall).colorControl_setColor("OFF")
        }
      }
  elapsed_time: 41.015 seconds
- command: "에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘."
  command_translated: "Check the humidity every 10 seconds from the time the window is opened with the air conditioner off, and if the humidity exceeds 60%, lower the blinds and turn off the lights. Then, when the door is closed, sound an alarm with a 5-second delay, blink the lights every 1 second while the door is open for 1 minute after the alarm sounds, and then check in real-time to say \"door closed\" over the speaker when the door is closed."
  devices:
  - Alarm
  - Siren
  - DoorLock
  - Curtain
  - Shade
  - AirConditioner
  - Window
  - WeatherProvider
  - AirQualityDetector
  - Blind
  - Clock
  - TemperatureSensor
  - Speaker
  - Light
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      windowOpened := false
      blindsDown := false
      lightsOff := false
      doorClosed := false
      if (((#Window).windowControl_window == open) and (#AirConditioner).airConditionerMode_airConditionerMode == auto) {
        windowOpened = true
        wait until(windowOpened == false)
        all(#Blind).blind_close()
        all(#Light).switch_off()
        blindsDown = true
        lightsOff = true
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      doorClosed := false
      if (((#DoorLock).doorControl_door == closed) and (doorClosed == false)) {
        doorClosed = true
        wait until(doorClosed == false)
        (#Alarm).alarm_siren()
        (#Speaker).mediaPlayback_speak("문 닫힘")
        repeat 60 times {
          (#Light).switch_toggle()
          (#Clock).clock_delay(1000)
        }
        (#Speaker).mediaPlayback_speak("문 닫힘")
        doorClosed = true
      }
  elapsed_time: 29.520 seconds
- command: "습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘."
  command_translated: "Wait until the humidity is above 70%, then turn on the dehumidifier after 5 seconds if the window is open, and turn on the air conditioner if the temperature rises above 30 degrees after the dehumidifier is turned on. If the blinds are opened while the air conditioner is on, it will open and close the curtains every 10 seconds from then on. If it detects motion, it will turn off the alarm, and if there is no motion for 5 seconds, it will sound the alarm again."
  devices:
  - MotionSensor
  - Dehumidifier
  - Alarm
  - Siren
  - Curtain
  - DoorLock
  - AirConditioner
  - AirPurifier
  - Window
  - Humidifier
  - AirQualityDetector
  - Blind
  - TemperatureSensor
  - WeatherProvider
  - Clock
  - Speaker
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(relativeHumidityMeasurement_humidity > 70.0)
      (#Window).windowControl_open()


      (#Clock).clock_delay(5000)
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode("dehumidifying")


      wait until(temperatureMeasurement_temperature > 30.0)
      (#AirConditioner).switch_on()


      repeat forever
        wait until(blinds_blind != "unknown")
        repeat forever
          wait until(blinds_blind == "open")
          (#Curtain).blind_open()
          wait until(blinds_blind == "closed")
          (#Curtain).blind_close()
        end
      end


      repeat forever
        wait until(presenceDetection_presence == true)
        (#Alarm).alarm_off()
        wait until(clock_delay(5000))
        if (presence_detection_presence == false) {
          (#Alarm).alarm_siren()
        }
      end
  elapsed_time: 24.249 seconds
- command: "조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘."
  command_translated: "If a door is opened with the lights on and windows closed, wait 3 seconds before sounding the siren. If the window doesn't open for 10 seconds after the siren sounds, close the curtains, turn off the lights, and turn on the fan at 50% speed. Then, if the temperature is above 27 degrees, switch your air conditioner to cool mode and repeat the motion detection three times, opening and closing the blinds every second. However, if the speaker turns on in the middle, stop everything and turn it off."
  devices:
  - MotionSensor
  - Alarm
  - Siren
  - Curtain
  - DoorLock
  - Shade
  - AirConditioner
  - Window
  - WeatherProvider
  - Blind
  - TemperatureSensor
  - Clock
  - Speaker
  - Switch
  - Fan
  - Light
  generated_code: []
  elapsed_time: 56.542 seconds
- command: "실시간으로 확인해서 조명이 꺼져 있고 창문이 열려 있는 상태에서 움직임 감지되면 3초 대기 후 조명을 켜고, 5초 후 블라인드를 닫아 줘. 이후 10초마다 알람을 한 번 1초간 울리되, 알람이 두 번 울린 후에는 에어컨을 ‘cool’ 모드로 전환해 줘. 단, 움직임이 감지된 이후 문이 열리면 모든 동작을 중지하고 커튼을 닫아 줘."
  command_translated: "Check in real time and if motion is detected with the lights off and windows open, wait 3 seconds before turning on the lights and 5 seconds before closing the blinds. Sound the alarm once every 10 seconds for one second, but after two alarms, switch the air conditioner to \"cool\" mode. However, if the door is opened after motion is detected, stop all motion and close the curtains."
  devices:
  - MotionSensor
  - Alarm
  - Siren
  - Curtain
  - DoorLock
  - AirConditioner
  - LightSensor
  - Window
  - AirQualityDetector
  - Blind
  - TemperatureSensor
  - Clock
  - Speaker
  - Switch
  - Light
  - ContactSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      motionDetected := false
      alarmsTriggered := 0
      doorOpened := false

      if (((#MotionSensor).motionSensor_motion == active) and ((#Light).chargingState_chargingState == off) and ((#Window).windowStatus == open))) {
        if (!motionDetected) {
          motionDetected = true
          wait until(#Clock).clock_delay(3000)

          (#Light).switch_on()
          wait until(#Clock).clock_delay(5000)

          (#Blind).curtain_close()
        }

        if (alarmsTriggered < 2) {
          (#Alarm).soundAlarmForOneSecond()
          alarmsTriggered += 1

          if (alarmsTriggered == 2) {
            (#AirConditioner).refrigeration_setRapidCooling()
          }
        } else {
          (#AirConditioner).stopAllActions()
          (#Curtain).curtain_close()
        }
      }

      if ((#DoorLock).status == open) {
        doorOpened = true

        (#AirConditioner).stopAllActions()
        (#Curtain).curtain_close()
      }

      if (doorOpened) {
        break
      }
  elapsed_time: 28.098 seconds
- command: "매주 월요일 아침 7시에 조명을 20으로 설정해 줘. 이후 실시간으로 확인해서 자정까지 움직임이 감지될 때마다 블라인드를 열고, 3초 간격으로 커튼을 두 번 열었다 닫아 줘. 커튼을 조정할 때마다 창문이 열려 있으면 선풍기를 켜고, 닫혀 있으면 에어컨을 꺼 줘."
  command_translated: "Every Monday morning at 7am, set the lights to 20. Then check in real-time and open the blinds whenever it detects motion until midnight, and open and close the curtains twice, three seconds apart. Each time you adjust the curtains, turn on the fan if the windows are open and turn off the air conditioner if they're closed."
  devices:
  - MotionSensor
  - Siren
  - Curtain
  - DoorLock
  - Shade
  - AirConditioner
  - LightSensor
  - Window
  - Blind
  - Clock
  - TemperatureSensor
  - Speaker
  - Button
  - Fan
  - Light
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: "0 7 * * 1"
    period: 0
    code: |
      (#Light).colorControl_setColor("FFFFFF")
  - name: "Scenario2"
    cron: "0 7 * * 1"
    period: 1000
    code: |
      wait until(#Clock).clock_hour == 23
      (#Blind).blind_open()
  - name: "Scenario3"
    cron: "0 7 * * 1"
    period: 1000
    code: |
      wait until(#Clock).clock_hour == 23
      (#Blind).blind_close()
  - name: "Scenario4"
    cron: "0 7 * * 1"
    period: 1000
    code: |
      wait until(#Clock).clock_hour == 23
      (#Curtain).curtain_open()
  - name: "Scenario5"
    cron: "0 7 * * 1"
    period: 1000
    code: |
      wait until(#Clock).clock_hour == 23
      (#Curtain).curtain_close()
  - name: "Scenario6"
    cron: "0 7 * * 1"
    period: 1000
    code: |
      wait until(#Clock).clock_hour == 23
      (#Fan).fanControl_setFanSpeed(100)
  - name: "Scenario7"
    cron: "0 7 * * 1"
    period: 1000
    code: |
      wait until(#Clock).clock_hour == 23
      (#AirConditioner).switch_off()
  elapsed_time: 26.644 seconds
- command: "매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘."
  command_translated: "Sound the siren at 10pm every night if the bottom window is open and the even-tagged light is on. If you sound the siren, close the blinds after 5 seconds. After 5 seconds, regardless of whether you sounded the siren or not, check in real-time and close the curtains when the odd-tagged door opens and closes twice. After closing the curtains, turn the alarm's light on and off for the total time the door was opened twice."
  devices:
  - SoundSensor
  - Alarm
  - Valve
  - Siren
  - Curtain
  - DoorLock
  - Shade
  - Timer
  - Window
  - Blind
  - Clock
  - Buttonx4
  - Speaker
  - Button
  - Light
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: "0 22 * * *"
    period: 0
    code: |
      if (((#Window).windowControl_window == open) and ((#Light).switch_switch == on)) {
        (#Alarm).alarm_siren()
        wait until(#Blind).blind_blind == closed
        (#Blind).blind_close()
      }

      name = "Scenario2"
      cron = "0 22 * * *"
      period = 10000
      var doorOpensCount := 0
      if (#Odd).doorControl_door == open) {
        doorOpensCount += 1
        wait until(#Odd).doorControl_door == closed
        doorOpensCount += 1
        if (doorOpensCount == 2) {
          (#Curtain).windowShade_close()
          var totalTimeOpened := (#Clock).clock_elapsedTime
          (#Alarm).alarm_both(totalTotalOpened)
        }
      }
  elapsed_time: 27.951 seconds
- command: "매일 실시간으로 검사해서 로봇청소기가 작동 중이면서 움직임이 감지될 때마다 10초 후 스피커로 “청소 중입니다”라는 음성을 재생해 줘. 또한 습도가 60%를 넘으면 홀수 태그가 붙은 공기청정기를 켜 줘. 공기청정기가 켜져 있는 동안 TV 전원을 3초마다 껐다 켰다 해 줘. 창문이 5분 연속으로 열려 있을 때마다 닫아 줘."
  command_translated: "Check in real-time every day to make sure your robot vacuum is running and playing a \"cleaning\" voice over the speaker after 10 seconds whenever it detects motion. It also turns on the odd-tagged air purifiers when the humidity is above 60%. Power cycle your TV every 3 seconds while the air purifier is on. Close your windows whenever they are open for five consecutive minutes."
  devices:
  - MotionSensor
  - Dehumidifier
  - Television
  - AirPurifier
  - RobotCleaner
  - Window
  - Humidifier
  - AirQualityDetector
  - WeatherProvider
  - TemperatureSensor
  - SoilMoistureSensor
  - Clock
  - Speaker
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |
      if (not (#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == auto) {
        (#RobotCleaner).robotCleanerCleaningMode_setRobotCleanerCleaningMode(auto)
      }

      wait until(#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == auto

      (#Speaker).mediaPlayback_play("cleaning")


      if (any(#AirPurifier #Odd).relativeHumidityMeasurement_humidity > 60.0) {
        all(#AirPurifier #Odd).switch_on()
      } else {
        all(#AirPurifier #Odd).switch_off()
      }


      if (any(#AirPurifier #Odd).switch_switch == on) {
        wait until(#Television).powerMeter_power == on
        (#Television).tvPowerCycle_cycleOn()

        wait until(#AirPurifier #Odd).switch_switch == off
        (#Television).switch_off()
      }


      openCount := 0
      closeTime := 0

      repeat forever {
        if (#Window).windowControl_window == open) {
          openCount += 1
          closeTime = (#Clock).clock_timestamp
        } else {
          openCount = 0
        }

        if (openCount >= 5) {
          (#Window).windowControl_close()
        }

        wait until(#Clock).clock_delay(10000)
      }
  elapsed_time: 42.896 seconds
- command: "실시간으로 확인해서 벽면 조명이 꺼져 있고 홀수 태그가 붙은 커튼이 닫힌 상태에서 문이 열리면, 5초 후 그 조명을 켜고 창문을 열어 줘. 이후 30초 동안 움직임이 감지되지 않으면 알람의 사이렌을 울려 줘. 30초가 모두 지난 뒤 에어컨이 꺼져 있고 실내 온도가 28도 이상이면 에어컨을 켜 줘. 또한 그 때 짝수 태그가 붙은 선풍기가 켜져 있으면 꺼 주고, 켜져 있지 않으면 그대로 두도록 해 줘."
  command_translated: "If a door is opened with a wall light off and an odd-tagged curtain closed, turn on the light and open the window after 5 seconds. If no motion is detected for the next 30 seconds, sound the alarm's siren. After the 30 seconds are up, if the air conditioner is off and the room temperature is above 28 degrees, turn on the air conditioner. Also, if the fan with the even tag is on at that time, turn it off, otherwise leave it on."
  devices:
  - MotionSensor
  - Alarm
  - SoundSensor
  - Siren
  - GasValve
  - Curtain
  - DoorLock
  - Shade
  - AirConditioner
  - Window
  - WeatherProvider
  - TemperatureSensor
  - Clock
  - Speaker
  - Fan
  - Light
  - HumiditySensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if (((#DoorLock).doorControl_door == open) and ((#Light).switch_switch == off) and ((#Curtain #Odd).curtain_curtain == closed)) {
        (#Light).switch_on()
        wait until(#Window).windowControl_window == closed
        (#Window).windowControl_open()
        wait until(#Clock).clock_delay(5000)
        if ((#AirConditioner).airConditionerMode_airConditionerMode != auto) {
          (#AirConditioner).airConditionerMode_setAirConditionerMode(auto)
        }
        if ((#TemperatureSensor).temperatureMeasurement_temperature > 28.0) {
          (#AirConditioner).airConditionerMode_setAirConditionerMode(cool)
          (#AirConditioner).airConditionerMode_setTemperature(27.0)
        }
        if ((#Fan #Even).fanControl_fanSpeed == on) {
          (#Fan #Even).switch_toggle()
        }
      }

      name = "Scenario2"
      cron = ""
      period = 30000
      if ((#MotionSensor).motionSensor_motion == inactive) {
        if ((#AirConditioner).airConditionerMode_airConditionerMode == off) {
          if ((#TemperatureSensor).temperatureMeasurement_temperature > 28.0) {
            (#AirConditioner).airConditionerMode_setAirConditionerMode(cool)
            (#AirConditioner).airConditionerMode_setTemperature(27.0)
          }
        }
        if ((#Fan #Even).fanControl_fanSpeed == on) {
          (#Fan #Even).switch_toggle()
        }
        wait until(#Clock).clock_delay(5000)
        if ((#AirConditioner).airConditionerMode_airConditionerMode == cool) {
          (#Alarm).alarm_siren()
        }
      }
  elapsed_time: 24.386 seconds
