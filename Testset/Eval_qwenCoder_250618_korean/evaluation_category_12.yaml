- command: "실시간으로 확인하여 토양 습도 센서의 값이 30% 이하가 되면 관개 장치를 켜 줘, 또한 1초마다 체크해서 온도가 25도를 넘으면 펌프를 꺼 줘."
  command_translated: "Check in real-time to turn on the irrigation when the soil moisture sensor reads 30% or less, and also check every second to turn off the pump when the temperature exceeds 25 degrees."
  devices:
  - SoilMoistureSensor
  - SoundSensor
  - ContactSensor
  - TemperatureSensor
  - HumiditySensor
  - Irrigator
  - Pump
  - Speaker
  - LeakSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0)
      all(#Irrigator).switch_on()

      name = "Scenario2"
      cron = ""
      period = 100
      wait until((#TemperatureSensor).temperatureMeasurement_temperature > 25.0)
      all(#Pump).switch_off()
  elapsed_time: 6.951 seconds
- command: "펌프가 꺼지면 스피커를 켜고, 토양 습도 센서의 값이 20% 이하가 되면 관개 장치를 켜 줘."
  command_translated: "Turn on the speaker when the pump is off, and turn on the irrigation when the soil moisture sensor reads 20% or less."
  devices:
  - SoilMoistureSensor
  - SoundSensor
  - Dehumidifier
  - ContactSensor
  - TemperatureSensor
  - HumiditySensor
  - Irrigator
  - Pump
  - Speaker
  - LeakSensor
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Pump).pump_pump == "off")
      (#Speaker).switch_on()
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)
      (#Irrigator).switch_on()
  elapsed_time: 7.027 seconds
- command: "토양 습도 센서의 값이 25% 이하로 떨어진 후 10초 동안 값이 변하지 않으면 알람의 사이렌을 울려 줘. 그리고 조명은 그냥 꺼 줘."
  command_translated: "If the soil moisture sensor's reading drops below 25% and doesn't change for 10 seconds, sound the alarm's siren. And just turn off the lights."
  devices:
  - SoilMoistureSensor
  - Siren
  - SoundSensor
  - Alarm
  - Clock
  - TemperatureSensor
  - MotionSensor
  - HumiditySensor
  - Speaker
  - LightSensor
  - LeakSensor
  - Light
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      low_moisture := false
      last_moisture_reading := 0.0

      if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) and (not last_moisture_reading == (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity)) {
        low_moisture := true
      }

      if (low_moisture) {
        wait until(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity == (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
        last_moisture_reading := (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
        if (last_moisture_reading < 25.0) {
          (#Alarm).alarm_siren()
          (#Light).switch_off()
        }
      } else {
        low_moisture := false
        break
      }
  elapsed_time: 12.324 seconds
- command: "실시간으로 확인하여 조명이 켜지면 펌프를 켜 줘, 토양 습도 센서의 값이 30% 이하로 떨어지면 블라인드를 닫아 줘."
  command_translated: "Check in real-time to turn on the pump when the lights come on, or close the blinds when the soil moisture sensor drops below 30%."
  devices:
  - SoilMoistureSensor
  - ContactSensor
  - Clock
  - TemperatureSensor
  - HumiditySensor
  - Pump
  - PresenceSensor
  - Speaker
  - LightSensor
  - LeakSensor
  - Light
  - Blind
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      lightTriggered := false
      pumpOn := false
      blindsClosed := false

      if (((#Light)).switch_switch == "on") and (not lightTriggered)) {
        all(#Pump).switch_on()
        lightTriggered = true
        pumpOn = true
      }

      if (((#SoilMoistureSensor)).soilHumidityMeasurement_soilHumidity < 30.0) and (not blindsClosed)) {
        all(#Blind).blind_close()
        blindsClosed = true
        pumpOn = false
      }

      if (pumpOn and (not blindsClosed)) {
        all(#Blind).blind_close()
        blindsClosed = true
        pumpOn = false
      }

      if (blindsClosed and (not pumpOn)) {
        all(#Pump).switch_on()
        pumpOn = true
        blindsClosed = false
      }

      if (not ((#Light)).switch_switch == "on") and (lightTriggered)) {
        all(#Pump).switch_off()
        lightTriggered = false
        pumpOn = false
      }

      if (not ((#SoilMoistureSensor)).soilHumidityMeasurement_soilHumidity < 30.0) and (blindsClosed)) {
        all(#Blind).blind_open()
        blindsClosed = false
        pumpOn = false
      }
  elapsed_time: 16.009 seconds
- command: "관개 장치가 꺼지고 나서 토양 습도 센서의 값이 20% 이하로 떨어지면 사이렌과 경광등을 켜 줘. 커튼이 닫혀 있으면 열어 줘."
  command_translated: "Turn on the siren and lights if the soil moisture sensor drops below 20% after the irrigation is turned off. Open the curtains if they are closed."
  devices:
  - SoilMoistureSensor
  - Siren
  - Alarm
  - Dehumidifier
  - Curtain
  - TemperatureSensor
  - Clock
  - Irrigator
  - HumiditySensor
  - Speaker
  - LightSensor
  - LeakSensor
  - Light
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Irrigator).irrigatorOperatingState_irrigatorOperatingState == "idle")
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)
      all(#Siren).switch_on()
      all(#Light).switch_on()
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until(all(#Curtain).curtain_curtain == "closed")
      all(#Curtain).curtain_open()
  elapsed_time: 8.411 seconds
- command: "실시간으로 확인하여 문이 열릴 때마다 조명을 켜 줘, TV가 꺼지면 스피커를 끄고 블라인드를 닫아 줘."
  command_translated: "Check in real-time to turn on the lights whenever a door is opened, turn off the speakers when the TV is turned off, and close the blinds."
  devices:
  - Siren
  - Alarm
  - DoorLock
  - Television
  - Curtain
  - Clock
  - Window
  - Speaker
  - LightSensor
  - Light
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      doorOpened := false
      if ((#DoorLock).doorControl_door == "open") {
        if (doorOpened == false) {
          (#Light).switch_on()
          doorOpened = true
        }
      } else {
        doorOpened = false
      }


      (#Blind).blind_close()


      tvOn := (#Television).switch_switch == "on"
      speakerOn := (#Speaker).switch_switch == "on"
      if (!tvOn && speakerOn) {
        (#Speaker).switch_off()
      }
  elapsed_time: 22.279 seconds
- command: "제습기가 꺼지면 켜 줘, 조명이 꺼져 있으면 밝기를 50퍼센트로 설정해 줘."
  command_translated: "If the dehumidifier is off, turn it on; if the lights are off, set the brightness to 50 percent."
  devices:
  - Alarm
  - Dehumidifier
  - Clock
  - Humidifier
  - AirPurifier
  - Irrigator
  - Speaker
  - LightSensor
  - Shade
  - Light
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Dehumidifier).switch_switch == "off") {
        (#Dehumidifier).switch_on()
      }

      if ((#Light).switch_switch == "off") {
        (#Light).switchLevel_setLevel(50, 100)
      }
  elapsed_time: 6.189 seconds
- command: "창문이 열리면 블라인드를 닫고, 조명이 꺼지면 선풍기를 켜 줘."
  command_translated: "Close the blinds when the windows are open, turn on the fan when the lights are off."
  devices:
  - Siren
  - DoorLock
  - Valve
  - Curtain
  - Clock
  - Window
  - Pump
  - Speaker
  - Fan
  - GasValve
  - Shade
  - Light
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until(all(#Window).windowControl_window == open.open)
      all(#Blind).blind_close()
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until(all(#Light).switch_switch == switchEnum.off)
      all(#Fan).fanControl_setFanSpeed()
  elapsed_time: 6.668 seconds
- command: "실시간으로 확인하여 움직임이 감지되면 커튼을 닫고, 지금 알람의 사이렌을 울려 줘."
  command_translated: "Check in real-time, close the curtains when motion is detected, and sound the siren of your alarm now."
  devices:
  - Siren
  - SoundSensor
  - FallDetector
  - Alarm
  - DoorLock
  - ContactSensor
  - Curtain
  - MotionSensor
  - Window
  - Speaker
  - Clock
  - SmokeDetector
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      wait until(any(#MotionSensor).motionSensor_motion == active)
      all(#Curtain).curtain_close()

      name = "Scenario2"
      cron = ""
      period = -1
      (#Alarm).alarm_siren()
      (#Speaker).mediaPlayback_speak("사이렌이 울렸습니다.")
  elapsed_time: 6.661 seconds
- command: "창문이 열리면 10초 후 커튼을 열어 줘. 창문과 상관없이, 5초마다 조명을 켰다 꺼 줘."
  command_translated: "If a window is open, open the curtains after 10 seconds. Turn the lights on and off every 5 seconds, regardless of the window."
  devices:
  - Siren
  - Alarm
  - DoorLock
  - LightSensor
  - Curtain
  - Clock
  - Window
  - Speaker
  - GasValve
  - Shade
  - Light
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      if ((#Window).windowControl_window == open) {
        wait until(#Window).windowControl_window == open
        (#Curtain).blind_open()
      }
  - name: "Scenario2"
    cron: ""
    period: 5000
    code: |
      (#Light).switch_toggle()
  elapsed_time: 6.423 seconds
