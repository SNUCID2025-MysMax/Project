- command: "실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘."
  command_translated: "Check in real-time and turn on the waterer whenever the soil humidity drops below 25% and announce \"Start watering\" over the speaker."
  devices:
  - SoilMoistureSensor
  - TemperatureSensor
  - Humidifier
  - HumiditySensor
  - Irrigator
  - Speaker
  - LeakSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |
      check_moisture := false
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {
        if (check_moisture == false) {
          all(#Timer).switch_on()
          (#Speaker).mediaPlayback_speak("급수 시작")
          check_moisture = true
        }
      } else {
        check_moisture = false
      }

      if (check_moisture == true) {
        wait until(all(#Timer).irrigatorOperatingState_irrigatorOperatingState != idle)
        all(#Timer).switch_off()
        (#Speaker).mediaPlayback_speak("물주기 완료")
        check_moisture = false
      }
  elapsed_time: 11.610 seconds
- command: "1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘."
  command_translated: "Check the status every 1 second and turn on the fan whenever the temperature exceeds 35 degrees."
  devices:
  - Buttonx4
  - TemperatureSensor
  - Window
  - Calculator
  - Irrigator
  - Speaker
  - Fan
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {
        (#Fan).fanControl_setPercent(100)
      } else {
        (#Fan).fanControl_setPercent(0)
      }
  elapsed_time: 5.445 seconds
- command: "3초마다 일조량을 확인해서 200룩스 이하로 떨어지면 조명을 켜 줘."
  command_translated: "Check the sunlight every 3 seconds and turn on the lights when it drops below 200 lux."
  devices:
  - Siren
  - Alarm
  - Clock
  - TemperatureSensor
  - Speaker
  - LightSensor
  - Shade
  - Light
  - Blind
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |
      var lightOn := false
      if ((#LightSensor).lightLevel_light < 200) {
        if (lightOn == false) {
          (#Light).switch_on()
          lightOn = true
        }
      } else {
        if (lightOn == true) {
          (#Light).switch_off()
          lightOn = false
        }
      }
  elapsed_time: 7.106 seconds
- command: "문이 열릴 때마다 경광등과 조명을 켜 줘. 실시간으로 확인해서 상태를 계속 검사해서 반응해 줘."
  command_translated: "Turn on sirens and lights whenever a door is opened. Check in real time and react by constantly checking the status."
  devices:
  - Timer
  - Siren
  - Alarm
  - DoorLock
  - Clock
  - Window
  - Speaker
  - LightSensor
  - Light
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if (any(#DoorLock).doorControl_door == "open") {
        all(#Siren).switch_on()
        all(#Light).switch_on()
      }

      if (any(#DoorLock).doorControl_door != "open") {
        all(#Siren).switch_off()
        all(#Light).switch_off()
        break
      }
  elapsed_time: 6.508 seconds
- command: "현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자."
  command_translated: "Whenever rain is detected in the current weather, turn off the irrigation and announce \"Rain detected\" to the speaker. The detection should only happen once a minute."
  devices:
  - FallDetector
  - TemperatureSensor
  - MotionSensor
  - Irrigator
  - Speaker
  - LeakSensor
  - Clock
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 60000
    code: |
      weather_provider := false
      if (any(#WeatherProvider).weatherProvider_weather == thunderstorm || any(#WeatherProvider).weatherProvider_weather == rain) {
        if (!weather_provider) {
          all(#Irrigator).switch_off()
          (#Speaker).mediaPlayback_speak("비 감지")
          weather_provider = true
        }
      } else {
        weather_provider = false
      }

      name = "Scenario2"
      cron = ""
      period = 60000
      if (any(#WeatherProvider).weatherProvider_weather != thunderstorm && any(#WeatherProvider).weatherProvider_weather != rain) {
        weather_provider = false
      }
  elapsed_time: 9.718 seconds
- command: "실시간으로 확인해서 거실 창문이 열릴 때마다 블라인드를 닫아 줘."
  command_translated: "Check in real-time and close the blinds whenever the living room window opens."
  devices:
  - OccupancySensor
  - DoorLock
  - Valve
  - Curtain
  - Clock
  - Window
  - Pump
  - Speaker
  - Shade
  - PresenceSensor
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#Window).windowControl_window == open) {
        (#Blind).blind_close()
      }
  elapsed_time: 4.435 seconds
- command: "조명이 켜질 때마다 커튼을 동시에 열어 줘. 실시간으로 조명을 체크해야 해."
  command_translated: "Open the curtains at the same time whenever the lights come on. I need to check the lights in real time."
  devices:
  - Timer
  - Siren
  - Alarm
  - DoorLock
  - Curtain
  - Clock
  - Window
  - Speaker
  - LightSensor
  - Light
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      currentLightsStatus := false
      if (((#Light)).switch_switch == "on") {
        if (currentLightsStatus == false) {
          (#Curtain).curtain_close("open")
          currentLightsStatus = true
        }
      } else {
        currentLightsStatus = false
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      if (((#Light)).switch_switch == "on") {
        if (currentLightsStatus == false) {
          (#Curtain).curtain_close("open")
          currentLightsStatus = true
        }
      } else {
        currentLightsStatus = false
      }
  elapsed_time: 10.220 seconds
- command: "2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘."
  command_translated: "Check status every 2 seconds and turn on the speakers whenever the TV turns on."
  devices:
  - Timer
  - AirQualityDetector
  - Television
  - Buttonx4
  - Window
  - Irrigator
  - Speaker
  - Clock
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |
      statusUpdated := false
      if (((#Television).tvChannel_tvChannel != 0) and (statusUpdated == false)) {
        (#Speaker).mediaPlayback_play("TV turned ON! Playing music...")
        statusUpdated = true
      } else {
        statusUpdated = false
        break
      }
  elapsed_time: 6.422 seconds
- command: "현관 문이 열릴 때마다 즉시 알람의 경광등을 켜 줘. 확인은 실시간으로 하구."
  command_translated: "Instantly turn on the alarm's light whenever the front door is opened. Check in real time."
  devices:
  - Timer
  - Siren
  - Alarm
  - DoorLock
  - Clock
  - Window
  - Speaker
  - LightSensor
  - Light
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |
      if ((#DoorLock).doorControl_door == "open") {
        (#Alarm).alarm_strobe()
      }

      name = "Scenario2"
      cron = ""
      period = 100
      if ((#DoorLock).doorControl_door != "open") {
        (#Alarm).alarm_off()
      }
  elapsed_time: 6.266 seconds
- command: "1초마다 공기청정기 상태를 확인해서 꺼지면 자동 모드로 다시 켜 줘."
  command_translated: "Check the status of the air purifier every 1 second and turn it back on automatically if it turns off."
  devices:
  - AirQualityDetector
  - Dehumidifier
  - AirPurifier
  - Window
  - Humidifier
  - Irrigator
  - Speaker
  - Fan
  - GasValve
  - Clock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |
      status := (#AirPurifier).switch_switch
      if (status == false) {
        (#AirPurifier).switch_on()
        break
      }
  elapsed_time: 5.007 seconds
