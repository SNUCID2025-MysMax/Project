- devices:
  - HumiditySensor
  - AirConditioner
  - SoilMoistureSensor
  - AirPurifier
  - Humidifier
  - Clock
  - AirQualityDetector
  - WeatherProvider
  generated_code: |-
    name = "Scenario1"
    cron = "0 9 * * 1-5"
    period = 0
    if (((#Window).contactContactSensor_contact == 'closed') and (#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000 and (#AirQualityDetector).temperatureMeasurement_temperature >= 30.0) {
      (#Clock).clock_delay(0, 0, 5)
      (#Window).windowControl_open()
      if ((#Fan).switch_switch == 'off' ) {
        (#Fan).switch_on()
      }
    }
    ---
    name = "Scenario2"
    cron = ""
    period = 100
    count := 0
    if ((#AirQualityDetector).dustSensor_fineDustLevel >= 50) {
      count = count + 1
    } else {
      count = 0
      }
    if (count >= 60) {
      (#Window).windowControl_close()
      (#Fan).switch_off()
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0){
        (#Humidifier).switch_on()
      }
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0 and (#Irrigator).switch_switch == 'off') {
        (#Irrigator).switch_on()
      }
    }
  transformed_code:
  - name: "Scenario1"
    cron: "0 9 * * 1-5"
    period: 0
    code: |
      if (((#Window).contactContactSensor_contact == 'closed') and (#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000 and (#AirQualityDetector).temperatureMeasurement_temperature >= 30.0) {
        (#Clock).clock_delay(0, 0, 5)
        (#Window).windowControl_open()
        if ((#Fan).switch_switch == 'off' ) {
          (#Fan).switch_on()
        }
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |
      count := 0
      if ((#AirQualityDetector).dustSensor_fineDustLevel >= 50) {
        count = count + 1
      } else {
        count = 0
        }
      if (count >= 60) {
        (#Window).windowControl_close()
        (#Fan).switch_off()
        if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0){
          (#Humidifier).switch_on()
        }
        if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0 and (#Irrigator).switch_switch == 'off') {
          (#Irrigator).switch_on()
        }
      }
  label:
  - name: Scenario1
    cron: 0 9 * * *
    period: 100
    code: "phase := 0\nconsecutive_time := 0\n\nif ((#Clock).clock_weekday == \"saturday\") or ((#Clock).clock_weekday == \"sunday\") {\n  break\n}\n\nif (phase == 0) {\n  if ((#Window).windowControl_window == \"closed\") and \n      ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and \n      ((#AirQualityDetector).temperatureMeasurement_temperature >= 30.0) {\n\n    (#Clock).clock_delay(0, 0, 5)\n    (#Window).windowControl_open()\n\n    if ((#Fan).switch_switch == \"off\") {\n      (#Fan).switch_on()\n    }\n\n    phase = 1\n  }\n\n} else if (phase == 1) {\n  if ((#AirQualityDetector).dustSensor_fineDustLevel >= 50) {\n    consecutive_time = consecutive_time + 100\n  } else {\n    consecutive_time = 0\n  }\n\n  if (consecutive_time >= 60000) {\n    (#Window).windowControl_close()\n    (#Fan).switch_off()\n\n    if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0) {\n      (#Humidifier).switch_on()\n    }\n\n    if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) and \n        ((#Irrigator).switch_switch == \"off\") {\n      (#Irrigator).switch_on()\n    }\n\n    break\n  }\n}\n"
  compare_results: []
  model_info:
    prompt_tokens: 4222
    completion_tokens: 281
    total_tokens: 4503
  command: 매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘.그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘.만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘.
- devices:
  - Siren
  - AirConditioner
  - Window
  - Alarm
  - Shade
  - Clock
  - DoorLock
  - Blind
  generated_code: |-
    name = "Scenario1"
    cron = "0 9 * * *"
    period = 0
    opened_times := 0
    first_open_time := 0.0
    second_open_time := 0.0
    siren_time := 0.0
    if ((any(#Light).switch_switch == 'off') and (any(#Window #Bottom #Odd).windowControl_window == 'closed')) {
      all(#Blind).blind_open()
    }
    ---
    name = "Scenario2"
    cron = ""
    period = -1
    wait until(any(#Window #Bottom #Odd).windowControl_window == 'open')
    opened_times = opened_times + 1
    if (opened_times == 1) {
      first_open_time = (#Clock).clock_timestamp
    }
    else if (opened_times == 2) {
      second_open_time = (#Clock).clock_timestamp
    }
    (#Clock).clock_delay(hour: 0, minute: 0, second: 5)
    (#Alarm).alarm_siren()
    siren_time = (#Clock).clock_timestamp
    ---
    name = "Scenario3"
    cron = ""
    period = 100
    check_count := 0
    while (check_count < 10 and ((#Window #Bottom #Odd).windowControl_window != 'closed')) {
      check_count = check_count + 1
      if (check_count >= 10) {
        cron = ""
        period = 2000
        any(#Light).switch_toggle()
      }
    }
    ---
    name = "Scenario4"
    cron = ""
    period = -1
    wait until((#Clock).clock_timestamp >= siren_time + 10.0)
    if (second_open_time > first_open_time) {
      all(#AirConditioner #Wall).switch_off()
    }
  transformed_code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: 0
    code: |
      opened_times := 0
      first_open_time := 0.0
      second_open_time := 0.0
      siren_time := 0.0
      if ((any(#Light).switch_switch == 'off') and (any(#Window #Bottom #Odd).windowControl_window == 'closed')) {
        all(#Blind).blind_open()
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until(any(#Window #Bottom #Odd).windowControl_window == 'open')
      opened_times = opened_times + 1
      if (opened_times == 1) {
        first_open_time = (#Clock).clock_timestamp
      }
      else if (opened_times == 2) {
        second_open_time = (#Clock).clock_timestamp
      }
      (#Clock).clock_delay(hour: 0, minute: 0, second: 5)
      (#Alarm).alarm_siren()
      siren_time = (#Clock).clock_timestamp
  - name: "Scenario3"
    cron: ""
    period: 100
    code: |
      check_count := 0
      while (check_count < 10 and ((#Window #Bottom #Odd).windowControl_window != 'closed')) {
        check_count = check_count + 1
        if (check_count >= 10) {
          cron = ""
          period = 2000
          any(#Light).switch_toggle()
        }
      }
  - name: "Scenario4"
    cron: ""
    period: -1
    code: |
      wait until((#Clock).clock_timestamp >= siren_time + 10.0)
      if (second_open_time > first_open_time) {
        all(#AirConditioner #Wall).switch_off()
      }
  label:
  - name: Scenario1
    cron: 0 9 * * *
    period: 100
    code: |
      state := 0
      blind_opened := false
      alarm_time := 0
      door_open_flag := false
      door_open_count := 0
      first_open_start := 0
      first_open_end := 0
      second_open_start := 0
      second_open_end := 0
      blink_mode := false
      window_closed_during_monitoring := false

      if (state == 0) {
        if ((#Light).switch_switch == 'off' and (#Window #Lower #Odd).windowControl_window == 'closed') {
          all(#Blind).blind_open()
          blind_opened = true
        }
        state = 1
      }

      if (state == 1 and (#Window #Lower #Odd).windowControl_window == 'open') {
        (#Clock).clock_delay(0, 0, 5)
        (#Alarm).alarm_siren()
        alarm_time = (#Clock).clock_timestamp
        state = 2
      }

      if (state == 2) {
        now = (#Clock).clock_timestamp

        if ((now - alarm_time) <= 10 and (#Window #Lower #Odd).windowControl_window == 'closed') {
          window_closed_during_monitoring = true
        }

        if ((now - alarm_time) >= 10) {
          if (window_closed_during_monitoring == false) {
            blink_mode = true
          }

          if (blind_opened == true and door_open_count >= 2) {
            first_duration = first_open_end - first_open_start
            second_duration = second_open_end - second_open_start
            if (second_duration > first_duration) {
              all(#AirConditioner #Wall).switch_off()
            }
          }

          state = 3
        }
      }

      if (state == 3 and blink_mode == true) {
        (#Light).switch_toggle()
        (#Clock).clock_delay(0, 0, 2)
      }

      if ((#DoorLock).doorControl_door == 'open' and door_open_flag == false) {
        door_open_flag = true
        now = (#Clock).clock_timestamp
        door_open_count = door_open_count + 1
        if (door_open_count == 1) {
          first_open_start = now
        } else if (door_open_count == 2) {
          second_open_start = now
        }
      }
      if ((#DoorLock).doorControl_door == 'closed' and door_open_flag == true) {
        door_open_flag = false
        now = (#Clock).clock_timestamp
        if (door_open_count == 1) {
          first_open_end = now
        } else if (door_open_count == 2) {
          second_open_end = now
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 4291
    completion_tokens: 359
    total_tokens: 4650
  command: 매일 오전 9시에 조명이 꺼져 있고 하단부의 홀수 태그가 달린 창문이 닫혀 있으면 모든 블라인드를 열어 줘. 이후 그 창문이 열리면 5초 기다렸다가 알람의 사이렌을 울려 줘. 사이렌이 울린 후 10초 동안 실시간으로 확인하여 한 번도 그 창문이 닫히지 않았면 2초마다 조명을 깜빡여 줘. 블라인드를 열었다면, 그때부터 10초가 지난 이때까지 문이 두 번 이상 열렸다 닫혔을 경우, 첫 번째로 열린 시간보다 두 번째로 열린 시간이 길면 벽에 있는 모든 에어컨을 꺼 줘.
- devices:
  - HumiditySensor
  - AirConditioner
  - Window
  - Humidifier
  - Clock
  - DoorLock
  - Blind
  - ContactSensor
  generated_code: |-
    name = "Scenario1"
    cron = ""
    period = 10000
    wait until(((#AirConditioner).switch_switch == 'off') and ((#Window).windowControl_window == 'open'))
    if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 60.0) {
      (#Blind).blind_close()
      (#Light).switch_off()
    }
    ---
    name = "Scenario2"
    cron = ""
    period = -1
    wait until((#Door).doorControl_door == 'closed')
    (#Clock).clock_delay(hour: 0, minute: 0, second: 5)
    (#Alarm).alarm_siren()
    ---
    name = "Scenario3"
    cron = ""
    period = 1000
    blink_start := false
    if ((#Alarm).switch_switch == 'on') {
      blink_start = true
    }
    if ((blink_start == true) and ((#Door).doorControl_door == 'open')) {
      ((#Clock).clock_delay(hour: 0, minute: 1, second: 0))
      (#Light).switch_toggle()
    }
    wait until((#Door).doorControl_door == 'closed')
    (#Speaker).speak_voice("The door is closed.")
    ---
    name = "Scenario4"
    cron = ""
    period = 1000
    if ((blink_start == true) and ((#Door).doorControl_door == 'closed')) {
      break
    }
  transformed_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |
      wait until(((#AirConditioner).switch_switch == 'off') and ((#Window).windowControl_window == 'open'))
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 60.0) {
        (#Blind).blind_close()
        (#Light).switch_off()
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |
      wait until((#Door).doorControl_door == 'closed')
      (#Clock).clock_delay(hour: 0, minute: 0, second: 5)
      (#Alarm).alarm_siren()
  - name: "Scenario3"
    cron: ""
    period: 1000
    code: |
      blink_start := false
      if ((#Alarm).switch_switch == 'on') {
        blink_start = true
      }
      if ((blink_start == true) and ((#Door).doorControl_door == 'open')) {
        ((#Clock).clock_delay(hour: 0, minute: 1, second: 0))
        (#Light).switch_toggle()
      }
      wait until((#Door).doorControl_door == 'closed')
      (#Speaker).speak_voice("The door is closed.")
  - name: "Scenario4"
    cron: ""
    period: 1000
    code: |
      if ((blink_start == true) and ((#Door).doorControl_door == 'closed')) {
        break
      }
  label:
  - name: Scenario1
    cron: ''
    period: 100
    code: "state := 0\ncheck_start := 0.0\nalarm_time := 0.0\nblink_phase := 0\nwait_start := 0.0\ndoor_opened := false\nblink_start := 0.0\n\nif (state == 0 and (#AirConditioner).switch_switch == 'off' and (#Window).windowControl_window == 'open') {\n  check_start = (#Clock).clock_timestamp\n  state = 1\n}\n\nif (state == 1) {\n  now = (#Clock).clock_timestamp\n  if ((now - check_start) >= 10) {\n    humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\n    if (humidity > 60.0) {\n      (#Blind).blind_close()\n      (#Light).switch_off()\n      state = 2\n    } else {\n      check_start = now\n    }\n  }\n}\n\nif (state == 2 and (#DoorLock).doorControl_door == 'closed') {\n  (#Clock).clock_delay(0, 0, 5)\n  (#Alarm).alarm_siren()\n  alarm_time = (#Clock).clock_timestamp\n  blink_start = alarm_time\n  state = 3\n}\n\nif (state == 3) {\n  now = (#Clock).clock_timestamp\n\n  if ((now - alarm_time) > 60) {\n    break\n  }\n\n  if ((#DoorLock).doorControl_door == 'open') {\n    door_opened = true\n\n    if (blink_phase == 0) {\n      (#Light).switch_toggle()\n      wait_start = now\n      blink_phase = 1\n    } else if (blink_phase == 1 and (now - wait_start) >= 1) {\n      blink_phase = 0\n    }\n  }\n\n  if (door_opened == true and (#DoorLock).doorControl_door == 'closed') {\n    (#Speaker).mediaPlayback_speak(\"문이 닫혔습니다\")\n    break\n  }\n} \n"
  compare_results: []
  model_info:
    prompt_tokens: 3775
    completion_tokens: 287
    total_tokens: 4062
  command: 에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 실시간으로 확인해서 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘.
- devices:
  - HumiditySensor
  - AirConditioner
  - Dehumidifier
  - Curtain
  - Window
  - Humidifier
  - Clock
  - Blind
  generated_code: "name = \"Scenario1\"\ncron = \"\"\nperiod = -1\nwait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)\nif ((#Window).windowControl_window == 'open') {\n  (#Clock).clock_delay(hour: 0, minute: 0, second: 5)\n  (#Dehumidifier).switch_on()\n  wait until((#HumiditySensor).temperatureMeasurement_temperature >= 30.0)\n  (#AirConditioner).switch_on()\n}\n---\nname = \"Scenario2\"\ncron = \"\"\nperiod = 10000\nif ((#AirConditioner).switch_switch == 'on' and (#Blind).blind_blind == 'open') {\n  (#Curtain).curtain_open() \n  (#Curtain).curtain_close()\n}\n---\nname = \"Scenario3\"\ncron = \"\"\nperiod = -1\nwait until((#MotionSensor).motionSensor_motion == true)\n(#Alarm).alarm_off()\n(#Clock).clock_delay(hour: 0, minute: 0, second: 5)\nif ((#MotionSensor).motionSensor_motion == false) {\n  (#Alarm).alarm_on()\n}"
  transformed_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)
      if ((#Window).windowControl_window == 'open') {
        (#Clock).clock_delay(hour: 0, minute: 0, second: 5)
        (#Dehumidifier).switch_on()
        wait until((#HumiditySensor).temperatureMeasurement_temperature >= 30.0)
        (#AirConditioner).switch_on()
      }
  - name: "Scenario2"
    cron: ""
    period: 10000
    code: "if ((#AirConditioner).switch_switch == 'on' and (#Blind).blind_blind == 'open') {\n  (#Curtain).curtain_open() \n  (#Curtain).curtain_close()\n}\n"
  - name: "Scenario3"
    cron: ""
    period: -1
    code: |
      wait until((#MotionSensor).motionSensor_motion == true)
      (#Alarm).alarm_off()
      (#Clock).clock_delay(hour: 0, minute: 0, second: 5)
      if ((#MotionSensor).motionSensor_motion == false) {
        (#Alarm).alarm_on()
      }
  label:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)
      if ((#Window).windowControl_window == 'open') {
        (#Clock).clock_delay(0, 0, 5)
        (#Dehumidifier).switch_on()
        wait until((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0)
        (#AirConditioner).switch_on()
      }
  - name: Scenario2
    cron: ''
    period: 100
    code: |
      state := 0
      curtain_phase := 0
      start_time := 0.0
      alarm_state := 0
      motion_timer := 0.0
      alarm_disabled_once := false

      if (state == 0 and (#AirConditioner).switch_switch == 'on' and (#Blind).blind_blind == 'open') {
        start_time = (#Clock).clock_timestamp
        state = 1
      }

      if (state == 1) {
        now = (#Clock).clock_timestamp

        if ((now - start_time) >= 10) {
          if (curtain_phase == 0) {
            (#Curtain).curtain_close()
            curtain_phase = 1
          } else {
            (#Curtain).curtain_open()
            curtain_phase = 0
          }
          start_time = now
        }

        if ((#MotionSensor).motionSensor_motion == 'active' and alarm_disabled_once == false) {
          (#Alarm).alarm_off()
          alarm_state = 1
          motion_timer = now
          alarm_disabled_once = true
        }

        if (alarm_state == 1 and (#MotionSensor).motionSensor_motion == 'inactive') {
          now = (#Clock).clock_timestamp
          if ((now - motion_timer) >= 5) {
            (#Alarm).alarm_siren()
            alarm_state = 0
          }
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 4064
    completion_tokens: 245
    total_tokens: 4309
  command: 습도가 70% 이상이 될 때까지 기다려서, 70%이상이 된 순간 창문이 열려 있으면 5초 후 제습기를 켜고, 제습기를 켠 후 온도가 30도 이상 올라가면 에어컨을 켜 줘. 실시간으로 확인해서 에어컨이 켜진 상태에서 블라인드가 열리면 그 때부터 10초마다 커튼을 열었다 닫았다 반복해 줘. 이때 움직임이 감지되면 알람을 끄고, 5초 동안 움직임이 없으면 다시 알람을 울려 줘.
- devices:
  - AirConditioner
  - Siren
  - Window
  - Curtain
  - Fan
  - Clock
  - DoorLock
  - Blind
  generated_code: |-
    name = "Scenario1"
    cron = ""
    period = -1
    wait until((#Light).switch_switch == "on" and (#Window).windowControl_window == "closed" and (#DoorLock).doorControl_door == "open")
    (#Clock).clock_delay(0, 0, 3)
    (#Siren).sirenMode_setSirenMode('siren')

    name = "Scenario2"
    cron = ""
    period = 10000
    if ((#Window).windowControl_window == "closed") {
      (#Siren).switch_off()
      (#Curtain).curtain_close()
      (#Light).switch_off()
      (#Fan).fanControl_setPercent(50)
    }

    name = "Scenario3"
    cron = ""
    period = -1
    wait until((#AirConditioner).airConditionerMode_targetTemperature >= 27.0)
    (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')

    name = "Scenario4"
    cron = ""
    period = 1000
    motion_detected := false
    iteration := 0
    if ((#MotionSensor).motionSensor_motion == true) {
      motion_detected = true
    }
    if ((#Speaker).switch_switch == "on") {
      (#Speaker).switch_off()
      break
    }
    if (motion_detected == true and iteration < 3) {
      (#Blind).blind_open()
      (#Clock).clock_delay(0, 0, 1)
      (#Blind).blind_close()
      iteration += 1
    }
  transformed_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |
      wait until((#Light).switch_switch == "on" and (#Window).windowControl_window == "closed" and (#DoorLock).doorControl_door == "open")
      (#Clock).clock_delay(0, 0, 3)
      (#Siren).sirenMode_setSirenMode('siren')

      name = "Scenario2"
      cron = ""
      period = 10000
      if ((#Window).windowControl_window == "closed") {
        (#Siren).switch_off()
        (#Curtain).curtain_close()
        (#Light).switch_off()
        (#Fan).fanControl_setPercent(50)
      }

      name = "Scenario3"
      cron = ""
      period = -1
      wait until((#AirConditioner).airConditionerMode_targetTemperature >= 27.0)
      (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')

      name = "Scenario4"
      cron = ""
      period = 1000
      motion_detected := false
      iteration := 0
      if ((#MotionSensor).motionSensor_motion == true) {
        motion_detected = true
      }
      if ((#Speaker).switch_switch == "on") {
        (#Speaker).switch_off()
        break
      }
      if (motion_detected == true and iteration < 3) {
        (#Blind).blind_open()
        (#Clock).clock_delay(0, 0, 1)
        (#Blind).blind_close()
        iteration += 1
      }
  label:
  - name: Scenario1
    cron: ''
    period: 100
    code: |
      state := 0
      alarm_time := 0.0
      door_open_time := 0.0
      blind_count := 0
      blind_phase := 0
      blind_timer := 0.0
      window_remained_closed := true

      if ((#Speaker).switch_switch == 'on') {
        (#Speaker).switch_off()
        break
      }

      if (state == 0 and (#Light).switch_switch == 'on' and (#Window).windowControl_window == 'closed' and (#DoorLock).doorControl_door == 'open') {
        door_open_time = (#Clock).clock_timestamp
        state = 1
      }

      if (state == 1) {
        now = (#Clock).clock_timestamp
        if ((now - door_open_time) >= 3) {
          (#Alarm).alarm_siren()
          alarm_time = now
          window_remained_closed = true
          state = 2
        }
      }

      if (state == 2) {
        now = (#Clock).clock_timestamp
        if ((now - alarm_time) <= 10 and (#Window).windowControl_window == 'open') {
          window_remained_closed = false
        }
        if ((now - alarm_time) > 10) {
          state = 3
        }
      }

      if (state == 3) {
        if (window_remained_closed == true) {
          (#Curtain).curtain_close()
          (#Light).switch_off()
          (#Fan).fanSpeed_setSpeed = 50
        }
        state = 4
      }

      if (state == 4) {
        if ((#TemperatureSensor).temperatureMeasurement_temperature >= 27.0) {
          (#AirConditioner).airConditionerMode_setMode = 'cool'
        }
        state = 5
      }

      if (state == 5) {
        if ((#MotionSensor).motionSensor_motion == 'active') {
          blind_timer = (#Clock).clock_timestamp
          state = 6
        } else {
          break
        }
      }

      if (state == 6) {
        now = (#Clock).clock_timestamp
        if ((now - blind_timer) >= 1) {
          if (blind_phase == 0) {
            (#Blind).blind_open()
            blind_phase = 1
          } else {
            (#Blind).blind_close()
            blind_phase = 0
            blind_count = blind_count + 1
          }
          blind_timer = now
        }
        if (blind_count >= 3) {
          break
        }
      }
  compare_results: []
  model_info:
    prompt_tokens: 4101
    completion_tokens: 313
    total_tokens: 4414
  command: 조명이 켜지고 창문이 닫혀 있는 상태에서 문이 열리면 3초 기다렸다가 알람의 사이렌을 울려 줘. 알람이 울린 후 10초 동안 창문이 열리지 않으면 커튼을 닫고 조명을 끈 다음, 선풍기를 50% 속도로 켜 줘. 이후 온도가 27도 이상이면 에어컨을 냉방 모드로 바꾸고, 움직임이 감지되고 있으면 1초마다 블라인드를 열고 닫는 동작을 3번 반복해 줘. 단, 중간에 스피커가 켜지면 모든 동작을 멈추고 스피커를 꺼 줘.
