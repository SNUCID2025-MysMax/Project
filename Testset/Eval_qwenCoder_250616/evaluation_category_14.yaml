- command: 매일 자정 선풍기가 꺼져 있으면 선풍기를 꺼 줘. 또한 그 때마다 선풍기를 꺼 줘
  command_translated: Every night at midnight, turn off the fan if it is off. Also, turn off the fan again at that time
  devices:
  - Fan
  - Clock
  - Dehumidifier
  - Timer
  - Window
  - Irrigator
  - GasValve
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: "0 0 * * *"
    period: 10000
    code: |-
      if ((#Fan).fanControl_fanSpeed == 0) {
        (#Fan).switch_on()
      }
  - name: "Scenario2"
    cron: "0 0 * * *"
    period: 10000
    code: |-
      if ((#Fan).fanControl_fanSpeed != 0) {
        (#Fan).switch_off()
      }
  model_info:
    elapsed_time: 5.703
    bge_elapsed_time: 0.089
    llm_elapsed_time: 5.47
    validation_elapsed_time: 0.144
- command: 주말에는 관개 장치가 꺼지면 관개 장치를 꺼 줘.
  command_translated: On weekends, turn off the irrigation when it turns off.
  devices:
  - Pump
  - Dehumidifier
  - Clock
  - Timer
  - Irrigator
  - GasValve
  - Valve
  - Speaker
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: "0 0 * * 0,6\"  # Every Sunday and Saturday at midnight"
    period: -1
    code: |-
      if ((#Clock).clock_weekday == "sunday" or (#Clock).clock_weekday == "saturday") {
        wait until((#Irrigator).switch_switch == "off")
        (#Irrigator).switch_off()
      }
  model_info:
    elapsed_time: 5.075
    bge_elapsed_time: 0.12
    llm_elapsed_time: 4.89
    validation_elapsed_time: 0.066
- command: 실시간으로 확인하여 블라인드가 닫힌 상태에서 또 닫히면 전등을 켜 줘
  command_translated: Check in real-time, and turn on the light if the blinds are closed again while already closed.
  devices:
  - Pump
  - DoorLock
  - Light
  - Shade
  - Clock
  - Window
  - Curtain
  - LightSensor
  - Speaker
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      blindsClosed := false
      if ((#Blind).blind_blind == "closed") {
        if (blindsClosed == false) {
          (#Speaker).mediaPlayback_speak("The blinds are already closed.")
          blindsClosed = true
        }
      } else {
        blindsClosed = false
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      if ((#Blind).blind_blind == "closed") {
        if (blindsClosed == true) {
          (#Speaker).mediaPlayback_speak("The blinds have just been closed again.")
          (#Light).switch_on()
        }
      } else {
        blindsClosed = false
      }
  model_info:
    elapsed_time: 8.405
    bge_elapsed_time: 0.148
    llm_elapsed_time: 8.033
    validation_elapsed_time: 0.224
- command: 매일, 실시간으로 확인하여 관개 장치가 꺼질 때마다 10초간 기다리는 것을 반복해 줘
  command_translated: Check daily, in real time, and repeat the 10-second wait each time the irrigation device is turned off.
  devices:
  - Pump
  - Clock
  - Timer
  - Window
  - Irrigator
  - LeakSensor
  - GasValve
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      if ((#Irrigator).switch_switch == "off") {
        (#Speaker).mediaPlayback_speak("Irrigation device is turned off.")
      }
  model_info:
    elapsed_time: 3.426
    bge_elapsed_time: 0.088
    llm_elapsed_time: 3.28
    validation_elapsed_time: 0.058
- command: 실시간으로 확인하여 선풍기가 꺼져 있으면서 움직임이 감지되지 않다가 감지되는 순간 그 때부터 10초 간격으로 전등이 꺼져 있으면 끄고, 켜져 있으면 켜 줘
  command_translated: Check in real-time. if the fan is off and motion was not detected but then becomes active, then starting from that moment, every 10 seconds, turn off the light if it's off, or turn it on if it's on.
  devices:
  - Fan
  - Light
  - Clock
  - Alarm
  - ContactSensor
  - TemperatureSensor
  - MotionSensor
  - LightSensor
  - SmokeDetector
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      fanOff := false
      motionDetected := false
      if ((#Fan).switch_switch == "off") {
        fanOff = true
      }
      if ((#MotionSensor).motionSensor_motion == "active") {
        motionDetected = true
      }
      if (fanOff && motionDetected) {
        wait until(#MotionSensor).motionSensor_motion == "inactive"
        fanOff = false
        motionDetected = false
      }
  - name: "Scenario2"
    cron: ""
    period: 10000
    code: |-
      if (fanOff && !motionDetected) {
        if ((#Light).switch_switch == "off") {
          (#Light).switch_on()
        } else {
          (#Light).switch_off()
        }
      }
  model_info:
    elapsed_time: 8.728
    bge_elapsed_time: 0.119
    llm_elapsed_time: 8.487
    validation_elapsed_time: 0.122
- command: 1초마다 확인하여 온도가 30도 미만이면서 25도 이상일 때마다 에어컨을 켜 줘.
  command_translated: Check every second to turn on the air conditioner whenever the temperature is below 30 degrees but above 25 degrees.
  devices:
  - Fan
  - Dehumidifier
  - Clock
  - AirQualityDetector
  - TemperatureSensor
  - AirConditioner
  - Speaker
  - WeatherProvider
  - AirPurifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) and ((#TemperatureSensor).temperatureMeasurement_temperature < 30.0) {
        (#AirConditioner).airConditionerMode_setTemperature(27.0)
        (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')
        (#AirConditioner).switch_on()
      }
  model_info:
    elapsed_time: 5.666
    bge_elapsed_time: 0.104
    llm_elapsed_time: 5.457
    validation_elapsed_time: 0.105
- command: 주말 오전에, 실시간으로 확인하여 문이 열린 후 10초 동안 움직임이 감지되지 않고 10초가 끝났을 때 조명이 켜져 있으면 조명을 켜 줘.
  command_translated: On a weekend morning, check in real-time and turn on the lights if no motion is detected for 10 seconds after the time when the door is opened and the lights are on at the end of the 10 seconds.
  devices:
  - DoorLock
  - Light
  - Clock
  - Window
  - HumiditySensor
  - ContactSensor
  - MotionSensor
  - LightSensor
  - Speaker
  generated_code:
  - name: Scenario1
    cron: ''
    period: -1
    code: ""
  model_info:
    elapsed_time: 10.618
    bge_elapsed_time: 0.097
    llm_elapsed_time: 10.471
    validation_elapsed_time: 0.05
- command: 실시간으로 확인하여 재실 센서가 감지 상태일 때마다 10초 대기 후 조명의 밝기를 현재 밝기로 맞춰줘.
  command_translated: Check in real-time to adjust lights to their current brightness after a 10-second wait whenever an occupancy sensor is detected.
  devices:
  - Light
  - OccupancySensor
  - Clock
  - ContactSensor
  - HumiditySensor
  - TemperatureSensor
  - MotionSensor
  - PresenceSensor
  - LightSensor
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      currentBrightness := (#LightSensor).lightLevel_light
      wait until(#OccupancySensor).presenceSensor_presence == "present"
      newBrightness := (#LightSensor).lightLevel_light
      if (currentBrightness != newBrightness) {
        (#Light).switchLevel_setLevel(newBrightness, 100)
      }
  model_info:
    elapsed_time: 4.552
    bge_elapsed_time: 0.098
    llm_elapsed_time: 4.405
    validation_elapsed_time: 0.049
- command: TV가 꺼져 있으면 10초 대기 후 다시 TV를 확인하여 켜져 있으면 TV를 켜 줘.
  command_translated: If the TV is off, wait 10 seconds, then check the TV again and turn it on if it's on.
  devices:
  - DoorLock
  - Clock
  - Window
  - AirQualityDetector
  - HumiditySensor
  - Irrigator
  - Television
  - GasValve
  - Speaker
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#Television).switch_switch == "off") {
        wait until(#Television).switch_switch == "on"
        (#Television).switch_on()
      }
  model_info:
    elapsed_time: 3.494
    bge_elapsed_time: 0.096
    llm_elapsed_time: 3.298
    validation_elapsed_time: 0.1
- command: 월, 수, 금에 실시간으로 확인하여 창문이 열려 있지 않으면 창문을 닫아 줘.
  command_translated: Check in real-time on Mon, Wed, Fri and close the window if it's not open.
  devices:
  - Pump
  - Shade
  - DoorLock
  - Clock
  - Window
  - Curtain
  - Valve
  - Speaker
  - Blind
  generated_code:
  - name: Scenario1
    cron: ''
    period: -1
    code: ""
  model_info:
    elapsed_time: 8.425
    bge_elapsed_time: 0.088
    llm_elapsed_time: 8.277
    validation_elapsed_time: 0.06
