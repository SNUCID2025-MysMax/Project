- command: 토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘.
  command_translated: Turn on the irrigator when the soil humidity is below 25% and check the status every 3 seconds thereafter, cycling the irrigator off and on until the humidity is above 30%.
  devices:
  - Clock
  - Window
  - AirQualityDetector
  - HumiditySensor
  - Irrigator
  - SoilMoistureSensor
  - Humidifier
  - Speaker
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      triggered := false
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) {
        if (triggered == false) {
          (#Irrigator).switch_on()
          triggered = true
        }
      } else {
        triggered = false
      }
      if (triggered) {
        wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > 30.0)
        (#Irrigator).switch_off()
        triggered = false
      }
  model_info:
    elapsed_time: 8.777
    bge_elapsed_time: 1.401
    llm_elapsed_time: 7.217
    validation_elapsed_time: 0.159
- command: 온도가 30도를 초과하면 블라인드를 닫고, 이후 5초마다 알람의 사이렌을 울려 줘.
  command_translated: Close the blinds when the temperature exceeds 30 degrees, and sound the alarm's siren every 5 seconds thereafter.
  devices:
  - Siren
  - Clock
  - Alarm
  - SoundSensor
  - Window
  - Speaker
  - TemperatureSensor
  - Calculator
  - WeatherProvider
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#TemperatureSensor).temperatureMeasurement_temperature > 30.0) {
        (#Blind).blind_close()
        (#Alarm).alarm_siren()
        wait until((#TemperatureSensor).temperatureMeasurement_temperature <= 30.0)
        (#Alarm).alarm_off()
      }
  - name: "Scenario2"
    cron: ""
    period: 5000
    code: |-
      wait until((#TemperatureSensor).temperatureMeasurement_temperature > 30.0)
      (#Alarm).alarm_siren()
  model_info:
    elapsed_time: 6.206
    bge_elapsed_time: 0.095
    llm_elapsed_time: 5.977
    validation_elapsed_time: 0.134
- command: 날씨 감지 센서에서 비가 감지되면 관개 장치를 바로 끄고, 이후 2초마다 알람을 꺼 줘.
  command_translated: Turn off the irrigator immediately when the weather sensor detects rain, and then turn off the alarm every two seconds thereafter.
  devices:
  - Clock
  - Alarm
  - HumiditySensor
  - ContactSensor
  - Irrigator
  - TemperatureSensor
  - MotionSensor
  - LeakSensor
  - Speaker
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#TemperatureSensor).temperatureMeasurement_temperature == "rain") {
        (#Irrigator).switch_off()
        wait until(false)
      }
  - name: "Scenario2"
    cron: ""
    period: 2000
    code: |-
      if ((#TemperatureSensor).temperatureMeasurement_temperature == "rain") {
        (#Alarm).alarm_off()
      }
  model_info:
    elapsed_time: 5.291
    bge_elapsed_time: 0.108
    llm_elapsed_time: 4.969
    validation_elapsed_time: 0.214
- command: 일조량이 200룩스 이하가 되면 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘.
  command_translated: When the sunlight is below 200 lux, turn on the light every 4 seconds and turn it off after 2 seconds.
  devices:
  - Siren
  - Shade
  - Light
  - Clock
  - Alarm
  - TemperatureSensor
  - LightSensor
  - Speaker
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      wait until((#LightSensor).lightLevel_light <= 200.0)
      (#Light).switch_on()
  - name: "Scenario2"
    cron: ""
    period: 2000
    code: |-
      (#Light).switch_off()
  model_info:
    elapsed_time: 4.228
    bge_elapsed_time: 0.092
    llm_elapsed_time: 3.94
    validation_elapsed_time: 0.196
- command: 문이 처음 열릴 때 환풍기를 켜고, 이후 3초마다 습도를 확인해서 70% 이하가 될 때까지 환풍기를 켜고 끄는 동작을 반복해 줘.
  command_translated: Turn on the fan when the door first opens, then check the humidity every 3 seconds and cycle the fan on and off until it's below 70%.
  devices:
  - Fan
  - DoorLock
  - Clock
  - Window
  - HumiditySensor
  - SoilMoistureSensor
  - Humidifier
  - Speaker
  - WeatherProvider
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#DoorLock).doorControl_door == "open") {
        (#Fan).switch_on()
        wait until((#DoorLock).doorControl_door == "closed")
        (#Fan).switch_off()
      }
  - name: "Scenario2"
    cron: ""
    period: 3000
    code: |-
      wait until((#DoorLock).doorControl_door == "open")
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity < 70.0)
      (#Fan).switch_on()
      wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)
      (#Fan).switch_off()
  model_info:
    elapsed_time: 7.131
    bge_elapsed_time: 0.092
    llm_elapsed_time: 6.912
    validation_elapsed_time: 0.127
- command: 조명이 켜지면 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘.
  command_translated: Close the blinds when the lights come on, then open and close the curtains every two seconds thereafter.
  devices:
  - Siren
  - Shade
  - Light
  - DoorLock
  - Clock
  - Window
  - Curtain
  - Valve
  - Speaker
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#Light).switch_switch == "on") {
        (#Blind).blind_close()
      }
  - name: "Scenario2"
    cron: ""
    period: 2000
    code: |-
      if ((#Light).switch_switch == "on") {
        (#Curtain).curtain_open()
        wait until((#Curtain).curtain_curtain == "open")
        (#Curtain).curtain_close()
        wait until((#Curtain).curtain_curtain == "closed")
      }
  model_info:
    elapsed_time: 6.742
    bge_elapsed_time: 0.11
    llm_elapsed_time: 6.459
    validation_elapsed_time: 0.173
- command: TV가 처음 켜지면 5초마다 스피커를 켜고 3초 후에 끄는 동작을 반복해 줘.
  command_translated: When the TV first turns on, turn on the speakers every 5 seconds and turn them off after 3 seconds.
  devices:
  - Clock
  - AirQualityDetector
  - Irrigator
  - Television
  - Buttonx4
  - GasValve
  - Speaker
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: "0 9 * * *"
    period: -1
    code: |-
      (#Television).switch_switch = "on"

      wait until(#Television).switch_switch == "on"

      (#Speaker).switch_on()

      repeat := true
      while (repeat) {
        wait until(#Television).switch_switch == "on"
        (#Speaker).mediaPlayback_play("Hello")
        wait until(#Television).switch_switch == "on"
        wait until(#Television).switch_switch == "on"
        (#Speaker).switch_off()
        repeat = false
      }

      wait until(#Television).switch_switch == "on"
      wait until(#Television).switch_switch == "on"
      wait until(#Television).switch_switch == "on"
      (#Speaker).switch_off()
  model_info:
    elapsed_time: 10.196
    bge_elapsed_time: 0.108
    llm_elapsed_time: 9.986
    validation_elapsed_time: 0.103
- command: 공기청정기가 꺼지면 2초마다 ‘공기청정기를 켜 주세요’라고 두 번 반복해서 스피커로 출력해줘.
  command_translated: When the air purifier is turned off, repeat "Please turn on the air purifier" twice every 2 seconds to the speaker.
  devices:
  - Fan
  - Dehumidifier
  - Clock
  - AirQualityDetector
  - Irrigator
  - Humidifier
  - GasValve
  - Speaker
  - AirPurifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#AirPurifier).switch_switch == "off") {
        (#Speaker).mediaPlayback_speak("Please turn on the air purifier")
        wait until((#AirPurifier).switch_switch == "on")
        (#Speaker).mediaPlayback_speak("Please turn on the air purifier")
        wait until((#AirPurifier).switch_switch == "on")
      }
  - name: "Scenario2"
    cron: ""
    period: 2000
    code: |-
      if ((#AirPurifier).switch_switch == "on") {
        (#Speaker).mediaPlayback_speak("The air purifier is on.")
      }
  model_info:
    elapsed_time: 8.1
    bge_elapsed_time: 0.09
    llm_elapsed_time: 7.796
    validation_elapsed_time: 0.214
- command: 창문이 열리면 조명을 꺼 주고, 이후 1초마다 블라인드를 10퍼센트 씩 내려 줘.
  command_translated: Turn off the lights when the window opens, and lower the blinds by 10% every second thereafter.
  devices:
  - Siren
  - Shade
  - Light
  - Clock
  - Alarm
  - Window
  - Curtain
  - GasValve
  - Speaker
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      if ((#Window).windowControl_window == "open") {
        (#Light).switch_off()
        (#Blind).blindLevel_setBlindLevel(90)
        wait until((#Window).windowControl_window == "closed")
        (#Blind).blindLevel_setBlindLevel(100)
      }
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      wait until((#Window).windowControl_window == "closed")
      (#Blind).blindLevel_setBlindLevel(#Blind).blindLevel_blindLevel - 10
  model_info:
    elapsed_time: 7.536
    bge_elapsed_time: 0.088
    llm_elapsed_time: 7.219
    validation_elapsed_time: 0.23
- command: 현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 경광등을 켜 줘.
  command_translated: Turn off the lights as soon as the front door closes, and then every three seconds thereafter.
  devices:
  - Siren
  - DoorLock
  - Light
  - Clock
  - Alarm
  - Window
  - LightSensor
  - Speaker
  - Blind
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      wait until((#DoorLock).doorControl_door == "closed")
      (#Light).switch_off()
  - name: "Scenario2"
    cron: ""
    period: 3000
    code: |-
      (#Light).switch_off()
  model_info:
    elapsed_time: 4.118
    bge_elapsed_time: 0.088
    llm_elapsed_time: 3.84
    validation_elapsed_time: 0.19
