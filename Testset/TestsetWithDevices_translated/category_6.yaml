- command: Every 5 seconds, it measures the soil humidity and turns on the waterer if it's below 30%. If the temperature is above 35 degrees at that time, turn off the waterer and end the cycle.
  code:
  - name: Scenario1
    cron: ''
    period: 5000
    code: |-
      soil = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
      temp = (#AirQualityDetector).temperatureMeasurement_temperature
      if (soil <= 30.0) {
        (#Irrigator).switch_on()
        if (temp >= 35.0) {
            (#Irrigator).switch_off()
            break
        }
      }
  devices:
  - Irrigator
  - AirQualityDetector
  - SoilMoistureSensor
- command: Blink the light 10 times in 3-second intervals. Check after each blink and stop the loop the moment the rain sensor detects rain.
  code:
  - name: Scenario1
    cron: ''
    period: 3000
    code: |-
      count := 0

      if (count >= 10) {
        break
      }
      (#Light).switch_toggle()
      rain = (#WeatherProvider).weatherProvider_weather
      if (rain == 'rain') {
        break
      }
      count = count + 1
  devices:
  - Light
  - WeatherProvider
- command: Repeat the toggle action of powering the fan on and off every second. Check the humidity just before each action and stop the loop immediately if it's above 80%.
  code:
  - name: Scenario1
    cron: ''
    period: 1000
    code: |-
      humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity
      if (humidity >= 80.0) {
        break
      }
      (#Fan).switch_toggle()
  devices:
  - Fan
  - AirQualityDetector
- command: Close the blinds by 10 percent every 5 seconds. Until you can't lower them anymore.
  code:
  - name: Scenario1
    cron: ''
    period: 5000
    code: |-
      current_level = (#Blind).blindLevel_blindLevel
      if (current_level <= 10) {
        (#Blind).blindLevel_setBlindLevel(0)
        break
      }
      next_level = current_level - 10
      (#Blind).blindLevel_setBlindLevel(next_level)
  devices:
  - Blind
- command: Turn on the irrigation every 10 seconds and turn it off after 5 seconds. Check the irrigation both on and off, and if the sunlight is above 500 lux, turn off the irrigation and end the loop.
  code:
  - name: Scenario1
    cron: ''
    period: 10000
    code: |-
      lux = (#LightSensor).lightLevel_light
      if (lux >= 500.0) {
        (#Irrigator).switch_off()
        break
      }
      (#Irrigator).switch_on()
      (#Clock).clock_delay(5000)
      lux = (#LightSensor).lightLevel_light
      if (lux >= 500.0) {
        (#Irrigator).switch_off()
        break
      }
      (#Irrigator).switch_off()
  devices:
  - Clock
  - Irrigator
  - LightSensor
- command: Turn the living room light on and off every two seconds. Check each time it turns off the light and stop the loop immediately if it detects that a window is open.
  code:
  - name: Scenario1
    cron: ''
    period: 2000
    code: |-
      (#Light).switch_toggle()
      light_state = (#Light).switch_switch
      if (light_state == 'off') {
        window_state = (#Window).windowControl_window
        if (window_state == 'open') {
            break
        }
      }
  devices:
  - Light
  - Window
- command: Every 3 seconds, increase the volume of the TV by 1 and repeat the behavior, returning it to its initial value at step 5. When returning to the initial value, check for motion and stop the loop if it detects any.
  code:
  - name: Scenario1
    cron: ''
    period: 3000
    code: |-
      volume := 0

      if (volume >= 5) {
        motion = (#MotionSensor).motionSensor_motion
        if (motion == 'active') {
            break
        }
        volume = 0
      } else {
        volume = volume + 1
      }
      (#Television).audioVolume_setVolume(volume)
  devices:
  - MotionSensor
  - Television
- command: Every 10 seconds, close the blinds completely. Check each time and end the loop immediately if the TV is still on.
  code:
  - name: Scenario1
    cron: ''
    period: 10000
    code: |-
      (#Blind).blind_close()
      tv = (#Television).switch_switch
      if (tv == 'on') {
        break
      }
  devices:
  - Blind
  - Television
- command: Every two seconds, make the alarm's siren blare for one second and then turn it off, and every time it blares the siren, make sure the window is closed and stop the loop if it is.
  code:
  - name: Scenario1
    cron: ''
    period: 2000
    code: |-
      (#Alarm).alarm_siren()
      state = (#Window).windowControl_window
      (#Clock).clock_delay(1000)
      (#Alarm).alarm_off()
      if (state == 'closed') {
        break
      }
  devices:
  - Clock
  - Alarm
  - Window
- command: Every 5 seconds, switch the room air purifier to 'silent' mode. Check each time and end all iterations if a window is open.
  code:
  - name: Scenario1
    cron: ''
    period: 5000
    code: |-
      (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode('auto')
      state = (#Window).windowControl_window
      if (state == 'open') {
        break
      }
  devices:
  - Window
  - AirPurifier
