- command: Every night at midnight, turn off the fan if it is off. Also turn off the fan whenever
  code:
  - name: Scenario1
    cron: 0 0 * * *
    period: 0
    code: |
      if ((#Fan).switch_switch == 'off') {
        (#Fan).switch_off()
        (#Fan).switch_off()
      }
  devices:
  - Fan
- command: On weekends, turn off the irrigation when it's off.
  code:
  - name: Scenario1
    cron: 0 0 * * 6,0
    period: 0
    code: |
      wait until((#Irrigator).switch_switch == "off")
      (#Irrigator).switch_off()
  devices:
  - Irrigator
- command: Check in real-time to make sure the blinds are closed and turn on the lights when they're closed again
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |
      wasClosed := false
      if (wasClosed == true) {
        if ((wasClosed == false) and ((#Blind).blind_blind == "closed")) {
          (#Light).switch_on()
        }
      }
      wasClosed = ((#Blind).blind_blind == "closed")
  devices:
  - Blind
  - Light
- command: Check daily, in real time, and repeat the 10-second wait each time the irrigation device is turned off.
  code:
  - name: Scenario1
    cron: 0 0 * * *
    period: 100
    code: |
      triggered := false
      if ((#Irrigator).switch_switch == "off") {
        if (triggered == false) {
          (#Clock).clock_delay(10000)
          triggered = true
        }
      } else {
        triggered = false
      }
  devices:
  - Clock
  - Irrigator
- command: Check in real-time to see if the fan is off and no motion is detected, and then turn it off if it is, or on if it is, every 10 seconds from then on.
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |
      motion_prev := "inactive"
      triggered := false
      tick := 0

      if (triggered == false) {
        if ((#Fan).switch_switch == 'off') {
          current = (#MotionSensor).motionSensor_motion
          if ((motion_prev == "inactive") and (current == "active")) {
            triggered = true
            tick = 100
          }
          motion_prev = current
        }
      } else {
        tick = tick + 1
        if (tick >= 100) {
          if ((#Light).switch_switch == 'on') {
            (#Light).switch_on()
          } else {
            (#Light).switch_off()
          }
          tick = 0
        }
      }
  devices:
  - Light
  - Fan
  - MotionSensor
- command: Check every second to turn on the air conditioner whenever the temperature is below 30 degrees but above 25 degrees.
  code:
  - name: Scenario1
    cron: ''
    period: 1000
    code: |
      temp = (#TemperatureSensor).temperatureMeasurement_temperature
      if ((temp < 30.0) and (temp >= 25.0)) {
        (#AirConditioner).switch_on()
      }
  devices:
  - TemperatureSensor
  - AirConditioner
- command: On a weekend morning, check in real-time and turn on the lights if no motion is detected for 10 seconds after the door is opened and the lights are on at the end of the 10 seconds.
  code:
  - name: Scenario1
    cron: 0 0 * * 6,0
    period: 100
    code: |
      check_motion := false
      no_motion_tick := 0

      if ((#Clock).clock_hour < 12) {
        if ((#ContactSensor).contactSensor_contact == "open" and check_motion == false) {
          check_motion = true
          no_motion_tick = 0
        }

        if (check_motion == true) {
          if ((#MotionSensor).motionSensor_motion == "inactive") {
            no_motion_tick = no_motion_tick + 1
            if (no_motion_tick == 100) {
              if ((#Light).switch_switch == "on") {
                (#Light).switch_on()
              }
              break
            }
          } else {
            break
          }
        }
      }
  devices:
  - Light
  - Clock
  - ContactSensor
  - MotionSensor
- command: Check in real-time to adjust lights to their current brightness after a 10-second wait whenever an occupancy sensor is detected.
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |
      wait until((#OccupancySensor).presenceSensor_presence == 'present')
      (#Clock).clock_delay(10000)
      level = (#Light).switchLevel_level
      (#Light).switchLevel_setLevel(level, 1)
  devices:
  - Clock
  - Light
  - OccupancySensor
- command: If the TV is off, wait 10 seconds, then check the TV again and turn it on if it's on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      if ((#Television).switch_switch == "off") {
        (#Clock).clock_delay(10000)
        if ((#Television).switch_switch == "on") {
          (#Television).switch_on()
        }
      }
  devices:
  - Clock
  - Television
- command: Check in real-time on Mon, Wed, Fri and close the window if it's not open.
  code:
  - name: Scenario1
    cron: 0 0 * * 1,3,5
    period: 100
    code: |-
      if ((#Window).windowControl_window != "open") {
        (#Window).windowControl_close()
      }
  devices:
  - Window
