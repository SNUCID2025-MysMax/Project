- command: If the soil humidity is below 30%, wait 5 seconds before activating the waterer.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {
        (#Clock).clock_delay(5000)
        (#Irrigator).irrigatorOperatingState_startWatering()
      }
  devices:
  - Clock
  - Irrigator
  - SoilMoistureSensor
- command: If a window is open and the temperature is above 35 degrees, wait 10 seconds before lowering the blinds.
  code:
  - name: Scenario2
    cron: ''
    period: -1
    code: |-
      if (((#Window).windowControl_window == 'open') and ((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)) {
        (#Clock).clock_delay(10000)
        (#Blind).blind_close()
      }
  devices:
  - TemperatureSensor
  - Clock
  - Window
  - Blind
- command: If the humidity is above 80%, turn on the dehumidifier after 3 seconds and close the window after another 7 seconds.
  code:
  - name: Scenario3
    cron: ''
    period: -1
    code: |-
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) {
        (#Clock).clock_delay(3000)
        (#Dehumidifier).switch_on()
        (#Clock).clock_delay(7000)
        (#Window).windowControl_close()
      }
  devices:
  - Clock
  - Dehumidifier
  - HumiditySensor
  - Window
- command: If the light intensity is below 100 lux, wait 5 seconds before turning on the LED light.
  code:
  - name: Scenario4
    cron: ''
    period: -1
    code: |-
      if ((#LightSensor).lightLevel_light <= 100.0) {
        (#Clock).clock_delay(5000)
        (#Light).switch_on()
      }
  devices:
  - Clock
  - Light
  - LightSensor
- command: After running the waterer, wait 10 seconds before turning on the fan.
  code:
  - name: Scenario5
    cron: ''
    period: -1
    code: |-
      (#Irrigator).irrigatorOperatingState_startWatering()
      (#Clock).clock_delay(10000)
      (#Fan).switch_on()
  devices:
  - Clock
  - Fan
  - Irrigator
- command: If the window is open, close the curtains after 5 seconds, and close the blinds after another 10 seconds.
  code:
  - name: Scenario6
    cron: ''
    period: -1
    code: |-
      if ((#Window).windowControl_window == 'open') {
        (#Clock).clock_delay(5000)
        (#Curtain).curtain_close()
        (#Clock).clock_delay(10000)
        (#Blind).blind_close()
      }
  devices:
  - Curtain
  - Clock
  - Window
  - Blind
- command: If the light is on, wait 3 seconds, turn off the light, and then turn it back on after 3 seconds.
  code:
  - name: Scenario7
    cron: ''
    period: -1
    code: |-
      if ((#Light).switch_switch == 'on') {
        (#Clock).clock_delay(3000)
        (#Light).switch_off()
        (#Clock).clock_delay(3000)
        (#Light).switch_on()
      }
  devices:
  - Light
  - Clock
- command: Turn off the light after 7 seconds and turn it back on after 5 seconds.
  code:
  - name: Scenario8
    cron: ''
    period: -1
    code: |-
      (#Clock).clock_delay(7000)
      (#Light).switch_off()
      (#Clock).clock_delay(5000)
      (#Light).switch_on()
  devices:
  - Clock
  - Light
- command: If the door is closed and the window is not open after 5 seconds, open the blinds.
  code:
  - name: Scenario9
    cron: ''
    period: -1
    code: |-
      if ((#DoorLock).doorControl_door == 'closed') {
        (#Clock).clock_delay(5000)
        if ((#Window).windowControl_window != 'open') {
            (#Blind).blind_open()
        }
      }
  devices:
  - Clock
  - DoorLock
  - Window
  - Blind
- command: If the curtains are open, turn the lights down to 50 after 2 seconds, then wait another 4 seconds to turn them off.
  code:
  - name: Scenario10
    cron: ''
    period: -1
    code: |-
      if ((#Curtain).curtain_curtain == 'open') {
        (#Clock).clock_delay(2000)
        (#Light).switchLevel_setLevel(50, 0)
        (#Clock).clock_delay(4000)
        (#Light).switch_off()
      }
  devices:
  - Curtain
  - Clock
  - Light
