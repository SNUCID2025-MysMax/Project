- command: 3월부터 9월까지, 실시간으로 확인하여 토양 습도 센서의 값이 30% 이하이면 5초 대기 후 관개 장치를 켜고, 추가로 10초 대기 후 알람의 사이렌을 울린 다음, 그 후로부터 15초 동안 습도 값이 계속 30% 이하이면 블라인드를 닫아 줘.
  command_translated: From March through September, check in real-time and turn on the irrigation after a 5-second wait if the soil moisture sensor reads 30% or less, wait another 10 seconds, sound the alarm's siren. After that, if the soil moisture remains at or below 30% continuously for the next 15 seconds, close the blinds.
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |-
      monitoring := false
      start_time := 0

      if (((#Clock).clock_month >= 3) and ((#Clock).clock_month <= 9)) {
        if ((monitoring == false) and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0)) {
          (#Clock).clock_delay(5000)
          (#Irrigator).switch_on()
          (#Clock).clock_delay(10000)
          (#Alarm).alarm_siren()
          start_time = (#Clock).clock_timestamp
          monitoring = true
        }
      }

      if (monitoring == true) {
        current = (#Clock).clock_timestamp
        if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > 30.0) {
          monitoring = false
        } else if ((current - start_time) >= 15.0) {
          (#Blind).blind_close()
          monitoring = false
          break
        }
      }
  devices:
  - Blind
  - Alarm
  - Irrigator
  - Clock
  - SoilMoistureSensor
- command: 토양 습도 센서의 값이 25% 이하로 떨어지면 3초 간격으로 총 다섯 번 알람의 사이렌을 1초간 울리고, 그 후 10초 대기 후 블라인드를 닫아 줘.
  command_translated: If the soil moisture sensor drops below 25%, sound the alarm siren five times at 3-second intervals, each time for 1 second, followed by a 10-second wait before closing the blinds.
  code:
  - name: Scenario1
    cron: ''
    period: 3000
    code: |-
      i := 0
      triggered := false
      if (triggered == false) {
        wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)
        triggered = true
      }
      if (triggered == true) {
        if (i < 5) {
          (#Alarm).alarm_siren()
          (#Clock).clock_delay(1000)
          (#Alarm).alarm_off()
          i = i + 1
        } else {
          (#Clock).clock_delay(10000)
          (#Blind).blind_close()
          break
        }
      }
  devices:
  - Clock
  - Blind
  - Alarm
  - SoilMoistureSensor
- command: 실시간으로 확인하여 움직임이 감지되면 5초 대기 후 조명을 켜고, 10초 후 커튼을 열고, 15초 후 펌프가 꺼져 있으면 펌프를 켜 줘.
  command_translated: Check in real-time and turn on the lights after 5 seconds if motion is detected, open the curtains after 10 seconds, turn on the pump if it's off after 15 seconds.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      wait until((#MotionSensor).motionSensor_motion == 'active')
      (#Clock).clock_delay(5000)
      (#Light).switch_on()
      (#Clock).clock_delay(10000)
      (#Curtain).curtain_open()
      (#Clock).clock_delay(15000)
      if ((#Pump).switch_switch == 'off') {
        (#Pump).switch_on()
      }
  devices:
  - Curtain
  - MotionSensor
  - Pump
  - Clock
  - Light
- command: 1월 1일에, 실시간으로 확인하여 조명이 꺼지면 3초 대기 후 펌프를 끄고, 5초 후 블라인드를 닫으며, 추가로 7초 후 조명을 다시 켠 다음 알람의 사이렌을 울려 줘.
  command_translated: On January 1, check in real-time and when the lights turns off, wait 3 seconds, turn off the pump, close the blinds after 5 seconds, turn the lights back on after an additional 7 seconds, and sound the alarm's siren.
  code:
  - name: Scenario1
    cron: 0 0 1 1 *
    period: 0
    code: |-
      wait until((#Light).switch_switch == 'off')
      if (((#Clock).clock_month == 1) and ((#Clock).clock_day == 1)) {
        (#Clock).clock_delay(3000)
        (#Pump).switch_off()
        (#Clock).clock_delay(5000)
        (#Blind).blind_close()
        (#Clock).clock_delay(7000)
        (#Light).switch_on()
        (#Alarm).alarm_siren()
      }
  devices:
  - Blind
  - Alarm
  - Light
  - Pump
  - Clock
- command: 10초마다 확인하여 토양 습도 센서의 값이 두 번 연속으로 30% 이하가 된 다음, 그 상태가 1분 이상 유지되면 블라인드를 닫고 5초 후 ‘알람’이라고 두 번 말해 줘.
  command_translated: Check every 10 seconds to see if the soil moisture sensor reads 30% or less twice in a row, and if it stays that way for more than a minute, close the blinds and announce "alarm" twice via the speaker after 5 seconds.
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |-
      elapsed10s := 0
      previousLow := false
      confirmedLow := false
      monitoring := false
      duration := 0
      executed := false

      if (executed == false) {
        if (monitoring == false) {
          elapsed10s = elapsed10s + 100
          if (elapsed10s >= 10000) {
            current = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity
            if ((current <= 30.0) and (previousLow == true)) {
              confirmedLow = true
              monitoring = true
            } else {
              confirmedLow = false
            }
            previousLow = (current <= 30.0)
            elapsed10s = 0
          }
        } else {
          if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) {
            duration = duration + 100
            if (duration >= 60000) {
              (#Blind).blind_close()
              (#Clock).clock_delay(5000)
              (#Speaker).mediaPlayback_speak("alarm")
              (#Speaker).mediaPlayback_speak("alarm")
              executed = true
              break
            }
          } else {
            duration = 0
          }
        }
      }
  devices:
  - Blind
  - Clock
  - Speaker
  - SoilMoistureSensor
- command: 실시간으로 확인하여 커튼이 5초 연속 닫혀 있으면 커튼을 열고, 이후 10초 동안 움직임이 감지되지 않으면 조명을 꺼 줘.
  command_translated: Check in real-time to open the curtains if they've been closed for 5 consecutive seconds, and turn off the lights if no motion is detected for the next 10 seconds.
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |-
      closedDuration := 0
      noMotionDuration := 0
      phase := 0

      if (phase == 0) {
        if ((#Curtain).curtain_curtain == 'closed') {
          closedDuration = closedDuration + 100
          if (closedDuration >= 5000) {
            (#Curtain).curtain_open()
            phase = 1
          }
        } else {
          closedDuration = 0
        }
      } else if (phase == 1) {
        if ((#MotionSensor).motionSensor_motion == 'inactive') {
          noMotionDuration = noMotionDuration + 100
          if (noMotionDuration >= 10000) {
            (#Light).switch_off()
            break
          }
        } else {
          noMotionDuration = 0
        }
      }
  devices:
  - Curtain
  - Light
  - MotionSensor
- command: 조명이 켜지면 1초 간격으로 조명을 3번 깜빡이고, 이후 5초 대기 후 스피커를 켜고, 그 다음부터는 실시간으로 확인하여 에어컨이 꺼지면 10초 후 켜 줘.
  command_translated: When the lights come on, blink the lights 3 times at 1 second intervals, wait 5 seconds before turning on the speakers, and from then on, check in real-time to turn on the air conditioner 10 seconds after it turns off.
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |-
      phase := 0
      count := 0
      if (phase == 0) {
        wait until((#Light).switch_switch == 'on')
        phase = 1
      } else if (phase == 1) {
        if (count < 3) {
          (#Light).switch_toggle()
          (#Clock).clock_delay(1000)
          count = count + 1
        } else {
          (#Clock).clock_delay(5000)
          (#Speaker).switch_on()
          phase = 2
        }
      } else if (phase == 2) {
        wait until((#AirConditioner).switch_switch == 'off')
        (#Clock).clock_delay(10000)
        (#AirConditioner).switch_on()
        break
      }
  devices:
  - Light
  - AirConditioner
  - Clock
  - Speaker
- command: 에어컨이 켜지면 5초 후 블라인드를 닫고, 5초 더 기다린 후 커튼이 열려 있으면 커튼을 닫고, 이후 10초 후 조명 밝기를 10퍼센트로 낮춰 줘.
  command_translated: When the air conditioner turns on, close the blinds after five seconds, wait another five seconds and close the curtains if they're open, and then turn the lights down to 10 percent brightness after 10 seconds.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      wait until((#AirConditioner).switch_switch == 'on')
      (#Clock).clock_delay(5000)
      (#Blind).blind_close()
      (#Clock).clock_delay(5000)
      if ((#Curtain).curtain_curtain == 'open') {
        (#Curtain).curtain_close()
      }
      (#Clock).clock_delay(10000)
      (#Light).switchLevel_setLevel(10, 1)
  devices:
  - Curtain
  - Blind
  - AirConditioner
  - Clock
  - Light
- command: 실시간으로 확인하여 문이 열린 후 10초 동안 움직임이 감지되지 않으면 경광등을 켜고, 5초 후 조명을 최대 밝기로 켜 줘.
  command_translated: Check in real-time to turn on the alarm's strobe if no motion is detected for 10 seconds after the door is opened, and turn on the lights to full brightness after 5 seconds.
  code:
  - name: Scenario1
    cron: ''
    period: 100
    code: |-
      phase := 0
      noMotionDuration := 0

      if (phase == 0) {
        wait until((#ContactSensor).contactSensor_contact == 'open')
        phase = 1
      } else if (phase == 1) {
        if ((#MotionSensor).motionSensor_motion == 'inactive') {
          noMotionDuration = noMotionDuration + 100
          if (noMotionDuration >= 10000) {
            (#Alarm).alarm_strobe()
            (#Clock).clock_delay(5000)
            (#Light).switchLevel_setLevel(100, 0)
            break
          }
        } else {
          noMotionDuration = 0
        }
      }
  devices:
  - Alarm
  - Light
  - MotionSensor
  - Clock
  - ContactSensor
- command: 매주 월요일 오전 9시부터 10시까지, 실시간으로 확인하여 창문이 열리고 나서 7초가 지난 시점에도 블라인드가 열려 있으면 블라인드를 닫고, 10초 후 커튼도 닫아 줘. 그리고 그 시간대에 실시간으로 확인하여 조명이 꺼지면 켜 줘.
  command_translated: Every Monday morning, from 9 to 10 a.m., check in real-time and close the blinds if they're still open seven seconds after the time when the window is opened, and close the curtains 10 seconds later. And during that time, check in real time and turn on the lights if they're off.
  code:
  - name: Scenario1
    cron: 0 9 * * 1
    period: 100
    code: |-
      prev_window_state := "closed"
      window_open_time := 0
      has_checked := false

      if ((#Clock).clock_hour == 10) {
        break
      }

      current_state = (#Window).windowControl_window

      if ((prev_window_state == "closed") and (current_state == "open")) {
        window_open_time = (#Clock).clock_timestamp
        has_checked = false
      }

      prev_window_state = current_state

      if ((current_state == "open") and (has_checked == false)) {
        elapsed = (#Clock).clock_timestamp - window_open_time
        if (elapsed >= 7) {
          if ((#Blind).blind_blind == "open") {
            (#Blind).blind_close()
            (#Clock).clock_delay(10000)
            (#Curtain).curtain_close()
          }
          break
        }
      }
  - name: Scenario2
    cron: 0 9 * * 1
    period: 100
    code: |-
      if ((#Clock).clock_hour == 10) {
        break
      }
      if ((#Light).switch_switch == "off") {
        (#Light).switch_on()
        break
      }
  devices:
  - Curtain
  - Blind
  - Light
  - Clock
  - Window
