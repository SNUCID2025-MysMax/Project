- command: Sound the siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_siren()
  devices:
  - Alarm
- command: Sound the siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).sirenMode_setSirenMode('siren')
  devices:
  - Siren
- command: Turn on the strobe.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_strobe()
  devices:
  - Alarm
- command: Turn on the strobe.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).sirenMode_setSirenMode('strobe')
  devices:
  - Siren
- command: Turn on sirens and lights at the same time
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_both()
  devices:
  - Alarm
- command: Turn on sirens and lights at the same time
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).sirenMode_setSirenMode('both')
  devices:
  - Siren
- command: Turn off both sirens and lights
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_off()
  devices:
  - Alarm
- command: Turn off both sirens and lights
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).sirenMode_setSirenMode('off')
  devices:
  - Siren
- command: Sound the alarm's siren when the occupancy sensor is detected.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#OccupancySensor).presenceSensor_presence == 'present') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - OccupancySensor
- command: Sound the alarm's siren when the occupancy sensor is detected.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#PresenceSensor).presenceSensor_presence == 'present') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - PresenceSensor
- command: Sound the alarm's siren when the air conditioner is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirConditioner).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirConditioner
- command: Sound the alarm's siren when the air conditioner is in cooling mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirConditioner).airConditionerMode_airConditionerMode == 'cool') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirConditioner
- command: Sound the alarm's siren when the air conditioner's target temperature is 30 degrees.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirConditioner).airConditionerMode_targetTemperature == 30) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirConditioner
- command: Speaker out the modes supported by the air conditioner
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      modes = (#AirConditioner).airConditionerMode_supportedAcModes
      (#Speaker).mediaPlayback_speak(modes)
  devices:
  - AirConditioner
  - Speaker
- command: Turn off the air conditioner.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).switch_off()
  devices:
  - AirConditioner
- command: Turn on the air conditioner.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).switch_on()
  devices:
  - AirConditioner
- command: Toggle the power of the air conditioner.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).switch_toggle()
  devices:
  - AirConditioner
- command: Set the air conditioner to auto mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).airConditionerMode_setAirConditionerMode('auto')
  devices:
  - AirConditioner
- command: Set the target temperature for the air conditioner to 18 degrees.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirConditioner).airConditionerMode_setTemperature(18)
  devices:
  - AirConditioner
- command: Sound the alarm's siren when the air purifier is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirPurifier).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirPurifier
- command: Sound the alarm's siren when the air purifier is in sleep mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirPurifier).airPurifierFanMode_airPurifierFanMode == 'sleep') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirPurifier
- command: Speaker out the modes your air purifier supports
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      modes = (#AirPurifier).airPurifierFanMode_supportedAirPurifierFanModes
      (#Speaker).mediaPlayback_speak(modes)
  devices:
  - AirPurifier
  - Speaker
- command: Turn off the air purifier.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).switch_off()
  devices:
  - AirPurifier
- command: Turn on the air purifier.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).switch_on()
  devices:
  - AirPurifier
- command: Toggle the air purifier's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).switch_toggle()
  devices:
  - AirPurifier
- command: Set the air purifier's mode to automatic.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode('auto')
  devices:
  - AirPurifier
- command: Sound the alarm's siren when the air quality meter reads 20 degrees.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).temperatureMeasurement_temperature == 20) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirQualityDetector
- command: Sound the alarm's siren when the carbon dioxide concentration is above 800 ppm.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 800) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirQualityDetector
- command: Sound the alarm's siren when the relative humidity on the air quality meter is above 70 percent.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).relativeHumidityMeasurement_humidity >= 70) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirQualityDetector
- command: Sound the alarm's siren when the indoor sulfur dust concentration is 150 micrograms or more.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).dustSensor_dustLevel >= 150) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirQualityDetector
- command: Sound the alarm's siren when indoor particulate matter levels are 35 micrograms or higher.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).dustSensor_fineDustLevel >= 35) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirQualityDetector
- command: Sound the alarm's siren when the indoor particulate matter concentration is 15 micrograms or more.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).dustSensor_veryFineDustLevel >= 15) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirQualityDetector
- command: Sound the alarm's siren if the total volatile organic compound concentration is greater than 0.5 ppm.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#AirQualityDetector).tvocMeasurement_tvocLevel >= 0.5) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - AirQualityDetector
- command: Sound the alarm's siren when the alarm is in strobe mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Alarm).alarm_alarm == 'strobe') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
- command: If the volume of the alarm is high, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Alarm).alarm_alarmVolume == 'high') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
- command: Sound the alarm's siren when the alarm battery is below 20 percent.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Alarm).battery_battery <= 20) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
- command: Turn on both the alarm's siren and lights.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_both()
  devices:
  - Alarm
- command: Turn off the alarm.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_off()
  devices:
  - Alarm
- command: Set the volume of the alarm to low.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_setAlarmVolume('low')
  devices:
  - Alarm
- command: Sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_siren()
  devices:
  - Alarm
- command: Turn on the alarm's light.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Alarm).alarm_strobe()
  devices:
  - Alarm
- command: Sound the alarm's siren when the blinds are more than 50 percent open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Blind).blindLevel_blindLevel >= 50) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Blind
  - Alarm
- command: Sound the alarm's siren when the blinds are open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Blind).blind_blind == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Blind
  - Alarm
- command: Set the blinds to 70 percent.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blindLevel_setBlindLevel(70)
  devices:
  - Blind
- command: Close the blinds.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blind_close()
  devices:
  - Blind
- command: Open the blinds.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blind_open()
  devices:
  - Blind
- command: Stop blind movement.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Blind).blind_pause()
  devices:
  - Blind
- command: Sound the alarm's siren when the button is pressed.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Button).button_button == 'pushed') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Button
- command: If there are more than four buttons, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Button).button_numberOfButtons >= 4) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Button
- command: Output the states supported by the button to the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Button).button_supportedButtonValues
      (#Speaker).mediaPlayback_speak(states)
  devices:
  - Speaker
  - Button
- command: Sound the alarm's siren when button 1 is pressed.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button1 == 'pushed') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Buttonx4
- command: Sound the alarm's siren when button 2 is pressed.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button2 == 'held') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Buttonx4
- command: When button 3 is pressed twice, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button3 == 'pushed_2x') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Buttonx4
- command: When button 4 is swiped up, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_button4 == 'swipe_up') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Buttonx4
- command: If the number of buttons is 4, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Buttonx4).buttonx4_numberOfButtons == 4) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Buttonx4
- command: Output the states supported by the four buttons to the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Buttonx4).buttonx4_supportedButtonValues
      (#Speaker).mediaPlayback_speak(states)
  devices:
  - Buttonx4
  - Speaker
- command: Add 5 and 3.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_add(5, 3)
  devices:
  - Calculator
- command: Divide 10 by 2.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_div(10, 2)
  devices:
  - Calculator
- command: Find the remainder of 10 divided by 3.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_mod(10, 3)
  devices:
  - Calculator
- command: Multiply 7 and 8.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_mul(7, 8)
  devices:
  - Calculator
- command: Subtract 4 from 15.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Calculator).calculator_sub(15, 4)
  devices:
  - Calculator
- command: Sound the alarm's siren when the camera is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Camera).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Camera
- command: Send an email with your most recent photo as an attachment to test@example.com with the subject line "Photo" and the content "This is a photo".
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      latest_photo = (#Camera).camera_image
      (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "Photo", "This is a photo.", latest_photo)
  devices:
  - EmailProvider
  - Camera
- command: Send an email with your most recent video as an attachment to test@example.com with the subject line "Video" and the content "This is a video.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      latest_video = (#Camera).camera_video
      (#EmailProvider).emailProvider_sendMailWithFile("test@example.com", "Video", "This is a video.", latest_video)
  devices:
  - EmailProvider
  - Camera
- command: Turn off the camera.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).switch_off()
  devices:
  - Camera
- command: Turn on the camera.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).switch_on()
  devices:
  - Camera
- command: Toggle the camera's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).switch_toggle()
  devices:
  - Camera
- command: Take a photo with your camera.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).camera_take()
  devices:
  - Camera
- command: Take a time-lapse video with your camera at speed 2 for 10 seconds.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Camera).camera_takeTimelapse(10, 2)
  devices:
  - Camera
- command: Sound the alarm's siren if the charger's voltage is above 230 volts.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Charger).voltageMeasurement_voltage >= 230) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Charger
  - Alarm
- command: Sound an alarm siren when the charger's status is charging.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Charger).chargingState_chargingState == 'charging') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Charger
  - Alarm
- command: Sound the alarm's siren if the charger is drawing more than 10 amps.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Charger).currentMeasurement_current >= 10) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Charger
  - Alarm
- command: Output the status supported by the charger to the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Charger).chargingState_supportedChargingStates
      (#Speaker).mediaPlayback_speak(states)
  devices:
  - Charger
  - Speaker
- command: If today's date is May 12, 2025, sound the alarm siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_date == 20250512) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If the current time is 3:15 PM on May 12, 2025, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_datetime == 202505121515) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If today is the 20th, sound the alarm siren
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_day == 20) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If the current time is 3pm, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_hour == 15) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If today is a holiday, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_isHoliday == true) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If it's 30 minutes from now, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_minute == 30) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If it's May, sound the alarm siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_month == 5) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If it's 40 seconds now, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_second == 40) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If it's 3:15pm, blare the siren on your alarm.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_time == 1515) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If the current Unix timestamp is 1747031637.23, sound the alarm siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_timestamp == 1747031637.23) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If today is Friday, sound the alarm siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_weekday == 'friday') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: If the year is 2025, sound the alarm siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Clock).clock_year == 2025) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Clock
  - Alarm
- command: Sound the alarm's siren in 1 hour, 20 minutes, 30 seconds
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Clock).clock_delay(4830000)
  devices:
  - Clock
- command: Sound the alarm's siren when the contact sensor is in contact.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#ContactSensor).contactSensor_contact == 'closed') {
        (#Alarm).alarm_siren()
      }
  devices:
  - ContactSensor
  - Alarm
- command: Sound the alarm's siren when the curtain is open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Curtain).curtain_curtain == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Curtain
  - Alarm
- command: Output the states supported by the curtain to the speakers.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Curtain).curtain_supportedCurtainCommands
      (#Speaker).mediaPlayback_speak(states)
  devices:
  - Curtain
  - Speaker
- command: Close the curtain.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Curtain).curtain_close()
  devices:
  - Curtain
- command: Open the curtain.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Curtain).curtain_open()
  devices:
  - Curtain
- command: Stop the curtain.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Curtain).curtain_pause()
  devices:
  - Curtain
- command: Sound the alarm siren when the dehumidifier is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dehumidifier).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Dehumidifier
  - Alarm
- command: Sound the alarm siren when the dehumidifier is in dehumidifying mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dehumidifier).dehumidifierMode_dehumidifierMode == 'dehumidifying') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Dehumidifier
  - Alarm
- command: Turn off the dehumidifier.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).switch_off()
  devices:
  - Dehumidifier
- command: Turn on the dehumidifier.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).switch_on()
  devices:
  - Dehumidifier
- command: Toggle the dehumidifier's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).switch_toggle()
  devices:
  - Dehumidifier
- command: Set the dehumidifier to cooling mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dehumidifier).dehumidifierMode_setDehumidifierMode('cooling')
  devices:
  - Dehumidifier
- command: Sound the alarm's siren when the dishwasher is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dishwasher).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Dishwasher
- command: If the dishwasher is in Eco mode, the alarm will sound a siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Dishwasher).dishwasherMode_dishwasherMode == 'eco') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Dishwasher
- command: Turn off the dishwasher.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).switch_off()
  devices:
  - Dishwasher
- command: Turn on the dishwasher.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).switch_on()
  devices:
  - Dishwasher
- command: Toggle the dishwasher's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).switch_toggle()
  devices:
  - Dishwasher
- command: Set your dishwasher to automatic mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Dishwasher).dishwasherMode_setDishwasherMode('auto')
  devices:
  - Dishwasher
- command: Sound the alarm's siren if the door lock is open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#DoorLock).doorControl_door == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - DoorLock
  - Alarm
- command: Close the door lock.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#DoorLock).doorControl_close()
  devices:
  - DoorLock
- command: Unlock the door.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#DoorLock).doorControl_open()
  devices:
  - DoorLock
- command: Send an email to test@example.com with the subject line "Alert" and the content "This is an emergency".
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#EmailProvider).emailProvider_sendMail('test@example.com', 'Alert', 'This is an emergency.')
  devices:
  - EmailProvider
- command: Sound the alarm's siren when the fan is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Fan).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Fan
- command: Sound the alarm's siren if the fan speed is above 2000 RPM.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Fan).fanControl_fanSpeed >= 2000) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Fan
- command: Set the speed of the fan to 1500 RPM.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).fanControl_setFanSpeed(1500)
  devices:
  - Fan
- command: Set the speed of the fan to 80 percent.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).fanControl_setPercent(80)
  devices:
  - Fan
- command: Turn off the fan.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).switch_off()
  devices:
  - Fan
- command: Turn on the fan.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).switch_on()
  devices:
  - Fan
- command: Toggle the fan's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Fan).switch_toggle()
  devices:
  - Fan
- command: Sound the alarm's siren when the feeder is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Feeder).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Feeder
  - Alarm
- command: Sound the alarm siren when the feeder's status is feeding.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Feeder).feederOperatingState_feederOperatingState == 'feeding') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Feeder
  - Alarm
- command: Turn off the feeder.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).switch_off()
  devices:
  - Feeder
- command: Turn on the feeder.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).switch_on()
  devices:
  - Feeder
- command: Toggle the power of the feeder.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).switch_toggle()
  devices:
  - Feeder
- command: Set the feeder's feed amount to 100 grams.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).feederPortion_setFeedPortion(100, 'grams')
  devices:
  - Feeder
- command: Start feeding the feeder.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Feeder).feederOperatingState_startFeeding()
  devices:
  - Feeder
- command: Sound the alarm siren when the gas meter shows gas usage of 500 kWh or more.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeter >= 500) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasMeter
- command: Sound the alarm siren when the gas meter reads more than 1000 kcal of gas.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeterCalorific >= 1000) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasMeter
- command: Sound the siren of the alarm when the gas meter has a cumulative gas usage time of 10000 seconds or more.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeterTime >= 10000) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasMeter
- command: Sound the alarm's siren when the gas meter reads more than 20 cubic meters of gas.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasMeter).gasMeter_gasMeterVolume >= 20) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasMeter
- command: Sound the alarm's siren if the gas valve is open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).valve_valve == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasValve
- command: Close the gas valve.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#GasValve).valve_close()
  devices:
  - GasValve
- command: Open the gas valve.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#GasValve).valve_open()
  devices:
  - GasValve
- command: Sound the alarm siren if the gas valve's gas usage is over 1000 kWh.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeter >= 1000) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasValve
- command: Sound the alarm siren if the gas valve has a gas calorific value of 500 kcal or more.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeterCalorific >= 500) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasValve
- command: Sound the alarm siren if the gas valve has a cumulative gas usage time of 5000 seconds or more.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeterTime >= 5000) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasValve
- command: Sound the alarm's siren if the gas valve is using more than 34 cubic meters of gas.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#GasValve).gasMeter_gasMeterVolume >= 34) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - GasValve
- command: Sound an alarm siren when the humidifier is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Humidifier).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Humidifier
- command: Sound an alarm siren if the humidifier's mode is Auto.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Humidifier).humidifierMode_humidifierMode == 'auto') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Humidifier
- command: Turn off the humidifier.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).switch_off()
  devices:
  - Humidifier
- command: Turn on the humidifier.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).switch_on()
  devices:
  - Humidifier
- command: Toggle the humidifier's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).switch_toggle()
  devices:
  - Humidifier
- command: Set the humidifier to strong mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Humidifier).humidifierMode_setHumidifierMode('high')
  devices:
  - Humidifier
- command: Sound the alarm's siren when the humidity sensor reads a relative humidity of 70 percent or higher.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - HumiditySensor
- command: Sound the alarm's siren when the irrigation device is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Irrigator).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Irrigator
- command: Sound the alarm's siren when the irrigation device has 3 liters of water.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Irrigator).irrigatorPortion_waterPortion == 3) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Irrigator
- command: Sound the alarm's siren when the irrigation device's status is watering.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Irrigator).irrigatorOperatingState_irrigatorOperatingState == 'watering') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Irrigator
- command: Turn off the irrigation.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).switch_off()
  devices:
  - Irrigator
- command: Turn on the irrigation.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).switch_on()
  devices:
  - Irrigator
- command: Toggle the power of the irrigation device.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).switch_toggle()
  devices:
  - Irrigator
- command: Set the irrigation unit's watering volume to 5 liters.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).irrigatorPortion_setWaterPortion(5, 'liters')
  devices:
  - Irrigator
- command: Start watering your irrigation system.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Irrigator).irrigatorOperatingState_startWatering()
  devices:
  - Irrigator
- command: Sound the alarm's siren when a leak is detected.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#LeakSensor).leakSensor_leakage == 'detected') {
        (#Alarm).alarm_siren()
      }
  devices:
  - LeakSensor
  - Alarm
- command: Sound the alarm's siren when the light is on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Light
  - Alarm
- command: If the light has a hue of 30, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).colorControl_hue == 30) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Light
  - Alarm
- command: If the light has a saturation of 30, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).colorControl_saturation == 30) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Light
  - Alarm
- command: Sound the alarm's siren when the light brightness is 100
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Light).switchLevel_level == 100) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Light
  - Alarm
- command: Set the light to red.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      (#Light).colorControl_setColor("255|0|0")
  devices:
  - Light
- command: Set the hue of the light to 70.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).colorControl_setHue(70)
  devices:
  - Light
- command: Set the saturation of the light to 90.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).colorControl_setSaturation(90)
  devices:
  - Light
- command: Set the brightness of the light to 80 with a speed of 5.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switchLevel_setLevel(80, 5)
  devices:
  - Light
- command: Turn on alert mode for lights.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switchLevel_alert()
  devices:
  - Light
- command: Turn off the lights.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switch_off()
  devices:
  - Light
- command: Light it up.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switch_on()
  devices:
  - Light
- command: Toggle the power of the light.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Light).switch_toggle()
  devices:
  - Light
- command: Sound the alarm's siren when the light sensor's brightness value is above 500 lux.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#LightSensor).lightLevel_light >= 500) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - LightSensor
- command: Play today's 학생식당 lunch menu over the speakers.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#MenuProvider).menuProvider_menu('오늘 학생식당 점심')
      (#Speaker).mediaPlayback_speak(menu)
  devices:
  - Speaker
  - MenuProvider
- command: Output today's menu to the speakers.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      menu = (#MenuProvider).menuProvider_todayMenu()
      (#Speaker).mediaPlayback_speak(menu)
  devices:
  - Speaker
  - MenuProvider
- command: Play the restaurant of the day on the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      place = (#MenuProvider).menuProvider_todayPlace()
      (#Speaker).mediaPlayback_speak(menu)
  devices:
  - Speaker
  - MenuProvider
- command: Sound the alarm's siren when the motion sensor is active.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#MotionSensor).motionSensor_motion == 'active') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - MotionSensor
- command: Sound the alarm's siren when motion is detected.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#MotionSensor).motionSensor_motion == 'active') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - MotionSensor
- command: Sound the alarm's siren when a presence sensor is detected.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#PresenceSensor).presenceSensor_presence == 'present') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - PresenceSensor
- command: Sound an alarm siren when the pump's current operating mode is maximized.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).pumpOperationMode_currentOperationMode == 'maximum') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Pump
- command: If the pump's set operation mode is default, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).pumpOperationMode_operationMode == 'normal') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Pump
- command: Sound the alarm siren when the pump is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Pump
- command: Output the modes supported by the pump to the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      modes = (#Pump).pumpOperationMode_supportedOperationModes
      (#Speaker).mediaPlayback_speak(modes)
  devices:
  - Speaker
  - Pump
- command: Sound the alarm's siren when the pump is open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Pump).pump_pump == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Pump
- command: Set the pump's operation mode to maximum.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).pumpOperationMode_setOperationMode('maximum')
  devices:
  - Pump
- command: Turn off the pump.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).switch_off()
  devices:
  - Pump
- command: Turn on the pump.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).switch_on()
  devices:
  - Pump
- command: Toggle the power of the pump.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).switch_toggle()
  devices:
  - Pump
- command: Close the pump.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).pump_close()
  devices:
  - Pump
- command: Open the pump.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Pump).pump_open()
  devices:
  - Pump
- command: Sound the alarm's siren when the refrigerator is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Refrigerator
- command: Sound an alarm siren if the refrigerator's defrost feature is on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).refrigeration_defrost == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Refrigerator
- command: Sound an alarm siren when the refrigerator's quick cool function is turned off.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).refrigeration_rapidCooling == 'off') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Refrigerator
- command: Sound the alarm siren when the refrigerator's deep freeze function is on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Refrigerator).refrigeration_rapidFreezing == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Refrigerator
- command: Turn off the refrigerator.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).switch_off()
  devices:
  - Refrigerator
- command: Toggle the refrigerator's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).switch_toggle()
  devices:
  - Refrigerator
- command: Turn on the refrigerator's defrost feature.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).refrigeration_setDefrost('on')
  devices:
  - Refrigerator
- command: Turn on your refrigerator's fast cooling function.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).refrigeration_setRapidCooling('on')
  devices:
  - Refrigerator
- command: Turn off your refrigerator's deep freeze function.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Refrigerator).refrigeration_setRapidFreezing('off')
  devices:
  - Refrigerator
- command: Sound the alarm siren when the robot vacuum is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#RobotCleaner).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - RobotCleaner
  - Alarm
- command: Sound an alarm siren when the robot vacuum is in automatic mode.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#RobotCleaner).robotCleanerCleaningMode_robotCleanerCleaningMode == 'auto') {
        (#Alarm).alarm_siren()
      }
  devices:
  - RobotCleaner
  - Alarm
- command: Turn off the robot vacuum.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).switch_off()
  devices:
  - RobotCleaner
- command: Turn on the robot vacuum.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).switch_on()
  devices:
  - RobotCleaner
- command: Toggle the robot vacuum's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).switch_toggle()
  devices:
  - RobotCleaner
- command: Set the robot vacuum's cleaning mode to manual.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#RobotCleaner).robotCleanerCleaningMode_setRobotCleanerCleaningMode('manual')
  devices:
  - RobotCleaner
- command: Sound the alarm's siren when the shades are more than 40% open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Shade).windowShadeLevel_shadeLevel >= 40) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Shade
  - Alarm
- command: Sound the alarm's siren when the shade is fully open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Shade).windowShade_windowShade == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Shade
  - Alarm
- command: Output the states supported by the shade to the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      states = (#Shade).windowShade_supportedWindowShadeCommands
      (#Speaker).mediaPlayback_speak(states)
  devices:
  - Shade
  - Speaker
- command: Set the shade to 50 percent.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShadeLevel_setShadeLevel(50)
  devices:
  - Shade
- command: Close the shade.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShade_close()
  devices:
  - Shade
- command: Open the shade.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShade_open()
  devices:
  - Shade
- command: Pause the shade movement.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Shade).windowShade_pause()
  devices:
  - Shade
- command: Sound the alarm's siren if it's on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Siren).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Siren
- command: If Siren mode is Siren, sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Siren).sirenMode_sirenMode == 'siren') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Siren
- command: Turn off the siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).switch_off()
  devices:
  - Siren
- command: Turn on the siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).switch_on()
  devices:
  - Siren
- command: Toggle the siren power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).switch_toggle()
  devices:
  - Siren
- command: Set the siren mode to strobe.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Siren).sirenMode_setSirenMode('strobe')
  devices:
  - Siren
- command: Sound the alarm's siren when the smart plug is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - SmartPlug
  - Alarm
- command: Sound the alarm's siren if the smart plug is over 220 volts.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).voltageMeasurement_voltage >= 220) {
        (#Alarm).alarm_siren()
      }
  devices:
  - SmartPlug
  - Alarm
- command: Sound the alarm's siren if the smart plug is drawing more than 10 amps.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).currentMeasurement_current >= 10) {
        (#Alarm).alarm_siren()
      }
  devices:
  - SmartPlug
  - Alarm
- command: Sound the alarm siren when a smart plug draws more than 1000 watts.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmartPlug).powerMeter_power >= 1000) {
        (#Alarm).alarm_siren()
      }
  devices:
  - SmartPlug
  - Alarm
- command: Turn off the smart plug.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#SmartPlug).switch_off()
  devices:
  - SmartPlug
- command: Turn on the smart plug.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#SmartPlug).switch_on()
  devices:
  - SmartPlug
- command: Toggle the power of the smart plug.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#SmartPlug).switch_toggle()
  devices:
  - SmartPlug
- command: Sound the alarm's siren when smoke is detected by the smoke detector.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SmokeDetector).smokeDetector_smoke == 'detected') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - SmokeDetector
- command: Sound the alarm siren when the soil moisture sensor's soil moisture reading is 30 percent or less.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - SoilMoistureSensor
- command: Sound the alarm's siren when sound is detected by the sound sensor.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SoundSensor).soundSensor_sound == 'detected') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - SoundSensor
- command: Sound the alarm's siren when the sound detection level is above 70 dB.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#SoundSensor).soundPressureLevel_soundPressureLevel >= 70) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - SoundSensor
- command: Sound the alarm's siren when the speaker is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Speaker).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Speaker
- command: Sound the alarm's siren when the speaker is playing.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Speaker).mediaPlayback_playbackStatus == 'playing') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Speaker
- command: Output commands to the speaker that the speaker supports.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |
      commands = (#Speaker).mediaPlayback_supportedPlaybackCommands
      (#Speaker).mediaPlayback_speak(commands)
  devices:
  - Speaker
- command: Turn off your speakers.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).switch_off()
  devices:
  - Speaker
- command: Turn on your speakers.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).switch_on()
  devices:
  - Speaker
- command: Toggle the power of the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).switch_toggle()
  devices:
  - Speaker
- command: Fast-forward the playback of the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_fastForward()
  devices:
  - Speaker
- command: Pause playback on the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_pause()
  devices:
  - Speaker
- command: Rewind the speaker's playback.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_rewind()
  devices:
  - Speaker
- command: Stop the speaker from playing.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_stop()
  devices:
  - Speaker
- command: Play music.mp3 on the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_play('music.mp3')
  devices:
  - Speaker
- command: Speaker says, "This is a test".
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Speaker).mediaPlayback_speak('This is a test.')
  devices:
  - Speaker
- command: Sound an alarm siren when the recorder is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Recorder).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Recorder
- command: Sound the alarm siren when the recorder is recording.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Recorder).audioRecord_recordStatus == 'recording') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Recorder
- command: Turn off the recorder.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).switch_off()
  devices:
  - Recorder
- command: Turn on the recorder.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).switch_on()
  devices:
  - Recorder
- command: Toggle the recorder's power.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).switch_toggle()
  devices:
  - Recorder
- command: Record 10 seconds with a recorder and save it as test.wav.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Recorder).audioRecord_record('test.wav', 10)
  devices:
  - Recorder
- command: Sound the alarm's siren when the switch is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Switch).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Switch
- command: Switch off.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Switch).switch_off()
  devices:
  - Switch
- command: Switch on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Switch).switch_on()
  devices:
  - Switch
- command: Toggle the power of the switch.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Switch).switch_toggle()
  devices:
  - Switch
- command: Sound the alarm's siren when the TV is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Television
- command: If the current TV channel is named "9 o'clock news" sound the alarm's siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).tvChannel_tvChannelName == "9 o'clock news") {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Television
- command: Sound the alarm's siren if the volume on your TV is above 50.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).audioVolume_volume >= 50) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Television
- command: Sound the alarm's siren when the TV is muted.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Television).audioMute_muteStatus == 'muted') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Television
- command: Turn off your TV.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).switch_off()
  devices:
  - Television
- command: Turn on your TV.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).switch_on()
  devices:
  - Television
- command: Toggle the power of your TV.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).switch_toggle()
  devices:
  - Television
- command: Turn down a TV channel.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_channelDown()
  devices:
  - Television
- command: Upload a TV channel.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_channelUp()
  devices:
  - Television
- command: Set the TV channel to 7.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_setTvChannel(7)
  devices:
  - Television
- command: Set the TV channel to "9 o'clock news".
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).tvChannel_setTvChannelName("9 o'clock news")
  devices:
  - Television
- command: Set the volume on your TV to 30.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioVolume_setVolume(30)
  devices:
  - Television
- command: Turn down the volume on your TV.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioVolume_volumeDown()
  devices:
  - Television
- command: Turn up the volume on your TV.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioVolume_volumeUp()
  devices:
  - Television
- command: Mute the TV.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioMute_mute()
  devices:
  - Television
- command: Unmute your TV.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioMute_unmute()
  devices:
  - Television
- command: Set your TV's mute state to Mute.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Television).audioMute_setMute('muted')
  devices:
  - Television
- command: Sound the alarm's siren if the current room temperature is above 25 degrees.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#TemperatureSensor).temperatureMeasurement_temperature >= 25) {
        (#Alarm).alarm_siren()
      }
  devices:
  - TemperatureSensor
  - Alarm
- command: Sound the alarm's siren when the valve is open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Valve).valve_valve == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Valve
- command: Close the valve.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Valve).valve_close()
  devices:
  - Valve
- command: Open the valve.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Valve).valve_open()
  devices:
  - Valve
- command: Sound the alarm's siren when the humidity outside is above 80 percent.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_humidityWeather >= 80) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - WeatherProvider
- command: Sound the alarm's siren when the particulate matter concentration outside is above 100.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_pm10Weather >= 100) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - WeatherProvider
- command: Sound the alarm's siren when the outside particulate matter concentration is above 50.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_pm25Weather >= 50) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - WeatherProvider
- command: Sound the alarm's siren when the barometric pressure is above 1020 hPa.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_pressureWeather >= 1020) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - WeatherProvider
- command: Sound the alarm's siren if it's currently above 30 degrees outside.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_temperatureWeather >= 30) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - WeatherProvider
- command: Sound the alarm's siren if the current weather is rainy.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#WeatherProvider).weatherProvider_weather == 'rain') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - WeatherProvider
- command: Play the current weather information for latitude 37.5665 and longitude 126.9780 over the speaker.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      weatherInfo = (#WeatherProvider).weatherProvider_getWeatherInfo(37.5665, 126.978)
      (#Speaker).mediaPlayback_speak(weatherInfo)
  devices:
  - WeatherProvider
  - Speaker
- command: Sound the alarm's siren when a window is open.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Window).windowControl_window == 'open') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Window
  - Alarm
- command: Close the window.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Window).windowControl_close()
  devices:
  - Window
- command: Open a window.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Window).windowControl_open()
  devices:
  - Window
- command: Sound the alarm's siren when a fall is detected by the fall detection sensor.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#FallDetector).fallDetection_fall == 'fall') {
        (#Alarm).alarm_siren()
      }
  devices:
  - FallDetector
  - Alarm
- command: Sound the alarm's siren when an occupancy sensor is detected.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#OccupancySensor).presenceSensor_presence == 'present') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - OccupancySensor
- command: Sound the alarm's siren when the relay is powered on.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Relay).switch_switch == 'on') {
        (#Alarm).alarm_siren()
      }
  devices:
  - Alarm
  - Relay
- command: Turn off the relay.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Relay).switch_off()
  devices:
  - Relay
- command: Turn on the relay.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Relay).switch_on()
  devices:
  - Relay
- command: Toggle the power of the relay.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Relay).switch_toggle()
  devices:
  - Relay
- command: Add a 60-second timer named Test Timer.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_add('Test Timer', 60)
  devices:
  - Timer
- command: If a timer named Test Timer exists, sound the alarm siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Timer).timer_isExist('Test Timer')) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Timer
  - Alarm
- command: When a timer named Test Timer goes off, sound an alarm siren.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      if ((#Timer).timer_isSet('Test Timer')) {
        (#Alarm).alarm_siren()
      }
  devices:
  - Timer
  - Alarm
- command: Reset a timer named Test Timer.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_reset('Test Timer')
  devices:
  - Timer
- command: Set a timer named Test Timer to 120 seconds.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_set('Test Timer', 120)
  devices:
  - Timer
- command: Start a timer named Test Timer.
  code:
  - name: Scenario1
    cron: ''
    period: -1
    code: |-
      (#Timer).timer_start('Test Timer')
  devices:
  - Timer
