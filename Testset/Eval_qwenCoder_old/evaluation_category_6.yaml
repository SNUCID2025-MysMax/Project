- command: 5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이면 급수기를 끄고 반복도 종료해 줘.
  command_translated: Measure soil moisture every 5 seconds, and if it is below 30%, turn on the irrigator. If the temperature is above 35 degrees at that time, turn off the irrigator and stop the loop.
  devices:
  - Dehumidifier
  - Humidifier
  - HumiditySensor
  - WeatherProvider
  - Dishwasher
  - Clock
  - Irrigator
  - AirQualityDetector
  - SoilMoistureSensor
  - AirConditioner
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      soil_moisture := 0
      temperature := 0
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0)
      (#Irrigator).switch_on()
      wait until((#TemperatureSensor).temperatureMeasurement_temperature > 35.0)
      (#Irrigator).switch_off()
      break
  model_info:
    elapsed_time: 6.053
    bge_elapsed_time: 0.161
    llm_elapsed_time: 5.892
- command: 3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘.
  command_translated: Blink the light 10 times in 3-second intervals. Check after each blink and stop the loop the moment the rain sensor detects rain.
  devices:
  - LeakSensor
  - SmokeDetector
  - SoundSensor
  - HumiditySensor
  - Camera
  - Light
  - Clock
  - Irrigator
  - LightSensor
  - WeatherProvider
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |-
      count := 0
      wait until((#Light).lightLevel_light == "on")
      (#Light).colorControl_setColor("off")
      count = count + 1
      if (count == 10) {
        break
      }
      wait until((#TemperatureSensor).weatherProvider_weather == "detected")
      break
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |-
      wait until((#TemperatureSensor).weatherProvider_weather == "detected")
      (#Light).colorControl_setColor("off")
      break
  model_info:
    elapsed_time: 7.416
    bge_elapsed_time: 0.159
    llm_elapsed_time: 7.257
- command: 1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘.
  command_translated: Repeat the toggle action of powering the fan on and off every second. Check the humidity just before each action and stop the loop immediately if it's above 80%.
  devices:
  - Humidifier
  - HumiditySensor
  - SmartPlug
  - Dishwasher
  - Fan
  - AirPurifier
  - Clock
  - Irrigator
  - SoilMoistureSensor
  - AirConditioner
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      humidity := 0
      while (humidity <= 80) {
        (#Fan).switch_toggle()
        humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity
        wait until (#Fan).switch_switch == 'off'
      }
  model_info:
    elapsed_time: 8.217
    bge_elapsed_time: 0.165
    llm_elapsed_time: 8.052
- command: 5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지.
  command_translated: Close the blinds by 10 percent every 5 seconds. Until you can't lower them anymore.
  devices:
  - Curtain
  - DoorLock
  - Button
  - Shade
  - Blind
  - Valve
  - Alarm
  - Clock
  - Relay
  - Irrigator
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 5000
    code: |-
      if ((#Blind).blind_blind == "open") {
        if ((#Blind).blindLevel_blindLevel >= 10) {
          (#Blind).blindLevel_setBlindLevel(#Blind).blindLevel_blindLevel - 10)
        } else {
          break
        }
      }
  model_info:
    elapsed_time: 5.654
    bge_elapsed_time: 0.146
    llm_elapsed_time: 5.508
- command: 10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘.
  command_translated: Turn on the irrigator every 10 seconds and turn it off after 5 seconds. Check the irrigator both on and off, and if the sunlight is above 500 lux, turn off the irrigator and stop the loop.
  devices:
  - Dehumidifier
  - Humidifier
  - Light
  - Dishwasher
  - Fan
  - GasValve
  - Clock
  - Irrigator
  - LightSensor
  - WeatherProvider
  - AirConditioner
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      irrigator_on := false
      wait until((#Clock).clock_second == 0)
      (#Irrigator).switch_on()
      irrigator_on = true
      wait until((#Clock).clock_second == 5)
      (#Irrigator).switch_off()
      irrigator_on = false
      wait until((#LightSensor).lightLevel_light > 500)
      (#Irrigator).switch_off()
      irrigator_on = false
      break
  - name: "Scenario2"
    cron: ""
    period: 10000
    code: |-
      wait until((#Clock).clock_second == 0)
      (#Irrigator).switch_on()
      wait until((#Clock).clock_second == 5)
      (#Irrigator).switch_off()
      wait until((#LightSensor).lightLevel_light > 500)
      (#Irrigator).switch_off()
      break
  model_info:
    elapsed_time: 11.295
    bge_elapsed_time: 0.166
    llm_elapsed_time: 11.129
- command: 2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘.
  command_translated: Turn the living room light on and off every two seconds. Check each time it turns off the light and stop the loop immediately if it detects that a window is open.
  devices:
  - SmokeDetector
  - Curtain
  - Window
  - Blind
  - ContactSensor
  - Camera
  - Light
  - Clock
  - DoorLock
  - Relay
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |-
      if ((#Light).switch_switch == "off") {
        (#Light).switch_switch = "on"
      } else {
        (#Light).switch_switch = "off"
      }
      wait until((#Light).switch_switch == "off")
      if ((#Window).windowControl_window == "open") {
        break
      }
  - name: "Scenario2"
    cron: ""
    period: -1
    code: |-
      wait until((#Window).windowControl_window == "open")
      break
  model_info:
    elapsed_time: 7.18
    bge_elapsed_time: 0.159
    llm_elapsed_time: 7.021
- command: 3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘.
  command_translated: Every 3 seconds, increase the television volume by 1 level. When it reaches level 5, reset it to the initial value. Repeat this cycle. If motion is detected at the moment of reset, stop the repetition.
  devices:
  - MotionSensor
  - Button
  - Television
  - Speaker
  - Alarm
  - Camera
  - Light
  - Clock
  - Relay
  - Irrigator
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |-
      initial_volume := 0
      current_volume := initial_volume
      if ((#MotionSensor).motionSensor_motion == "active") {
        current_volume := 0
      }
      while (true) {
        if (current_volume < 5) {
          current_volume := current_volume + 1
        } else {
          current_volume := initial_volume
          if ((#MotionSensor).motionSensor_motion == "active") {
            break
          }
        }
        (#Television).audioVolume_setVolume(current_volume)
        wait until(period = 3000)
      }
  model_info:
    elapsed_time: 8.266
    bge_elapsed_time: 0.166
    llm_elapsed_time: 8.1
- command: 10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해.
  command_translated: Every 10 seconds, close the blinds completely. Check each time and end the loop immediately if the TV is on.
  devices:
  - Siren
  - RobotCleaner
  - Curtain
  - Television
  - Shade
  - Switch
  - Blind
  - Light
  - Clock
  - Relay
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 10000
    code: |-
      while True:
        (#Blind).blind_close()
        wait until((#Television).switch_switch == "on")
        break
  model_info:
    elapsed_time: 3.996
    bge_elapsed_time: 0.15
    llm_elapsed_time: 3.846
- command: 2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘.
  command_translated: Every two seconds, turn the alarm siren on for 1 second, then turn it off, and every time it turn on the siren, make sure the window is closed and stop the loop if it is.
  devices:
  - Siren
  - SoundSensor
  - Curtain
  - Window
  - Blind
  - ContactSensor
  - Alarm
  - Clock
  - DoorLock
  - Relay
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |-
      wait until((#Alarm).alarm_alarm == "both")
      (#Alarm).alarm_off()
      wait until((#Window).windowControl_window == "closed")
      break
  - name: "Scenario2"
    cron: ""
    period: 2000
    code: |-
      wait until((#Alarm).alarm_alarm == "both")
      (#Alarm).alarm_off()
      wait until((#Window).windowControl_window == "closed")
      break
  model_info:
    elapsed_time: 6.011
    bge_elapsed_time: 0.162
    llm_elapsed_time: 5.848
- command: 5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘.
  command_translated: Every 5 seconds, switch the room air purifier to 'auto' mode. Check each time and stop the loop if a window is open.
  devices:
  - RobotCleaner
  - DoorLock
  - Window
  - Shade
  - Humidifier
  - AirPurifier
  - Clock
  - WeatherProvider
  - AirQualityDetector
  - AirConditioner
  - Dehumidifier
  generated_code: []
  model_info:
    elapsed_time: 50.816
    bge_elapsed_time: 0.154
    llm_elapsed_time: 50.661
