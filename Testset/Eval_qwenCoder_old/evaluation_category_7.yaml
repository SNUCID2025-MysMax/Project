- command: 실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘.
  command_translated: Check in real-time and turn on the irrigator whenever the soil humidity drops below 25% and announce "Start watering" via the speaker.
  devices:
  - LeakSensor
  - Dehumidifier
  - Pump
  - Humidifier
  - HumiditySensor
  - Clock
  - Speaker
  - Irrigator
  - SoilMoistureSensor
  - WeatherProvider
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)
      (#Irrigator).switch_on()
      (#Speaker).mediaPlayback_speak("Start watering")
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      wait until((#Irrigator).switch_switch == "on")
      (#Speaker).mediaPlayback_speak("Watering in progress")
  - name: "Scenario3"
    cron: ""
    period: 1000
    code: |-
      wait until((#Irrigator).switch_switch == "off")
      (#Speaker).mediaPlayback_speak("Watering completed")
  model_info:
    elapsed_time: 8.77
    bge_elapsed_time: 0.154
    llm_elapsed_time: 8.616
- command: 1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘.
  command_translated: Check the status every 1 second and turn on the fan whenever the temperature exceeds 35 degrees.
  devices:
  - Dehumidifier
  - Humidifier
  - HumiditySensor
  - WeatherProvider
  - Fan
  - AirPurifier
  - Clock
  - Irrigator
  - AirQualityDetector
  - AirConditioner
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      wait until((#TemperatureSensor).temperatureMeasurement_temperature > 35.0)
      (#Fan).switch_on()
  - name: "Scenario2"
    cron: ""
    period: 1000
    code: |-
      wait until((#TemperatureSensor).temperatureMeasurement_temperature <= 35.0)
      (#Fan).switch_off()
  model_info:
    elapsed_time: 5.576
    bge_elapsed_time: 0.147
    llm_elapsed_time: 5.429
- command: 3초마다 일조량을 확인해서 200룩스 이하로 떨어지면 조명을 켜 줘.
  command_translated: Check the sunlight every 3 seconds and turn on the lights if it drops below 200 lux.
  devices:
  - Blind
  - Alarm
  - Camera
  - Light
  - Clock
  - Relay
  - Irrigator
  - LightSensor
  - WeatherProvider
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 3000
    code: |-
      wait until((#Light).lightLevel_light < 200.0)
      (#Light).switch_on()
  - name: "Scenario2"
    cron: ""
    period: 3000
    code: |-
      wait until((#Light).lightLevel_light >= 200.0)
      (#Light).switch_off()
  model_info:
    elapsed_time: 5.623
    bge_elapsed_time: 0.146
    llm_elapsed_time: 5.477
- command: 문이 열릴 때마다 경광등과 조명을 켜 줘. 실시간으로 확인해서 상태를 계속 검사해서 반응해 줘.
  command_translated: Turn on sirens and lights whenever a door is opened. Check in real time and react by constantly checking the status.
  devices:
  - Siren
  - SmokeDetector
  - Curtain
  - Window
  - Shade
  - ContactSensor
  - Alarm
  - Light
  - Clock
  - Relay
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      if ((#DoorLock).doorControl_door == "open") {
        (#Siren).alarm_both()
        (#Light).switch_on()
      }
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      if ((#DoorLock).doorControl_door == "open") {
        (#Siren).alarm_both()
        (#Light).switch_on()
      }
  model_info:
    elapsed_time: 5.937
    bge_elapsed_time: 0.15
    llm_elapsed_time: 5.786
- command: 현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자.
  command_translated: Whenever rain is detected in the current weather, turn off the irrigator and announce "Rain detected" via the speaker. Let's detect only once a minutae.
  devices:
  - LeakSensor
  - SmokeDetector
  - SoundSensor
  - Recorder
  - HumiditySensor
  - Clock
  - Speaker
  - Irrigator
  - SoilMoistureSensor
  - WeatherProvider
  - TemperatureSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 60000
    code: |-
      wait until((#WeatherProvider).weatherProvider_weather == "rain")
      (#Irrigator).switch_off()
      (#Speaker).mediaPlayback_speak("Rain detected")
  - name: "Scenario2"
    cron: ""
    period: 60000
    code: |-
      wait until((#WeatherProvider).weatherProvider_weather == "rain")
      (#Irrigator).switch_off()
      (#Speaker).mediaPlayback_speak("Rain detected")
  model_info:
    elapsed_time: 6.223
    bge_elapsed_time: 0.16
    llm_elapsed_time: 6.064
- command: 실시간으로 확인해서 거실 창문이 열릴 때마다 블라인드를 닫아 줘.
  command_translated: Check in real-time and close the blinds whenever the living room window opens.
  devices:
  - Siren
  - Curtain
  - Window
  - Shade
  - Blind
  - ContactSensor
  - Valve
  - Alarm
  - Clock
  - DoorLock
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      if ((#Window).windowControl_window == "open") {
        (#Blind).blind_close()
      }
  model_info:
    elapsed_time: 3.378
    bge_elapsed_time: 0.146
    llm_elapsed_time: 3.232
- command: 조명이 켜질 때마다 커튼을 동시에 열어 줘. 실시간으로 조명을 체크해야 해.
  command_translated: Open the curtains at the same time whenever the lights come on. Check the lights in real time.
  devices:
  - Siren
  - Curtain
  - Window
  - Blind
  - ContactSensor
  - Camera
  - Light
  - Clock
  - Relay
  - DoorLock
  - LightSensor
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 100
    code: |-
      wait until((#Light).switch_switch == "on")
      (#Curtain).switch_on()
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      wait until((#Light).switch_switch == "off")
      (#Curtain).switch_off()
  model_info:
    elapsed_time: 4.919
    bge_elapsed_time: 0.145
    llm_elapsed_time: 4.774
- command: 2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘.
  command_translated: Check status every 2 seconds and turn on the speakers whenever the TV turns on.
  devices:
  - Siren
  - DoorLock
  - Television
  - Speaker
  - Switch
  - Alarm
  - Camera
  - Clock
  - Relay
  - Irrigator
  - GasValve
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 2000
    code: |-
      wait until((#Television).switch_switch == "on")
      (#Speaker).switch_on()
  - name: "Scenario2"
    cron: ""
    period: 2000
    code: |-
      wait until((#Television).switch_switch == "off")
      (#Speaker).switch_off()
  model_info:
    elapsed_time: 5.179
    bge_elapsed_time: 0.145
    llm_elapsed_time: 5.034
- command: 현관 문이 열릴 때마다 즉시 알람의 경광등을 켜 줘. 확인은 실시간으로 하구.
  command_translated: Instantly turn on the alarm's light whenever the front door is opened. Check in real time.
  devices:
  - Siren
  - SmokeDetector
  - Curtain
  - Window
  - Shade
  - ContactSensor
  - Alarm
  - Light
  - Clock
  - Relay
  - DoorLock
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: -1
    code: |-
      wait until((#DoorLock).doorControl_door == "open")
      (#Alarm).alarm_siren()
  - name: "Scenario2"
    cron: ""
    period: 100
    code: |-
      wait until((#DoorLock).doorControl_door == "open")
      (#Alarm).alarm_siren()
  model_info:
    elapsed_time: 5.037
    bge_elapsed_time: 0.149
    llm_elapsed_time: 4.887
- command: 1초마다 공기청정기 상태를 확인해서 꺼지면 자동 모드로 다시 켜 줘.
  command_translated: Check the status of the air purifier every 1 second and turn it back on and set to auto mode if it turns off.
  devices:
  - RobotCleaner
  - Shade
  - Humidifier
  - Dishwasher
  - AirPurifier
  - Clock
  - WeatherProvider
  - AirQualityDetector
  - Pump
  - AirConditioner
  - Dehumidifier
  generated_code:
  - name: "Scenario1"
    cron: ""
    period: 1000
    code: |-
      if ((#AirPurifier).switch_switch == "off") {
        (#AirPurifier).switch_on()
        (#AirPurifier).airPurifierFanMode_setAirPurifierFanMode("auto")
      }
  model_info:
    elapsed_time: 4.983
    bge_elapsed_time: 0.147
    llm_elapsed_time: 4.836
