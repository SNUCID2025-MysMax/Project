category_analysis,command,GT,generated_code,cloud_similarity_gpt4o,explanation
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_siren()'}]",1.0,
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""siren\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#Siren).switch_on()\n(#Siren).sirenMode_setSirenMode('siren')""}]",0.7,The generated code includes an additional action `(#Siren).switch_on()` which is not present in the ground truth.
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_strobe()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_strobe()'}]",1.0,
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""strobe\"")""}",[],0.0,"The generated code is empty, missing the action present in the ground truth."
1,사이렌과 경광등을 동시에 켜 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_both()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_both()'}]",1.0,
1,사이렌과 경광등을 둘 다 꺼 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#Siren).sirenMode_setSirenMode('off')\n(#Siren).switch_off()""}]",0.7,The generated code includes an additional action `(#Siren).switch_off()` which is not present in the ground truth.
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#OccupancySensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve the same logical outcome."
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#PresenceSensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve the same logical outcome."
2,에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_airConditionerMode == \""cool\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""cool"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
2,에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_targetTemperature == 30) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_targetTemperature == 30.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.95,Minor difference in numeric representation (30.0 vs 30) which does not affect the logic.
1,에어컨을 자동 모드로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#AirConditioner).airConditionerMode_setAirConditionerMode('auto')""}]",1.0,
1,알람을 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_off()'}]",1.0,
1,블라인드를 70 퍼센트로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blindLevel_setBlindLevel(70)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Blind).blindLevel_setBlindLevel(70)'}]",1.0,
2,블라인드 움직임을 멈춰줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blind_pause()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Blind).blind_pause()'}]",1.0,
2,버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Buttonx4).buttonx4_button4 == \""swipe_up\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#Buttonx4).buttonx4_button4 == ""swipe_up""\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve the same logical outcome."
1,10을 3으로 나눈 나머지를 구해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Calculator).calculator_mod(10, 3)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'result := (#Calculator).calculator_mod(10, 3)\n(#Speaker).mediaPlayback_speak(""The remainder of 10 divided by 3 is "" + result)'}]",0.6,"The generated code includes additional logic to speak the result, which is not present in the ground truth."
9,"가장 최근에 찍은 사진을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMailWithFile(toAddress: ""test@example.com"", title: ""Photo"", text: ""This is a photo"", file: (#Camera).camera_image)'}]",0.9,"The generated code directly uses the camera image in the email function, whereas the ground truth assigns it to a variable first."
9,"가장 최근에 찍은 동영상을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'SendEmailWithAttachment', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMailWithFile(toAddress: ""test@example.com"", title: ""Video"", text: ""This is a video."", file: (#Recorder).audioRecord_recordStatus == ""recording"")'}]",0.4,"The generated code uses a condition for the file parameter, whereas the ground truth uses a video file."
1,카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Camera).camera_takeTimelapse(10, 2)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Camera).camera_takeTimelapse(duration: 10.0, speed: 2.0)'}]",0.95,Minor difference in numeric representation (10.0 vs 10) which does not affect the logic.
2,지금이 오후 3시 15분이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_time == 1515) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '0 15 * * *', 'period': -1, 'code': 'if (clock_time == 1515) {\n  (#Alarm).alarm_siren()\n}'}]",0.8,The generated code includes a cron expression which is not present in the ground truth.
2,올해가 2025년이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_year == 2025) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Clock).clock_year == 2025) {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
4,1시간 20분 30초 뒤에 알람의 사이렌을 울려줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(4830000)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#Clock).clock_delay(4200)\n(#Alarm).alarm_siren()'}]",0.2,The delay durations are significantly different between the generated and ground truth code.
2,접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#ContactSensor).contactSensor_contact == \""closed\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#ContactSensor).contactSensor_contact == ""closed"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
9,이메일을 'test@example.com' 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""test@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'SendEmailAlert', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(toAddress: ""test@example.com"", title: ""Alert"", text: ""This is an emergency"")'}]",0.95,Minor difference in text punctuation which does not affect the logic.
3,가스 밸브가 열려 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#GasValve).valve_valve == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#GasValve).valve_valve == ""open"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
1,관개 장치의 급수를 시작해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Irrigator).irrigatorOperatingState_startWatering()'}]",1.0,
2,누수가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LeakSensor).leakSensor_leakage == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#LeakSensor).leakSensor_leakage == ""detected"")\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#LeakSensor).leakSensor_leakage == ""not_detected"")\n(#Alarm).alarm_off()'}]",0.6,The generated code includes additional logic for turning off the alarm which is not present in the ground truth.
1,조명을 빨간색으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).colorControl_setColor(\""255|0|0\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).colorControl_setColor(""RED|0|0"")'}]",0.5,"The color values differ significantly, affecting the intended color output."
1,5의 속도로 조명의 밝기를 80으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switchLevel_setLevel(80, 5)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).switchLevel_setLevel(80, 5)'}]",1.0,
1,조명의 전원을 토글해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switch_toggle()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).switch_toggle()'}]",1.0,
2,모션 센서가 활성 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#MotionSensor).motionSensor_motion == ""active"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
2,움직임이 감지되고 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#MotionSensor).motionSensor_motion == ""active""\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until(#MotionSensor).motionSensor_motion == ""inactive""\n(#Alarm).alarm_off()'}]",0.6,The generated code includes additional logic for turning off the alarm which is not present in the ground truth.
2,존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#PresenceSensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve the same logical outcome."
2,펌프가 열려있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Pump).pump_pump == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Pump).pump_pump == ""open"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
2,연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SmokeDetector).smokeDetector_smoke == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#SmokeDetector).smokeDetector_smoke == ""detected"")\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#SmokeDetector).smokeDetector_smoke == ""tested"")\n(#Alarm).alarm_off()'}]",0.6,The generated code includes additional logic for turning off the alarm which is not present in the ground truth.
1,스피커에서 music.mp3를 재생해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Speaker).mediaPlayback_play(\""music.mp3\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Speaker).mediaPlayback_play(""music.mp3"")'}]",1.0,
1,녹음기로 10초 동안 녹음해서 test.wav로 저장해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Recorder).audioRecord_record(\""test.wav\"", 10)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Recorder).audioRecord_record(""test.wav"", 10.0)'}]",0.95,Minor difference in numeric representation (10.0 vs 10) which does not affect the logic.
2,현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 25) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The condition uses `>` instead of `>=`, which may affect the logic at the boundary value."
3,바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_humidityWeather >= 80) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.7,"The generated code uses a different sensor and condition operator, which may affect the logic."
3,바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_pm25Weather >= 50) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#AirQualityDetector).dustSensor_dustLevel > 50)\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#AirQualityDetector).dustSensor_dustLevel <= 50)\n(#Alarm).alarm_off()'}]",0.5,The generated code uses a different sensor and includes additional logic for turning off the alarm.
3,창문이 열린 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
2,낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#FallDetector).fallDetection_fall == \""fall\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#FallDetector).fallDetection_fall == ""fall"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve the same logical outcome."
2,점유 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#OccupancySensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve the same logical outcome."
1,테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Timer).timer_add(\""Test Timer\"", 60)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Timer).timer_add(name: ""Test Timer"", timeout: 60.0)'}]",0.95,Minor difference in numeric representation (60.0 vs 60) which does not affect the logic.
5,토양 수분이 30% 이하이고 조명이 꺼져 있으면 관개 장치를 작동시키고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) and ((#Light).switch_switch == \""off\"")) {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) and ((#Light).switch_switch == ""off"") {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}'}]",0.9,"The condition uses `<` instead of `<=`, which may affect the logic at the boundary value."
2,온도가 33도 이상이면 제습기를 켜고 커튼을 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}'}]",0.9,"The condition uses `>` instead of `>=`, which may affect the logic at the boundary value."
5,이산화탄소가 1000ppm 이상이고 블라인드가 열려 있으면 환풍기를 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Blind).blind_blind == \""open\"")) {\n  (#Fan).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) and ((#Blind).blind_blind == ""open"") {\n  (#Fan).fanControl_setFanSpeed(100)\n  (#Blind).blind_close()\n}'}]",0.7,"The condition uses `>` instead of `>=`, and the fan action differs, affecting the logic."
5,온도가 29도 이상이고 습도가 80% 이상이며 조명이 꺼져 있으면 에어컨을 켜고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) and ((#Light).switch_switch == \""off\"")) {\n  (#AirConditioner).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""if ((#TemperatureSensor).temperatureMeasurement_temperature > 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) and ((#LightSensor).lightLevel_light == 0) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode('cool')\n  (#Light).switch_on()\n}""}]",0.6,"The conditions and actions differ, affecting the logic and intended behavior."
5,조명이 켜져 있고 창문이 닫혀 있으면 커튼을 열고 환풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Curtain).curtain_open()\n  (#Fan).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") and ((#Window).windowControl_window == ""closed"") {\n  (#Curtain).curtain_open()\n  (#Fan).switch_off()\n}'}]",1.0,
5,TV가 꺼져 있고 스피커가 재생 중이면 TV를 켜고 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Speaker).mediaPlayback_playbackStatus == \""playing\"")) {\n  (#Television).switch_on()\n  (#Speaker).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"" and (#Speaker).mediaPlayback_playbackStatus == ""playing"") {\n  (#Television).switch_on()\n  (#Speaker).mediaPlayback_stop()\n}'}]",0.8,"The action on the speaker differs, affecting the intended behavior."
5,조명이 켜져 있고 블라인드가 열려 있으며 움직임이 감지되면 조명을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Blind).blind_blind == \""open\"") and ((#MotionSensor).motionSensor_motion == \""active\"")) {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") and ((#Blind).blind_blind == ""open"") and ((#MotionSensor).motionSensor_motion == ""active"") {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}'}]",1.0,
5,알람이 꺼져 있고 조명이 꺼져 있으며 커튼이 열려 있으면 사이렌을 울리고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Alarm).alarm_alarm == \""off\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Alarm).alarm_siren()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Alarm).alarm_alarm == ""off"") and ((#Light).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""open"") {\n  (#Siren).switch_on()\n  (#Light).switch_on()\n}'}]",0.8,The generated code uses (#Siren).switch_on() instead of (#Alarm).alarm_siren() which is a different action.
5,에어컨이 꺼져 있고 커튼이 닫혀 있으면 에어컨을 켜고 커튼을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"") {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}'}]",1.0,
5,창문이 열려 있고 조명이 꺼져 있으며 커튼이 닫혀 있으면 조명을 켜고 커튼을 열어 줘. 또한 관수기가 꺼져 있고 토양 수분이 40% 이하이면 관수기를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 40.0)) {\n  (#Irrigator).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") and ((#Light).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"") {\n  (#Light).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"") and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 40.0) {\n  (#Irrigator).switch_on()\n}'}]",0.9,The condition for the soil moisture sensor in Scenario2 uses '<' in the generated code instead of '<=' in the ground truth.
5,환풍기가 꺼져 있고 이산화탄소 수치가 1000 이상이며 커튼이 닫혀 있으면 환풍기를 켜고 커튼을 열어 줘. 조명이 꺼져 있고 온도가 27도 이상이면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Fan).switch_switch == \""off\"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Light).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 27.0)) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Fan).switch_switch == ""off"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000) and ((#Curtain).curtain_curtain == ""closed"") {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 27.0) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}'}]",0.9,The generated code uses '>' instead of '>=' for carbon dioxide and temperature conditions.
5,에어컨이 꺼져 있고 온도가 29도 이상이며 습도가 70% 이상이면 제습기를 제습 모드로 설정하고 켜 줘. 커튼이 열려 있고 조명이 꺼져 있으면 커튼을 닫고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)) {\n  (#Dehumidifier).airConditionerMode_setAirConditionerMode(\""dehumidifying\"")\n  (#Dehumidifier).switch_on()\n}\nif (((#Curtain).curtain_curtain == \""open\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 70.0) {\n  (#Dehumidifier).dehumidifierMode_setDehumidifierMode(""dehumidifying"")\n  (#Dehumidifier).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).curtain_curtain == ""open"") and ((#Light).switch_switch == ""off"") {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}'}]",0.7,"The generated code uses '>' instead of '>=' for temperature and humidity conditions, and the action method names differ for setting modes."
5,조명이 꺼져 있고 움직임이 감지되지 않으며 커튼이 열려 있으면 조명을 켜고 커튼을 닫아 줘. 관수기가 꺼져 있고 창문이 닫혀 있으면 관수기를 켜고 창문을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""off\"") and ((#MotionSensor).motionSensor_motion == \""inactive\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_close()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""off"") and ((#MotionSensor).motionSensor_motion == ""inactive"") and ((#Curtain).curtain_curtain == ""open"") {\n  (#Light).switch_on()\n  (#Curtain).curtain_close()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"") and ((#Window).windowControl_window == ""closed"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}'}]",1.0,
5,블라인드가 열려 있고 조명이 꺼져 있으며 습도가 80% 이상이면 블라인드를 닫고 조명을 켜 줘. 창문이 닫혀 있고 에어컨이 꺼져 있으면 창문을 열고 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Blind).blind_blind == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)) {\n  (#Blind).blind_close()\n  (#Light).switch_on()\n}\nif (((#Window).windowControl_window == \""closed\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#Window).windowControl_open()\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Blind).blind_blind == ""open"") and ((#Light).switch_switch == ""off"") and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Blind).blind_close()\n  (#Light).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""closed"") and ((#AirConditioner).switch_switch == ""off"") {\n  (#Window).windowControl_open()\n  (#AirConditioner).switch_on()\n}'}]",0.9,The generated code uses '>' instead of '>=' for humidity condition.
5,TV가 꺼져 있고 블라인드가 닫혀 있으며 커튼이 열려 있으면 TV를 켜고 블라인드를 열어 줘. 에어컨이 자동 모드가 아니고 꺼져 있으면 자동 모드로 설정하고 전원을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Blind).blind_blind == \""closed\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode != \""auto\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") and ((#Blind).blind_blind == ""closed"") and ((#Curtain).curtain_curtain == ""open"") {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode != ""auto"") and ((#AirConditioner).switch_switch == ""off"") {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(""auto"")\n  (#AirConditioner).switch_on()\n}'}]",1.0,
5,문이 열려 있고 알람이 꺼져 있으면 사이렌을 울리고 블라인드가 열려 있으면 닫아 줘. 에어컨이 꺼져 있고 온도가 30도 이상이면 냉방 모드로 설정하고 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#DoorLock).doorControl_door == \""open\"") and ((#Alarm).alarm_alarm == \""off\"")) {\n  (#Siren).sirenMode_setSirenMode(\""siren\"")\n  if ((#Blind).blind_blind == \""open\"") {\n    (#Blind).blind_close()\n  }\n}\nif (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0)) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""cool\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 30.0) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(""cool"")\n  (#AirConditioner).switch_on()\n}'}]",0.5,The generated code only implements the second scenario from the ground truth and uses '>' instead of '>=' for the temperature condition.
5,TV가 꺼져 있고 커튼이 닫혀 있으며 선풍기가 꺼져 있으면 TV를 켜고 커튼을 열어 줘. 스피커가 재생 중이고 조명이 꺼져 있으면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"") and ((#Fan).switch_switch == \""off\"")) {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Speaker).mediaPlayback_playbackStatus == \""playing\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"") and ((#Fan).switch_switch == ""off"") {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Speaker).mediaPlayback_playbackStatus == ""playing"") and ((#Light).switch_switch == ""off"") {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}'}]",1.0,
5,TV가 켜져 있고 스피커가 꺼져 있으며 조명이 꺼져 있으면 스피커를 켜고 조명을 켜 줘. 에어컨이 난방 모드이고 온도가 21도 이상이면 에어컨을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""on\"") and ((#Speaker).switch_switch == \""off\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Speaker).switch_on()\n  (#Light).switch_on()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode == \""heat\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 21.0)) {\n  (#AirConditioner).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""on"" and (#Speaker).switch_switch == ""off"" and (#Light).switch_switch == ""off"") {\n  (#Speaker).switch_on()\n  (#Light).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""heat"" and (#TemperatureSensor).temperatureMeasurement_temperature > 21.0) {\n  (#AirConditioner).switch_off()\n  (#Blind).blind_close()\n}'}]",0.9,The generated code uses '>' instead of '>=' for the temperature condition in Scenario2.
6,매일 아침 8시에 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8 * * *"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '0 8 * * *', 'period': 0, 'code': '(#Light).switch_on()'}, {'name': 'Scenario2', 'cron': '0 8 * * *', 'period': 0, 'code': '(#Light).switch_on()'}]",1.0,
6,매일 오후 6시부터 7시 사이에 15초마다 커튼을 닫았다 열었다 해 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 18 * * *"", ""period"": 15000, ""code"": ""curtain_action := true\nif ((#Clock).clock_hour == 18) {\n  if (curtain_action == true) {\n    (#Curtain).curtain_close()\n    curtain_action = false\n  } else {\n    (#Curtain).curtain_open()\n    curtain_action = true\n  }\n} else {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 15000, 'code': 'if (clockHour >= 18 and clockHour < 19) {\n  (#Curtain).curtain_close()\n  wait until(clockSecond == 15)\n  (#Curtain).curtain_open()\n}'}]",0.6,The generated code uses a different logic for curtain control and lacks the toggling mechanism present in the ground truth.
6,주말 오후 10시부터 11시까지 3분마다 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 180000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Blind).blind_close()\n} else {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '0 10 * * 0,6', 'period': 180000, 'code': 'all(#Blind).blind_close()'}, {'name': 'Scenario2', 'cron': '0 11 * * 0,6', 'period': 180000, 'code': 'all(#Blind).blind_close()'}]",0.4,The generated code has different cron timings and lacks the conditional logic present in the ground truth.
6,주말 오후 10시부터 11시까지 3초마다 제습기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 3000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Dehumidifier).switch_on()\n} else {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '0 22 * * 0,6', 'period': 3000, 'code': 'dehumidifierOn := false\nif (not dehumidifierOn) {\n  (#Dehumidifier).switch_on()\n  dehumidifierOn := true\n}\nwait until(#Clock).clock_datetime >= 220000\n(#Dehumidifier).switch_off()\ndehumidifierOn := false'}]",0.5,The generated code uses a different logic for dehumidifier control and has different cron settings.
7,10초마다 알람과 사이렌을 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""alarm_state := true\nif (alarm_state == true) {\n  (#Alarm).alarm_off()\n  (#Siren).switch_off()\n  alarm_state = false\n} else {\n  (#Alarm).alarm_siren()\n  (#Siren).switch_on()\n  alarm_state = true\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': '(#Alarm).alarm_off()\n(#Siren).switch_on()\nwait until(#Alarm).alarm_alarm == ""off"" and (#Siren).switch_switch == ""on""\n(#Alarm).alarm_siren()\n(#Siren).switch_off()\nwait until(#Alarm).alarm_alarm == ""siren"" and (#Siren).switch_switch == ""off""\n(#Alarm).alarm_off()\n(#Siren).switch_on()'}]",0.3,The generated code uses a different sequence and logic for alarm and siren control compared to the ground truth.
7,매일 30초마다 선풍기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 30000, ""code"": ""fan_on := true\nif (fan_on == true) {\n  (#Fan).switch_off()\n  fan_on = false\n} else {\n  (#Fan).switch_on()\n  fan_on = true\n}""}","[{'name': 'Scenario1', 'cron': '0 0 * * *', 'period': 10000, 'code': 'fanOn := false\nif (fanOn == false) {\n  (#Fan).switch_on()\n  fanOn = true\n} else {\n  (#Fan).switch_off()\n  fanOn = false\n}'}]",0.7,The generated code has different initial fan state and cron settings compared to the ground truth.
6,매일 자정에 TV를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * *"", ""period"": 0, ""code"": ""(#Television).switch_off()""}","[{'name': 'Scenario1', 'cron': '0 0 * * *', 'period': -1, 'code': '(#Television).switch_off()'}, {'name': 'Scenario2', 'cron': '0 0 * * *', 'period': -1, 'code': '(#Television).switch_off()'}]",0.9,The generated code has a different period value compared to the ground truth.
6,평일 오전 8시부터 자정까지 한 시간마다 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8-23 * * 1-5"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '0 8-23 * * 1-5', 'period': 0, 'code': '(#Light).switch_on()\nname = ""Scenario2""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()\nname = ""Scenario3""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()\nname = ""Scenario4""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()\nname = ""Scenario5""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()'}]",0.8,"The generated code repeats the light switch action multiple times with different scenario names, which is not present in the ground truth."
4,창문이 열리면 알람의 사이렌을 울려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#Window).windowControl_window == ""open""\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until(#Window).windowControl_window == ""closed""\n(#Alarm).alarm_off()'}]",0.7,"The generated code includes additional logic for closing the window and turning off the alarm, which is not present in the ground truth."
3,토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 20.0)\nwait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0)\n(#Irrigator).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 20.0)\n(#Irrigator).switch_on()'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)\n(#Irrigator).switch_on()'}]",0.8,"The generated code separates the conditions into two scenarios, while the ground truth combines them."
3,움직임이 감지되면 최대 3번까지 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""motion_count := 0\nprev_motion := \""inactive\""\ncurrent = (#MotionSensor).motionSensor_motion\nif (current == \""active\"") and (prev_motion == \""inactive\"") {\n  if (motion_count < 3) {\n    (#Light).switch_on()\n    motion_count = motion_count + 1\n  }\n}\nprev_motion = current""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#MotionSensor).motionSensor_motion == ""active"") {\n  (#Light).switchLevel_setLevel(30, 1000)\n  wait until((#MotionSensor).motionSensor_motion == ""inactive"")\n  (#Light).switchLevel_setLevel(30, 1000)\n  wait until((#MotionSensor).motionSensor_motion == ""inactive"")\n  (#Light).switchLevel_setLevel(30, 1000)\n}'}]",0.5,"The generated code repeats the light level setting without counting motion events, unlike the ground truth."
3,온도가 35도 이상이 되면 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)\n(#AirConditioner).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""auto"") {\n  if ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n    (#AirConditioner).airConditionerMode_setAirConditionerMode(""cool"")\n    (#AirConditioner).airConditionerMode_setTemperature(22.0)\n  }\n}'}]",0.4,The generated code uses a different logic and conditions for air conditioner control compared to the ground truth.
3,습도가 80% 이상이 되면 블라인드를 내려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)\n(#Blind).blind_close()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Blind).blind_close()\n}'}]",0.9,The generated code uses '>' instead of '>=' for the humidity condition.
3,블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Blind).blind_blind == \""closed\"")\n(#Speaker).mediaPlayback_speak(\""Blinds are closed\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#Blind).blind_blind == ""closed""\n(#Speaker).mediaPlayback_speak(""Blinds are closed"")'}]",1.0,
3,TV가 꺼지면 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Television).switch_switch == \""off\"")\n(#Speaker).switch_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") {\n  (#Speaker).switch_off()\n}'}]",0.8,The generated code uses an 'if' statement instead of 'wait until' for the television switch condition.
3,커튼이 3번 열렸다 닫히면 조명을 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""close_count := 0\nprev_state := \""closed\""\nopened := false\ncurr = (#Curtain).curtain_curtain\nif (curr == \""open\"") and (prev_state == \""closed\"") {\n  opened = true\n}\nif (curr == \""closed\"") and (prev_state == \""open\"") and (opened == true) {\n  close_count = close_count + 1\n  opened = false\n}\nprev_state = curr\nif (close_count >= 3) {\n  (#Light).switch_off()\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).curtain_curtain == ""open"") {\n  (#Light).switch_off()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 100, 'code': 'counter := 0\nif ((#Curtain).curtain_curtain == ""open"") {\n  counter += 1\n  if (counter == 3) {\n    (#Light).switch_on()\n    counter := 0\n  }\n}'}]",0.6,"The generated code uses a simpler logic for curtain and light control, lacking the state tracking and counting mechanism in the ground truth."
4,제습기가 꺼지면 다시 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Dehumidifier).switch_switch == \""off\"")\n(#Dehumidifier).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Dehumidifier).switch_switch == ""off"") {\n  (#Dehumidifier).switch_on()\n}'}]",0.8,The generated code uses an 'if' statement instead of 'wait until' for the dehumidifier switch condition.
4,재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#PresenceSensor).presenceSensor_presence == \""not present\"")\n(#Speaker).mediaPlayback_speak(\""Door is open\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#OccupancySensor).presenceSensor_presence == ""not_present""\n(#Speaker).mediaPlayback_speak(""Door is open"")'}]",0.9,The generated code uses a slightly different sensor name and condition string.
2,토양 습도가 30% 미만이면 5초 후 급수기를 작동해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  (#Clock).clock_delay(5000)\n  (#Irrigator).irrigatorOperatingState_startWatering()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  wait until(#Clock).clock_delay(5000)\n  (#Irrigator).switch_on()\n}'}]",0.9,The generated code uses a different method for starting the irrigator compared to the ground truth.
3,창문이 열려 있고 온도가 35도 이상이면 10초 대기 후 블라인드를 내려 줘.,"{""name"": ""Scenario2"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)) {\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  wait until(#Clock).clock_delay(10000)\n  (#Blind).blindLevel_setBlindLevel(50)\n}'}]",0.7,The generated code uses '>' instead of '>=' for the temperature condition and sets a blind level instead of closing the blind.
4,"습도가 80% 이상이면 3초 뒤 제습기를 켜고, 7초 더 지난 후 창문을 닫아 줘.","{""name"": ""Scenario3"", ""cron"": """", ""period"": -1, ""code"": ""if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) {\n  (#Clock).clock_delay(3000)\n  (#Dehumidifier).switch_on()\n  (#Clock).clock_delay(7000)\n  (#Window).windowControl_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0\nwait until(#Clock).clock_delay(3000)\n(#Dehumidifier).switch_on()\nwait until(#Clock).clock_delay(7000)\n(#Window).windowControl_close()'}]",0.9,The generated code uses '>' instead of '>=' for the humidity condition.
4,빛의 세기가 100룩스 이하면 5초 대기 후 LED 조명을 켜 줘.,"{""name"": ""Scenario4"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LightSensor).lightLevel_light <= 100.0) {\n  (#Clock).clock_delay(5000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#LightSensor).lightLevel_light < 100.0) {\n  wait until(#Clock).clock_delay(5000)\n  (#Light).switch_on()\n}'}]",0.9,The generated code uses '<' instead of '<=' for the light level condition.
4,급수기를 작동 후 10초 기다렸다가 환풍기를 켜 줘.,"{""name"": ""Scenario5"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()\n(#Clock).clock_delay(10000)\n(#Fan).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Irrigator).switch_on()\nwait until(#Irrigator).irrigatorOperatingState_irrigatorOperatingState == ""idle""\n(#Fan).fanControl_setFanSpeed(100)\n(#Fan).switch_on()'}]",0.6,The generated code uses a different logic for irrigator and fan control compared to the ground truth.
4,"창문이 열려 있으면 5초 후 커튼을 닫고, 10초 더 지난 뒤 블라인드를 닫아 줘.","{""name"": ""Scenario6"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Clock).clock_delay(5000)\n  (#Curtain).curtain_close()\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") {\n  wait until(#Window).windowControl_window == ""closed""\n  wait until(#Curtain).curtain_curtain == ""closed""\n  wait until(#Blind).blind_blind == ""closed""\n  (#Speaker).mediaPlayback_speak(""All windows, curtains, and blinds are now closed."")\n}'}]",0.5,"The generated code uses a different logic for closing windows, curtains, and blinds compared to the ground truth."
4,조명이 켜져 있으면 3초 대기 후 조명을 껐다가 3초 뒤 다시 켜 줘.,"{""name"": ""Scenario7"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""on\"") {\n  (#Clock).clock_delay(3000)\n  (#Light).switch_off()\n  (#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") {\n  (#Light).switchLevel_alert()\n  wait until(#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}'}]",0.6,The generated code uses a different sequence of light actions compared to the ground truth.
4,7초 후에 조명을 끄고 5초 뒤 다시 켜 줘.,"{""name"": ""Scenario8"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(7000)\n(#Light).switch_off()\n(#Clock).clock_delay(5000)\n(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': '(#Light).switchLevel_setLevel(0, 1000)\nwait until(#Clock).clock_delay(7000)\n(#Light).switchLevel_setLevel(100, 1000)\nwait until(#Clock).clock_delay(5000)\n(#Light).switchLevel_setLevel(0, 1000)'}]",0.7,The generated code uses a different logic for light level setting compared to the ground truth.
4,문이 닫혀 있는데 5초가 지나도 창문이 열려 있지 않으면 블라인드를 열어 줘.,"{""name"": ""Scenario9"", ""cron"": """", ""period"": -1, ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  (#Clock).clock_delay(5000)\n  if ((#Window).windowControl_window != \""open\"") {\n      (#Blind).blind_open()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#DoorLock).doorControl_door == ""closed"" and (#Window).windowControl_window == ""unknown"") {\n  wait until(#Window).windowControl_window == ""open""\n  (#Blind).blind_open()\n}'}]",0.6,The generated code uses a different logic for door and window control compared to the ground truth.
4,"커튼이 열린 상태라면 2초 뒤 조명을 50으로 낮추고, 다시 4초 기다려서 꺼 줘.","{""name"": ""Scenario10"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Curtain).curtain_curtain == \""open\"") {\n  (#Clock).clock_delay(2000)\n  (#Light).switchLevel_setLevel(50, 0)\n  (#Clock).clock_delay(4000)\n  (#Light).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).curtain_curtain == ""open"") {\n  wait until(#Clock).clock_delay(2000)\n  (#Light).switchLevel_setLevel(50, 1000)\n  wait until(#Clock).clock_delay(4000)\n  (#Light).switchLevel_setLevel(0, 1000)\n}'}]",0.8,The generated code uses different parameters for light level setting compared to the ground truth.
6,5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이면 급수기를 끄고 반복도 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""soil = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\ntemp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (soil <= 30.0) {\n  (#Irrigator).switch_on()\n  if (temp >= 35.0) {\n      (#Irrigator).switch_off()\n      break\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'moistureLevel := (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (moistureLevel < 30.0) {\n  (#Irrigator).switch_on()\n  wait until(#TemperatureSensor).temperatureMeasurement_temperature > 35.0\n  (#Irrigator).switch_off()\n}'}]",0.7,The generated code uses '<' instead of '<=' for the soil moisture condition and lacks the break statement.
6,3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""count := 0\n\nif (count >= 10) {\n  break\n}\n(#Light).switch_toggle()\nrain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") {\n  break\n}\ncount = count + 1""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'repeat := 10\ninterval := 3000\nwhile (repeat > 0) {\n  (#Light).switch_toggle()\n  wait until(wait until(#LightSensor).soundSensor_sound == true)\n  repeat = repeat - 1\n  wait until(#Clock).clock_delay(interval)\n}'}]",0.5,The generated code uses a different loop logic and conditions compared to the ground truth.
6,1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity\nif (humidity >= 80.0) {\n  break\n}\n(#Fan).switch_toggle()""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'humidityTriggered := false\nif ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  humidityTriggered = true\n  wait until(humidityTriggered == false)\n}\nfanToggle := false\nif (fanToggle == false) {\n  (#Fan).switch_on()\n  fanToggle = true\n} else {\n  (#Fan).switch_off()\n  fanToggle = false\n}\nif (humidityTriggered == true) {\n  break\n}'}]",0.6,The generated code uses a different logic for humidity and fan control compared to the ground truth.
6,5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""current_level = (#Blind).blindLevel_blindLevel\nif (current_level <= 10) {\n  (#Blind).blindLevel_setBlindLevel(0)\n  break\n}\nnext_level = current_level - 10\n(#Blind).blindLevel_setBlindLevel(next_level)""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'currentLevel := (#Blind).blindLevel_blindLevel\nif (currentLevel > 10) {\n  (#Blind).blindLevel_setBlindLevel(currentLevel - 10)\n}'}]",0.7,The generated code uses '>' instead of '<=' for the blind level condition and lacks the break statement.
6,"10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""lux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_on()\n(#Clock).clock_delay(5000)\nlux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'sunlightLevel = (#LightSensor).lightLevel_light\nif (sunlightLevel > 500.0) {\n  (#Irrigator).switch_off()\n  wait until(#LightSensor).lightLevel_light <= 500.0\n  (#Irrigator).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 5000, 'code': '(#Irrigator).switch_on()'}, {'name': 'Scenario3', 'cron': '', 'period': 5000, 'code': '(#Irrigator).switch_off()'}]",0.5,The generated code uses a different logic for light level and irrigator control compared to the ground truth.
6,2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Light).switch_toggle()\nlight_state = (#Light).switch_switch\nif (light_state == \""off\"") {\n  window_state = (#Window).windowControl_window\n  if (window_state == \""open\"") {\n      break\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 2000, 'code': 'triggered := false\nif ((#Light).switch_switch == ""off"") {\n  (#Light).switch_on()\n  triggered = true\n} else {\n  triggered = false\n}\nif (triggered && (#Window).windowControl_window == ""open"") {\n  wait until(false)\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 2000, 'code': 'if ((#Light).switch_switch == ""on"") {\n  (#Light).switch_off()\n}'}]",0.6,The generated code uses a different logic for light and window control compared to the ground truth.
6,3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""volume := 0\n\nif (volume >= 5) {\n  motion = (#MotionSensor).motionSensor_motion\n  if (motion == \""active\"") {\n      break\n  }\n  volume = 0\n} else {\n  volume = volume + 1\n}\n(#Television).audioVolume_setVolume(volume)""}","[{'name': 'Scenario1', 'cron': '', 'period': 3000, 'code': 'volume_level := 0\nmax_volume := 5\nreset_flag := false\nif (reset_flag == true) {\n  reset_flag = false\n  volume_level = 0\n  (#Television).audioVolume_setVolume(volume_level)\n}\nif (motion_sensor_motion == ""active"") {\n  reset_flag = true\n}\nif (volume_level < max_volume) {\n  volume_level += 1\n  (#Television).audioVolume_setVolume(volume_level)\n}'}]",0.7,The generated code uses a different logic for volume control compared to the ground truth.
6,10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""(#Blind).blind_close()\ntv = (#Television).switch_switch\nif (tv == \""on\"") {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'blindsClosed := false\nwhile (not blindsClosed) {\n  all(#Blind).blindLevel_setBlindLevel(0)\n  wait until((#Television).switch_switch != ""on"")\n  blindsClosed = true\n}'}]",0.6,The generated code uses a loop and different logic for blind control compared to the ground truth.
6,"2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Alarm).alarm_siren()\nstate = (#Window).windowControl_window\n(#Clock).clock_delay(1000)\n(#Alarm).alarm_off()\nif (state == \""closed\"") {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 2000, 'code': 'windowClosed := false\nwhile (true) {\n  (#Alarm).alarm_siren()\n  wait until(#Alarm).alarm_alarm == ""siren""\n  (#Alarm).alarm_off()\n  wait until(#Alarm).alarm_alarm == ""off""\n  if ((#Window).windowControl_window == ""closed"") {\n    windowClosed = true\n  }\n  if (windowClosed) {\n    break\n  }\n}'}]",0.7,The generated code uses a loop and different logic for alarm and window control compared to the ground truth.
6,5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(\""auto\"")\nstate = (#Window).windowControl_window\nif (state == \""open\"") {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'windowOpen := false\nif (any(#Window).windowControl_window == ""open"") {\n  windowOpen = true\n  break\n}\n(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(\'auto\')'}, {'name': 'Scenario2', 'cron': '', 'period': 5000, 'code': ""if (windowOpen) {\n  break\n}\n(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode('auto')""}]",0.8,"The generated code separates the logic into two scenarios, while the ground truth combines them."
7,실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""triggered := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {\n  if (triggered == false) {\n    (#Irrigator).switch_on()\n    (#Speaker).mediaPlayback_speak(\""Start watering\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'if (any(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) {\n  (#Irrigator).switch_on()\n  (#Speaker).mediaPlayback_speak(""Start watering"")\n}'}]",0.7,"The generated code lacks the 'triggered' flag logic, which prevents repeated actions in the ground truth. The condition uses '<' instead of '<='."
7,1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""triggered := false\nif ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (triggered == false) {\n    (#Fan).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'fanOn := false\nif ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (fanOn == false) {\n    (#Fan).switch_on()\n    fanOn = true\n  }\n} else {\n  fanOn = false\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 1000, 'code': 'fanOn := false\nif ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (fanOn == false) {\n    (#Fan).switch_on()\n    fanOn = true\n  }\n} else {\n  fanOn = false\n}'}]",0.9,"The generated code uses 'fanOn' instead of 'triggered', but the logic is otherwise equivalent."
7,현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 60000, ""code"": ""triggered := false\nif ((#WeatherProvider).weatherProvider_weather == \""rain\"") {\n  if (triggered == false) {\n    (#Irrigator).switch_off()\n    (#Speaker).mediaPlayback_speak(\""Rain detected\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '*/1 * * * *', 'period': 10000, 'code': 'if (any(#WeatherProvider).weatherProvider_weather == ""rain"") {\n  (#Irrigator).switch_off()\n  (#Speaker).mediaPlayback_speak(""Rain detected"")\n}'}]",0.7,"The generated code lacks the 'triggered' flag logic, which prevents repeated actions in the ground truth."
7,2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""triggered := false\nif ((#Television).switch_switch == \""on\"") {\n  if (triggered == false) {\n    (#Speaker).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 2000, 'code': 'if ((#Television).switch_switch == ""on"") {\n  (#Speaker).switch_on()\n}'}]",0.7,"The generated code lacks the 'triggered' flag logic, which prevents repeated actions in the ground truth."
7,토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)\n  (#Irrigator).switch_on()\n  active = True\n}\nif (active == True) {\n  if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 30.0) {\n      break\n  }\n  (#Irrigator).switch_toggle()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) {\n  (#Irrigator).switch_on()\n  triggered = true\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 3000, 'code': 'if (triggered) {\n  if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > 30.0) {\n    (#Irrigator).switch_off()\n    triggered = false\n  } else {\n    (#Irrigator).switch_toggle()\n  }\n}'}]",0.6,The generated code uses a different logic for toggling the irrigator and lacks the 'wait until' construct for initial activation.
7,"일조량이 200룩스 이하가 되면 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 4000, ""code"": ""active := False\nif (active == False) {\n  wait until((#LightSensor).lightLevel_light <= 200.0)\n  active = True\n}\nif (active == True) {\n  (#Light).switch_on()\n  (#Clock).clock_delay(2000)\n  (#Light).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#LightSensor).lightLevel_light <= 200.0)\n(#Light).switch_on()'}, {'name': 'Scenario2', 'cron': '', 'period': 2000, 'code': '(#Light).switch_off()'}]",0.5,The generated code lacks the 'active' flag logic and the delay before switching off the light.
7,"조명이 켜지면 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""active := False\nif (active == False) {\n  wait until((#Light).switch_switch == \""on\"")\n  (#Blind).blind_close()\n  active = True\n}\nif (active == True) {\n  (#Curtain).curtain_open()\n  (#Clock).clock_delay(1000)\n  (#Curtain).curtain_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") {\n  (#Blind).blind_close()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 2000, 'code': '(#Curtain).curtain_open()\n(#Curtain).curtain_close()'}]",0.4,The generated code lacks the 'active' flag logic and the delay logic for the curtain.
7,"현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 경광등을 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#DoorLock).doorControl_door == \""closed\"")\n  (#Light).switch_off()\n  active = True\n}\nif (active == True) {\n  (#Siren).sirenMode_setSirenMode(\""strobe\"")\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#DoorLock).doorControl_door == ""closed"")\n(#Light).switch_off()'}, {'name': 'Scenario2', 'cron': '', 'period': 3000, 'code': '(#Light).switch_off()'}]",0.5,The generated code lacks the 'active' flag logic and the siren activation in the ground truth.
5,매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘.,"{""name:""Scenario1"", ""cron"":""0 7 * * *"", ""period"":-1, ""code"":""if ((#Irrigator).switch_switch == \""off\"" and (#Window).windowControl_window == \""closed\"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n  wait until((#Irrigator).switch_switch == \""on\"")\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '0 7 * * *', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"" and (#Window).windowControl_window == ""closed"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until((#Irrigator).switch_switch == ""on"")\n(#Blind).blind_close()'}]",0.8,The generated code is missing the 'wait until' construct for the blind closing action.
7,"실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""temperature = (#TemperatureSensor).temperatureMeasurement_temperature\nhumidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\nif (temperature >= 28.0) {\n  (#Fan).switch_on()\n}\nif (humidity >= 80.0) {\n  (#Dehumidifier).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 28.0) {\n  (#Fan).fanControl_setFanSpeed(100)\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 10000, 'code': ""if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Dehumidifier).dehumidifierMode_setDehumidifierMode('high')\n}""}]",0.6,The generated code uses different actions and lacks the combined logic for temperature and humidity control.
6,"주말에는 5초마다 펌프가 꺼져 있으면 켜고, 켜져 있으면 꺼 주고, 선풍기 속도를 10으로 설정해 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 * * 6,7"", ""period"": 5000, ""code"": ""weekday = (#Clock).clock_weekday\nif ((weekday != \""saturday\"") and (weekday != \""sunday\"")) {\n  break\n}\n(#Fan).fanControl_setFanSpeed(10)\n(#Pump).switch_toggle()""}","[{'name': 'Scenario1', 'cron': '0 0 * * 0,6', 'period': 5000, 'code': 'pump_state := """"\nif ((#Clock).clock_weekday == ""saturday"" or (#Clock).clock_weekday == ""sunday"") {\n  if (pump_state == """") {\n    pump_state = (#Pump).switch_switch\n  }\n  if (pump_state == ""off"") {\n    (#Pump).switch_on()\n    (#Fan).fanControl_setFanSpeed(10)\n    pump_state = ""on""\n  } else {\n    (#Pump).switch_off()\n    pump_state = ""off""\n  }\n}'}]",0.7,The generated code uses a different logic for toggling the pump and lacks the break condition for non-weekend days.
7,"실시간으로 확인하여 움직임이 감지될 때마다 조명을 켜고, 선풍기 속도를 10 높여 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""motion = (#MotionSensor).motionSensor_motion\nif (motion == \""active\"") {\n  (#Light).switch_on()\n  current_speed = (#Fan).fanControl_fanSpeed\n  new_speed = current_speed + 10\n  (#Fan).fanControl_setFanSpeed(new_speed)\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'if ((#MotionSensor).motionSensor_motion == ""active"") {\n  (#Light).switchLevel_setLevel(#Light).switchLevel_level + 10, 10)\n  (#Fan).fanControl_setFanSpeed(#Fan).fanControl_fanSpeed + 10)\n}'}]",0.8,"The generated code attempts to adjust levels directly without storing intermediate values, which may lead to incorrect behavior."
5,"실시간으로 확인하여 창문이 열려 있으면 블라인드를 닫고, 창문이 닫혀 있으면 커튼을 열어 줘. 또한 실시간으로 확인하여 알람의 사이렌이 울리고 있지 않다면 즉시 알람의 사이렌을 울려 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""window_status = (#Window).windowControl_window\nif (window_status == \""open\"") {\n  (#Blind).blind_close()\n} else if (window_status == \""closed\"") {\n  (#Curtain).curtain_open()\n}\nalarm_status = (#Alarm).alarm_alarm\nif ((alarm_status != \""siren\"") and (alarm_status != \""both\"")) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'if ((#Window).windowControl_window == ""open"") {\n  (#Blind).blind_close()\n} else {\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Alarm).alarm_alarm != ""siren"" and (#Alarm).alarm_alarm != ""both"") {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code is semantically similar, but the ground truth has additional checks for 'closed' status and alarm conditions."
5,"매주 금요일 오후 6시에 조명이 켜져 있으면 밝기를 30으로 낮추고, TV가 꺼져 있으면 TV를 켜 줘. 선풍기가 꺼져 있으면 선풍기도 켜 줘.","{""name"": ""Scenario1"", ""cron"": ""0 18 * * 5"", ""period"": 0, ""code"": ""if ((#Light).switch_switch == \""on\"") {\n  (#Light).switchLevel_setLevel(30, 0)\n}\nif ((#Television).switch_switch == \""off\"") {\n  (#Television).switch_on()\n}\nif ((#Fan).switch_switch == \""off\"") {\n  (#Fan).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '0 18 * * 5', 'period': 0, 'code': 'if ((#Light).switch_switch == ""on"") {\n  (#Light).switchLevel_setLevel(30, 10)\n}\nif ((#Television).switch_switch == ""off"") {\n  (#Television).switch_on()\n}\nif ((#Fan).switch_switch == ""off"") {\n  (#Fan).switch_on()\n}'}]",0.95,The generated code uses a different transition time for the light level adjustment.
6,매일 아침 8시에 스피커가 꺼져 있으면 스피커를 켜고 ‘오늘 날씨입니다’라고 말해 줘. 이후 조명이 꺼져 있으면 켜고 블라인드를 열어 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8 * * *"", ""period"": 0, ""code"": ""if ((#Speaker).switch_switch == \""off\"") {\n  (#Speaker).switch_on()\n  (#Speaker).mediaPlayback_speak(\""This is the weather today\"")\n  if ((#Light).switch_switch == \""off\"") {\n    (#Light).switch_on()\n    (#Blind).blind_open()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '0 8 * * *', 'period': 0, 'code': 'if ((#Speaker).switch_switch == ""off"") {\n  (#Speaker).switch_on()\n  (#Speaker).mediaPlayback_speak(""This is the weather today"")\n}'}, {'name': 'Scenario2', 'cron': '0 8 * * *', 'period': 0, 'code': 'if ((#Light).switch_switch == ""off"") {\n  (#Light).switch_on()\n  (#Blind).blind_open()\n}'}]",0.85,"The generated code splits the logic into two separate scenarios, missing the nested condition for light and blind."
7,1초마다 확인하여 관개 장치가 꺼졌다 켜진 횟수가 4번을 초과하고 펌프가 2번 이상 작동했으면 블라인드를 닫고 커튼을 내려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""prev_irrigator_state := (#Irrigator).switch_switch\nirrigator_off_to_on_count := 0\nprev_pump_state := (#Pump).switch_switch\npump_on_count := 0\nirrigator_state = (#Irrigator).switch_switch\npump_state = (#Pump).switch_switch\nif ((prev_irrigator_state == \""off\"") and (irrigator_state == \""on\"")) {\n  irrigator_off_to_on_count = irrigator_off_to_on_count + 1\n}\nprev_irrigator_state = irrigator_state\nif ((pump_state == \""on\"") and (prev_pump_state != \""on\"")) {\n  pump_on_count = pump_on_count + 1\n}\nprev_pump_state = pump_state\nif ((irrigator_off_to_on_count > 4) and (pump_on_count >= 2)) {\n  (#Blind).blind_close()\n  (#Curtain).curtain_close()\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'counter := 0\npumpRunCount := 0\nlastSwitchState := (#Irrigator).switch_switch\nif (#Irrigator).switch_switch != lastSwitchState {\n  counter += 1\n  lastSwitchState := (#Irrigator).switch_switch\n}\nif (#Pump).switch_switch == ""on"" {\n  pumpRunCount += 1\n}\nif (counter > 4 and pumpRunCount > 2) {\n  (#Blind).blind_close()\n  (#Curtain).curtain_close()\n}'}]",0.75,The generated code uses a different logic for counting state changes and lacks the 'break' condition.
7,"2초마다 체크해서 매일 오전 6시부터 9시 사이에 조명이 켜져 있는 누적 시간이 10분 이상이고, 관개 장치가 세 번 이상 꺼졌다 켜졌으면 스피커로 '관수 완료되었습니다'라고 말해 줘.","{""name"": ""Scenario1"", ""cron"": ""0 6 * * *"", ""period"": 2000, ""code"": ""light_on_duration := 0\nirrigator_toggle_count := 0\nprev_irrigator := \""\""\n\nif ((#Clock).clock_hour < 9) {\n  if ((#Light).switch_switch == \""on\"") {\n    light_on_duration = light_on_duration + 2000\n  }\n\n  current_irrigator = (#Irrigator).switch_switch\n  if ((prev_irrigator == \""on\"") and (current_irrigator == \""off\"")) {\n    irrigator_toggle_count = irrigator_toggle_count + 1\n  }\n  prev_irrigator = current_irrigator\n\n  if ((light_on_duration >= 600000) and (irrigator_toggle_count >= 3)) {\n    (#Speaker).mediaPlayback_speak(\""Watering complete\"")\n    break\n  }\n} else {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 2000, 'code': 'totalOnTime := 0\nwateringCount := 0\nlastSwitchState := (#Light).switch_switch\nstartOfDay := (#Clock).clock_datetime\nif (#Clock).clock_datetime >= 180000 and (#Clock).clock_datetime < 270000 {\n  if (#Light).switch_switch == ""on"" {\n    totalOnTime += 2\n  }\n  if (#Light).switch_switch != lastSwitchState {\n    wateringCount += 1\n  }\n  lastSwitchState := (#Light).switch_switch\n}\nif (#Clock).clock_datetime >= 270000 {\n  startOfDay := (#Clock).clock_datetime\n  totalOnTime := 0\n  wateringCount := 0\n  lastSwitchState := (#Light).switch_switch\n}\nif (#Clock).clock_datetime >= 270000 and (#Clock).clock_datetime < 270000 + 600000 {\n  if (#Irrigator).irrigatorOperatingState_irrigatorOperatingState == ""idle"" and (#Irrigator).switch_switch == ""on"" and wateringCount >= 3 {\n    (#Speaker).mediaPlayback_speak(""Watering complete"")\n  }\n}'}]",0.65,The generated code uses a different logic for time tracking and lacks the 'break' condition for completion.
7,"실시간으로 확인하여 토양 습도 센서 값이 연속으로 3회 15 이하를 기록하고 그 중 두 번째 값이 가장 낮았다면 관개 장치를 켜고 블라인드를 닫아 줘. 단, 3월은 제외하고.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""h1 := 100\nh2 := 100\nh3 := 100\n\nif ((#Clock).clock_month != 3) {\n  h1 = h2\n  h2 = h3\n  h3 = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\n\n  if ((h1 <= 15) and (h2 <= 15) and (h3 <= 15) and (h2 < h1) and (h2 < h3)) {\n    (#Irrigator).switch_on()\n    (#Blind).blind_close()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'low_moisture_count := 0\nlowest_moisture := 100.0\nlast_lowest_moisture := 100.0\ncurrent_moisture := (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (current_moisture < 15.0) {\n  low_moisture_count += 1\n  if (current_moisture < lowest_moisture) {\n    lowest_moisture = current_moisture\n    last_lowest_moisture = current_moisture\n  }\n} else {\n  low_moisture_count = 0\n}\nif (low_moisture_count >= 3) {\n  (#Irrigator).switch_on()\n  (#Blind).blind_close()\n  low_moisture_count = 0\n  lowest_moisture = 100.0\n  last_lowest_moisture = 100.0\n}\nif (month == 3) {\n  low_moisture_count = 0\n  lowest_moisture = 100.0\n  last_lowest_moisture = 100.0\n}'}, {'name': 'Scenario2', 'cron': '0 0 1 * *', 'period': -1, 'code': '(#Blind).blind_open()'}]",0.6,The generated code uses a different logic for moisture tracking and lacks the specific condition checks for consecutive low values.
4,"실시간으로 확인하여 움직임이 감지되면 5초 대기 후 조명을 켜고, 10초 후 커튼을 열고, 15초 후 펌프가 꺼져 있으면 펌프를 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#MotionSensor).motionSensor_motion == \""active\"")\n(#Clock).clock_delay(5000)\n(#Light).switch_on()\n(#Clock).clock_delay(10000)\n(#Curtain).curtain_open()\n(#Clock).clock_delay(15000)\nif ((#Pump).switch_switch == \""off\"") {\n  (#Pump).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'motionDetected := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (motionDetected == false) {\n    wait until(#Clock).clock_delay(5000)\n    (#Light).switch_on()\n    wait until(#Clock).clock_delay(10000)\n    (#Curtain).curtain_open()\n    wait until(#Pump).switch_switch == ""off""\n    (#Pump).switch_on()\n    motionDetected = true\n  }\n} else {\n  motionDetected = false\n}'}]",0.7,The generated code uses a 'motionDetected' flag and lacks the exact delay sequence and condition checks in the ground truth.
3,"1월 1일에, 실시간으로 확인하여 조명이 꺼지면 3초 대기 후 펌프를 끄고, 5초 후 블라인드를 닫으며, 추가로 7초 후 조명을 다시 켠 다음 알람의 사이렌을 울려 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 1 1 *"", ""period"": 0, ""code"": ""wait until((#Light).switch_switch == \""off\"")\nif (((#Clock).clock_month == 1) and ((#Clock).clock_day == 1)) {\n  (#Clock).clock_delay(3000)\n  (#Pump).switch_off()\n  (#Clock).clock_delay(5000)\n  (#Blind).blind_close()\n  (#Clock).clock_delay(7000)\n  (#Light).switch_on()\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '0 1 1 * *', 'period': -1, 'code': 'if ((#Clock).clock_date == 20250101) {\n  (#Speaker).mediaPlayback_speak(""Check-in complete. Waiting for lights to turn off."")\n  wait until((#Light).switch_switch == ""off"")\n  (#Pump).switch_off()\n  wait until(#Clock).clock_delay(5000)\n  (#Blind).blind_close()\n  wait until(#Clock).clock_delay(7000)\n  (#Light).switch_on()\n  (#Alarm).alarm_siren()\n}'}]",0.8,The generated code uses a specific date check and lacks the initial 'wait until' condition for the light switch.
4,"에어컨이 켜지면 5초 후 블라인드를 닫고, 5초 더 기다린 후 커튼이 열려 있으면 커튼을 닫고, 이후 10초 후 조명 밝기를 10퍼센트로 낮춰 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#AirConditioner).switch_switch == \""on\"")\n(#Clock).clock_delay(5000)\n(#Blind).blind_close()\n(#Clock).clock_delay(5000)\nif ((#Curtain).curtain_curtain == \""open\"") {\n  (#Curtain).curtain_close()\n}\n(#Clock).clock_delay(10000)\n(#Light).switchLevel_setLevel(10, 1)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#AirConditioner).airConditionerMode_airConditionerMode == ""cool"")\n(#Blind).blind_close()\n(#Clock).clock_delay(5000)\nif ((#Curtain).curtain_curtain == ""open"") {\n  (#Curtain).curtain_close()\n}\n(#Clock).clock_delay(10000)\n(#Light).switchLevel_setLevel(10, 10)'}]",0.85,The generated code uses a different condition for the air conditioner and a different transition time for the light level.
8,섹터 에이에 있는 선풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#SectorA #Fan).switch_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Fan #SectorA).switch_off()'}]",1.0,
8,섹터 비와 섹터 에이에 있는 선풍기가 모두 켜져 있으면 홀수 태그가 붙은 블라인드 중 하나를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Fan #SectorA).switch_switch == \""on\"") and (all(#Fan #SectorB).switch_switch == \""on\"")) {\n  (#Odd #Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Fan #SectorB).fanControl_fanSpeed > 0) and ((#Fan #SectorA).fanControl_fanSpeed > 0) {\n  if (any(#Blind).blind_blind == ""open"") {\n    (#Blind).blind_close()\n  }\n}'}]",0.6,The generated code uses different conditions for fan speed and lacks the specific target for closing the blinds.
8,"홀수 태그가 붙은 선풍기 중 하나라도 켜져 있으면, 하단부에 있는 모든 관개 장치를 꺼 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Odd #Fan).switch_switch == \""on\"") {\n  all(#Lower #Irrigator).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Odd).switch_switch == ""on"") {\n  all(#Lower).switch_off()\n}'}]",0.7,The generated code lacks the additional condition for the fan and the target for switching off the irrigator.
8,짝수 태그가 붙은 창문이 열려 있으면 섹터 에이에 있는 선풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Even #Window).windowControl_window == \""open\"") {\n  (#SectorA #Fan).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Window).windowControl_window == ""open"") {\n  all(#SectorA).switch_off()\n}'}]",0.6,The generated code uses a different condition for the window and lacks the specific target for switching off the fan.
8,섹터 비에 있는 홀수 태그가 붙은 관개 장치를 모두 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#SectorB #Odd #Irrigator).switch_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'all(#SectorB #Odd).switch_off()'}]",0.8,The generated code lacks the additional target for switching off the irrigator.
8,상단부에 있는 짝수 태그가 붙은 창문이 열려 있으면 커튼을 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Upper #Even #Window).windowControl_window == \""open\"") {\n  (#Curtain).curtain_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window #Upper #Even).windowControl_window == ""open"") {\n  (#Curtain #Sector1).curtain_close()\n}'}]",0.9,The generated code uses a different target for closing the curtain.
8,"상단부에 있는 조명이 모두 꺼져 있으면, 홀수 태그가 붙은 모든 창문을 열어 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (all(#Upper #Light).switch_switch == \""off\"") {\n  all(#Odd #Window).windowControl_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (all(#Upper).switch_switch == ""off"") {\n  all(#Odd).windowControl_open()\n}'}]",0.7,The generated code lacks the additional condition for the light and the target for opening the window.
8,짝수 태그가 붙은 스피커 중 하나라도 켜져 있으면 섹터 비에 있는 조명을 모두 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Even #Speaker).switch_switch == \""on\"") {\n  all(#SectorB #Light).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Speaker).switch_switch == ""on"") {\n  all(#SectorB).switch_off()\n}'}]",0.6,The generated code lacks the additional condition for the 'Even' tag and the target for switching off the light.
8,벽에 있는 홀수 태그가 붙은 모든 블라인드가 열려 있으면 조명을 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (all(#Wall #Odd #Blind).blind_blind == \""open\"") {\n  (#Light).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (all(#Odd).blind_blind == ""open"") {\n  all(#Light).switch_off()\n}'}]",0.7,The generated code lacks the additional condition for the 'Wall' tag.
8,상단부에 있거나 섹터 에이에 있는 조명 중 하나가 켜져 있으면 선풍기를 모두 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((any(#Upper #Light).switch_switch == \""on\"") or (any(#SectorA #Light).switch_switch == \""on\"")) {\n  all(#Fan).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Light) or (#SectorA)).switch_switch == ""on"") {\n  all(#Fan).switch_on()\n}'}]",0.8,The generated code lacks the additional condition for the 'Upper' tag.
6,매일 자정 선풍기가 꺼져 있으면 선풍기를 꺼 줘. 또한 그 때마다 선풍기를 꺼 줘,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * *"", ""period"": 0, ""code"": ""if ((#Fan).switch_switch == \""off\"") {\n  (#Fan).switch_off()\n  (#Fan).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '0 0 * * *', 'period': 0, 'code': 'if ((#Fan).switch_switch == ""off"") {\n  (#Fan).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '0 0 * * *', 'period': 0, 'code': 'if ((#Fan).switch_switch == ""on"") {\n  (#Fan).switch_off()\n}'}]",0.5,The generated code uses different logic for switching the fan and lacks the repeated switch off action.
4,주말에는 관개 장치가 꺼지면 관개 장치를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * 6,0"", ""period"": 0, ""code"": ""wait until((#Irrigator).switch_switch == \""off\"")\n(#Irrigator).switch_off()""}","[{'name': 'Scenario1', 'cron': '0 0 * * 0,6', 'period': -1, 'code': 'if ((#Clock).clock_weekday == ""sunday"" or (#Clock).clock_weekday == ""saturday"") {\n  wait until((#Irrigator).irrigatorOperatingState_irrigatorOperatingState == ""idle"")\n  (#Irrigator).switch_off()\n}'}]",0.6,The generated code uses a different condition for the irrigator state and lacks the initial 'wait until' condition.
7,실시간으로 확인하여 블라인드가 닫힌 상태에서 또 닫히면 전등을 켜 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""wasClosed := false\nif (wasClosed == true) {\n  if ((wasClosed == false) and ((#Blind).blind_blind == \""closed\"")) {\n    (#Light).switch_on()\n  }\n}\nwasClosed = ((#Blind).blind_blind == \""closed\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'blindsClosed := false\nif ((#Blind).blind_blind == ""closed"") {\n  blindsClosed = true\n} else {\n  blindsClosed = false\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 100, 'code': 'if (blindsClosed == true) {\n  wait until((#Blind).blind_blind == ""closed"")\n  (#Light).switch_on()\n}'}]",0.7,The generated code uses a different logic for tracking the blind state and lacks the nested condition for switching on the light.
6,1초마다 확인하여 온도가 30도 미만이면서 25도 이상일 때마다 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""temp = (#TemperatureSensor).temperatureMeasurement_temperature\nif ((temp < 30.0) and (temp >= 25.0)) {\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""auto"") {\n  if (((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) and ((#TemperatureSensor).temperatureMeasurement_temperature < 30.0)) {\n    (#AirConditioner).airConditionerMode_setAirConditionerMode(""cool"")\n    (#AirConditioner).airConditionerMode_setTemperature(27.0)\n  } else {\n    (#AirConditioner).airConditionerMode_setAirConditionerMode(""auto"")\n  }\n}'}]",0.75,The generated code uses a different logic for setting the air conditioner mode and lacks the simple switch on action.
7,실시간으로 확인하여 재실 센서가 감지 상태일 때마다 10초 대기 후 조명의 밝기를 현재 밝기로 맞춰줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""wait until((#OccupancySensor).presenceSensor_presence == \""present\"")\n(#Clock).clock_delay(10000)\nlevel = (#Light).switchLevel_level\n(#Light).switchLevel_setLevel(level, 1)""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'currentBrightness := (#Light).switchLevel_level\nwait until(#OccupancySensor).presenceSensor_presence == ""present""\n(#Light).switchLevel_setLevel(currentBrightness, 100)'}, {'name': 'Scenario2', 'cron': '', 'period': 100, 'code': 'wait until(#OccupancySensor).presenceSensor_presence == ""not_present""\n(#Light).switchLevel_setLevel(0, 100)'}]",0.6,The generated code uses different logic for presence detection and lacks the delay before setting the light level.
7,TV가 꺼져 있으면 10초 대기 후 다시 TV를 확인하여 켜져 있으면 TV를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Television).switch_switch == \""off\"") {\n  (#Clock).clock_delay(10000)\n  if ((#Television).switch_switch == \""on\"") {\n    (#Television).switch_on()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") {\n  wait until(#Television).switch_switch == ""on""\n  (#Television).switch_on()\n}'}]",0.7,The generated code uses a different logic for waiting and lacks the delay before checking the television state.
3,"월, 수, 금에 실시간으로 확인하여 창문이 열려 있지 않으면 창문을 닫아 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 * * 1,3,5"", ""period"": 100, ""code"": ""if ((#Window).windowControl_window != \""open\"") {\n  (#Window).windowControl_close()\n}""}","[{'name': 'Scenario1', 'cron': '0 15 * * 1,3,5', 'period': 10000, 'code': 'windowClosed := false\nif ((#Window).windowControl_window == ""closed"") {\n  windowClosed = true\n}\nif (windowClosed == false) {\n  (#Window).windowControl_close()\n}'}]",0.8,The generated code uses a different logic for checking the window state and lacks the simple condition for closing.
7,"매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘. 그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘. 만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘.","{""name"": ""Scenario1"", ""cron"": ""0 9 * * *"", ""period"": 100, ""code"": ""phase := 0\nconsecutive_time := 0\nif ((#Clock).clock_weekday == \""saturday\"") or ((#Clock).clock_weekday == \""sunday\"") {\n  break\n}\n\nif (phase == 0) {\n  if ((#Window).windowControl_window == \""closed\"") and \n  ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and \n  ((#AirQualityDetector).temperatureMeasurement_temperature >= 30.0) {\n    (#Clock).clock_delay(5000)\n    (#Window).windowControl_open()\n    \n    if ((#Fan).switch_switch == \""off\"") {\n      (#Fan).switch_on()\n    }\n    \n    phase = 1  \n  }\n} \nelse if (phase == 1) {\n  if ((#AirQualityDetector).dustSensor_fineDustLevel >= 50) {\n    consecutive_time = consecutive_time + 100  \n  } else {\n    consecutive_time = 0\n  }\n  if (consecutive_time >= 60000) {\n    (#Window).windowControl_close()\n    (#Fan).switch_off()\n    \n    if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0) {\n      (#Humidifier).switch_on()\n    }\n    \n    if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) and ((#Irrigator).switch_switch == \""off\"") {\n      (#Irrigator).switch_on()\n    }\n    \n    break\n  }\n}""}","[{'name': 'Scenario1', 'cron': '0 9 * * 1-5', 'period': 10000, 'code': 'windowClosed := false\nco2High := false\ntemperatureHigh := false\nparticulateMatterHigh := false\nhumidityLow := false\nsoilHumidityLow := false\nirrigationOff := false\nif (any(#Window).windowControl_window == ""closed"") {\n  windowClosed = true\n}\nif (any(#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) {\n  co2High = true\n}\nif (any(#TemperatureSensor).temperatureMeasurement_temperature > 30.0) {\n  temperatureHigh = true\n}\nif (any(#AirQualityDetector).dustSensor_dustLevel > 50) {\n  particulateMatterHigh = true\n}\nif (any(#HumiditySensor).relativeHumidityMeasurement_humidity < 40.0) {\n  humidityLow = true\n}\nif (any(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) {\n  soilHumidityLow = true\n}\nif (any(#Irrigator).switch_switch == ""off"") {\n  irrigationOff = true\n}\nif (windowClosed && co2High && temperatureHigh && particulateMatterHigh) {\n  wait until(#Clock).clock_delay(5000)\n  if (any(#Window).windowControl_window == ""closed"") {\n    all(#Window).windowControl_open()\n  }\n  if (any(#Fan).switch_switch == ""off"") {\n    all(#Fan).switch_on()\n  }\n}\nif (particulateMatterHigh) {\n  wait until(#Clock).clock_delay(60000)\n  if (any(#AirQualityDetector).dustSensor_dustLevel > 50) {\n    all(#Window).windowControl_close()\n    all(#Fan).switch_off()\n  }\n  if (humidityLow) {\n    all(#Humidifier).switch_on()\n  }\n}\nif (soilHumidityLow && irrigationOff) {\n  all(#Irrigator).switch_on()\n}'}]",0.7,The generated code uses a different logic for phase tracking and lacks the specific conditions for consecutive time checks.
7,매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * *"", ""period"": 100, ""code"": ""state := 0\nsiren_triggered := false\ndoor_open_flag := false\ndoor_open_count := 0\nfirst_open_start := 0\nfirst_open_end := 0\nsecond_open_start := 0\nsecond_open_end := 0\n\nif (state == 0) {\n  if ((#Window #Lower).windowControl_window == \""open\"" and (#Light #Even).switch_switch == \""on\"") {\n    (#Alarm).alarm_siren()\n    siren_triggered = true\n  }\n  (#Clock).clock_delay(5000)\n  state = 1\n}\n\nif (state == 1) {\n  if (siren_triggered == true) {\n    (#Blind).blind_close()\n  }\n  state = 2\n}\n\nif (state == 2 and door_open_count >= 2) {\n  (#Curtain).curtain_close()\n  total_time = (first_open_end - first_open_start) + (second_open_end - second_open_start)\n  total_time = total_time * 1000\n  (#Alarm).alarm_siren()\n  (#Clock).clock_delay(total_time)\n  (#Alarm).alarm_off()\n  break\n}\n\nif ((#DoorLock #Odd).doorControl_door == \""open\"" and door_open_flag == false) {\n  door_open_flag = true\n  now = (#Clock).clock_timestamp\n  door_open_count = door_open_count + 1\n  if (door_open_count == 1) {\n    first_open_start = now\n  } else if (door_open_count == 2) {\n    second_open_start = now\n  }\n}\nif ((#DoorLock #Odd).doorControl_door == \""closed\"" and door_open_flag == true) {\n  door_open_flag = false\n  now = (#Clock).clock_timestamp\n  if (door_open_count == 1) {\n    first_open_end = now\n  } else if (door_open_count == 2) {\n    second_open_end = now\n  }\n}""}","[{'name': 'Scenario1', 'cron': '0 22 * * *', 'period': -1, 'code': 'if (any(#Window).windowControl_window == ""open"") {\n  if (any(#Light).switch_switch == ""on"") {\n    (#Siren).switch_on()\n    wait until(#Siren).switch_switch == ""on""\n    (#Blind).blind_close()\n    wait until(#Blind).blind_blind == ""closed""\n    (#Alarm).alarm_strobe()\n    wait until(#DoorLock).doorControl_door == ""closed""\n    (#Alarm).alarm_off()\n  }\n}'}, {'name': 'Scenario2', 'cron': '0 22 * * *', 'period': 5000, 'code': 'triggered := false\nif (any(#DoorLock).doorControl_door == ""closed"") {\n  if (triggered == false) {\n    triggered = true\n  }\n} else {\n  triggered = false\n}\nif (triggered == true) {\n  (#Curtain).curtain_close()\n  wait until(#DoorLock).doorControl_door == ""closed""\n  (#Alarm).alarm_strobe()\n  wait until(#DoorLock).doorControl_door == ""closed""\n  (#Alarm).alarm_off()\n}'}]",0.65,The generated code uses a different logic for state tracking and lacks the specific conditions for door open counts.
1,팔을 위로 들어.,{},"[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#Alarm).sirenMode_setSirenMode('up')""}]",0.0,The generated code has no corresponding ground truth to compare against.
8,그룹1번의 습도가 하나라도 30미만이 되면 그룹1번의 관개장치를 켜줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(any(#Group1 #HumiditySensor).relativeHumidityMeasurement_humidity<30))\n (#Group1 #Irrigator).irrigatorOperatingState_startWatering()""
}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(any(#Group1).relativeHumidityMeasurement_humidity <= 30.0)\nall(#Group1).irrigatorOperatingState_startWatering()'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until(all(#Group1).irrigatorOperatingState_irrigatorOperatingState != ""watering"")\n(#Center).mediaPlayback_speak(""All Group 1 irrigators have stopped."")'}]",0.85,The generated code is semantically similar but lacks the specific target for the humidity sensor.
8,홀수 태그가 붙은 창문이 하나라도 열려 있으면 홀수 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Odd #Window).windowControl_window == \""open\"") {\n  (#Odd #Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Odd).windowControl_window == ""open"") {\n  all(#Odd).blind_close()\n}'}]",0.9,The generated code is semantically similar but uses different targets for the window and blind.
8,상단부에 있는 조명과 커튼이 모두 꺼져 있으면 스피커를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Upper #Light).switch_switch == \""off\"") and (all(#Curtain).curtain_curtain == \""closed\"")) {\n  (#Speaker).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (all(#Light).switch_switch == ""off"" and all(#Curtain).curtain_curtain == ""closed"") {\n  (#Speaker).switch_on()\n}'}]",0.8,The generated code lacks the additional condition for the 'Upper' tag.
8,그룹2번의 습도가 모두 80을 초과하면 관개장치를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(all(#Group2 #HumiditySensor).relativeHumidityMeasurement_humidity > 80) {\n  (#Group2 #Irrigator).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (all(#Group2).relativeHumidityMeasurement_humidity > 80.0) {\n  all(#Group2).switch_off()\n}'}]",0.7,The generated code lacks the 'wait until' construct and the specific target for switching off the irrigator.
8,홀수 태그의 커튼이 열려 있고 상단부 조명이 꺼져 있으면 창문을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Odd #Curtain).curtain_curtain == \""open\"") and (all(#Upper #Light).switch_switch == \""off\"")) {\n  (#Window).windowControl_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).windowControl_window == ""open"") and ((#Upper).switch_switch == ""off"") {\n  (#Window).windowControl_open()\n}'}]",0.6,The generated code uses different conditions for the curtain and lacks the additional condition for the 'Light' tag.
8,거실 불을 모두 켜줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#Livingroom #Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'all(#Livingroom).switch_on()'}]",0.9,The generated code lacks the specific target for the 'Light' tag.
8,하우스A 모두 닫아줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#SectorA).blind_close()""}",[],0.0,The generated code is empty and does not match the ground truth.
8,그룹1번 태그 모두 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#Group1).switch_off()\n
all(#Group1).alarm_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'all(#Group1).switch_off()'}]",0.8,The generated code lacks the additional action to switch off the alarm.
8,상단부가 모두 꺼져있거나 닫혀있으면 모두 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Upper).switch_switch == \""off\"") and (all(#Upper).curtain_curtain == \""closed\"")) {\n  (#Upper).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Upper).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"")) {\n  (#Upper).switch_off()\n  (#Curtain).curtain_close()\n}'}]",0.9,The generated code uses a different logic for closing the curtain.
8,그룹2번이 하나라도 80을 초과하면 그룹2번은 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(any(#Group2).relativeHumidityMeasurement_humidity > 80) {\n  (#Group2).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(any(#Group2).temperatureMeasurement_temperature > 80.0)\nall(#Group2).switch_off()'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until(any(#Group2).temperatureMeasurement_temperature > 80.0)\nall(#Group2).switch_off()'}]",0.3,"The generated code checks for temperature > 80.0, while the ground truth checks for humidity > 80. The condition and the sensor type differ, leading to different triggers for the action."
1,알람의 사이렌과 경광등을 모두 켜줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()\n
(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_both()\n(#center).mediaPlayback_speak(""Both alarm siren and strobe have been turned on."")'}]",0.0,"The generated code activates both alarm siren and strobe, while the ground truth turns off the alarm and sets the siren mode to off. The actions are opposite in intent."
9,가장 최근에 찍은 사진을 홍길동 이메일로 제목 '사진'과 내용 '사진입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""honggd@test.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Camera).camera_take() -> lastImage\n(#EmailProvider).emailProvider_sendMailWithFile(toAddress: ""honggd@test.com"", title: ""Photo"", text: ""This is a photo"", file: lastImage)'}]",0.9,"The generated code uses 'camera_take()' to capture an image, while the ground truth uses 'camera_image'. Both send the captured image via email, which is semantically similar."
9,가장 최근에 찍은 동영상을 첨부파일로 장보고 이메일로 제목 '동영상'과 내용 '동영상입니다.'로 보내줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""jangbogo@naver.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMailWithFile(toAddress: ""jangbogo@naver.com"", title: ""Video"", text: ""This is a video"", file: (#Camera).camera_video)'}]",1.0,
9,김무개 메일로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'SendEmailToKimMugae', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(toAddress: ""kim@example.com"", title: ""Alert"", text: ""This is an emergency"")'}]",0.95,"The generated code and ground truth are semantically similar, with minor differences in syntax and naming."
3,비가 오는데 창문이 열려있으면 창문을 닫아줘.,"{""name"": ""CloseWindowWhenRaining"",  ""cron"": """", ""period"": -1, ""code"": ""rain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") and ((#Window).windowControl_window == \""open\"") {\n  (#Window).windowControl_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#WeatherProvider).weatherProvider_weather == ""rain"" and (#Window).windowControl_window == ""open"") {\n  (#Window).windowControl_close()\n}'}]",0.9,"Both codes close the window when it is raining and open. The generated code directly checks the condition, while the ground truth assigns the weather to a variable first."
3,문이 열렸다 닫히면 알림을 울려줘.,"{""name"": ""DoorClosedAlert"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#DoorLock).doorControl_door == \""open\"")\nwait until((#DoorLock).doorControl_door == \""closed\"")\n(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#DoorLock).doorControl_door == ""open""\nwait until(#DoorLock).doorControl_door == ""closed""\n(#Speaker).mediaPlayback_speak(""Door has opened and then closed"")'}]",0.7,"Both codes wait for the door to open and then close, but the generated code uses a speaker to announce the event, while the ground truth triggers an alarm."
3,문이 닫혔다 열리면 사진을 5초 단위로 찍어줘.,"{""name"": ""CaptureAfterDoorClosedAndOpened"", ""cron"": """",  ""period"": 100,  ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  wait until((#DoorLock).doorControl_door == \""open\"")\n  loop {\n    (#Camera).camera_take()\n    (#Clock).clock_delay(5000)\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'doorOpened := false\nif ((#DoorLock).doorControl_door == ""open"") {\n  if (doorOpened == false) {\n    doorOpened = true\n    (#Camera).camera_take()\n  }\n} else {\n  doorOpened = false\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 5000, 'code': 'wait until(doorOpened)\n(#Camera).camera_take()'}]",0.5,"The generated code attempts to capture an image when the door is opened, using a flag to track state, while the ground truth waits for the door to close and then open before capturing images in a loop."
3,불이 30분이상 켜져있으면 알림을 울려줘.,"{""name"": ""LightOnTooLongAlert"",  ""cron"": """",
  ""period"": -1,  ""code"": ""wait until((#Light).switch_switch == \""on\"")\n(#Clock).clock_delay(1800000)\nif ((#Light).switch_switch == \""on\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'lastSwitchOnTime := 0\nif ((#Light).switch_switch == ""on"") {\n  lastSwitchOnTime = (#Clock).clock_timestamp\n}\nif ((#Clock).clock_timestamp - lastSwitchOnTime >= 1800) {\n  (#Alarm).alarm_siren()\n}'}]",0.6,"The generated code uses timestamps to check if the light has been on for too long, while the ground truth uses a delay. Both trigger an alarm if the light remains on."
3,창문이 닫혀있다가 열리면 알림을 울려줘.,"{""name"": ""WindowIsClosedThenOpens"",  ""cron"": """",  ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""closed\"") {\n  wait until((#Window).windowControl_window == \""open\"")\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""closed"") {\n  (#Speaker).mediaPlayback_speak(""Window is closed"")\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until((#Window).windowControl_window == ""open"")\n(#Alarm).alarm_siren()'}]",0.4,"The generated code announces when the window is closed and triggers an alarm when it opens, while the ground truth waits for the window to open after being closed to trigger an alarm."
9,"주소록에서 나를 제외한 모든 사람에게 이메일로 내 생일을 알려주는 내용으로 메일을 보내줘. 제목은 ""생일 알림"", 내용은 ""제 생일은 ~입니다""로 보내줘.","{""name"": ""BirthdayNotification"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""honggd@test.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""jangbogo@naver.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'my_email := ""abcd1234@test.com""\nfor person in #ContactSensor {\n  if (person.email != my_email) {\n    (#EmailProvider).emailProvider_sendMail(\n      toAddress: person.email,\n      title: ""Happy Birthday!"",\n      text: ""Dear "" + person.name + "",\\n\\nWishing you a wonderful birthday! May this special day bring you joy, happiness, and all your dreams come true.\\n\\nBest regards,\\nYour Name""\n    )\n  }\n}'}]",0.2,"The generated code sends personalized birthday emails to contacts, while the ground truth sends a fixed birthday reminder to specific emails. The purposes and logic differ significantly."
9,"매년 내 생일이 되면 아침 9시에 ""생일 축하합니다"" 노래를 불러 줘.","{""name"": ""BirthdayGreeting"",
  ""cron"": ""0 9 3 3 *"",
  ""period"": 0,
  ""code"": ""(#Speaker).mediaPlayback_speak(\""생일 축하합니다\"")""
}","[{'name': 'Scenario1', 'cron': '0 9 3 * *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""Happy Birthday"")'}, {'name': 'Scenario2', 'cron': '0 9 15 * *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""Happy Birthday"")'}, {'name': 'Scenario3', 'cron': '0 9 25 * *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""Happy Birthday"")'}, {'name': 'Scenario4', 'cron': '0 9 10 * *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""Happy Birthday"")'}]",0.3,"The generated code schedules birthday greetings on different days, while the ground truth schedules a greeting on a specific date with a different message. The cron schedules and messages differ."
9,"알림이 울리면, 나와 홍길동에게 제목은 알림 발생, 내용은 알림이 울렸습니다라고 작성해서 메일을 보내줘. ","{""name"": ""AlarmAlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Alarm).alarm_alarm == ""siren"")\n(#EmailProvider).emailProvider_sendMailWithFile(""abcd1234@test.com"", ""Alert Triggered"", ""The alarm has turned on."")\n(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Alert Triggered"", ""The alarm has turned on."")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#Alarm).alarm_alarm == ""both"")\n(#EmailProvider).emailProvider_sendMail(""abcd1234@test.com"", ""Alert Triggered"", ""The alarm has turned on."")\n(#EmailProvider).emailProvider_sendMail(""honggd@test.com"", ""Alert Triggered"", ""The alarm has turned on."")'}]",0.7,"Both codes send emails when the alarm is triggered, but the generated code waits for 'both' alarm state, while the ground truth waits for 'siren'. The email sending method also differs."
9,"낙상 감지 센서에서 낙상이 감지된 상태이면, 내 주변사람들에게 제목은 ""낙상 감지"", 내용은 ""제가 넘어졌습니다. 도와주세요""로 메일을 보내줘.","{""name"": ""AlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#FallSensor).fallDetection_fall == ""detected"")
(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""kim@example.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""jangbogo@naver.com"", ""Fall Detected"", ""I have fallen. Please help me."")}""","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#FallDetector).fallDetection_fall == ""fall""\n(#EmailProvider).emailProvider_sendMail(\n  toAddress = ""abcd1234@test.com, honggd@test.com, kim@example.com, jangbogo@naver.com"",\n  title = ""Fall Detected"",\n  text = ""I have fallen. Please help me.""\n)'}]",0.6,"The generated code waits for a 'fall' event and sends a single email to multiple recipients, while the ground truth waits for 'detected' and sends separate emails with files attached."
3,비어있다가 누군가 감지되면 알림을 울려줘.,"{""name"": ""AlertOnPresenceAfterEmpty"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""not present\"") {\n  wait until ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n    (#Alarm).alarm_siren()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'presenceDetected := false\nif ((#PresenceSensor).presenceSensor_presence == ""not_present"") {\n  presenceDetected = false\n} else {\n  if (presenceDetected == false) {\n    (#Alarm).alarm_siren()\n    presenceDetected = true\n  }\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until((#PresenceSensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()'}]",0.5,"The generated code uses a flag to track presence and trigger an alarm, while the ground truth waits for presence after absence to trigger an alarm. The logic and flow differ."
4,조명이 꺼져 있고 사람이 감지되면 3초 후 조명을 켜 줘.,"{""name"": ""LightOnIfPersonDetected"",
  ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""off\"") and ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#clock).delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""off"") and ((#MotionSensor).motionSensor_motion == ""active"") {\n  wait until(#MotionSensor).motionSensor_motion == ""inactive""\n  (#Light).switch_on()\n  (#Light).switchLevel_setLevel(100, 1000)\n}'}]",0.4,"The generated code waits for motion to become inactive before turning on the light, while the ground truth turns on the light after a delay if presence is detected. The sensors and logic differ."
4,문이 열려 있고 10초 이상 그대로면 알림을 울려 줘.,"{""name"": ""DoorOpenTooLongAlert"",
  ""cron"": """", ""period"": -1,  ""code"": ""if ((#Door).doorControl_door == \""open\"") {\n  (#Clock).clock_delay(10000)\n  if ((#Door).doorControl_door == \""open\"") {\n    (#Alarm).alarm_siren()\n  }\n}""
}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'doorOpenTime := 0\nif ((#DoorLock).doorControl_door == ""open"") {\n  doorOpenTime = doorOpenTime + 100\n  wait until(doorOpenTime >= 10000)\n  (#Alarm).alarm_siren()\n  doorOpenTime = 0\n} else {\n  doorOpenTime = 0\n}'}]",0.7,"Both codes trigger an alarm if the door is open for too long. The generated code uses a counter to track time, while the ground truth uses a clock delay. The logic is similar but implemented differently."
4,습도가 30% 이하로 떨어진 뒤 5초가 지나면 가습기를 켜 줘.,"{""name"": ""HumidityLowThenHumidifier"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity <=30)\n(#Clock).clock_delay(5000)\n(#Humidifier).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#HumiditySensor).relativeHumidityMeasurement_humidity < 30.0\nwait until(#Clock).clock_delay(5000)\n(#Humidifier).switch_on()'}]",0.9,"Both codes wait for low humidity and a delay before turning on the humidifier. The condition uses '<' in the generated code and '<=' in the ground truth, which is a minor difference."
4,창문이 열린 후 5초 내에 조명이 켜져 있으면 조명을 켜 줘.,"{""name"": ""WindowOpenThenLight"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Clock).clock_delay(5000)\nif ((#Light).switch_switch == \""on\"") {\n (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'windowOpened := false\nif ((#Window).windowControl_window == ""open"") {\n  windowOpened = true\n  wait until(windowOpened == false)\n  (#Light).switch_on()\n}'}]",0.5,"The generated code uses a flag to track window state and turn on the light, while the ground truth waits for a delay after the window opens. The logic and flow differ."
4,"5초마다 움직임을 감지하고, 감지되면 2초 대기 후 알람을 울려 줘.","{""name"": ""MotionDetectedAlarm"", ""cron"": """", ""period"": 5000, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#clock).delay(2000)\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'if ((#MotionSensor).motionSensor_motion == ""active"") {\n  wait until(#Clock).clock_delay(2000)\n  (#Alarm).alarm_siren()\n}'}]",0.95,"Both codes trigger an alarm after detecting motion and waiting for 2 seconds. The generated code uses 'wait until' with a delay, while the ground truth uses a direct delay call."
