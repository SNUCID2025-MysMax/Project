category_analysis,command,GT,generated_code,cloud_similarity_gpt4o,explanation
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_siren()'}]",1.0,
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""siren\"")""}","[{'name': 'Sound the siren', 'cron': '', 'period': -1, 'code': '(#Siren).switch_on()\n(#Siren).sirenMode_setSirenMode(""siren"")'}]",0.7,"The generated code includes an additional action to switch on the siren before setting the siren mode, which is not present in the ground truth."
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_strobe()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_siren()'}]",0.0,"The generated code activates the siren, whereas the ground truth activates the strobe. These are different actions."
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""strobe\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Siren).switch_on()'}]",0.0,"The generated code switches on the siren, whereas the ground truth sets the siren mode to strobe. These are different actions."
1,사이렌과 경광등을 동시에 켜 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_both()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'all(#Alarm).alarm_both()'}]",0.9,"The generated code uses 'all' which might imply targeting multiple devices, but the ground truth does not specify this."
1,사이렌과 경광등을 둘 다 꺼 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'TurnOffSirenAndLight', 'cron': '', 'period': -1, 'code': 'all(#Siren).sirenMode_setSirenMode(""off"")\nall(#Siren).switch_off()'}]",0.6,"The generated code includes an additional action to switch off the siren, which is not present in the ground truth."
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'OccupancyAlarm', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#OccupancySensor).presenceSensor_presence == present) {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.5,"The generated code includes additional logic to prevent repeated triggering, which is not present in the ground truth."
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SoundAlarmOnOccupancy', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#PresenceSensor).presenceSensor_presence == ""present"") {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.5,"The generated code includes additional logic to prevent repeated triggering, which is not present in the ground truth."
2,에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_airConditionerMode == \""cool\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SoundSirenWhenCooling', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""cool"") {\n  if (any(#Alarm).switch_switch == ""on"") {\n    (#Alarm).alarm_siren()\n  } else if (any(#Siren).switch_switch == ""on"") {\n    (#Siren).sirenMode_setSirenMode(""siren"")\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
2,에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_targetTemperature == 30) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'AlarmWhenACTemp30', 'cron': '', 'period': -1, 'code': ""if ((#AirConditioner).airConditionerMode_targetTemperature == 30.0) {\n  if (any(#Alarm)) {\n    (#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    (#Siren).sirenMode_setSirenMode('siren')\n  }\n}""}]",0.7,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
1,에어컨을 자동 모드로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#AirConditioner).airConditionerMode_setAirConditionerMode(""auto"")'}]",1.0,
1,알람을 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()""}","[{'name': 'TurnOffAlarm', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_off()'}]",1.0,
1,블라인드를 70 퍼센트로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blindLevel_setBlindLevel(70)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'level = 70\n(#Blind).blindLevel_setBlindLevel(level)'}]",0.9,"The generated code uses a variable to set the blind level, while the ground truth uses a direct value."
2,블라인드 움직임을 멈춰줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blind_pause()""}","[{'name': 'Stop blind movement', 'cron': '', 'period': -1, 'code': 'all(#Blind).blind_pause()'}]",0.9,"The generated code uses 'all' which might imply targeting multiple devices, but the ground truth does not specify this."
2,버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Buttonx4).buttonx4_button4 == \""swipe_up\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#Buttonx4).buttonx4_button4 == swipe_up) {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.5,"The generated code includes additional logic to prevent repeated triggering, which is not present in the ground truth."
1,10을 3으로 나눈 나머지를 구해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Calculator).calculator_mod(10, 3)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'result = (#Calculator).calculator_mod(10,3)'}]",0.9,"The generated code assigns the result to a variable, while the ground truth does not."
9,"가장 최근에 찍은 사진을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'SendPhotoEmail', 'cron': '', 'period': -1, 'code': 'img = (#Camera).camera_take()\nif (img != null) {\n  (#EmailProvider).emailProvider_sendMailWithFile(""test@example.com"", ""Photo"", ""This is a photo"", img)\n} else {\n  (#EmailProvider).emailProvider_sendMail(""test@example.com"", ""Photo"", ""This is a photo"")\n}'}]",0.6,"The generated code includes a conditional check for the image, while the ground truth directly uses the latest photo."
9,"가장 최근에 찍은 동영상을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'SendRecentVideoEmail', 'cron': '', 'period': -1, 'code': 'file = (#Camera).camera_video\nif (file != null) {\n  (#EmailProvider).emailProvider_sendMailWithFile(""test@example.com"", ""Video"", ""This is a video."", file)\n} else {\n  (#Speaker).mediaPlayback_speak(""전송할 최근 동영상을 찾을 수 없습니다."")\n}'}]",0.6,"The generated code includes a conditional check for the video, while the ground truth directly uses the latest video."
1,카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Camera).camera_takeTimelapse(10, 2)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Camera).camera_takeTimelapse(10.0, 2.0)'}]",0.9,"The generated code uses floating-point numbers, while the ground truth uses integers."
2,지금이 오후 3시 15분이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_time == 1515) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'if (((#Clock).clock_hour == 15) and ((#Clock).clock_minute == 15)) {\n  (#Alarm).alarm_siren()\n} else {\n  (#Alarm).alarm_off()\n}'}]",0.8,"The generated code checks separate hour and minute values, while the ground truth checks a combined time value."
2,올해가 2025년이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_year == 2025) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Clock).clock_year == 2025) {\n  if (any(#Alarm)) {\n    if (any(#Alarm).alarm_alarm != \'siren\') {\n      all(#Alarm).alarm_siren()\n    }\n  } else {\n    (#Speaker).mediaPlayback_speak(""사이렌을 울리는 경보 장치가 없습니다."")\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for alarm activation, which is not present in the ground truth."
4,1시간 20분 30초 뒤에 알람의 사이렌을 울려줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(4830000)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#Clock).clock_delay(4830000))\n(#Alarm).alarm_siren()'}]",0.5,"The generated code includes a 'wait until' construct, which is not present in the ground truth."
2,접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#ContactSensor).contactSensor_contact == \""closed\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#ContactSensor).contactSensor_contact == ""closed"") {\n  if (any(#Alarm)) {\n    (#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    (#Siren).switch_on()\n    (#Siren).sirenMode_setSirenMode(""siren"")\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
9,이메일을 'test@example.com' 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""test@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(""test@example.com"", ""Alert"", ""This is an emergency"")'}]",0.9,"The generated code lacks a period at the end of the message, which is present in the ground truth."
3,가스 밸브가 열려 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#GasValve).valve_valve == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Sound siren if gas valve open', 'cron': '', 'period': -1, 'code': ""if ((#GasValve).valve_valve == open) {\n  if (any(#Alarm)) {\n    (#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    (#Siren).sirenMode_setSirenMode('siren')\n  }\n}""}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
1,관개 장치의 급수를 시작해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()""}","[{'name': 'StartIrrigationWatering', 'cron': '', 'period': -1, 'code': '(#Irrigator).irrigatorOperatingState_startWatering()'}]",1.0,
2,누수가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LeakSensor).leakSensor_leakage == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'LeakDetectedAlarm', 'cron': '', 'period': -1, 'code': 'if (any(#LeakSensor).leakSensor_leakage == ""detected"") {\n  if (any(#Alarm)) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode(""siren"")\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
1,조명을 빨간색으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).colorControl_setColor(\""255|0|0\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).colorControl_setColor(""255|0|0"")'}]",1.0,
1,5의 속도로 조명의 밝기를 80으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switchLevel_setLevel(80, 5)""}","[{'name': 'SetLightBrightness', 'cron': '', 'period': -1, 'code': 'level = 80\nspeed = 5\n(#Light).switchLevel_setLevel(level, speed)'}]",0.9,"The generated code uses variables to set the level and speed, while the ground truth uses direct values."
1,조명의 전원을 토글해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switch_toggle()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).switch_toggle()'}]",1.0,
2,모션 센서가 활성 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'if ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (any(#Alarm)) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode(""siren"")\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
2,움직임이 감지되고 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SoundAlarmOnMotion', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (triggered == false) {\n    if (any(#Alarm)) {\n      all(#Alarm).alarm_siren()\n    } else if (any(#Siren)) {\n      all(#Siren).switch_on()\n      all(#Siren).sirenMode_setSirenMode(""siren"")\n    }\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.5,"The generated code includes additional logic to prevent repeated triggering, which is not present in the ground truth."
2,존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SoundAlarmOnPresenceDetected', 'cron': '', 'period': -1, 'code': 'if (any(#PresenceSensor).presenceSensor_presence == present) {\n  all(#Alarm).alarm_siren()\n}'}]",0.8,"The generated code uses 'any' and 'all' which might imply targeting multiple devices, but the ground truth does not specify this."
2,펌프가 열려있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Pump).pump_pump == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Pump Open Alarm', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#Pump).pump_pump == open) {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.5,"The generated code includes additional logic to prevent repeated triggering, which is not present in the ground truth."
2,연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SmokeDetector).smokeDetector_smoke == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SmokeAlarmSiren', 'cron': '', 'period': -1, 'code': 'if ((#SmokeDetector).smokeDetector_smoke == detected) {\n  if (any(#Alarm).alarm_alarm != siren) {\n    any(#Alarm).alarm_siren()\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
1,스피커에서 music.mp3를 재생해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Speaker).mediaPlayback_play(\""music.mp3\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Speaker).mediaPlayback_play(""music.mp3"")'}]",1.0,
1,녹음기로 10초 동안 녹음해서 test.wav로 저장해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Recorder).audioRecord_record(\""test.wav\"", 10)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Recorder).audioRecord_record(""test.wav"", 10.0)'}]",0.9,"The generated code uses a floating-point number, while the ground truth uses an integer."
2,현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 25) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SoundAlarmIfHot', 'cron': '', 'period': -1, 'code': 'temp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (temp > 25.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.8,"The generated code checks for greater than 25.0, while the ground truth checks for greater than or equal to 25."
3,바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_humidityWeather >= 80) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SoundAlarmWhenHighHumidity', 'cron': '', 'period': 1000, 'code': 'if ((#WeatherProvider).weatherProvider_humidityWeather > 80.0) {\n  if (any(#Alarm).alarm_alarm != ""siren"") {\n    all(#Alarm).alarm_siren()\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
3,바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_pm25Weather >= 50) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirQualityDetector).dustSensor_dustLevel > 50) {\n  (#Alarm).alarm_siren()\n}'}]",0.5,The generated code uses a different sensor and condition for triggering the alarm compared to the ground truth.
3,창문이 열린 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'WindowOpenAlarm', 'cron': '', 'period': 1000, 'code': 'triggered := false\nif (any(#Window).windowControl_window == open) {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n  (#Alarm).alarm_off()\n}'}]",0.5,"The generated code includes additional logic to prevent repeated triggering and to turn off the alarm, which is not present in the ground truth."
2,낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#FallDetector).fallDetection_fall == \""fall\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'FallDetectionAlarm', 'cron': '', 'period': -1, 'code': 'if ((#FallDetector).fallDetection_fall == fall) {\n  if (any(#Alarm)) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode(siren)\n  }\n}'}]",0.6,"The generated code includes additional conditional logic for siren activation, which is not present in the ground truth."
2,점유 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'OccupancyAlarm', 'cron': '', 'period': -1, 'code': 'if ((#OccupancySensor).presenceSensor_presence == present) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code uses 'present' without quotes, while the ground truth uses ""present""."
1,테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Timer).timer_add(\""Test Timer\"", 60)""}","[{'name': 'AddTestTimer', 'cron': '', 'period': -1, 'code': '(#Timer).timer_add(""Test Timer"", 60.0)'}]",0.9,"The generated code uses a floating-point number, while the ground truth uses an integer."
5,토양 수분이 30% 이하이고 조명이 꺼져 있으면 관개 장치를 작동시키고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) and ((#Light).switch_switch == \""off\"")) {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'IrrigationOnDrySoilWithLights', 'cron': '', 'period': -1, 'code': 'soilMoisture = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nlightSwitch = (#Light).switch_switch\nif ((soilMoisture < 30.0) and (lightSwitch == ""off"")) {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}'}]",0.8,"The generated code checks for less than 30.0, while the ground truth checks for less than or equal to 30.0."
2,온도가 33도 이상이면 제습기를 켜고 커튼을 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}'}]",0.8,"The generated code checks for greater than 33.0, while the ground truth checks for greater than or equal to 33.0."
5,이산화탄소가 1000ppm 이상이고 블라인드가 열려 있으면 환풍기를 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Blind).blind_blind == \""open\"")) {\n  (#Fan).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'CO2 and Blinds Control', 'cron': '', 'period': -1, 'code': 'if (((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) and ((#Blind).blind_blind == open)) {\n  (#Fan).switch_on()\n  (#Blind).blind_close()\n}'}]",0.8,"The generated code checks for greater than 1000.0, while the ground truth checks for greater than or equal to 1000.0."
5,온도가 29도 이상이고 습도가 80% 이상이며 조명이 꺼져 있으면 에어컨을 켜고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) and ((#Light).switch_switch == \""off\"")) {\n  (#AirConditioner).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'TemperatureHumidityLightControl', 'cron': '', 'period': -1, 'code': 'temp = (#TemperatureSensor).temperatureMeasurement_temperature\nhumidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\nif ((temp > 29.0) and (humidity > 80.0) and (all(#Light).switch_switch == ""off"")) {\n  all(#AirConditioner).switch_on()\n  all(#Light).switch_on()\n}'}]",0.7,"The generated code checks for greater than 29.0 and 80.0, while the ground truth checks for greater than or equal to these values."
5,조명이 켜져 있고 창문이 닫혀 있으면 커튼을 열고 환풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Curtain).curtain_open()\n  (#Fan).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((any(#Light).switch_switch == ""on"") and (all(#Window).windowControl_window == ""closed"")) {\n  all(#Curtain).curtain_open()\n  all(#Fan).switch_off()\n}'}]",0.8,"The generated code uses 'any' and 'all' which might imply targeting multiple devices, but the ground truth does not specify this."
5,TV가 꺼져 있고 스피커가 재생 중이면 TV를 켜고 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Speaker).mediaPlayback_playbackStatus == \""playing\"")) {\n  (#Television).switch_on()\n  (#Speaker).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""off"") and ((#Speaker).mediaPlayback_playbackStatus == ""playing"")) {\n  (#Television).switch_on()\n  (#Speaker).switch_off()\n}'}]",1.0,
5,조명이 켜져 있고 블라인드가 열려 있으며 움직임이 감지되면 조명을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Blind).blind_blind == \""open\"") and ((#MotionSensor).motionSensor_motion == \""active\"")) {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'TurnOffLightsAndCloseBlindsOnMotion', 'cron': '', 'period': -1, 'code': 'if (((#Light).switch_switch == ""on"") and ((#Blind).blind_blind == ""open"") and ((#MotionSensor).motionSensor_motion == ""active"")) {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}'}]",1.0,
5,알람이 꺼져 있고 조명이 꺼져 있으며 커튼이 열려 있으면 사이렌을 울리고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Alarm).alarm_alarm == \""off\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Alarm).alarm_siren()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Alarm).alarm_alarm == ""off"") and ((#Light).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""open"")) {\n  if (any(#Alarm)) {\n    (#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    (#Siren).sirenMode_setSirenMode(""siren"")\n    all(#Siren).switch_on()\n  }\n  all(#Light).switch_on()\n}'}]",0.6,"The generated code introduces additional conditional logic for handling sirens that is not present in the ground truth code, altering the intended behavior."
5,에어컨이 꺼져 있고 커튼이 닫혀 있으면 에어컨을 켜고 커튼을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"")) {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}'}]",1.0,
5,창문이 열려 있고 조명이 꺼져 있으며 커튼이 닫혀 있으면 조명을 켜고 커튼을 열어 줘. 또한 관수기가 꺼져 있고 토양 수분이 40% 이하이면 관수기를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 40.0)) {\n  (#Irrigator).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((any(#Window).windowControl_window == ""open"") and (all(#Light).switch_switch == ""off"") and (all(#Curtain).curtain_curtain == ""closed"")) {\n  all(#Light).switch_on()\n  all(#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((all(#Irrigator).switch_switch == ""off"") and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 40.0)) {\n  all(#Irrigator).switch_on()\n}'}]",0.8,"The generated code uses 'any' and 'all' for device control, which may not match the specific devices targeted in the ground truth. Additionally, the soil moisture condition uses '<' instead of '<='."
5,환풍기가 꺼져 있고 이산화탄소 수치가 1000 이상이며 커튼이 닫혀 있으면 환풍기를 켜고 커튼을 열어 줘. 조명이 꺼져 있고 온도가 27도 이상이면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Fan).switch_switch == \""off\"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Light).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 27.0)) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'FanCurtainControl', 'cron': '', 'period': -1, 'code': 'if (((#Fan).switch_switch == ""off"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) and ((#Curtain).curtain_curtain == ""closed"")) {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'LightBlindControl', 'cron': '', 'period': -1, 'code': 'if (((#Light).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 27.0)) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}'}]",0.9,"The generated code uses '>' instead of '>=' for conditions, which may affect the triggering logic."
5,에어컨이 꺼져 있고 온도가 29도 이상이며 습도가 70% 이상이면 제습기를 제습 모드로 설정하고 켜 줘. 커튼이 열려 있고 조명이 꺼져 있으면 커튼을 닫고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)) {\n  (#Dehumidifier).airConditionerMode_setAirConditionerMode(\""dehumidifying\"")\n  (#Dehumidifier).switch_on()\n}\nif (((#Curtain).curtain_curtain == \""open\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}""}","[{'name': 'ControlDehumidifier', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).switch_switch == ""off"") and ((#AirQualityDetector).temperatureMeasurement_temperature > 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 70.0)) {\n  (#Dehumidifier).dehumidifierMode_setDehumidifierMode(""dehumidifying"")\n  (#Dehumidifier).switch_on()\n}'}, {'name': 'CurtainsAndLightsControl', 'cron': '', 'period': -1, 'code': 'if (((#Curtain).curtain_curtain == ""open"") and ((#Light).switch_switch == ""off"")) {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}'}]",0.85,The generated code uses '>' instead of '>=' for conditions and a different method name for setting the dehumidifier mode.
5,조명이 꺼져 있고 움직임이 감지되지 않으며 커튼이 열려 있으면 조명을 켜고 커튼을 닫아 줘. 관수기가 꺼져 있고 창문이 닫혀 있으면 관수기를 켜고 창문을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""off\"") and ((#MotionSensor).motionSensor_motion == \""inactive\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_close()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""off"") and ((#MotionSensor).motionSensor_motion == ""inactive"") and ((#Curtain).curtain_curtain == ""open"") {\n  (#Light).switch_on()\n  (#Curtain).curtain_close()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"") and ((#Window).windowControl_window == ""closed"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}'}]",1.0,
5,블라인드가 열려 있고 조명이 꺼져 있으며 습도가 80% 이상이면 블라인드를 닫고 조명을 켜 줘. 창문이 닫혀 있고 에어컨이 꺼져 있으면 창문을 열고 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Blind).blind_blind == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)) {\n  (#Blind).blind_close()\n  (#Light).switch_on()\n}\nif (((#Window).windowControl_window == \""closed\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#Window).windowControl_open()\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Blind).blind_blind == open) and ((#Light).switch_switch == off) and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0)) {\n  (#Blind).blind_close()\n  (#Light).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#Window).windowControl_window == closed) and ((#AirConditioner).switch_switch == off)) {\n  (#Window).windowControl_open()\n  (#AirConditioner).switch_on()\n}'}]",0.9,"The generated code uses '>' instead of '>=' for humidity condition, which may affect the triggering logic."
5,TV가 꺼져 있고 블라인드가 닫혀 있으며 커튼이 열려 있으면 TV를 켜고 블라인드를 열어 줘. 에어컨이 자동 모드가 아니고 꺼져 있으면 자동 모드로 설정하고 전원을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Blind).blind_blind == \""closed\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode != \""auto\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""off"") and ((#Blind).blind_blind == ""closed"") and ((#Curtain).curtain_curtain == ""open"")) {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).airConditionerMode_airConditionerMode != ""auto"") and ((#AirConditioner).switch_switch == ""off"")) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(""auto"")\n  (#AirConditioner).switch_on()\n}'}]",1.0,
5,문이 열려 있고 알람이 꺼져 있으면 사이렌을 울리고 블라인드가 열려 있으면 닫아 줘. 에어컨이 꺼져 있고 온도가 30도 이상이면 냉방 모드로 설정하고 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#DoorLock).doorControl_door == \""open\"") and ((#Alarm).alarm_alarm == \""off\"")) {\n  (#Siren).sirenMode_setSirenMode(\""siren\"")\n  if ((#Blind).blind_blind == \""open\"") {\n    (#Blind).blind_close()\n  }\n}\nif (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0)) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""cool\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'SecurityAlertAndBlindControl', 'cron': '', 'period': -1, 'code': 'if ((#DoorLock).doorControl_door == ""open"") and ((#Alarm).alarm_alarm == ""off"") {\n  if (any(#Siren).switch_switch == ""off"") {\n    all(#Siren).sirenMode_setSirenMode(""siren"")\n  }\n}\nif (any(#Blind).blind_blind == ""open"") {\n  all(#Blind).blind_close()\n}'}, {'name': 'AirConditionerCoolingControl', 'cron': '', 'period': -1, 'code': 'temp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (((#AirConditioner).switch_switch == ""off"") and (temp > 30.0)) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(""cool"")\n  (#AirConditioner).switch_on()\n}'}]",0.7,"The generated code uses 'any' and 'all' for device control, which may not match the specific devices targeted in the ground truth. Additionally, the temperature condition uses '>' instead of '>='."
5,TV가 꺼져 있고 커튼이 닫혀 있으며 선풍기가 꺼져 있으면 TV를 켜고 커튼을 열어 줘. 스피커가 재생 중이고 조명이 꺼져 있으면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"") and ((#Fan).switch_switch == \""off\"")) {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Speaker).mediaPlayback_playbackStatus == \""playing\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"") and ((#Fan).switch_switch == ""off"")) {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#Speaker).mediaPlayback_playbackStatus == ""playing"") and ((#Light).switch_switch == ""off"")) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}'}]",1.0,
5,TV가 켜져 있고 스피커가 꺼져 있으며 조명이 꺼져 있으면 스피커를 켜고 조명을 켜 줘. 에어컨이 난방 모드이고 온도가 21도 이상이면 에어컨을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""on\"") and ((#Speaker).switch_switch == \""off\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Speaker).switch_on()\n  (#Light).switch_on()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode == \""heat\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 21.0)) {\n  (#AirConditioner).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""on"") and ((#Speaker).switch_switch == ""off"") and ((#Light).switch_switch == ""off"")) {\n  (#Speaker).switch_on()\n  (#Light).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).airConditionerMode_airConditionerMode == ""heat"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 21.0)) {\n  (#AirConditioner).switch_off()\n  (#Blind).blind_close()\n}'}]",0.95,"The generated code uses '>' instead of '>=' for the temperature condition, which may affect the triggering logic."
6,매일 아침 8시에 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8 * * *"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'TurnOnLightsAt8AM', 'cron': '0 8 * * *', 'period': -1, 'code': '(#Light).switch_on()'}]",1.0,
6,매일 오후 6시부터 7시 사이에 15초마다 커튼을 닫았다 열었다 해 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 18 * * *"", ""period"": 15000, ""code"": ""curtain_action := true\nif ((#Clock).clock_hour == 18) {\n  if (curtain_action == true) {\n    (#Curtain).curtain_close()\n    curtain_action = false\n  } else {\n    (#Curtain).curtain_open()\n    curtain_action = true\n  }\n} else {\n  break\n}""}","[{'name': 'CurtainOpenCloseEvening', 'cron': '0 18 * * *', 'period': 15000, 'code': 'action := ""close""\nif ((#Clock).clock_hour < 18) or ((#Clock).clock_hour >= 19) {\n  break\n}\nif (action == ""close"") {\n  all(#Curtain).curtain_close()\n  action = ""open""\n} else {\n  all(#Curtain).curtain_open()\n  action = ""close""\n}'}]",0.7,The generated code uses a different logic for toggling the curtain state and checks for a broader time range than the ground truth.
6,주말 오후 10시부터 11시까지 3분마다 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 180000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Blind).blind_close()\n} else {\n  break\n}""}","[{'name': 'Close blinds every 3 minutes on weekends 10-11pm', 'cron': '0 22 * * 6,0', 'period': 180000, 'code': 'if (((#Clock).clock_hour >= 22) and ((#Clock).clock_hour < 23) and (((#Clock).clock_weekday == 6) or ((#Clock).clock_weekday == 0))) {\n  all(#Blind).blind_close()\n} else {\n  break\n}'}]",0.8,"The generated code checks for a broader time range and specific weekdays, which may not match the intended schedule in the ground truth."
6,주말 오후 10시부터 11시까지 3초마다 제습기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 3000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Dehumidifier).switch_on()\n} else {\n  break\n}""}","[{'name': 'WeekendDehumidifierControl', 'cron': '0 22 * * 6,7', 'period': 3000, 'code': 'if ((#Dehumidifier).switch_switch == off) {\n  (#Dehumidifier).switch_on()\n}'}]",0.6,"The generated code lacks the time check and break condition present in the ground truth, potentially altering the intended behavior."
7,10초마다 알람과 사이렌을 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""alarm_state := true\nif (alarm_state == true) {\n  (#Alarm).alarm_off()\n  (#Siren).switch_off()\n  alarm_state = false\n} else {\n  (#Alarm).alarm_siren()\n  (#Siren).switch_on()\n  alarm_state = true\n}""}","[{'name': 'ToggleAlarmSirenEvery10Seconds', 'cron': '', 'period': 10000, 'code': 'state := false\nif (state == false) {\n  all(#Alarm).alarm_off()\n  all(#Siren).switch_off()\n  state = true\n} else {\n  all(#Alarm).alarm_siren()\n  all(#Siren).switch_on()\n  state = false\n}'}]",0.9,"The generated code uses a different initial state for the toggle logic, which may affect the initial behavior."
7,매일 30초마다 선풍기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 30000, ""code"": ""fan_on := true\nif (fan_on == true) {\n  (#Fan).switch_off()\n  fan_on = false\n} else {\n  (#Fan).switch_on()\n  fan_on = true\n}""}","[{'name': 'FanOnOffToggle', 'cron': '0 0 * * *', 'period': 30000, 'code': 'state := false\nif (state == false) {\n  all(#Fan).switch_off()\n  state = true\n} else {\n  all(#Fan).switch_on()\n  state = false\n}'}]",0.9,"The generated code uses a different initial state for the toggle logic, which may affect the initial behavior."
6,매일 자정에 TV를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * *"", ""period"": 0, ""code"": ""(#Television).switch_off()""}","[{'name': 'TurnOffTVAtMidnight', 'cron': '0 0 * * *', 'period': -1, 'code': '(#Television).switch_off()'}]",1.0,
6,평일 오전 8시부터 자정까지 한 시간마다 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8-23 * * 1-5"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'TurnOnLightsEveryHourWeekdays', 'cron': '0 8-23 * * 1-5', 'period': 0, 'code': '(#Light).switch_on()'}]",1.0,
4,창문이 열리면 알람의 사이렌을 울려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Alarm).alarm_siren()""}","[{'name': 'SoundAlarmWhenWindowOpens', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#Window).windowControl_window == open) {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.7,"The generated code uses a conditional logic with a triggered flag instead of a wait until construct, which changes the behavior."
3,토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 20.0)\nwait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0)\n(#Irrigator).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > 20.0) or ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0)) {\n  (#Irrigator).switch_on()\n}'}]",0.5,"The generated code uses an immediate if condition instead of waiting for specific humidity levels, altering the intended logic."
3,움직임이 감지되면 최대 3번까지 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""motion_count := 0\nprev_motion := \""inactive\""\ncurrent = (#MotionSensor).motionSensor_motion\nif (current == \""active\"") and (prev_motion == \""inactive\"") {\n  if (motion_count < 3) {\n    (#Light).switch_on()\n    motion_count = motion_count + 1\n  }\n}\nprev_motion = current""}","[{'name': 'TurnOnLightUpTo3TimesOnMotion', 'cron': '', 'period': 1000, 'code': 'count := 0\nmotionActivePrev := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (motionActivePrev == false) {\n    if (count < 3) {\n      (#Light).switch_on()\n      count = count + 1\n    }\n  }\n  motionActivePrev = true\n} else {\n  motionActivePrev = false\n}'}]",0.9,"The generated code uses a slightly different logic for tracking motion state and count, but the overall behavior is similar."
3,온도가 35도 이상이 되면 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)\n(#AirConditioner).switch_on()""}","[{'name': 'TurnOnACWhenHot', 'cron': '', 'period': 1000, 'code': 'triggered := false\ntemp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (temp > 35.0) {\n  if (triggered == false) {\n    (#AirConditioner).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code uses a conditional logic with a triggered flag instead of a wait until construct, which changes the behavior."
3,습도가 80% 이상이 되면 블라인드를 내려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)\n(#Blind).blind_close()""}","[{'name': 'LowerBlindsWhenHighHumidity', 'cron': '', 'period': 1000, 'code': 'if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  all(#Blind).blind_close()\n}'}]",0.8,"The generated code uses an immediate if condition instead of waiting for a specific humidity level, altering the intended logic."
3,블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Blind).blind_blind == \""closed\"")\n(#Speaker).mediaPlayback_speak(\""Blinds are closed\"")""}","[{'name': 'BlindsClosedAnnouncement', 'cron': '', 'period': 100, 'code': 'announced := false\nif (all(#Blind).blind_blind == ""closed"") {\n  if (announced == false) {\n    (#Speaker).mediaPlayback_speak(""블라인드가 닫혀 있습니다."")\n    announced = true\n  }\n} else {\n  announced = false\n}'}]",0.7,"The generated code uses a conditional logic with an announced flag instead of a wait until construct, which changes the behavior."
3,TV가 꺼지면 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Television).switch_switch == \""off\"")\n(#Speaker).switch_off()""}","[{'name': 'TurnOffSpeakersWhenTVOff', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") {\n  (#Speaker).switch_off()\n}'}]",0.8,"The generated code uses an immediate if condition instead of waiting for the television to turn off, altering the intended logic."
3,커튼이 3번 열렸다 닫히면 조명을 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""close_count := 0\nprev_state := \""closed\""\nopened := false\ncurr = (#Curtain).curtain_curtain\nif (curr == \""open\"") and (prev_state == \""closed\"") {\n  opened = true\n}\nif (curr == \""closed\"") and (prev_state == \""open\"") and (opened == true) {\n  close_count = close_count + 1\n  opened = false\n}\nprev_state = curr\nif (close_count >= 3) {\n  (#Light).switch_off()\n  break\n}""}","[{'name': 'CurtainOpenCloseCount', 'cron': '', 'period': 100, 'code': 'count := 0\nlast_state := ""unknown""\ncurr_state = (#Curtain).curtain_curtain\nif ((curr_state == ""open"") or (curr_state == ""closed"")) {\n  if (curr_state != last_state) {\n    count = count + 1\n    last_state = curr_state\n  }\n}\nif (count >= 6) {\n  all(#Light).switch_off()\n  break\n}'}]",0.7,"The generated code uses a different logic for counting curtain state changes, which may affect the intended behavior."
4,제습기가 꺼지면 다시 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Dehumidifier).switch_switch == \""off\"")\n(#Dehumidifier).switch_on()""}","[{'name': 'Dehumidifier Auto Restart', 'cron': '', 'period': 1000, 'code': 'turnedOff := false\nif ((#Dehumidifier).switch_switch == ""off"") {\n  if (turnedOff == false) {\n    (#Dehumidifier).switch_on()\n    turnedOff = true\n  }\n} else {\n  turnedOff = false\n}'}]",0.6,"The generated code uses a conditional logic with a turnedOff flag instead of a wait until construct, which changes the behavior."
4,재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#PresenceSensor).presenceSensor_presence == \""not present\"")\n(#Speaker).mediaPlayback_speak(\""Door is open\"")""}","[{'name': 'Occupancy_NoPresence_Speak', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#OccupancySensor).presenceSensor_presence == not_present) {\n  if (triggered == false) {\n    (#Speaker).mediaPlayback_speak(""문이 열려 있습니다."")\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.7,"The generated code uses a conditional logic with a triggered flag instead of a wait until construct, which changes the behavior."
2,토양 습도가 30% 미만이면 5초 후 급수기를 작동해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  (#Clock).clock_delay(5000)\n  (#Irrigator).irrigatorOperatingState_startWatering()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  (#Clock).clock_delay(5000)\n  (#Irrigator).switch_on()\n}'}]",0.9,"The generated code uses a different method for starting the irrigator, which may affect the intended behavior."
3,창문이 열려 있고 온도가 35도 이상이면 10초 대기 후 블라인드를 내려 줘.,"{""name"": ""Scenario2"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)) {\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((any(#Window).windowControl_window == ""open"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0)) {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(10000)\n    all(#Blind).blind_close()\n  }\n} else {\n  triggered = false\n}'}]",0.7,"The generated code uses a conditional logic with a triggered flag instead of a direct condition, and uses '>' instead of '>=' for temperature."
4,"습도가 80% 이상이면 3초 뒤 제습기를 켜고, 7초 더 지난 후 창문을 닫아 줘.","{""name"": ""Scenario3"", ""cron"": """", ""period"": -1, ""code"": ""if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) {\n  (#Clock).clock_delay(3000)\n  (#Dehumidifier).switch_on()\n  (#Clock).clock_delay(7000)\n  (#Window).windowControl_close()\n}""}","[{'name': 'HumidityDehumidifierWindowControl', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  if (triggered == false) {\n    wait until(true)\n    (#Clock).clock_delay(3000)\n    (#Dehumidifier).switch_on()\n    (#Clock).clock_delay(7000)\n    (#Window).windowControl_close()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.8,"The generated code uses a conditional logic with a triggered flag and '>' instead of '>=' for humidity, which may affect the behavior."
4,빛의 세기가 100룩스 이하면 5초 대기 후 LED 조명을 켜 줘.,"{""name"": ""Scenario4"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LightSensor).lightLevel_light <= 100.0) {\n  (#Clock).clock_delay(5000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#LightSensor).lightLevel_light < 100.0) {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(5000)\n    (#Light).switch_on()\n  }\n} else {\n  triggered = false\n}'}]",0.8,"The generated code uses a conditional logic with a triggered flag and '<' instead of '<=' for light level, which may affect the behavior."
4,급수기를 작동 후 10초 기다렸다가 환풍기를 켜 줘.,"{""name"": ""Scenario5"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()\n(#Clock).clock_delay(10000)\n(#Fan).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'runningStartTime_ms := 0\nwaitingFanOn := false\nif ((#Irrigator).switch_switch == ""on"") {\n  if (runningStartTime_ms == 0) {\n    runningStartTime_ms = (#Clock).clock_timestamp\n  }\n  waitingFanOn = false\n} else {\n  if ((runningStartTime_ms != 0) and (waitingFanOn == false)) {\n    elapsed = (#Clock).clock_timestamp - runningStartTime_ms\n    if (elapsed >= 10000) {\n      (#Fan).switch_on()\n      waitingFanOn = true\n      runningStartTime_ms = 0\n    }\n  } else if (waitingFanOn == true) {\n    runningStartTime_ms = 0\n  }\n}'}]",0.6,"The generated code uses a more complex logic with timestamp tracking instead of a simple delay, which changes the behavior."
4,"창문이 열려 있으면 5초 후 커튼을 닫고, 10초 더 지난 뒤 블라인드를 닫아 줘.","{""name"": ""Scenario6"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Clock).clock_delay(5000)\n  (#Curtain).curtain_close()\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'CloseCurtainsAndBlindsAfterWindowOpen', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") {\n  (#Clock).clock_delay(5000)\n  (#Curtain).curtain_close()\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}'}]",1.0,
4,조명이 켜져 있으면 3초 대기 후 조명을 껐다가 3초 뒤 다시 켜 줘.,"{""name"": ""Scenario7"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""on\"") {\n  (#Clock).clock_delay(3000)\n  (#Light).switch_off()\n  (#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'LightToggleAfterDelay', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") {\n  (#Clock).clock_delay(3000)\n  (#Light).switch_off()\n  (#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}'}]",1.0,
4,7초 후에 조명을 끄고 5초 뒤 다시 켜 줘.,"{""name"": ""Scenario8"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(7000)\n(#Light).switch_off()\n(#Clock).clock_delay(5000)\n(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Clock).clock_delay(7000)\n(#Light).switch_off()\n(#Clock).clock_delay(5000)\n(#Light).switch_on()'}]",1.0,
4,문이 닫혀 있는데 5초가 지나도 창문이 열려 있지 않으면 블라인드를 열어 줘.,"{""name"": ""Scenario9"", ""cron"": """", ""period"": -1, ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  (#Clock).clock_delay(5000)\n  if ((#Window).windowControl_window != \""open\"") {\n      (#Blind).blind_open()\n  }\n}""}","[{'name': 'OpenBlindsIfDoorClosedAndWindowNotOpen', 'cron': '', 'period': 100, 'code': 'triggered := false\nif (((#DoorLock).doorControl_door == ""closed"") and ((#Window).windowControl_window != ""open"")) {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(5000)\n    if (((#DoorLock).doorControl_door == ""closed"") and ((#Window).windowControl_window != ""open"")) {\n      (#Blind).blind_open()\n    }\n  }\n} else {\n  triggered = false\n}'}]",0.8,"The generated code uses a conditional logic with a triggered flag, which may affect the behavior."
4,"커튼이 열린 상태라면 2초 뒤 조명을 50으로 낮추고, 다시 4초 기다려서 꺼 줘.","{""name"": ""Scenario10"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Curtain).curtain_curtain == \""open\"") {\n  (#Clock).clock_delay(2000)\n  (#Light).switchLevel_setLevel(50, 0)\n  (#Clock).clock_delay(4000)\n  (#Light).switch_off()\n}""}","[{'name': 'DimAndTurnOffLightsAfterCurtainsOpen', 'cron': '', 'period': 100, 'code': 'triggered := false\nstep := 0\nif ((#Curtain).curtain_curtain == open) {\n  if (triggered == false) {\n    triggered = true\n    step = 1\n  }\n  if (step == 1) {\n    (#Clock).clock_delay(2000)\n    all(#Light).switchLevel_setLevel(50, 0)\n    step = 2\n  }\n  if (step == 2) {\n    (#Clock).clock_delay(4000)\n    all(#Light).switch_off()\n    step = 3\n  }\n} else {\n  triggered = false\n  step = 0\n}'}]",0.8,"The generated code uses a step-based logic with a triggered flag, which may affect the behavior."
6,5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이면 급수기를 끄고 반복도 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""soil = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\ntemp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (soil <= 30.0) {\n  (#Irrigator).switch_on()\n  if (temp >= 35.0) {\n      (#Irrigator).switch_off()\n      break\n  }\n}""}","[{'name': 'SoilHumidityWaterControl', 'cron': '', 'period': 5000, 'code': 'triggered := false\nsoilHumidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\ntemperature = (#TemperatureSensor).temperatureMeasurement_temperature\nif (soilHumidity < 30.0) {\n  if (temperature > 35.0) {\n    (#Irrigator).switch_off()\n    break\n  } else {\n    (#Irrigator).switch_on()\n  }\n} else {\n  (#Irrigator).switch_off()\n}'}]",0.7,"The generated code uses '<' instead of '<=' and '>' instead of '>=' for conditions, which may affect the triggering logic."
6,3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""count := 0\n\nif (count >= 10) {\n  break\n}\n(#Light).switch_toggle()\nrain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") {\n  break\n}\ncount = count + 1""}","[{'name': 'BlinkLightWithRainCheck', 'cron': '', 'period': 3000, 'code': 'count := 0\nif ((#WeatherProvider).weatherProvider_weather == ""rain"") {\n  break\n}\nif (count < 10) {\n  (#Light).switch_toggle()\n  count = count + 1\n} else {\n  break\n}'}]",0.9,"The generated code has a different order of operations, but the overall behavior is similar."
6,1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity\nif (humidity >= 80.0) {\n  break\n}\n(#Fan).switch_toggle()""}","[{'name': 'FanToggleWithHumidityCheck', 'cron': '', 'period': 1000, 'code': 'humidityHigh := false\nif (humidityHigh == false) {\n  humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\n  if (humidity > 80.0) {\n    humidityHigh = true\n    all(#Fan).switch_off()\n    break\n  }\n  all(#Fan).switch_toggle()\n}'}]",0.7,"The generated code uses a humidityHigh flag and '>' instead of '>=' for humidity, which may affect the behavior."
6,5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""current_level = (#Blind).blindLevel_blindLevel\nif (current_level <= 10) {\n  (#Blind).blindLevel_setBlindLevel(0)\n  break\n}\nnext_level = current_level - 10\n(#Blind).blindLevel_setBlindLevel(next_level)""}","[{'name': 'Close blinds gradually', 'cron': '', 'period': 5000, 'code': 'triggered := false\nif (triggered == false) {\n  level = (#Blind).blindLevel_blindLevel\n  newLevel = level - 10\n  if (newLevel < 0) {\n    newLevel = 0\n  }\n  if (level > 0) {\n    (#Blind).blindLevel_setBlindLevel(newLevel)\n  } else {\n    triggered = true\n    break\n  }\n}'}]",0.8,"The generated code uses a triggered flag and a slightly different logic for adjusting blind levels, which may affect the behavior."
6,"10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""lux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_on()\n(#Clock).clock_delay(5000)\nlux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_off()""}","[{'name': 'IrrigationControl', 'cron': '', 'period': 10000, 'code': 'irrigationOn := false\nif (any(#LightSensor).lightLevel_light > 500) {\n  all(#Irrigator).switch_off()\n  break\n}\nif (irrigationOn == false) {\n  all(#Irrigator).switch_on()\n  irrigationOn = true\n} else {\n  irrigationOn = false\n  wait until((#Clock).clock_delay(5000))\n  all(#Irrigator).switch_off()\n}'}]",0.7,"The generated code uses a different logic for toggling irrigation and a wait until construct, which may affect the behavior."
6,2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Light).switch_toggle()\nlight_state = (#Light).switch_switch\nif (light_state == \""off\"") {\n  window_state = (#Window).windowControl_window\n  if (window_state == \""open\"") {\n      break\n  }\n}""}",[],0.0,"The generated code is empty, missing the entire logic present in the ground truth."
6,3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""volume := 0\n\nif (volume >= 5) {\n  motion = (#MotionSensor).motionSensor_motion\n  if (motion == \""active\"") {\n      break\n  }\n  volume = 0\n} else {\n  volume = volume + 1\n}\n(#Television).audioVolume_setVolume(volume)""}","[{'name': 'TV Volume Cycle with Motion Stop', 'cron': '', 'period': 3000, 'code': 'initialVolume := -1\nstep := 0\nmotionDetected := false\nif (initialVolume == -1) {\n  initialVolume = (#Television).audioVolume_volume\n}\nif (motionDetected == false) {\n  step = step + 1\n  vol = (#Television).audioVolume_volume + 1\n  (#Television).audioVolume_setVolume(vol)\n  if (step == 5) {\n    (#Television).audioVolume_setVolume(initialVolume)\n    if ((#MotionSensor).motionSensor_motion == motionEnum.active) {\n      motionDetected = true\n      break\n    }\n    step = 0\n  }\n}'}]",0.7,"The generated code uses a different logic for volume cycling and motion detection, which may affect the behavior."
6,10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""(#Blind).blind_close()\ntv = (#Television).switch_switch\nif (tv == \""on\"") {\n  break\n}""}","[{'name': 'CloseBlindsEvery10SecondsUntilTVOff', 'cron': '', 'period': 10000, 'code': 'stopLoop := false\nif (stopLoop == false) {\n  if ((#Television).switch_switch == ""on"") {\n    stopLoop = true\n    break\n  }\n  all(#Blind).blindLevel_setBlindLevel(0)\n}'}]",0.6,"The generated code uses a stopLoop flag and a different logic for closing blinds, which may affect the behavior."
6,"2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Alarm).alarm_siren()\nstate = (#Window).windowControl_window\n(#Clock).clock_delay(1000)\n(#Alarm).alarm_off()\nif (state == \""closed\"") {\n  break\n}""}","[{'name': 'SirenBlareLoop', 'cron': '', 'period': 2000, 'code': 'blare_active := false\nif (blare_active == false) {\n  blare_active = true\n  (#Alarm).alarm_siren()\n  (#Window).windowControl_close()\n  if ((#Window).windowControl_window == closed) {\n    (#Alarm).alarm_off()\n    break\n  }\n  (#Clock).clock_delay(1000)\n  (#Alarm).alarm_off()\n  blare_active = false\n}'}]",0.8,"The generated code uses a blare_active flag and a different logic for handling the alarm, which may affect the behavior."
6,5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(\""auto\"")\nstate = (#Window).windowControl_window\nif (state == \""open\"") {\n  break\n}""}","[{'name': 'SilentAirPurifierMode', 'cron': '', 'period': 5000, 'code': 'allWindowOpen := false\nif (allWindowOpen == false) {\n  if (any(#Window).windowControl_window == open) {\n    allWindowOpen = true\n    break\n  }\n  all(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(""quiet"")\n}'}]",0.6,"The generated code uses a different fan mode and logic for checking windows, which may affect the behavior."
7,실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""triggered := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {\n  if (triggered == false) {\n    (#Irrigator).switch_on()\n    (#Speaker).mediaPlayback_speak(\""Start watering\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'SoilHumidityWateringAnnouncement', 'cron': '', 'period': 1000, 'code': 'triggered := false\nsoilHumidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (soilHumidity < 25.0) {\n  if (triggered == false) {\n    (#Irrigator).switch_on()\n    (#Speaker).mediaPlayback_speak(""급수 시작"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.9,"The generated code uses a less than comparison for soil humidity, while the ground truth uses less than or equal. The action message is also different, but the core logic and structure are similar."
7,1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""triggered := false\nif ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (triggered == false) {\n    (#Fan).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'TemperatureFanControl', 'cron': '', 'period': 1000, 'code': 'if (any(#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  all(#Fan).switch_on()\n} else {\n  all(#Fan).switch_off()\n}'}]",0.7,"The generated code directly switches the fan on or off based on temperature, while the ground truth uses a triggered flag to avoid repeated actions."
7,현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 60000, ""code"": ""triggered := false\nif ((#WeatherProvider).weatherProvider_weather == \""rain\"") {\n  if (triggered == false) {\n    (#Irrigator).switch_off()\n    (#Speaker).mediaPlayback_speak(\""Rain detected\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'RainDetectionIrrigationControl', 'cron': '', 'period': 60000, 'code': 'rainPreviouslyDetected := false\nif ((#WeatherProvider).weatherProvider_weather == ""rain"") {\n  if (rainPreviouslyDetected == false) {\n    (#Irrigator).switch_off()\n    (#Speaker).mediaPlayback_speak(""비 감지"")\n    rainPreviouslyDetected = true\n  }\n} else {\n  rainPreviouslyDetected = false\n}'}]",0.95,"The generated code and ground truth are semantically similar, with minor differences in variable names and message content."
7,2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""triggered := false\nif ((#Television).switch_switch == \""on\"") {\n  if (triggered == false) {\n    (#Speaker).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'TurnOnSpeakersWhenTVOn', 'cron': '', 'period': 2000, 'code': 'speakersOnTriggered := false\nif ((#Television).switch_switch == ""on"") {\n  if (speakersOnTriggered == false) {\n    (#Speaker).switch_on()\n    speakersOnTriggered = true\n  }\n} else {\n  speakersOnTriggered = false\n}'}]",0.98,"The generated code and ground truth are nearly identical, with only a difference in the variable name used for the triggered flag."
7,토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)\n  (#Irrigator).switch_on()\n  active = True\n}\nif (active == True) {\n  if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 30.0) {\n      break\n  }\n  (#Irrigator).switch_toggle()\n}""}","[{'name': 'SoilHumidityWateringControl', 'cron': '', 'period': 3000, 'code': 'wateringActive := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) and (wateringActive == false) {\n  (#Irrigator).switch_on()\n  wateringActive = true\n}\nif (wateringActive == true) {\n  if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > 30.0) {\n    (#Irrigator).switch_off()\n    wateringActive = false\n    break\n  } else {\n    (#Irrigator).switch_toggle()\n  }\n}'}]",0.6,"The generated code uses a toggle mechanism and checks for humidity greater than 30 to stop, while the ground truth uses a wait until construct and checks for humidity less than or equal to 25 to start."
7,"일조량이 200룩스 이하가 되면 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 4000, ""code"": ""active := False\nif (active == False) {\n  wait until((#LightSensor).lightLevel_light <= 200.0)\n  active = True\n}\nif (active == True) {\n  (#Light).switch_on()\n  (#Clock).clock_delay(2000)\n  (#Light).switch_off()\n}""}","[{'name': 'Light Blink on Low Sunlight', 'cron': '', 'period': 1000, 'code': 'counter := 0\nif ((#LightSensor).lightLevel_light < 200.0) {\n  counter = counter + 1000\n  mod = counter % 6000\n  if ((mod >= 0) and (mod < 4000)) {\n    if ((#Light).switch_switch != ""on"") {\n      (#Light).switch_on()\n    }\n  } else {\n    if ((#Light).switch_switch != ""off"") {\n      (#Light).switch_off()\n    }\n  }\n} else {\n  counter = 0\n  if ((#Light).switch_switch != ""off"") {\n    (#Light).switch_off()\n  }\n}'}]",0.5,"The generated code implements a blinking mechanism using a counter, while the ground truth uses a wait until construct followed by a delay."
7,"조명이 켜지면 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""active := False\nif (active == False) {\n  wait until((#Light).switch_switch == \""on\"")\n  (#Blind).blind_close()\n  active = True\n}\nif (active == True) {\n  (#Curtain).curtain_open()\n  (#Clock).clock_delay(1000)\n  (#Curtain).curtain_close()\n}""}","[{'name': 'BlindCloseOnLightOn', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#Light).switch_switch == ""on"") {\n  if (triggered == false) {\n    all(#Blind).blind_close()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}, {'name': 'CurtainsOpenCloseEveryTwoSeconds', 'cron': '', 'period': 2000, 'code': 'state := ""open""\nif (state == ""open"") {\n  all(#Curtain).curtain_open()\n  state = ""close""\n} else {\n  all(#Curtain).curtain_close()\n  state = ""open""\n}'}]",0.4,"The generated code uses a triggered flag and a state variable for curtains, while the ground truth uses a wait until construct and clock delay for curtain control."
7,"현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 경광등을 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#DoorLock).doorControl_door == \""closed\"")\n  (#Light).switch_off()\n  active = True\n}\nif (active == True) {\n  (#Siren).sirenMode_setSirenMode(\""strobe\"")\n}""}",[],0.0,"The generated code is missing entirely, while the ground truth contains logic for door lock and siren control."
5,매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘.,"{""name:""Scenario1"", ""cron"":""0 7 * * *"", ""period"":-1, ""code"":""if ((#Irrigator).switch_switch == \""off\"" and (#Window).windowControl_window == \""closed\"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n  wait until((#Irrigator).switch_switch == \""on\"")\n  (#Blind).blind_close()\n}""}","[{'name': 'MorningIrrigationAndWindowControl', 'cron': '0 7 * * *', 'period': 0, 'code': 'if ((#Irrigator).switch_switch == ""off"" and all(#Window).windowControl_window == ""closed"") {\n  (#Irrigator).switch_on()\n  all(#Window).windowControl_open()\n}'}, {'name': 'CloseBlindsWhenIrrigationOn', 'cron': '', 'period': 100, 'code': 'irrigationOnTriggered := false\nif ((#Irrigator).switch_switch == ""on"") {\n  if (irrigationOnTriggered == false) {\n    all(#Blind).blind_close()\n    irrigationOnTriggered = true\n  }\n} else {\n  irrigationOnTriggered = false\n}'}]",0.7,"The generated code splits the logic into two separate scenarios, while the ground truth combines them with a wait until construct."
7,"실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""temperature = (#TemperatureSensor).temperatureMeasurement_temperature\nhumidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\nif (temperature >= 28.0) {\n  (#Fan).switch_on()\n}\nif (humidity >= 80.0) {\n  (#Dehumidifier).switch_on()\n}""}","[{'name': 'Fan Control', 'cron': '', 'period': 1000, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 28.0) {\n  (#Fan).switch_on()\n} else {\n  (#Fan).switch_off()\n}'}, {'name': 'Dehumidifier Control', 'cron': '', 'period': 1000, 'code': 'if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Dehumidifier).switch_on()\n} else {\n  (#Dehumidifier).switch_off()\n}'}]",0.85,"The generated code uses separate scenarios for fan and dehumidifier control, while the ground truth combines them in a single scenario."
6,"주말에는 5초마다 펌프가 꺼져 있으면 켜고, 켜져 있으면 꺼 주고, 선풍기 속도를 10으로 설정해 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 * * 6,7"", ""period"": 5000, ""code"": ""weekday = (#Clock).clock_weekday\nif ((weekday != \""saturday\"") and (weekday != \""sunday\"")) {\n  break\n}\n(#Fan).fanControl_setFanSpeed(10)\n(#Pump).switch_toggle()""}","[{'name': 'Weekend Pump Toggle and Fan Speed', 'cron': '', 'period': 5000, 'code': 'isWeekend := false\nif ((#Clock).clock_weekday == ""saturday"" or (#Clock).clock_weekday == ""sunday"") {\n  isWeekend = true\n} else {\n  isWeekend = false\n  break\n}\nif ((#Pump).switch_switch == ""off"") {\n  (#Pump).switch_on()\n} else {\n  (#Pump).switch_off()\n}\n(#Fan).fanControl_setFanSpeed(10)'}]",0.75,"The generated code uses a manual weekend check and toggles the pump, while the ground truth uses a cron expression and a toggle method."
7,"실시간으로 확인하여 움직임이 감지될 때마다 조명을 켜고, 선풍기 속도를 10 높여 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""motion = (#MotionSensor).motionSensor_motion\nif (motion == \""active\"") {\n  (#Light).switch_on()\n  current_speed = (#Fan).fanControl_fanSpeed\n  new_speed = current_speed + 10\n  (#Fan).fanControl_setFanSpeed(new_speed)\n}""}","[{'name': 'MotionTriggeredLightFan', 'cron': '', 'period': 100, 'code': 'triggered := false\nmotionActive = any(#MotionSensor).motionSensor_motion == ""active""\nif (motionActive == true) {\n  if (triggered == false) {\n    all(#Light).switch_on()\n    currentPercent = 0\n    currentPercent = (#Fan).fanControl_percent\n    newPercent = currentPercent + 10\n    if (newPercent > 100) {\n      newPercent = 100\n    }\n    all(#Fan).fanControl_setPercent(newPercent)\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.8,"The generated code uses a triggered flag and percent control for the fan, while the ground truth directly adjusts fan speed."
5,"실시간으로 확인하여 창문이 열려 있으면 블라인드를 닫고, 창문이 닫혀 있으면 커튼을 열어 줘. 또한 실시간으로 확인하여 알람의 사이렌이 울리고 있지 않다면 즉시 알람의 사이렌을 울려 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""window_status = (#Window).windowControl_window\nif (window_status == \""open\"") {\n  (#Blind).blind_close()\n} else if (window_status == \""closed\"") {\n  (#Curtain).curtain_open()\n}\nalarm_status = (#Alarm).alarm_alarm\nif ((alarm_status != \""siren\"") and (alarm_status != \""both\"")) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Alarm Siren Control', 'cron': '', 'period': 200, 'code': 'triggered := false\nif ((#Alarm).alarm_alarm != ""siren"") {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.5,"The generated code focuses solely on the alarm siren, while the ground truth includes additional logic for window and curtain control."
5,"매주 금요일 오후 6시에 조명이 켜져 있으면 밝기를 30으로 낮추고, TV가 꺼져 있으면 TV를 켜 줘. 선풍기가 꺼져 있으면 선풍기도 켜 줘.","{""name"": ""Scenario1"", ""cron"": ""0 18 * * 5"", ""period"": 0, ""code"": ""if ((#Light).switch_switch == \""on\"") {\n  (#Light).switchLevel_setLevel(30, 0)\n}\nif ((#Television).switch_switch == \""off\"") {\n  (#Television).switch_on()\n}\nif ((#Fan).switch_switch == \""off\"") {\n  (#Fan).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '0 18 * * 5', 'period': 0, 'code': 'if (any(#Light).switch_switch == ""on"") {\n  all(#Light).switchLevel_setLevel(30, 0)\n}\nif (all(#Television).switch_switch == ""off"") {\n  all(#Television).switch_on()\n}\nif (any(#Fan).switch_switch == ""off"") {\n  all(#Fan).switch_on()\n}'}]",0.95,"The generated code uses 'any' and 'all' for device control, while the ground truth uses direct references. The logic is otherwise similar."
6,매일 아침 8시에 스피커가 꺼져 있으면 스피커를 켜고 ‘오늘 날씨입니다’라고 말해 줘. 이후 조명이 꺼져 있으면 켜고 블라인드를 열어 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8 * * *"", ""period"": 0, ""code"": ""if ((#Speaker).switch_switch == \""off\"") {\n  (#Speaker).switch_on()\n  (#Speaker).mediaPlayback_speak(\""This is the weather today\"")\n  if ((#Light).switch_switch == \""off\"") {\n    (#Light).switch_on()\n    (#Blind).blind_open()\n  }\n}""}","[{'name': 'MorningRoutine', 'cron': '0 8 * * *', 'period': 0, 'code': 'if ((#Speaker).switch_switch == ""off"") {\n  (#Speaker).switch_on()\n  (#Speaker).mediaPlayback_speak(""오늘의 날씨입니다."")\n}\nif (all(#Light).switch_switch == ""off"") {\n  all(#Light).switch_on()\n  all(#Blind).blind_open()\n}'}]",0.85,"The generated code separates the light and blind control from the speaker logic, while the ground truth nests them. The messages are also different."
7,1초마다 확인하여 관개 장치가 꺼졌다 켜진 횟수가 4번을 초과하고 펌프가 2번 이상 작동했으면 블라인드를 닫고 커튼을 내려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""prev_irrigator_state := (#Irrigator).switch_switch\nirrigator_off_to_on_count := 0\nprev_pump_state := (#Pump).switch_switch\npump_on_count := 0\nirrigator_state = (#Irrigator).switch_switch\npump_state = (#Pump).switch_switch\nif ((prev_irrigator_state == \""off\"") and (irrigator_state == \""on\"")) {\n  irrigator_off_to_on_count = irrigator_off_to_on_count + 1\n}\nprev_irrigator_state = irrigator_state\nif ((pump_state == \""on\"") and (prev_pump_state != \""on\"")) {\n  pump_on_count = pump_on_count + 1\n}\nprev_pump_state = pump_state\nif ((irrigator_off_to_on_count > 4) and (pump_on_count >= 2)) {\n  (#Blind).blind_close()\n  (#Curtain).curtain_close()\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'irrigationCount := 0\npumpRunCount := 0\nirrigationWasOn := false\npumpWasOn := false\nif ((#Irrigator).switch_switch == ""on"") {\n  if (irrigationWasOn == false) {\n    irrigationWasOn = true\n  }\n} else {\n  if (irrigationWasOn == true) {\n    irrigationCount = irrigationCount + 1\n    irrigationWasOn = false\n  }\n}\nif ((#Pump).switch_switch == ""on"") {\n  if (pumpWasOn == false) {\n    pumpWasOn = true\n  }\n} else {\n  if (pumpWasOn == true) {\n    pumpRunCount = pumpRunCount + 1\n    pumpWasOn = false\n  }\n}\nif ((irrigationCount > 4) and (pumpRunCount > 2)) {\n  all(#Blind).blind_close()\n  all(#Curtain).curtain_close()\n}'}]",0.8,"The generated code uses boolean flags to track state changes, while the ground truth uses state variables. The logic for counting and actions is similar."
7,"2초마다 체크해서 매일 오전 6시부터 9시 사이에 조명이 켜져 있는 누적 시간이 10분 이상이고, 관개 장치가 세 번 이상 꺼졌다 켜졌으면 스피커로 '관수 완료되었습니다'라고 말해 줘.","{""name"": ""Scenario1"", ""cron"": ""0 6 * * *"", ""period"": 2000, ""code"": ""light_on_duration := 0\nirrigator_toggle_count := 0\nprev_irrigator := \""\""\n\nif ((#Clock).clock_hour < 9) {\n  if ((#Light).switch_switch == \""on\"") {\n    light_on_duration = light_on_duration + 2000\n  }\n\n  current_irrigator = (#Irrigator).switch_switch\n  if ((prev_irrigator == \""on\"") and (current_irrigator == \""off\"")) {\n    irrigator_toggle_count = irrigator_toggle_count + 1\n  }\n  prev_irrigator = current_irrigator\n\n  if ((light_on_duration >= 600000) and (irrigator_toggle_count >= 3)) {\n    (#Speaker).mediaPlayback_speak(\""Watering complete\"")\n    break\n  }\n} else {\n  break\n}""}","[{'name': 'IrrigationCompletionAlert', 'cron': '', 'period': 2000, 'code': 'lightsOnDuration := 0\nlastCheckMinute := -1\nirrigationOffOnCount := 0\nlastIrrigationSwitch := """"\nirrigationPreviouslyOn := false\nspeakingTriggered := false\ncurrentDay := 0\nif (currentDay != (#Clock).clock_date) {\n  currentDay = (#Clock).clock_date\n  lightsOnDuration = 0\n  irrigationOffOnCount = 0\n  speakingTriggered = false\n  lastIrrigationSwitch = """"\n  irrigationPreviouslyOn = false\n}\nhour = (#Clock).clock_hour\nminute = (#Clock).clock_minute\nif ((hour >= 6) and (hour < 9)) {\n  anyLightOn := any(#Light).switch_switch == ""on""\n  if (anyLightOn == true) {\n    lightsOnDuration = lightsOnDuration + 2\n  }\n}\nirrigationState := (#Irrigator).switch_switch\nif (lastIrrigationSwitch == """") {\n  lastIrrigationSwitch = irrigationState\n}\nif (irrigationState != lastIrrigationSwitch) {\n  if ((lastIrrigationSwitch == ""off"") and (irrigationState == ""on"")) {\n    irrigationOffOnCount = irrigationOffOnCount + 1\n  }\n  lastIrrigationSwitch = irrigationState\n}\nif ((speakingTriggered == false) and (lightsOnDuration >= 600) and (irrigationOffOnCount >= 3) and (irrigationState == ""off"")) {\n  (#Speaker).mediaPlayback_speak(""관개 완료"")\n  speakingTriggered = true\n}'}]",0.7,"The generated code uses a different approach to track light duration and irrigation toggles, with different units for time accumulation."
7,"실시간으로 확인하여 토양 습도 센서 값이 연속으로 3회 15 이하를 기록하고 그 중 두 번째 값이 가장 낮았다면 관개 장치를 켜고 블라인드를 닫아 줘. 단, 3월은 제외하고.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""h1 := 100\nh2 := 100\nh3 := 100\n\nif ((#Clock).clock_month != 3) {\n  h1 = h2\n  h2 = h3\n  h3 = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\n\n  if ((h1 <= 15) and (h2 <= 15) and (h3 <= 15) and (h2 < h1) and (h2 < h3)) {\n    (#Irrigator).switch_on()\n    (#Blind).blind_close()\n  }\n}""}","[{'name': 'SoilMoistureLowConsecutiveCheck', 'cron': '', 'period': 1000, 'code': 'count := 0\nlowest := 101.0\nsecondIsLowest := false\nif (#Clock).clock_month == 3 {\n  count = 0\n  lowest = 101.0\n  secondIsLowest = false\n  break\n}\nsoil = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif (soil <= 15.0) {\n  count = count + 1\n  if (count == 2) {\n    lowest = soil\n    secondIsLowest = true\n  } else if (count == 3) {\n    secondIsLowest = (lowest < soil)\n  } else if (count > 3) {\n    count = 1\n    lowest = 101.0\n    secondIsLowest = false\n  }\n} else {\n  count = 0\n  lowest = 101.0\n  secondIsLowest = false\n}\nif ((count >= 3) and (secondIsLowest == true)) {\n  (#Irrigator).switch_on()\n  all(#Blind).blind_close()\n  count = 0\n  lowest = 101.0\n  secondIsLowest = false\n  break\n}'}]",0.6,"The generated code uses a counting mechanism and tracks the lowest soil moisture, while the ground truth uses a sliding window approach with three variables."
4,"실시간으로 확인하여 움직임이 감지되면 5초 대기 후 조명을 켜고, 10초 후 커튼을 열고, 15초 후 펌프가 꺼져 있으면 펌프를 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#MotionSensor).motionSensor_motion == \""active\"")\n(#Clock).clock_delay(5000)\n(#Light).switch_on()\n(#Clock).clock_delay(10000)\n(#Curtain).curtain_open()\n(#Clock).clock_delay(15000)\nif ((#Pump).switch_switch == \""off\"") {\n  (#Pump).switch_on()\n}""}","[{'name': 'MotionTriggeredActions', 'cron': '', 'period': 100, 'code': 'motionDetected := false\nmotionDetectedTime := 0\ncurrentTime = 0\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (motionDetected == false) {\n    motionDetected = true\n    currentTime = (#Clock).clock_timestamp\n    motionDetectedTime = currentTime\n  } else {\n    currentTime = (#Clock).clock_timestamp\n    elapsed = currentTime - motionDetectedTime\n    if (elapsed >= 5000) {\n      all(#Light).switch_on()\n    }\n    if (elapsed >= 10000) {\n      all(#Curtain).curtain_open()\n    }\n    if (elapsed >= 15000) {\n      if (any(#Pump).switch_switch == ""off"") {\n        all(#Pump).switch_on()\n      }\n    }\n  }\n} else {\n  motionDetected = false\n  motionDetectedTime = 0\n}'}]",0.65,"The generated code uses timestamps to track elapsed time, while the ground truth uses clock delays to achieve similar timing."
3,"1월 1일에, 실시간으로 확인하여 조명이 꺼지면 3초 대기 후 펌프를 끄고, 5초 후 블라인드를 닫으며, 추가로 7초 후 조명을 다시 켠 다음 알람의 사이렌을 울려 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 1 1 *"", ""period"": 0, ""code"": ""wait until((#Light).switch_switch == \""off\"")\nif (((#Clock).clock_month == 1) and ((#Clock).clock_day == 1)) {\n  (#Clock).clock_delay(3000)\n  (#Pump).switch_off()\n  (#Clock).clock_delay(5000)\n  (#Blind).blind_close()\n  (#Clock).clock_delay(7000)\n  (#Light).switch_on()\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'NewYearLightOutSequence', 'cron': '0 0 1 1 *', 'period': 100, 'code': 'triggered := false\nstep := 0\ntimer := 0\nif (triggered == false) {\n  wait until(any(#Light).switch_switch == ""off"")\n  triggered = true\n  step = 1\n  timer = 0\n}\nif (triggered == true) {\n  timer = timer + period\n  if (step == 1 and timer >= 3000) {\n    all(#Pump).switch_off()\n    step = 2\n    timer = 0\n  }\n  if (step == 2 and timer >= 5000) {\n    all(#Blind).blind_close()\n    step = 3\n    timer = 0\n  }\n  if (step == 3 and timer >= 7000) {\n    all(#Light).switch_on()\n    step = 4\n    timer = 0\n  }\n  if (step == 4) {\n    if (any(#Alarm).alarm_alarmVolume != ""mute"") {\n      all(#Alarm).alarm_siren()\n    } else {\n      all(#Alarm).alarm_siren()\n    }\n    break\n  }\n}'}]",0.8,"The generated code uses a step-based timer approach, while the ground truth uses clock delays to achieve the sequence of actions."
4,"에어컨이 켜지면 5초 후 블라인드를 닫고, 5초 더 기다린 후 커튼이 열려 있으면 커튼을 닫고, 이후 10초 후 조명 밝기를 10퍼센트로 낮춰 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#AirConditioner).switch_switch == \""on\"")\n(#Clock).clock_delay(5000)\n(#Blind).blind_close()\n(#Clock).clock_delay(5000)\nif ((#Curtain).curtain_curtain == \""open\"") {\n  (#Curtain).curtain_close()\n}\n(#Clock).clock_delay(10000)\n(#Light).switchLevel_setLevel(10, 1)""}","[{'name': 'AC_On_Close_Blinds_Curtains_Lights', 'cron': '', 'period': 100, 'code': 'acOnTriggered := false\nblindsClosed := false\ncurtainsClosed := false\nlightsDimmed := false\nif (((#AirConditioner).switch_switch == ""on"") and (acOnTriggered == false)) {\n  acOnTriggered = true\n  blindsClosed = false\n  curtainsClosed = false\n  lightsDimmed = false\n}\nif (acOnTriggered == true) {\n  if (blindsClosed == false) {\n    wait until((#Clock).clock_timestamp >= (#Clock).clock_timestamp + 5000)\n    all(#Blind).blind_close()\n    blindsClosed = true\n  } else if ((curtainsClosed == false) and (all(#Curtain).curtain_curtain == ""open"")) {\n    wait until((#Clock).clock_timestamp >= (#Clock).clock_timestamp + 10000)\n    all(#Curtain).curtain_close()\n    curtainsClosed = true\n  } else if ((lightsDimmed == false) and (curtainsClosed == true or all(#Curtain).curtain_curtain != ""open"")) {\n    wait until((#Clock).clock_timestamp >= (#Clock).clock_timestamp + 20000)\n    all(#Light).switchLevel_setLevel(10, 1000)\n    lightsDimmed = true\n    break\n  }\n} else {\n  acOnTriggered = false\n  blindsClosed = false\n  curtainsClosed = false\n  lightsDimmed = false\n}'}]",0.7,"The generated code uses a triggered flag and timestamp checks, while the ground truth uses clock delays for timing."
8,섹터 에이에 있는 선풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#SectorA #Fan).switch_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'all(#SectorA #Fan).switch_off()'}]",0.95,"The generated code uses 'all' for device control, while the ground truth uses direct reference. The action is otherwise identical."
8,섹터 비와 섹터 에이에 있는 선풍기가 모두 켜져 있으면 홀수 태그가 붙은 블라인드 중 하나를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Fan #SectorA).switch_switch == \""on\"") and (all(#Fan #SectorB).switch_switch == \""on\"")) {\n  (#Odd #Blind).blind_close()\n}""}","[{'name': 'CloseOddBlindIfFansOn', 'cron': '', 'period': -1, 'code': 'if ((all(#SectorB #Fan).switch_switch == ""on"") and (all(#SectorA #Fan).switch_switch == ""on"")) {\n  (#Blind #odd).blind_close()\n}'}]",0.9,"The generated code and ground truth have different ordering of tags in the condition and action, but the logic is equivalent."
8,"홀수 태그가 붙은 선풍기 중 하나라도 켜져 있으면, 하단부에 있는 모든 관개 장치를 꺼 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Odd #Fan).switch_switch == \""on\"") {\n  all(#Lower #Irrigator).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Fan #Odd).switch_switch == ""on"") {\n  all(#Irrigator #Lower).switch_off()\n}'}]",0.9,"The generated code and ground truth have different ordering of tags in the condition and action, but the logic is equivalent."
8,짝수 태그가 붙은 창문이 열려 있으면 섹터 에이에 있는 선풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Even #Window).windowControl_window == \""open\"") {\n  (#SectorA #Fan).switch_off()\n}""}","[{'name': 'TurnOffFanIfEvenWindowOpen', 'cron': '', 'period': -1, 'code': 'if (any(#Window #Even).windowControl_window == ""open"") {\n  all(#Fan #SectorA).switch_off()\n}'}]",0.9,"The generated code uses 'any' and 'all' for device control, while the ground truth uses direct references. The logic is otherwise similar."
8,섹터 비에 있는 홀수 태그가 붙은 관개 장치를 모두 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#SectorB #Odd #Irrigator).switch_off()""}","[{'name': 'TurnOffOddIrrigatorsInSectorRain', 'cron': '', 'period': -1, 'code': 'all(#Irrigator #Odd #SectorB).switch_off()'}]",0.95,"The generated code and ground truth have different ordering of tags in the action, but the logic is equivalent."
8,상단부에 있는 짝수 태그가 붙은 창문이 열려 있으면 커튼을 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Upper #Even #Window).windowControl_window == \""open\"") {\n  (#Curtain).curtain_close()\n}""}","[{'name': 'CloseCurtainsIfWindowsOpen', 'cron': '', 'period': -1, 'code': 'if (any(#Window #Even #Upper).windowControl_window == ""open"") {\n  all(#Curtain).curtain_close()\n}'}]",0.9,"The generated code uses 'any' and 'all' for device control, while the ground truth uses direct references. The logic is otherwise similar."
8,"상단부에 있는 조명이 모두 꺼져 있으면, 홀수 태그가 붙은 모든 창문을 열어 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (all(#Upper #Light).switch_switch == \""off\"") {\n  all(#Odd #Window).windowControl_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (all(#Light #Upper).switch_switch == ""off"") {\n  all(#Window #Odd).windowControl_open()\n}'}]",0.95,"The generated code and ground truth have different ordering of tags in the condition and action, but the logic is equivalent."
8,짝수 태그가 붙은 스피커 중 하나라도 켜져 있으면 섹터 비에 있는 조명을 모두 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Even #Speaker).switch_switch == \""on\"") {\n  all(#SectorB #Light).switch_off()\n}""}","[{'name': 'TurnOffLightsIfEvenSpeakerOn', 'cron': '', 'period': -1, 'code': 'if (any(#Speaker #Even).switch_switch == ""on"") {\n  all(#Light #SectorB).switch_off()\n}'}]",0.9,"The generated code and ground truth have different ordering of tags in the condition and action, but the logic is equivalent."
8,벽에 있는 홀수 태그가 붙은 모든 블라인드가 열려 있으면 조명을 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (all(#Wall #Odd #Blind).blind_blind == \""open\"") {\n  (#Light).switch_off()\n}""}","[{'name': 'TurnOffLightsIfOddWallBlindsOpen', 'cron': '', 'period': -1, 'code': 'if (all(#Blind #Odd #Wall).blind_blind == ""open"") {\n  all(#Light).switch_off()\n}'}]",0.9,"The generated code and ground truth have different ordering of tags in the condition, but the logic is equivalent."
8,상단부에 있거나 섹터 에이에 있는 조명 중 하나가 켜져 있으면 선풍기를 모두 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((any(#Upper #Light).switch_switch == \""on\"") or (any(#SectorA #Light).switch_switch == \""on\"")) {\n  all(#Fan).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((any(#Upper #Light).switch_switch == ""on"") or (any(#SectorA #Light).switch_switch == ""on"")) {\n  all(#Fan).switch_on()\n}'}]",1.0,
6,매일 자정 선풍기가 꺼져 있으면 선풍기를 꺼 줘. 또한 그 때마다 선풍기를 꺼 줘,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * *"", ""period"": 0, ""code"": ""if ((#Fan).switch_switch == \""off\"") {\n  (#Fan).switch_off()\n  (#Fan).switch_off()\n}""}","[{'name': 'TurnOffFanAtMidnightIfOn', 'cron': '0 0 * * *', 'period': 0, 'code': 'if ((#Fan).switch_switch == ""on"") {\n  (#Fan).switch_off()\n}'}, {'name': 'TurnOffFanWheneverOn', 'cron': '', 'period': 100, 'code': 'if ((#Fan).switch_switch == ""on"") {\n  (#Fan).switch_off()\n}'}]",0.6,"The generated code includes two separate scenarios for turning off the fan, while the ground truth has a single scenario with a different condition."
4,주말에는 관개 장치가 꺼지면 관개 장치를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * 6,0"", ""period"": 0, ""code"": ""wait until((#Irrigator).switch_switch == \""off\"")\n(#Irrigator).switch_off()""}","[{'name': 'Scenario1', 'cron': '0 0 * * 6,0', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"") {\n  (#Irrigator).switch_off()\n}'}]",0.7,"The generated code uses a simple if condition, while the ground truth uses a wait until construct to achieve the same action."
7,실시간으로 확인하여 블라인드가 닫힌 상태에서 또 닫히면 전등을 켜 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""wasClosed := false\nif (wasClosed == true) {\n  if ((wasClosed == false) and ((#Blind).blind_blind == \""closed\"")) {\n    (#Light).switch_on()\n  }\n}\nwasClosed = ((#Blind).blind_blind == \""closed\"")""}","[{'name': 'BlindsClosedLightOn', 'cron': '', 'period': 100, 'code': 'blindsClosed := false\nif (all(#Blind).blind_blind == closed) {\n  if (blindsClosed == false) {\n    all(#Light).switch_on()\n    blindsClosed = true\n  }\n} else {\n  blindsClosed = false\n}'}]",0.8,"The generated code uses a flag to track blinds state, while the ground truth uses a different approach with a similar flag."
6,1초마다 확인하여 온도가 30도 미만이면서 25도 이상일 때마다 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""temp = (#TemperatureSensor).temperatureMeasurement_temperature\nif ((temp < 30.0) and (temp >= 25.0)) {\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'AirConditionerTemperatureControl', 'cron': '', 'period': 1000, 'code': 'if (((#TemperatureSensor).temperatureMeasurement_temperature < 30.0) and ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0)) {\n  (#AirConditioner).switch_on()\n}'}]",0.95,"The generated code uses direct comparison in the condition, while the ground truth assigns the temperature to a variable first. The logic is otherwise similar."
7,실시간으로 확인하여 재실 센서가 감지 상태일 때마다 10초 대기 후 조명의 밝기를 현재 밝기로 맞춰줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""wait until((#OccupancySensor).presenceSensor_presence == \""present\"")\n(#Clock).clock_delay(10000)\nlevel = (#Light).switchLevel_level\n(#Light).switchLevel_setLevel(level, 1)""}","[{'name': 'AdjustLightsAfterOccupancy', 'cron': '', 'period': 100, 'code': 'detected := false\nif (any(#OccupancySensor).presenceSensor_presence == ""present"") {\n  if (detected == false) {\n    detected = true\n    wait until((#Clock).clock_second % 60 != ((#Clock).clock_second - 10) % 60)\n    wait until((#Clock).clock_second % 60 == ((#Clock).clock_second + 10) % 60)\n    brightness = (#Light).switchLevel_level\n    if (brightness >= 0) {\n      all(#Light).switchLevel_setLevel(brightness, 0)\n    }\n  }\n} else {\n  detected = false\n}'}]",0.7,"The generated code uses a detected flag and complex wait conditions, while the ground truth uses a simple wait until and delay."
7,TV가 꺼져 있으면 10초 대기 후 다시 TV를 확인하여 켜져 있으면 TV를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Television).switch_switch == \""off\"") {\n  (#Clock).clock_delay(10000)\n  if ((#Television).switch_switch == \""on\"") {\n    (#Television).switch_on()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#Television).switch_switch == ""off"") {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(10000)\n    if ((#Television).switch_switch == ""off"") {\n      (#Television).switch_on()\n    }\n  }\n} else {\n  triggered = false\n}'}]",0.85,"The generated code uses a triggered flag to control execution, while the ground truth does not. The logic for checking and switching the television is similar."
3,"월, 수, 금에 실시간으로 확인하여 창문이 열려 있지 않으면 창문을 닫아 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 * * 1,3,5"", ""period"": 100, ""code"": ""if ((#Window).windowControl_window != \""open\"") {\n  (#Window).windowControl_close()\n}""}","[{'name': 'CloseWindowOnMonWedFri', 'cron': '0 * * * *', 'period': 10000, 'code': 'if (((#Clock).clock_weekday == monday) or ((#Clock).clock_weekday == wednesday) or ((#Clock).clock_weekday == friday)) {\n  if ((#Window).windowControl_window != open) {\n  } else {\n    (#Window).windowControl_close()\n  }\n} else {\n  break\n}'}]",0.6,"The generated code uses a cron expression and checks for specific weekdays, while the ground truth uses a different cron expression and a simpler condition."
7,"매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘. 그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘. 만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘.","{""name"": ""Scenario1"", ""cron"": ""0 9 * * *"", ""period"": 100, ""code"": ""phase := 0\nconsecutive_time := 0\nif ((#Clock).clock_weekday == \""saturday\"") or ((#Clock).clock_weekday == \""sunday\"") {\n  break\n}\n\nif (phase == 0) {\n  if ((#Window).windowControl_window == \""closed\"") and \n  ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and \n  ((#AirQualityDetector).temperatureMeasurement_temperature >= 30.0) {\n    (#Clock).clock_delay(5000)\n    (#Window).windowControl_open()\n    \n    if ((#Fan).switch_switch == \""off\"") {\n      (#Fan).switch_on()\n    }\n    \n    phase = 1  \n  }\n} \nelse if (phase == 1) {\n  if ((#AirQualityDetector).dustSensor_fineDustLevel >= 50) {\n    consecutive_time = consecutive_time + 100  \n  } else {\n    consecutive_time = 0\n  }\n  if (consecutive_time >= 60000) {\n    (#Window).windowControl_close()\n    (#Fan).switch_off()\n    \n    if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0) {\n      (#Humidifier).switch_on()\n    }\n    \n    if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) and ((#Irrigator).switch_switch == \""off\"") {\n      (#Irrigator).switch_on()\n    }\n    \n    break\n  }\n}""}","[{'name': 'MorningVentilationAndAirQualityControl', 'cron': '0 9 * * 1-5', 'period': 1000, 'code': 'ventilationStarted := false\npmOverThresholdStart := 0\nfanWasTurnedOn := false\nwaitAfterOpenDone := false\nweekdays := [""monday"", ""tuesday"", ""wednesday"", ""thursday"", ""friday""]\nif ((#Clock).clock_weekday == ""saturday"" or (#Clock).clock_weekday == ""sunday"") {\n  break\n}\nif (ventilationStarted == false) {\n  if (((all(#Window).windowControl_window == ""closed"") and\n       ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) and\n       ((#AirQualityDetector).temperatureMeasurement_temperature > 30.0))) {\n    waitAfterOpenDone = false\n    ventilationStarted = true\n    pmOverThresholdStart = 0\n    fanWasTurnedOn = false\n    wait until(waitAfterOpenDone == true)\n  } else {\n    break\n  }\n}\nif (ventilationStarted == true and waitAfterOpenDone == false) {\n  (#Window).windowControl_open()\n  (#Clock).clock_delay(5000)\n  if (any(#Fan).switch_switch == ""off"") {\n    all(#Fan).switch_on()\n    fanWasTurnedOn = true\n  }\n  waitAfterOpenDone = true\n}\npmLevel = (#AirQualityDetector).dustSensor_dustLevel\ncurrentTime = (#Clock).clock_timestamp\nif ((pmLevel > 50) == true) {\n  if (pmOverThresholdStart == 0) {\n    pmOverThresholdStart = currentTime\n  } else {\n    elapsed = currentTime - pmOverThresholdStart\n    if (elapsed >= 60000) {\n      all(#Window).windowControl_close()\n      if (fanWasTurnedOn == true) {\n        all(#Fan).switch_off()\n      }\n      hum = (#HumiditySensor).relativeHumidityMeasurement_humidity\n      soilHum = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\n      irrigatorState = (#Irrigator).switch_switch\n      if (hum < 40.0) {\n        all(#Humidifier).switch_on()\n      }\n      if ((soilHum < 25.0) and (irrigatorState == ""off"")) {\n        all(#Irrigator).switch_on()\n      }\n      break\n    }\n  }\n} else {\n  pmOverThresholdStart = 0\n}'}]",0.75,"The generated code uses a more complex state tracking mechanism, while the ground truth uses a simpler phase-based approach."
7,매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * *"", ""period"": 100, ""code"": ""state := 0\nsiren_triggered := false\ndoor_open_flag := false\ndoor_open_count := 0\nfirst_open_start := 0\nfirst_open_end := 0\nsecond_open_start := 0\nsecond_open_end := 0\n\nif (state == 0) {\n  if ((#Window #Lower).windowControl_window == \""open\"" and (#Light #Even).switch_switch == \""on\"") {\n    (#Alarm).alarm_siren()\n    siren_triggered = true\n  }\n  (#Clock).clock_delay(5000)\n  state = 1\n}\n\nif (state == 1) {\n  if (siren_triggered == true) {\n    (#Blind).blind_close()\n  }\n  state = 2\n}\n\nif (state == 2 and door_open_count >= 2) {\n  (#Curtain).curtain_close()\n  total_time = (first_open_end - first_open_start) + (second_open_end - second_open_start)\n  total_time = total_time * 1000\n  (#Alarm).alarm_siren()\n  (#Clock).clock_delay(total_time)\n  (#Alarm).alarm_off()\n  break\n}\n\nif ((#DoorLock #Odd).doorControl_door == \""open\"" and door_open_flag == false) {\n  door_open_flag = true\n  now = (#Clock).clock_timestamp\n  door_open_count = door_open_count + 1\n  if (door_open_count == 1) {\n    first_open_start = now\n  } else if (door_open_count == 2) {\n    second_open_start = now\n  }\n}\nif ((#DoorLock #Odd).doorControl_door == \""closed\"" and door_open_flag == true) {\n  door_open_flag = false\n  now = (#Clock).clock_timestamp\n  if (door_open_count == 1) {\n    first_open_end = now\n  } else if (door_open_count == 2) {\n    second_open_end = now\n  }\n}""}",[],0.0,"The generated code is missing entirely, while the ground truth contains complex logic for alarm and door control."
1,팔을 위로 들어.,{},[],1.0,
8,그룹1번의 습도가 하나라도 30미만이 되면 그룹1번의 관개장치를 켜줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(any(#Group1 #HumiditySensor).relativeHumidityMeasurement_humidity<30))\n (#Group1 #Irrigator).irrigatorOperatingState_startWatering()""
}","[{'name': 'IrrigateWhenHumidityLow', 'cron': '', 'period': 1000, 'code': 'triggered := false\nhumidity := (#HumiditySensor #Group1).relativeHumidityMeasurement_humidity\nif ((humidity < 30.0) and (triggered == false)) {\n  (#Irrigator #Group1).switch_on()\n  triggered = true\n} else if ((humidity >= 30.0) and (triggered == true)) {\n  triggered = false\n}'}]",0.7,"The generated code uses a triggered flag and direct control, while the ground truth uses a wait until construct for the same action."
8,홀수 태그가 붙은 창문이 하나라도 열려 있으면 홀수 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Odd #Window).windowControl_window == \""open\"") {\n  (#Odd #Blind).blind_close()\n}""}","[{'name': 'CloseOddBlindsWhenOddWindowsOpen', 'cron': '', 'period': -1, 'code': 'if (any(#Odd #Window).windowControl_window == ""open"") {\n  all(#Odd #Blind).blind_close()\n}'}]",0.95,"The generated code uses 'all' for device control, while the ground truth uses direct reference. The action is otherwise identical."
8,상단부에 있는 조명과 커튼이 모두 꺼져 있으면 스피커를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Upper #Light).switch_switch == \""off\"") and (all(#Curtain).curtain_curtain == \""closed\"")) {\n  (#Speaker).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((all(#Upper #Light).switch_switch == ""off"") and (all(#Upper #Curtain).curtain_curtain == ""closed"")) {\n  all(#Upper #Speaker).switch_on()\n}'}]",0.9,"The generated code uses 'all' for device control, while the ground truth uses direct reference. The logic is otherwise similar."
8,그룹2번의 습도가 모두 80을 초과하면 관개장치를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(all(#Group2 #HumiditySensor).relativeHumidityMeasurement_humidity > 80) {\n  (#Group2 #Irrigator).switch_off()\n}""}","[{'name': 'TurnOffIrrigationWhenHumidityHigh', 'cron': '', 'period': 1000, 'code': 'if ((all(#Group1).relativeHumidityMeasurement_humidity > 80.0) and (all(#Group2).relativeHumidityMeasurement_humidity > 80.0)) {\n  all(#Irrigator).switch_off()\n}'}]",0.6,"The generated code uses a direct if condition, while the ground truth uses a wait until construct for the same action."
8,홀수 태그의 커튼이 열려 있고 상단부 조명이 꺼져 있으면 창문을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Odd #Curtain).curtain_curtain == \""open\"") and (all(#Upper #Light).switch_switch == \""off\"")) {\n  (#Window).windowControl_open()\n}""}","[{'name': 'OpenWindowIfCurtainOpenAndTopLightOff', 'cron': '', 'period': -1, 'code': 'if ((#Curtain #Odd).curtain_curtain == ""open"") and ((#Light #Upper).switch_switch == ""off"") {\n  (#Window).windowControl_open()\n}'}]",0.9,"The generated code and ground truth have different ordering of tags in the condition, but the logic is equivalent."
8,거실 불을 모두 켜줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#Livingroom #Light).switch_on()""}","[{'name': 'TurnOnLivingRoomLights', 'cron': '', 'period': -1, 'code': 'all(#Livingroom #Light).switch_on()'}]",1.0,
8,하우스A 모두 닫아줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#SectorA).blind_close()""}","[{'name': 'CloseAllHouseA', 'cron': '', 'period': -1, 'code': 'all(#SectorA #Blind).blind_close()'}]",0.95,"The generated code uses 'all' for device control, while the ground truth uses direct reference. The action is otherwise identical."
8,그룹1번 태그 모두 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#Group1).switch_off()\n
all(#Group1).alarm_off()""}","[{'name': 'TurnOffAllGroup1', 'cron': '', 'period': -1, 'code': 'all(#Group1).switch_off()'}]",0.5,"The generated code only switches off the group, while the ground truth also turns off alarms."
8,상단부가 모두 꺼져있거나 닫혀있으면 모두 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Upper).switch_switch == \""off\"") and (all(#Upper).curtain_curtain == \""closed\"")) {\n  (#Upper).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((all(#Upper).switch_switch == ""off"") or (all(#Upper).curtain_curtain == ""closed"")) {\n  all(#Upper).switch_off()\n}'}]",0.7,"The generated code uses 'or' in the condition, while the ground truth uses 'and'. This changes the logic significantly."
8,그룹2번이 하나라도 80을 초과하면 그룹2번은 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(any(#Group2).relativeHumidityMeasurement_humidity > 80) {\n  (#Group2).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Group2).relativeHumidityMeasurement_humidity > 80.0) {\n  all(#Group2).switch_off()\n}'}]",0.7,"The generated code uses an 'if' statement to check humidity and switch off devices, while the ground truth uses a 'wait until' construct. This results in different control flow behavior."
1,알람의 사이렌과 경광등을 모두 켜줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()\n
(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'all(#Alarm).alarm_both()'}]",0.0,"The generated code activates alarms, whereas the ground truth deactivates them. The actions are semantically opposite."
9,가장 최근에 찍은 사진을 홍길동 이메일로 제목 '사진'과 내용 '사진입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""honggd@test.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(""Hong Gil-dong"", ""Photo"", ""This is a photo"", photo)'}]",0.8,The generated code sends an email with a photo but uses a different recipient address. The core logic is similar but the target email differs.
9,가장 최근에 찍은 동영상을 첨부파일로 장보고 이메일로 제목 '동영상'과 내용 '동영상입니다.'로 보내줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""jangbogo@naver.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'SendRecentVideoEmail', 'cron': '', 'period': -1, 'code': 'if ((#Camera).switch_switch == on) {\n  video = (#Camera).camera_video\n  if (video != null) {\n    (#EmailProvider).emailProvider_sendMailWithFile(""me"", ""Video"", ""This is a video."", video)\n  } else {\n    (#Speaker).mediaPlayback_speak(""전송할 수 있는 최근 동영상이 없습니다."")\n  }\n} else {\n  (#Speaker).mediaPlayback_speak(""카메라가 꺼져 있어 동영상을 전송할 수 없습니다."")\n}'}]",0.5,"The generated code includes conditional checks for camera status and video availability, while the ground truth directly sends the video without checks."
9,김무개 메일로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(""Kim"", ""Notification"", ""This is an emergency"")'}]",0.7,"The generated code sends an email with a different recipient and subject line, but the intent of sending an emergency notification is similar."
3,비가 오는데 창문이 열려있으면 창문을 닫아줘.,"{""name"": ""CloseWindowWhenRaining"",  ""cron"": """", ""period"": -1, ""code"": ""rain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") and ((#Window).windowControl_window == \""open\"") {\n  (#Window).windowControl_close()\n}""}","[{'name': 'CloseWindowWhenRaining', 'cron': '', 'period': -1, 'code': 'if (((#WeatherProvider).weatherProvider_weather == ""rain"") and ((#Window).windowControl_window == ""open"")) {\n  (#Window).windowControl_close()\n}'}]",0.9,"Both codes perform the same logic of closing the window when it rains, but the ground truth assigns the weather condition to a variable first."
3,문이 열렸다 닫히면 알림을 울려줘.,"{""name"": ""DoorClosedAlert"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#DoorLock).doorControl_door == \""open\"")\nwait until((#DoorLock).doorControl_door == \""closed\"")\n(#Alarm).alarm_siren()""}","[{'name': 'DoorOpenCloseNotification', 'cron': '', 'period': 100, 'code': 'notifiedOpen := false\nnotifiedClose := false\nif ((#DoorLock).doorControl_door == open) {\n  if (notifiedOpen == false) {\n    (#Speaker).mediaPlayback_speak(""이제 문이 열렸습니다."")\n    notifiedOpen = true\n    notifiedClose = false\n  }\n} else if ((#DoorLock).doorControl_door == closed) {\n  if (notifiedClose == false) {\n    (#Speaker).mediaPlayback_speak(""이제 문이 닫힙니다."")\n    notifiedClose = true\n    notifiedOpen = false\n  }\n} else {\n  notifiedOpen = false\n  notifiedClose = false\n}'}]",0.4,"The generated code provides notifications for door state changes, while the ground truth waits for the door to open and close before triggering an alarm."
3,문이 닫혔다 열리면 사진을 5초 단위로 찍어줘.,"{""name"": ""CaptureAfterDoorClosedAndOpened"", ""cron"": """",  ""period"": 100,  ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  wait until((#DoorLock).doorControl_door == \""open\"")\n  loop {\n    (#Camera).camera_take()\n    (#Clock).clock_delay(5000)\n  }\n}""}","[{'name': 'DoorOpenCloseCamera', 'cron': '', 'period': 100, 'code': 'state := ""unknown""\ntimer := 0\nlastDoorState := ""unknown""\ndoorState = (#DoorLock).doorControl_door\nif ((doorState == ""closing"") or (doorState == ""open"") or (doorState == ""opening"") or (doorState == ""closed"")) {\n  if (doorState != lastDoorState) {\n    state = doorState\n    timer = 0\n    (#Camera).camera_take()\n  } else {\n    timer = timer + period\n    if (timer >= 5000) {\n      timer = 0\n      (#Camera).camera_take()\n    }\n  }\n  lastDoorState = doorState\n} else {\n  state = ""unknown""\n  lastDoorState = doorState\n  timer = 0\n}'}]",0.6,"The generated code takes a photo when the door state changes, while the ground truth waits for the door to open after being closed and then takes photos in a loop."
3,불이 30분이상 켜져있으면 알림을 울려줘.,"{""name"": ""LightOnTooLongAlert"",  ""cron"": """",
  ""period"": -1,  ""code"": ""wait until((#Light).switch_switch == \""on\"")\n(#Clock).clock_delay(1800000)\nif ((#Light).switch_switch == \""on\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'LightOnNotification', 'cron': '', 'period': 10000, 'code': 'lightOnStartTime := 0\nnotificationPlayed := false\nif (any(#Light).switch_switch == ""on"") {\n  if (lightOnStartTime == 0) {\n    lightOnStartTime = (#Clock).clock_timestamp\n    notificationPlayed = false\n  }\n  elapsed := (#Clock).clock_timestamp - lightOnStartTime\n  if ((elapsed >= 1800000) and (notificationPlayed == false)) {\n    if (any(#Alarm)) {\n      all(#Alarm).alarm_siren()\n    } else if (any(#Siren)) {\n      all(#Siren).sirenMode_setSirenMode(\'siren\')\n    }\n    notificationPlayed = true\n  }\n} else {\n  lightOnStartTime = 0\n  notificationPlayed = false\n}'}]",0.8,"Both codes aim to trigger an alarm if the light remains on for 30 minutes, but the generated code uses a timestamp and elapsed time check, while the ground truth uses a wait and delay approach."
3,창문이 닫혀있다가 열리면 알림을 울려줘.,"{""name"": ""WindowIsClosedThenOpens"",  ""cron"": """",  ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""closed\"") {\n  wait until((#Window).windowControl_window == \""open\"")\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'WindowOpenCloseNotification', 'cron': '', 'period': 100, 'code': 'windowClosed := false\nif ((#Window).windowControl_window == ""closed"") {\n  if (windowClosed == false) {\n    windowClosed = true\n  }\n} else {\n  if ((#Window).windowControl_window == ""open"" and windowClosed == true) {\n    (#Speaker).mediaPlayback_speak(""창을 닫았다가 열기"")\n    windowClosed = false\n  } else if ((#Window).windowControl_window != ""open"") {\n    windowClosed = false\n  }\n}'}]",0.5,"The generated code provides a notification when the window is closed and then opened, while the ground truth triggers an alarm in the same situation."
9,"주소록에서 나를 제외한 모든 사람에게 이메일로 내 생일을 알려주는 내용으로 메일을 보내줘. 제목은 ""생일 알림"", 내용은 ""제 생일은 ~입니다""로 보내줘.","{""name"": ""BirthdayNotification"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""honggd@test.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""jangbogo@naver.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(""everyone_except_me@example.com"", ""Birthday reminder"", ""My birthday is on ."")'}]",0.3,"The generated code sends a birthday reminder to a generic email, while the ground truth sends detailed birthday reminders to specific emails."
9,"매년 내 생일이 되면 아침 9시에 ""생일 축하합니다"" 노래를 불러 줘.","{""name"": ""BirthdayGreeting"",
  ""cron"": ""0 9 3 3 *"",
  ""period"": 0,
  ""code"": ""(#Speaker).mediaPlayback_speak(\""생일 축하합니다\"")""
}","[{'name': 'BirthdaySong', 'cron': '0 9 16 6 *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""생일 축하"")'}]",0.6,"Both codes play a birthday message, but the cron schedules differ, and the message content is slightly different."
9,"알림이 울리면, 나와 홍길동에게 제목은 알림 발생, 내용은 알림이 울렸습니다라고 작성해서 메일을 보내줘. ","{""name"": ""AlarmAlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Alarm).alarm_alarm == ""siren"")\n(#EmailProvider).emailProvider_sendMailWithFile(""abcd1234@test.com"", ""Alert Triggered"", ""The alarm has turned on."")\n(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Alert Triggered"", ""The alarm has turned on."")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(any(#Alarm).alarm_alarm == true)\n(#EmailProvider).emailProvider_sendMail(""user@example.com"", ""Notification occurred"", ""Notification went off"")'}]",0.5,"The generated code waits for any alarm to be true and sends a notification, while the ground truth waits for a specific alarm state and sends emails with files."
9,"낙상 감지 센서에서 낙상이 감지된 상태이면, 내 주변사람들에게 제목은 ""낙상 감지"", 내용은 ""제가 넘어졌습니다. 도와주세요""로 메일을 보내줘.","{""name"": ""AlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#FallSensor).fallDetection_fall == ""detected"")
(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""kim@example.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""jangbogo@naver.com"", ""Fall Detected"", ""I have fallen. Please help me."")}""","[{'name': 'FallDetectionAlert', 'cron': '', 'period': -1, 'code': 'wait until((#FallDetector).fallDetection_fall == fall)\n(#EmailProvider).emailProvider_sendMail(""people_close@example.com"", ""Fall Detection"", ""I fell. Please help me."")'}]",0.4,"The generated code waits for a fall detection and sends a single email, while the ground truth sends multiple emails with files upon detection."
3,비어있다가 누군가 감지되면 알림을 울려줘.,"{""name"": ""AlertOnPresenceAfterEmpty"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""not present\"") {\n  wait until ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n    (#Alarm).alarm_siren()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'empty_prev := false\npresence_prev := false\npresence_now = false\nempty_now = false\nif (any(#PresenceSensor).presenceSensor_presence == #PresenceSensor.presenceSensor_presence.not_present) {\n  empty_now = true\n} else {\n  empty_now = false\n}\npresence_now = any(#PresenceSensor).presenceSensor_presence == #PresenceSensor.presenceSensor_presence.present\nif ((empty_now == true) and (presence_now == true) and (presence_prev == false)) {\n  all(#Light).switchLevel_alert()\n}\npresence_prev = presence_now\nempty_prev = empty_now'}]",0.5,"The generated code checks for presence changes and alerts with lights, while the ground truth waits for presence and triggers an alarm."
4,조명이 꺼져 있고 사람이 감지되면 3초 후 조명을 켜 줘.,"{""name"": ""LightOnIfPersonDetected"",
  ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""off\"") and ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#clock).delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'TurnOnLightsWhenPersonDetected', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#Light).switch_switch == ""off"" and any(#MotionSensor).motionSensor_motion == ""active"") {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(3000)\n    (#Light).switch_on()\n  }\n} else {\n  triggered = false\n}'}]",0.7,"Both codes aim to turn on lights after detecting a person, but the generated code uses a motion sensor while the ground truth uses a presence sensor."
4,문이 열려 있고 10초 이상 그대로면 알림을 울려 줘.,"{""name"": ""DoorOpenTooLongAlert"",
  ""cron"": """", ""period"": -1,  ""code"": ""if ((#Door).doorControl_door == \""open\"") {\n  (#Clock).clock_delay(10000)\n  if ((#Door).doorControl_door == \""open\"") {\n    (#Alarm).alarm_siren()\n  }\n}""
}","[{'name': 'DoorOpenUnlockNotification', 'cron': '', 'period': 100, 'code': 'doorOpenDuration := 0\ndoorPreviouslyOpen := false\nif ((#DoorLock).doorControl_door == ""open"") {\n  if (doorPreviouslyOpen == false) {\n    doorPreviouslyOpen = true\n    doorOpenDuration = 0\n  } else {\n    doorOpenDuration = doorOpenDuration + 100\n  }\n  if (doorOpenDuration > 10000) {\n    (#Speaker).mediaPlayback_speak(""문이 열려 있고 잠겨 있지 않은 상태입니다."")\n    doorOpenDuration = 0\n  }\n} else {\n  doorPreviouslyOpen = false\n  doorOpenDuration = 0\n}'}]",0.6,"Both codes check if the door remains open for a period, but the generated code uses a timer and notification, while the ground truth uses a delay and alarm."
4,습도가 30% 이하로 떨어진 뒤 5초가 지나면 가습기를 켜 줘.,"{""name"": ""HumidityLowThenHumidifier"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity <=30)\n(#Clock).clock_delay(5000)\n(#Humidifier).switch_on()""}","[{'name': 'Humidifier On Delay After Low Humidity', 'cron': '', 'period': 100, 'code': 'triggered := false\nwaited := false\nif ((#HumiditySensor).relativeHumidityMeasurement_humidity < 30.0) {\n  if (triggered == false) {\n    triggered = true\n    waited = false\n  }\n  if (waited == false) {\n    (#Clock).clock_delay(5000)\n    waited = true\n    all(#Humidifier).switch_on()\n  }\n} else {\n  triggered = false\n  waited = false\n}'}]",0.8,"Both codes activate the humidifier after detecting low humidity and a delay, but the generated code uses a flag-based approach while the ground truth uses 'wait until'."
4,창문이 열린 후 5초 내에 조명이 켜져 있으면 조명을 켜 줘.,"{""name"": ""WindowOpenThenLight"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Clock).clock_delay(5000)\nif ((#Light).switch_switch == \""on\"") {\n (#Light).switch_on()\n}""}","[{'name': 'LightOnAfterWindowOpen', 'cron': '', 'period': 100, 'code': 'windowOpenedTime := -1\nlightTurnedOn := false\nif (((#Window).windowControl_window == ""open"") and (windowOpenedTime == -1)) {\n  windowOpenedTime = (#Clock).clock_timestamp\n  lightTurnedOn = false\n}\nif ((windowOpenedTime != -1) and (lightTurnedOn == false)) {\n  elapsed = (#Clock).clock_timestamp - windowOpenedTime\n  if (elapsed <= 5000) {\n    if ((#Light).switch_switch == ""off"") {\n      (#Light).switch_on()\n      lightTurnedOn = true\n    }\n  } else {\n    windowOpenedTime = -1\n  }\n}\nif ((#Window).windowControl_window != ""open"") {\n  windowOpenedTime = -1\n  lightTurnedOn = false\n}'}]",0.7,"Both codes aim to turn on the light after the window opens, but the generated code uses a timestamp and elapsed time check, while the ground truth uses a delay."
4,"5초마다 움직임을 감지하고, 감지되면 2초 대기 후 알람을 울려 줘.","{""name"": ""MotionDetectedAlarm"", ""cron"": """", ""period"": 5000, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#clock).delay(2000)\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'MotionAlarm', 'cron': '', 'period': 5000, 'code': 'triggered := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(2000)\n    all(#Alarm).alarm_siren()\n  }\n} else {\n  triggered = false\n}'}]",0.9,"Both codes trigger an alarm after detecting motion and a delay, but the generated code uses a flag to prevent repeated triggering."
