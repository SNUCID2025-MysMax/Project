category_analysis,command,GT,generated_code,cloud_similarity_gpt4o,explanation
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_siren()'}]",1.0,
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""siren\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#Siren).switch_on()\n(#Siren).sirenMode_setSirenMode('siren')""}]",0.7,"The generated code includes an additional action to switch on the siren before setting the mode, which is not present in the ground truth."
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_strobe()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_strobe()'}]",1.0,
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""strobe\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Siren).switch_on()\n(#Siren).sirenMode_setSirenMode(""strobe"")'}]",0.7,"The generated code includes an additional action to switch on the siren before setting the mode, which is not present in the ground truth."
1,사이렌과 경광등을 동시에 켜 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_both()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_both()'}]",1.0,
1,사이렌과 경광등을 둘 다 꺼 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'all(#Siren).sirenMode_setSirenMode(""off"")'}]",0.9,"The generated code applies the action to all sirens, while the ground truth applies it to a single siren."
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Sound alarm when occupancy detected', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#OccupancySensor).presenceSensor_presence == present) {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code includes a triggered state mechanism and a different period, which adds complexity not present in the ground truth."
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#PresenceSensor).presenceSensor_presence == present) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code uses an unquoted value for presence, while the ground truth uses a quoted string."
2,에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_airConditionerMode == \""cool\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'AirConditionerCoolingAlarmSiren', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""cool"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
2,에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_targetTemperature == 30) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'AlarmIfACTemp30', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_targetTemperature == 30.0) {\n  if (any(#Alarm)) {\n    (#Alarm).alarm_siren()\n  }\n}'}]",0.8,"The generated code includes a check for any alarm and uses a float for temperature, while the ground truth uses an integer."
1,에어컨을 자동 모드로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#AirConditioner).airConditionerMode_setAirConditionerMode('auto')""}]",1.0,
1,알람을 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_off()'}]",1.0,
1,블라인드를 70 퍼센트로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blindLevel_setBlindLevel(70)""}","[{'name': 'SetBlindsLevel', 'cron': '', 'period': -1, 'code': 'level = 70\n(#Blind).blindLevel_setBlindLevel(level)'}]",0.9,"The generated code uses a variable to set the blind level, while the ground truth uses a direct value."
2,블라인드 움직임을 멈춰줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blind_pause()""}","[{'name': 'StopBlindMovement', 'cron': '', 'period': -1, 'code': 'all(#Blind).blind_pause()'}]",0.9,"The generated code applies the action to all blinds, while the ground truth applies it to a single blind."
2,버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Buttonx4).buttonx4_button4 == \""swipe_up\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#Buttonx4).buttonx4_button4 == swipe_up) {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code includes a triggered state mechanism and a different period, which adds complexity not present in the ground truth."
1,10을 3으로 나눈 나머지를 구해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Calculator).calculator_mod(10, 3)""}","[{'name': 'FindRemainder', 'cron': '', 'period': -1, 'code': 'result = (#Calculator).calculator_mod(10, 3)'}]",0.9,"The generated code assigns the result to a variable, while the ground truth does not."
9,"가장 최근에 찍은 사진을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'SendPhotoEmail', 'cron': '', 'period': -1, 'code': 'image = (#Camera).camera_take()\n(#EmailProvider).emailProvider_sendMailWithFile(""test@example.com"", ""Photo"", ""This is a photo"", image)'}]",0.7,The generated code uses a different method to obtain the image and does not include a period in the email body.
9,"가장 최근에 찍은 동영상을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'SendRecentVideoEmail', 'cron': '', 'period': -1, 'code': 'videoData = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(""test@example.com"", ""Video"", ""This is a video."", videoData)'}]",0.9,The generated code uses a different variable name for the video data.
1,카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Camera).camera_takeTimelapse(10, 2)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'duration = 10.0\nspeed = 2.0\n(#Camera).camera_takeTimelapse(duration, speed)'}]",0.9,"The generated code uses variables for duration and speed, while the ground truth uses direct values."
2,지금이 오후 3시 15분이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_time == 1515) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'AlarmSirenAtThreeFifteen', 'cron': '15 15 * * *', 'period': -1, 'code': '(#Alarm).alarm_siren()'}]",0.8,"The generated code uses a cron expression for scheduling, while the ground truth uses a conditional check on the clock time."
2,올해가 2025년이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_year == 2025) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""if ((#Clock).clock_year == 2025) {\n  if (any(#Alarm)) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode('siren')\n  }\n}""}]",0.7,"The generated code includes additional logic for checking and setting sirens, which is not present in the ground truth."
4,1시간 20분 30초 뒤에 알람의 사이렌을 울려줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(4830000)""}","[{'name': 'DelayedAlarmSiren', 'cron': '', 'period': -1, 'code': 'hour = 1\nminute = 20\nsecond = 30\ntotalSeconds = hour * 3600 + minute * 60 + second\n(#Timer).timer_set(""AlarmDelay"", totalSeconds)\n(#Timer).timer_start(""AlarmDelay"")\nwait until((#Timer).timer_isSet(""AlarmDelay"") == false)\n(#Alarm).alarm_siren()'}]",0.5,"The generated code uses a complex timer setup for delay, while the ground truth uses a direct clock delay function."
2,접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#ContactSensor).contactSensor_contact == \""closed\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Sound alarm siren if contact sensor is contacted', 'cron': '', 'period': -1, 'code': ""if ((#ContactSensor).contactSensor_contact == closed) {\n  if (any(#Alarm)) {\n    (#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    (#Siren).sirenMode_setSirenMode('siren')\n  }\n}""}]",0.7,"The generated code includes additional logic for checking and setting sirens, which is not present in the ground truth."
9,이메일을 'test@example.com' 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""test@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(""test@example.com"", ""Alert"", ""This is an emergency"")'}]",0.9,"The generated code does not include a period in the email body, while the ground truth does."
3,가스 밸브가 열려 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#GasValve).valve_valve == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Sound alarm if gas valve is open', 'cron': '', 'period': -1, 'code': 'if ((#GasValve).valve_valve == ""open"") {\n  if (any(#Alarm)) {\n    (#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    (#Siren).switch_on()\n    (#Siren).sirenMode_setSirenMode(""siren"")\n  }\n}'}]",0.7,"The generated code includes additional logic for checking and setting sirens, which is not present in the ground truth."
1,관개 장치의 급수를 시작해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Irrigator).irrigatorOperatingState_startWatering()'}]",1.0,
2,누수가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LeakSensor).leakSensor_leakage == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'LeakAlarmSiren', 'cron': '', 'period': -1, 'code': 'if ((#LeakSensor).leakSensor_leakage == detected) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code uses an unquoted value for leakage, while the ground truth uses a quoted string."
1,조명을 빨간색으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).colorControl_setColor(\""255|0|0\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).colorControl_setColor(""255|0|0"")'}]",1.0,
1,5의 속도로 조명의 밝기를 80으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switchLevel_setLevel(80, 5)""}","[{'name': 'SetLightBrightness', 'cron': '', 'period': -1, 'code': 'level = 80\nrate = 5\n(#Light).switchLevel_setLevel(level, rate)'}]",0.9,"The generated code uses variables for level and rate, while the ground truth uses direct values."
1,조명의 전원을 토글해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switch_toggle()""}","[{'name': 'ToggleLightPower', 'cron': '', 'period': -1, 'code': '(#Light).switch_toggle()'}]",1.0,
2,모션 센서가 활성 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'MotionSensor Alarm Siren', 'cron': '', 'period': 1000, 'code': 'triggered := false\nif ((#MotionSensor).motionSensor_motion == active) {\n  if (triggered == false) {\n    all(#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code includes a triggered state mechanism and a different period, which adds complexity not present in the ground truth."
2,움직임이 감지되고 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'SoundSirenOnMotion', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (triggered == false) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code includes a triggered state mechanism and a different period, which adds complexity not present in the ground truth."
2,존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Sound alarm siren on presence detected', 'cron': '', 'period': -1, 'code': 'if (any(#PresenceSensor).presenceSensor_presence == present) {\n  if (any(#Alarm).alarm_alarm != siren) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren).switch_switch != on or any(#Siren).sirenMode_sirenMode != siren) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode(siren)\n  }\n}'}]",0.7,"The generated code includes additional logic for checking and setting sirens, which is not present in the ground truth."
2,펌프가 열려있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Pump).pump_pump == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Pump).pump_pump == open) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code uses an unquoted value for pump status, while the ground truth uses a quoted string."
2,연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SmokeDetector).smokeDetector_smoke == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Smoke Alarm Siren', 'cron': '', 'period': -1, 'code': 'if ((#SmokeDetector).smokeDetector_smoke == detected) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code uses an unquoted value for smoke detection, while the ground truth uses a quoted string."
1,스피커에서 music.mp3를 재생해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Speaker).mediaPlayback_play(\""music.mp3\"")""}","[{'name': 'PlayMusicOnSpeaker', 'cron': '', 'period': -1, 'code': '(#Speaker).mediaPlayback_play(""music.mp3"")'}]",1.0,
1,녹음기로 10초 동안 녹음해서 test.wav로 저장해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Recorder).audioRecord_record(\""test.wav\"", 10)""}","[{'name': 'RecordAudio', 'cron': '', 'period': -1, 'code': '(#Recorder).audioRecord_record(""test.wav"", 10.0)'}]",0.9,"The generated code uses a float for the duration, while the ground truth uses an integer."
2,현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 25) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'AlarmSirenOnHighTemp', 'cron': '', 'period': -1, 'code': 'temp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (temp > 25.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.8,"The generated code uses a greater than comparison, while the ground truth uses a greater than or equal to comparison."
3,바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_humidityWeather >= 80) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'High Outdoor Humidity Alarm', 'cron': '', 'period': -1, 'code': 'if ((#WeatherProvider).weatherProvider_humidityWeather > 80.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.8,"The generated code uses a greater than comparison, while the ground truth uses a greater than or equal to comparison."
3,바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_pm25Weather >= 50) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'AlarmOnFineParticulateAbove50', 'cron': '', 'period': 0, 'code': ""if ((#WeatherProvider).weatherProvider_pm25Weather > 50.0) {\n  if (any(#Alarm)) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode('siren')\n  }\n}""}]",0.7,"The generated code includes additional logic for checking and setting sirens, which is not present in the ground truth."
3,창문이 열린 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'AlarmSirenIfWindowOpen', 'cron': '', 'period': -1, 'code': 'if (any(#Window).windowControl_window == ""open"") {\n  if (any(#Alarm).alarm_alarm == ""siren"") {\n  } else if (any(#Alarm)) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode(""siren"")\n  }\n}'}]",0.7,"The generated code includes additional logic for checking and setting sirens, which is not present in the ground truth."
2,낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#FallDetector).fallDetection_fall == \""fall\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'FallDetectionAlarm', 'cron': '', 'period': -1, 'code': 'if ((#FallDetector).fallDetection_fall == fall) {\n  if (any(#Alarm).alarm_alarm != siren) {\n    if (any(#Alarm)) {\n      all(#Alarm).alarm_siren()\n    } else if (any(#Siren)) {\n      all(#Siren).switch_on()\n      all(#Siren).sirenMode_setSirenMode(siren)\n    }\n  }\n}'}]",0.7,"The generated code includes additional logic for checking and setting sirens, which is not present in the ground truth."
2,점유 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Sound alarm on occupancy detected', 'cron': '', 'period': 100, 'code': 'triggered := false\nif (any(#OccupancySensor).presenceSensor_presence == present) {\n  if (triggered == false) {\n    all(#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code includes a triggered state mechanism and a different period, which adds complexity not present in the ground truth."
1,테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Timer).timer_add(\""Test Timer\"", 60)""}","[{'name': 'AddTestTimer', 'cron': '', 'period': -1, 'code': '(#Timer).timer_add(""Test Timer"", 60)'}]",1.0,
5,토양 수분이 30% 이하이고 조명이 꺼져 있으면 관개 장치를 작동시키고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) and ((#Light).switch_switch == \""off\"")) {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'SoilMoistureBelow30AndLightOff', 'cron': '', 'period': -1, 'code': 'soilMoisture = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nlightSwitch = (#Light).switch_switch\nif ((soilMoisture < 30.0) and (lightSwitch == ""off"")) {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}'}]",0.8,"The generated code uses a less than comparison, while the ground truth uses a less than or equal to comparison."
2,온도가 33도 이상이면 제습기를 켜고 커튼을 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}""}","[{'name': 'HighTempDehumidifierCurtain', 'cron': '', 'period': -1, 'code': 'temp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (temp > 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}'}]",0.8,"The generated code uses a greater than comparison, while the ground truth uses a greater than or equal to comparison."
5,이산화탄소가 1000ppm 이상이고 블라인드가 열려 있으면 환풍기를 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Blind).blind_blind == \""open\"")) {\n  (#Fan).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'CO2 Alert with Blinds Control', 'cron': '', 'period': 1000, 'code': 'triggered := false\nco2 = (#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide\nblindsOpen = (#Blind).blind_blind == ""open""\nif ((co2 > 1000.0) and (blindsOpen == true)) {\n  if (triggered == false) {\n    (#Fan).switch_on()\n    (#Blind).blind_close()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code includes a triggered state mechanism and a different period, which adds complexity not present in the ground truth."
5,온도가 29도 이상이고 습도가 80% 이상이며 조명이 꺼져 있으면 에어컨을 켜고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) and ((#Light).switch_switch == \""off\"")) {\n  (#AirConditioner).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'TemperatureHumidityLightControl', 'cron': '', 'period': -1, 'code': 'temp = (#TemperatureSensor).temperatureMeasurement_temperature\nhumidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\nlightsOff = all(#Light).switch_switch == ""off""\nif ((temp > 29.0) and (humidity > 80.0) and (lightsOff == true)) {\n  (#AirConditioner).switch_on()\n  all(#Light).switch_on()\n}'}]",0.8,"The generated code uses greater than comparisons, while the ground truth uses greater than or equal to comparisons."
5,조명이 켜져 있고 창문이 닫혀 있으면 커튼을 열고 환풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Curtain).curtain_open()\n  (#Fan).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((any(#Light).switch_switch == ""on"") and (all(#Window).windowControl_window == ""closed"")) {\n  all(#Curtain).curtain_open()\n  all(#Fan).switch_off()\n}'}]",0.9,"The generated code applies actions to all curtains and fans, while the ground truth applies them to single instances."
5,TV가 꺼져 있고 스피커가 재생 중이면 TV를 켜고 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Speaker).mediaPlayback_playbackStatus == \""playing\"")) {\n  (#Television).switch_on()\n  (#Speaker).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""off"") and ((#Speaker).mediaPlayback_playbackStatus == ""playing"")) {\n  (#Television).switch_on()\n  (#Speaker).switch_off()\n}'}]",1.0,
5,조명이 켜져 있고 블라인드가 열려 있으며 움직임이 감지되면 조명을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Blind).blind_blind == \""open\"") and ((#MotionSensor).motionSensor_motion == \""active\"")) {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Light).switch_switch == ""on"") and ((#Blind).blind_blind == ""open"") and ((#MotionSensor).motionSensor_motion == ""active"")) {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}'}]",1.0,
5,알람이 꺼져 있고 조명이 꺼져 있으며 커튼이 열려 있으면 사이렌을 울리고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Alarm).alarm_alarm == \""off\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Alarm).alarm_siren()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Alarm).alarm_alarm == ""off"") and ((#Light).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""open"")) {\n  (#Alarm).alarm_siren()\n  (#Light).switch_on()\n}'}]",1.0,
5,에어컨이 꺼져 있고 커튼이 닫혀 있으면 에어컨을 켜고 커튼을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"")) {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}'}]",1.0,
5,창문이 열려 있고 조명이 꺼져 있으며 커튼이 닫혀 있으면 조명을 켜고 커튼을 열어 줘. 또한 관수기가 꺼져 있고 토양 수분이 40% 이하이면 관수기를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 40.0)) {\n  (#Irrigator).switch_on()\n}""}","[{'name': 'WindowLightCurtainControl', 'cron': '', 'period': -1, 'code': 'windowsOpen = any(#Window).windowControl_window == ""open""\nlightsOff = all(#Light).switch_switch == ""off""\ncurtainsClosed = all(#Curtain).curtain_curtain == ""closed""\nif ((windowsOpen == true) and (lightsOff == true) and (curtainsClosed == true)) {\n  all(#Light).switch_on()\n  all(#Curtain).curtain_open()\n}'}, {'name': 'IrrigatorSoilMoistureControl', 'cron': '', 'period': -1, 'code': 'irrigatorOff = all(#Irrigator).switch_switch == ""off""\nsoilBelow40 = any(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 40.0\nif ((irrigatorOff == true) and (soilBelow40 == true)) {\n  all(#Irrigator).switch_on()\n}'}]",0.8,"The generated code uses different logic for checking conditions (e.g., 'any' vs. direct condition) and has a different structure for the second scenario."
5,환풍기가 꺼져 있고 이산화탄소 수치가 1000 이상이며 커튼이 닫혀 있으면 환풍기를 켜고 커튼을 열어 줘. 조명이 꺼져 있고 온도가 27도 이상이면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Fan).switch_switch == \""off\"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Light).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 27.0)) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Fan).switch_switch == ""off"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) and ((#Curtain).curtain_curtain == ""closed"")) {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#Light).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 27.0)) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}'}]",0.9,"The generated code uses '>' instead of '>=' for conditions, which might lead to different triggering behavior."
5,에어컨이 꺼져 있고 온도가 29도 이상이며 습도가 70% 이상이면 제습기를 제습 모드로 설정하고 켜 줘. 커튼이 열려 있고 조명이 꺼져 있으면 커튼을 닫고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)) {\n  (#Dehumidifier).airConditionerMode_setAirConditionerMode(\""dehumidifying\"")\n  (#Dehumidifier).switch_on()\n}\nif (((#Curtain).curtain_curtain == \""open\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).switch_switch == ""off"") and ((#AirQualityDetector).temperatureMeasurement_temperature > 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 70.0)) {\n  (#Dehumidifier).dehumidifierMode_setDehumidifierMode(""dehumidifying"")\n  (#Dehumidifier).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#Curtain).curtain_curtain == ""open"") and ((#Light).switch_switch == ""off"")) {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}'}]",0.85,The generated code uses '>' instead of '>=' for conditions and uses a different method for setting the dehumidifier mode.
5,조명이 꺼져 있고 움직임이 감지되지 않으며 커튼이 열려 있으면 조명을 켜고 커튼을 닫아 줘. 관수기가 꺼져 있고 창문이 닫혀 있으면 관수기를 켜고 창문을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""off\"") and ((#MotionSensor).motionSensor_motion == \""inactive\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_close()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((all(#Light).switch_switch == ""off"") and (all(#MotionSensor).motionSensor_motion == ""inactive"") and (all(#Curtain).curtain_curtain == ""open"")) {\n  all(#Light).switch_on()\n  all(#Curtain).curtain_close()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((all(#Irrigator).switch_switch == ""off"") and (all(#Window).windowControl_window == ""closed"")) {\n  all(#Irrigator).switch_on()\n  all(#Window).windowControl_open()\n}'}]",0.9,"The generated code uses 'all' for conditions, which might lead to different triggering behavior compared to the ground truth."
5,블라인드가 열려 있고 조명이 꺼져 있으며 습도가 80% 이상이면 블라인드를 닫고 조명을 켜 줘. 창문이 닫혀 있고 에어컨이 꺼져 있으면 창문을 열고 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Blind).blind_blind == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)) {\n  (#Blind).blind_close()\n  (#Light).switch_on()\n}\nif (((#Window).windowControl_window == \""closed\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#Window).windowControl_open()\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Control blinds and lights based on humidity', 'cron': '', 'period': -1, 'code': 'if (((#Blind).blind_blind == ""open"") and ((#Light).switch_switch == ""off"") and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0)) {\n  all(#Blind).blind_close()\n  all(#Light).switch_on()\n}'}, {'name': 'Control windows and air conditioner', 'cron': '', 'period': -1, 'code': 'if (((#Window).windowControl_window == ""closed"") and ((#AirConditioner).switch_switch == ""off"")) {\n  all(#Window).windowControl_open()\n  all(#AirConditioner).switch_on()\n}'}]",0.9,"The generated code uses '>' instead of '>=' for humidity conditions, which might lead to different triggering behavior."
5,TV가 꺼져 있고 블라인드가 닫혀 있으며 커튼이 열려 있으면 TV를 켜고 블라인드를 열어 줘. 에어컨이 자동 모드가 아니고 꺼져 있으면 자동 모드로 설정하고 전원을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Blind).blind_blind == \""closed\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode != \""auto\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""off"") and ((#Blind).blind_blind == closed) and ((#Curtain).curtain_curtain == open)) {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).airConditionerMode_airConditionerMode != auto) and ((#AirConditioner).switch_switch == off)) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(auto)\n  (#AirConditioner).switch_on()\n}'}]",0.95,"The generated code uses unquoted strings for some conditions, which might lead to syntax errors."
5,문이 열려 있고 알람이 꺼져 있으면 사이렌을 울리고 블라인드가 열려 있으면 닫아 줘. 에어컨이 꺼져 있고 온도가 30도 이상이면 냉방 모드로 설정하고 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#DoorLock).doorControl_door == \""open\"") and ((#Alarm).alarm_alarm == \""off\"")) {\n  (#Siren).sirenMode_setSirenMode(\""siren\"")\n  if ((#Blind).blind_blind == \""open\"") {\n    (#Blind).blind_close()\n  }\n}\nif (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0)) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""cool\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""if (((#DoorLock).doorControl_door == open) and ((#Alarm).alarm_alarm == off)) {\n  (#Siren).sirenMode_setSirenMode('siren')\n}\nif ((#Blind).blind_blind == open) {\n  (#Blind).blind_close()\n}""}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 30.0)) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\'cool\')\n  (#AirConditioner).switch_on()\n}'}]",0.85,The generated code uses unquoted strings and lacks nested if structure for the blind condition.
5,TV가 꺼져 있고 커튼이 닫혀 있으며 선풍기가 꺼져 있으면 TV를 켜고 커튼을 열어 줘. 스피커가 재생 중이고 조명이 꺼져 있으면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"") and ((#Fan).switch_switch == \""off\"")) {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Speaker).mediaPlayback_playbackStatus == \""playing\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"") and ((#Fan).switch_switch == ""off"")) {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#Speaker).mediaPlayback_playbackStatus == ""playing"") and ((#Light).switch_switch == ""off"")) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}'}]",1.0,
5,TV가 켜져 있고 스피커가 꺼져 있으며 조명이 꺼져 있으면 스피커를 켜고 조명을 켜 줘. 에어컨이 난방 모드이고 온도가 21도 이상이면 에어컨을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""on\"") and ((#Speaker).switch_switch == \""off\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Speaker).switch_on()\n  (#Light).switch_on()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode == \""heat\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 21.0)) {\n  (#AirConditioner).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (((#Television).switch_switch == ""on"") and ((#Speaker).switch_switch == ""off"") and (all(#Light).switch_switch == ""off"")) {\n  (#Speaker).switch_on()\n  all(#Light).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if (((#AirConditioner).airConditionerMode_airConditionerMode == ""heat"") and ((#AirConditioner).airConditionerMode_targetTemperature > 21.0)) {\n  (#AirConditioner).switch_off()\n  all(#Blind).blind_close()\n}'}]",0.85,The generated code uses 'all' for light condition and checks target temperature directly instead of using a sensor.
6,매일 아침 8시에 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8 * * *"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'TurnOnLightsAt8AM', 'cron': '0 8 * * *', 'period': -1, 'code': '(#Light).switch_on()'}]",1.0,
6,매일 오후 6시부터 7시 사이에 15초마다 커튼을 닫았다 열었다 해 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 18 * * *"", ""period"": 15000, ""code"": ""curtain_action := true\nif ((#Clock).clock_hour == 18) {\n  if (curtain_action == true) {\n    (#Curtain).curtain_close()\n    curtain_action = false\n  } else {\n    (#Curtain).curtain_open()\n    curtain_action = true\n  }\n} else {\n  break\n}""}","[{'name': 'CurtainToggleEvery15SecBetween6and7pm', 'cron': '0 18 * * *', 'period': 15000, 'code': 'state := ""closing""\nhour = 0\nif ((#Clock).clock_hour >= 19) {\n  break\n}\nhour = (#Clock).clock_hour\nif (hour < 18) {\n  break\n}\nif (state == ""closing"") {\n  all(#Curtain).curtain_close()\n  state = ""opening""\n} else {\n  all(#Curtain).curtain_open()\n  state = ""closing""\n}'}]",0.75,The generated code uses a different logic for toggling the curtain state and checks the hour condition differently.
6,주말 오후 10시부터 11시까지 3분마다 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 180000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Blind).blind_close()\n} else {\n  break\n}""}","[{'name': 'Close blinds every 3 minutes from 10-11pm on weekends', 'cron': '0 22 * * 6,0', 'period': 180000, 'code': 'if ((#Clock).clock_hour >= 22) and ((#Clock).clock_hour < 23) and (((#Clock).clock_weekday == ""saturday"") or ((#Clock).clock_weekday == ""sunday"")) {\n  all(#Blind).blind_close()\n} else {\n  break\n}'}]",0.8,"The generated code uses a broader time range and checks for specific weekdays, which might lead to different behavior."
6,주말 오후 10시부터 11시까지 3초마다 제습기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 3000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Dehumidifier).switch_on()\n} else {\n  break\n}""}","[{'name': 'Weekend Night Dehumidifier On', 'cron': '0 22 * * 6,0', 'period': 3000, 'code': 'if ((#Dehumidifier).switch_switch == off) {\n  (#Dehumidifier).switch_on()\n}'}]",0.7,"The generated code checks the dehumidifier state instead of the clock hour, which changes the logic."
7,10초마다 알람과 사이렌을 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""alarm_state := true\nif (alarm_state == true) {\n  (#Alarm).alarm_off()\n  (#Siren).switch_off()\n  alarm_state = false\n} else {\n  (#Alarm).alarm_siren()\n  (#Siren).switch_on()\n  alarm_state = true\n}""}","[{'name': 'AlarmSirenToggle', 'cron': '', 'period': 10000, 'code': 'state := false\nif (state == false) {\n  all(#Alarm).alarm_off()\n  all(#Siren).switch_off()\n  state = true\n} else {\n  all(#Alarm).alarm_siren()\n  all(#Siren).switch_on()\n  state = false\n}'}]",0.9,"The generated code uses a different initial state for the toggle logic, which might lead to different initial behavior."
7,매일 30초마다 선풍기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 30000, ""code"": ""fan_on := true\nif (fan_on == true) {\n  (#Fan).switch_off()\n  fan_on = false\n} else {\n  (#Fan).switch_on()\n  fan_on = true\n}""}","[{'name': 'Fan toggle every 30 seconds daily', 'cron': '0 0 * * *', 'period': 1000, 'code': 'toggleOn := true\nelapsed := 0\nduration := 30000\nif (elapsed >= duration) {\n  if (toggleOn == true) {\n    all(#Fan).switch_off()\n    toggleOn = false\n  } else {\n    all(#Fan).switch_on()\n    toggleOn = true\n  }\n  elapsed = 0\n} else {\n  elapsed = elapsed + period\n}'}]",0.8,"The generated code uses an elapsed time mechanism to control the toggle, which is more complex than the ground truth."
6,매일 자정에 TV를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * *"", ""period"": 0, ""code"": ""(#Television).switch_off()""}","[{'name': 'TurnOffTVAtMidnight', 'cron': '0 0 * * *', 'period': -1, 'code': '(#Television).switch_off()'}]",1.0,
6,평일 오전 8시부터 자정까지 한 시간마다 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8-23 * * 1-5"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'Hourly Lights On Weekdays', 'cron': '0 * * * 1-5', 'period': 0, 'code': 'if (((#Clock).clock_hour >= 8) and ((#Clock).clock_hour < 24)) {\n  (#Light).switch_on()\n} else {\n  (#Light).switch_off()\n}'}]",0.7,"The generated code uses a broader time range and includes an off condition, which changes the logic."
4,창문이 열리면 알람의 사이렌을 울려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Alarm).alarm_siren()""}","[{'name': 'AlarmSirenOnWindowOpen', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == open) {\n  if (any(#Alarm).alarm_alarm != siren) {\n    if (any(#Alarm)) {\n      all(#Alarm).alarm_siren()\n    } else if (any(#Siren)) {\n      all(#Siren).switch_on()\n      all(#Siren).sirenMode_setSirenMode(siren)\n    }\n  }\n}'}]",0.6,"The generated code uses a complex nested condition instead of a simple wait-until structure, altering the logic."
3,토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 20.0)\nwait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0)\n(#Irrigator).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > 20.0) {\n  (#Irrigator).switch_on()\n}\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0) {\n  (#Irrigator).switch_on()\n}'}]",0.5,"The generated code uses immediate if conditions instead of wait-until, which changes the timing and logic."
3,움직임이 감지되면 최대 3번까지 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""motion_count := 0\nprev_motion := \""inactive\""\ncurrent = (#MotionSensor).motionSensor_motion\nif (current == \""active\"") and (prev_motion == \""inactive\"") {\n  if (motion_count < 3) {\n    (#Light).switch_on()\n    motion_count = motion_count + 1\n  }\n}\nprev_motion = current""}","[{'name': 'MotionLightControl', 'cron': '', 'period': 100, 'code': 'count := 0\ntriggered := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (triggered == false and count < 3) {\n    (#Light).switch_on()\n    count = count + 1\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.85,"The generated code lacks the previous motion state check, which might lead to different triggering behavior."
3,온도가 35도 이상이 되면 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)\n(#AirConditioner).switch_on()""}","[{'name': 'AirConditionerOnHighTemp', 'cron': '', 'period': 1000, 'code': 'triggered := false\ntemp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (temp > 35.0) {\n  if (triggered == false) {\n    (#AirConditioner).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.7,"The generated code uses an immediate if condition with a triggered flag instead of a wait-until, altering the logic."
3,습도가 80% 이상이 되면 블라인드를 내려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)\n(#Blind).blind_close()""}","[{'name': 'LowerBlindOnHighHumidity', 'cron': '', 'period': 1000, 'code': 'if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Blind).blind_close()\n}'}]",0.8,"The generated code uses an immediate if condition instead of a wait-until, which might lead to different timing."
3,블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Blind).blind_blind == \""closed\"")\n(#Speaker).mediaPlayback_speak(\""Blinds are closed\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nif (all(#Blind).blind_blind == closed) {\n  if (triggered == false) {\n    (#Speaker).mediaPlayback_speak(""블라인드가 닫혀 있습니다."")\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.6,"The generated code uses an immediate if condition with a triggered flag instead of a wait-until, altering the logic."
3,TV가 꺼지면 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Television).switch_switch == \""off\"")\n(#Speaker).switch_off()""}","[{'name': 'TurnOffSpeakersWhenTVOff', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") {\n  all(#Speaker).switch_off()\n}'}]",0.8,"The generated code uses an immediate if condition instead of a wait-until, which might lead to different timing."
3,커튼이 3번 열렸다 닫히면 조명을 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""close_count := 0\nprev_state := \""closed\""\nopened := false\ncurr = (#Curtain).curtain_curtain\nif (curr == \""open\"") and (prev_state == \""closed\"") {\n  opened = true\n}\nif (curr == \""closed\"") and (prev_state == \""open\"") and (opened == true) {\n  close_count = close_count + 1\n  opened = false\n}\nprev_state = curr\nif (close_count >= 3) {\n  (#Light).switch_off()\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'count := 0\ncurtainOpened := false\ncurtainClosed := false\nif ((#Curtain).curtain_curtain == ""open"") {\n  if (curtainOpened == false) {\n    curtainOpened = true\n    curtainClosed = false\n  }\n} else if ((#Curtain).curtain_curtain == ""closed"") {\n  if ((curtainOpened == true) and (curtainClosed == false)) {\n    count = count + 1\n    curtainClosed = true\n    curtainOpened = false\n  }\n}\nif (count >= 3) {\n  all(#Light).switch_off()\n  break\n}'}]",0.9,"The generated code uses a different logic for tracking curtain state changes, which might lead to different behavior."
4,제습기가 꺼지면 다시 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Dehumidifier).switch_switch == \""off\"")\n(#Dehumidifier).switch_on()""}","[{'name': 'DehumidifierAutoOn', 'cron': '', 'period': 100, 'code': 'dehumidifierWasOn := false\ncurrentState = (#Dehumidifier).switch_switch\nif (currentState == ""on"") {\n  dehumidifierWasOn = true\n} else {\n  if ((currentState == ""off"") and (dehumidifierWasOn == true)) {\n    (#Dehumidifier).switch_on()\n    dehumidifierWasOn = false\n  }\n}'}]",0.7,"The generated code uses an immediate if condition with a state flag instead of a wait-until, altering the logic."
4,재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#PresenceSensor).presenceSensor_presence == \""not present\"")\n(#Speaker).mediaPlayback_speak(\""Door is open\"")""}","[{'name': 'SayWhenNoOccupancy', 'cron': '', 'period': 100, 'code': 'no_presence := false\nif ((#OccupancySensor).presenceSensor_presence == present) {\n  no_presence = false\n} else {\n  if (no_presence == false) {\n    (#Speaker).mediaPlayback_speak(""문이 열려 있습니다."")\n    no_presence = true\n  }\n}'}]",0.6,"The generated code uses an immediate if condition with a state flag instead of a wait-until, altering the logic."
2,토양 습도가 30% 미만이면 5초 후 급수기를 작동해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  (#Clock).clock_delay(5000)\n  (#Irrigator).irrigatorOperatingState_startWatering()\n}""}","[{'name': 'SoilHumidityWatererDelay', 'cron': '', 'period': 100, 'code': 'triggered := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  if (triggered == false) {\n    (#Clock).clock_delay(5000)\n    (#Irrigator).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.9,"The generated code uses a triggered flag and a different method for starting watering, which might lead to different behavior."
3,창문이 열려 있고 온도가 35도 이상이면 10초 대기 후 블라인드를 내려 줘.,"{""name"": ""Scenario2"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)) {\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'LowerBlindsIfWindowOpenAndHot', 'cron': '', 'period': 100, 'code': ""triggered := false\nif ((any(#Window).windowControl_window == 'open') and (#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(10000)\n    all(#Blind).blind_close()\n  }\n} else {\n  triggered = false\n}""}]",0.85,"The generated code uses a triggered flag and 'any' for window condition, which might lead to different behavior."
4,"습도가 80% 이상이면 3초 뒤 제습기를 켜고, 7초 더 지난 후 창문을 닫아 줘.","{""name"": ""Scenario3"", ""cron"": """", ""period"": -1, ""code"": ""if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) {\n  (#Clock).clock_delay(3000)\n  (#Dehumidifier).switch_on()\n  (#Clock).clock_delay(7000)\n  (#Window).windowControl_close()\n}""}","[{'name': 'HumidityDehumidifierWindowControl', 'cron': '', 'period': -1, 'code': 'if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Clock).clock_delay(3000)\n  (#Dehumidifier).switch_on()\n  (#Clock).clock_delay(7000)\n  (#Window).windowControl_close()\n}'}]",0.95,"The generated code uses '>' instead of '>=' for humidity condition, which might lead to different triggering behavior."
4,빛의 세기가 100룩스 이하면 5초 대기 후 LED 조명을 켜 줘.,"{""name"": ""Scenario4"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LightSensor).lightLevel_light <= 100.0) {\n  (#Clock).clock_delay(5000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#LightSensor).lightLevel_light < 100.0) {\n  (#Clock).clock_delay(5000)\n  (#Light).switch_on()\n}'}]",0.95,"The generated code uses '<' instead of '<=' for light level condition, which might lead to different triggering behavior."
4,급수기를 작동 후 10초 기다렸다가 환풍기를 켜 줘.,"{""name"": ""Scenario5"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()\n(#Clock).clock_delay(10000)\n(#Fan).switch_on()""}","[{'name': 'IrrigatorFanDelay', 'cron': '', 'period': 100, 'code': 'waited := false\nirrigating := false\nif ((#Irrigator).irrigatorOperatingState_irrigatorOperatingState == ""watering"") {\n  irrigating = true\n  waited = false\n}\nif ((irrigating == true) and ((#Irrigator).irrigatorOperatingState_irrigatorOperatingState != ""watering"")) {\n  if (waited == false) {\n    (#Clock).clock_delay(10000)\n    waited = true\n    (#Fan).switch_on()\n  }\n  irrigating = false\n}'}]",0.8,"The generated code uses a more complex state tracking mechanism, which might lead to different behavior."
4,"창문이 열려 있으면 5초 후 커튼을 닫고, 10초 더 지난 뒤 블라인드를 닫아 줘.","{""name"": ""Scenario6"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Clock).clock_delay(5000)\n  (#Curtain).curtain_close()\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'Window Open Curtain Blind Close', 'cron': '', 'period': 100, 'code': 'step := 0\nwaited := 0\nif ((#Window).windowControl_window == ""open"") {\n  if (step == 0) {\n    waited = 0\n    step = 1\n  }\n  if (step == 1) {\n    waited = waited + 100\n    if (waited >= 5000) {\n      (#Curtain).curtain_close()\n      waited = 0\n      step = 2\n    }\n  } else if (step == 2) {\n    waited = waited + 100\n    if (waited >= 10000) {\n      (#Blind).blind_close()\n      step = 3\n      break\n    }\n  }\n} else {\n  step = 0\n  waited = 0\n  break\n}'}]",0.85,"The generated code uses a step-based mechanism for delays, which is more complex than the ground truth."
4,조명이 켜져 있으면 3초 대기 후 조명을 껐다가 3초 뒤 다시 켜 줘.,"{""name"": ""Scenario7"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""on\"") {\n  (#Clock).clock_delay(3000)\n  (#Light).switch_off()\n  (#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'Light flicker', 'cron': '', 'period': 100, 'code': 'state := 0\nwaitTime := 0\nif (state == 0) {\n  if ((#Light).switch_switch == ""on"") {\n    waitTime = 3000\n    (#Clock).clock_delay(waitTime)\n    all(#Light).switch_off()\n    waitTime = 3000\n    (#Clock).clock_delay(waitTime)\n    all(#Light).switch_on()\n    state = 1\n  }\n} else {\n  break\n}'}]",0.9,"The generated code uses a state variable to control the flicker, which might lead to different behavior."
4,7초 후에 조명을 끄고 5초 뒤 다시 켜 줘.,"{""name"": ""Scenario8"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(7000)\n(#Light).switch_off()\n(#Clock).clock_delay(5000)\n(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Clock).clock_delay(7000)\n(#Light).switch_off()\n(#Clock).clock_delay(5000)\n(#Light).switch_on()'}]",1.0,
4,문이 닫혀 있는데 5초가 지나도 창문이 열려 있지 않으면 블라인드를 열어 줘.,"{""name"": ""Scenario9"", ""cron"": """", ""period"": -1, ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  (#Clock).clock_delay(5000)\n  if ((#Window).windowControl_window != \""open\"") {\n      (#Blind).blind_open()\n  }\n}""}","[{'name': 'OpenBlindsIfDoorClosedWindowNotOpen', 'cron': '', 'period': 100, 'code': 'triggered := false\nwait until((#DoorLock).doorControl_door == ""closed"")\n(#Clock).clock_delay(5000)\nif ((#Window).windowControl_window != ""open"") and (triggered == false) {\n  (#Blind).blind_open()\n  triggered = true\n}'}]",0.85,"The generated code uses a wait-until for the door condition and a triggered flag, which might lead to different behavior."
4,"커튼이 열린 상태라면 2초 뒤 조명을 50으로 낮추고, 다시 4초 기다려서 꺼 줘.","{""name"": ""Scenario10"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Curtain).curtain_curtain == \""open\"") {\n  (#Clock).clock_delay(2000)\n  (#Light).switchLevel_setLevel(50, 0)\n  (#Clock).clock_delay(4000)\n  (#Light).switch_off()\n}""}","[{'name': 'CurtainLightControl', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).curtain_curtain == ""open"") {\n  (#Clock).clock_delay(2000)\n  (#Light).switchLevel_setLevel(50, 0)\n  (#Clock).clock_delay(4000)\n  (#Light).switch_off()\n}'}]",1.0,
6,5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이면 급수기를 끄고 반복도 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""soil = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\ntemp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (soil <= 30.0) {\n  (#Irrigator).switch_on()\n  if (temp >= 35.0) {\n      (#Irrigator).switch_off()\n      break\n  }\n}""}","[{'name': 'SoilMoistureIrrigationControl', 'cron': '', 'period': 5000, 'code': 'stopLoop := false\nif (stopLoop == false) {\n  soilMoisture = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\n  temperature = (#TemperatureSensor).temperatureMeasurement_temperature\n  if ((soilMoisture < 30.0) and (temperature <= 35.0)) {\n    (#Irrigator).switch_on()\n  } else {\n    (#Irrigator).switch_off()\n  }\n  if (temperature > 35.0) {\n    (#Irrigator).switch_off()\n    stopLoop = true\n    break\n  }\n} else {\n  break\n}'}]",0.85,"The generated code uses a stopLoop flag and a different logic for temperature condition, which might lead to different behavior."
6,3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""count := 0\n\nif (count >= 10) {\n  break\n}\n(#Light).switch_toggle()\nrain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") {\n  break\n}\ncount = count + 1""}","[{'name': 'BlinkLightWithRainStop', 'cron': '', 'period': 3000, 'code': 'blinkCount := 0\nif (any(#WeatherProvider).weatherProvider_weather == ""rain"") {\n  break\n}\nif (blinkCount < 10) {\n  if ((#Light).switch_switch == ""off"") {\n    (#Light).switch_on()\n  } else {\n    (#Light).switch_off()\n  }\n  blinkCount = blinkCount + 1\n} else {\n  (#Light).switch_off()\n  break\n}'}]",0.9,"The generated code uses a different logic for toggling the light and checking rain condition, which might lead to different behavior."
6,1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity\nif (humidity >= 80.0) {\n  break\n}\n(#Fan).switch_toggle()""}","[{'name': 'FanToggleWithHumidityCheck', 'cron': '', 'period': 1000, 'code': 'stopLoop := false\nif (stopLoop == false) {\n  humidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\n  if (humidity > 80.0) {\n    stopLoop = true\n  } else {\n    all(#Fan).switch_toggle()\n  }\n}\nif (stopLoop == true) {\n  break\n}'}]",0.8,"The generated code uses a stopLoop flag and a different sensor for humidity, which might lead to different behavior."
6,5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""current_level = (#Blind).blindLevel_blindLevel\nif (current_level <= 10) {\n  (#Blind).blindLevel_setBlindLevel(0)\n  break\n}\nnext_level = current_level - 10\n(#Blind).blindLevel_setBlindLevel(next_level)""}","[{'name': 'CloseBlindsGradually', 'cron': '', 'period': 5000, 'code': 'fully_closed := false\nif (fully_closed == false) {\n  level = (#Blind).blindLevel_blindLevel\n  new_level = level - 10\n  if (new_level <= 0) {\n    new_level = 0\n    fully_closed = true\n  }\n  (#Blind).blindLevel_setBlindLevel(new_level)\n} else {\n  break\n}'}]",0.9,"The generated code uses a fully_closed flag, which might lead to different behavior."
6,"10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""lux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_on()\n(#Clock).clock_delay(5000)\nlux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_off()""}","[{'name': 'IrrigatorCycleWithLightCheck', 'cron': '', 'period': 1000, 'code': 'cycleCount := 0\nloopActive := true\nif (loopActive == true) {\n  lightLevel = (#LightSensor).lightLevel_light\n  if (lightLevel > 500.0) {\n    (#Irrigator).switch_off()\n    loopActive = false\n    break\n  }\n  cyclePhase = cycleCount % 10\n  if (cyclePhase < 5) {\n    if ((#Irrigator).switch_switch != ""on"") {\n      (#Irrigator).switch_on()\n    }\n  } else {\n    if ((#Irrigator).switch_switch != ""off"") {\n      (#Irrigator).switch_off()\n    }\n  }\n  cycleCount = cycleCount + 1\n} else {\n  break\n}'}]",0.75,"The generated code uses a cycle-based mechanism for irrigation, which is more complex than the ground truth."
6,2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Light).switch_toggle()\nlight_state = (#Light).switch_switch\nif (light_state == \""off\"") {\n  window_state = (#Window).windowControl_window\n  if (window_state == \""open\"") {\n      break\n  }\n}""}","[{'name': 'LivingRoomLightToggle', 'cron': '', 'period': 2000, 'code': 'loop_active := true\nif (loop_active == true) {\n  if ((#Light).switch_switch == ""off"") {\n    (#Light).switch_on()\n  } else {\n    (#Light).switch_off()\n    if (any(#Window).windowControl_window == ""open"") {\n      loop_active = false\n      break\n    }\n  }\n}'}]",0.85,"The generated code uses a loop_active flag and a different logic for toggling the light, which might lead to different behavior."
6,3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""volume := 0\n\nif (volume >= 5) {\n  motion = (#MotionSensor).motionSensor_motion\n  if (motion == \""active\"") {\n      break\n  }\n  volume = 0\n} else {\n  volume = volume + 1\n}\n(#Television).audioVolume_setVolume(volume)""}","[{'name': 'TelevisionVolumeCycle', 'cron': '', 'period': 3000, 'code': 'initialVolume := (#Television).audioVolume_volume\ncurrentVolume := initialVolume\nstopCycle := false\nif (stopCycle == false) {\n  newVolume = currentVolume + 1\n  if (newVolume >= 5) {\n    (#Television).audioVolume_setVolume(initialVolume)\n    currentVolume = initialVolume\n    if ((#MotionSensor).motionSensor_motion == active) {\n      stopCycle = true\n    }\n  } else {\n    (#Television).audioVolume_setVolume(newVolume)\n    currentVolume = newVolume\n  }\n}'}]",0.8,"The generated code uses a different logic for cycling the volume, which might lead to different behavior."
6,10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""(#Blind).blind_close()\ntv = (#Television).switch_switch\nif (tv == \""on\"") {\n  break\n}""}","[{'name': 'CloseBlindsEvery10SecondsUnlessTVOn', 'cron': '', 'period': 10000, 'code': 'if ((#Television).switch_switch == ""on"") {\n  break\n}\nall(#Blind).blindLevel_setBlindLevel(0)'}]",0.9,"The generated code uses a different method for closing blinds, which might lead to different behavior."
6,"2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Alarm).alarm_siren()\nstate = (#Window).windowControl_window\n(#Clock).clock_delay(1000)\n(#Alarm).alarm_off()\nif (state == \""closed\"") {\n  break\n}""}","[{'name': 'AlarmSirenEvery2Seconds', 'cron': '', 'period': 100, 'code': 'triggered := false\nif (triggered == false) {\n  if ((#Window).windowControl_window == #Window.windowEnum.closed) {\n    break\n  }\n  (#Alarm).alarm_siren()\n  triggered = true\n  (#Clock).clock_delay(1000)\n  (#Alarm).alarm_off()\n}\nif (triggered == true) {\n  (#Clock).clock_delay(1000)\n  triggered = false\n}'}]",0.85,"The generated code uses a triggered flag and a different logic for window condition, which might lead to different behavior."
6,5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(\""auto\"")\nstate = (#Window).windowControl_window\nif (state == \""open\"") {\n  break\n}""}","[{'name': 'AirPurifierAutoMode', 'cron': '', 'period': 5000, 'code': 'loopActive := true\nif (loopActive == true) {\n  if (any(#Window).windowControl_window == open) {\n    loopActive = false\n    break\n  } else {\n    all(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(auto)\n  }\n}'}]",0.9,"The generated code uses a loopActive flag and a different logic for window condition, which might lead to different behavior."
7,실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""triggered := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {\n  if (triggered == false) {\n    (#Irrigator).switch_on()\n    (#Speaker).mediaPlayback_speak(\""Start watering\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'SoilHumidityIrrigation', 'cron': '', 'period': 1000, 'code': 'triggered := false\nsoilHumidity = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\nif ((soilHumidity < 25.0) and (triggered == false)) {\n  (#Irrigator).switch_on()\n  (#Speaker).mediaPlayback_speak(""급수 시작"")\n  triggered = true\n} else {\n  if (soilHumidity >= 25.0) {\n    triggered = false\n  }\n}'}]",0.85,"The generated code uses a single if-else structure with a nested if, while the ground truth uses a nested if structure. The condition check for soil humidity is slightly different (< vs <=), and the period is different (1000 vs 100)."
7,1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""triggered := false\nif ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (triggered == false) {\n    (#Fan).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'TemperatureFanControl', 'cron': '', 'period': 1000, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  (#Fan).switch_on()\n}'}]",0.7,"The generated code lacks the 'triggered' state management present in the ground truth, which prevents repeated fan activation."
7,현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 60000, ""code"": ""triggered := false\nif ((#WeatherProvider).weatherProvider_weather == \""rain\"") {\n  if (triggered == false) {\n    (#Irrigator).switch_off()\n    (#Speaker).mediaPlayback_speak(\""Rain detected\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Rain Detection and Irrigator Control', 'cron': '', 'period': 60000, 'code': 'rainDetected := false\nif ((#WeatherProvider).weatherProvider_weather == ""rain"") {\n  if (rainDetected == false) {\n    all(#Irrigator).switch_off()\n    (#Speaker).mediaPlayback_speak(""비 감지"")\n    rainDetected = true\n  }\n} else {\n  rainDetected = false\n}'}]",0.95,"The generated code uses 'rainDetected' instead of 'triggered', and the action target 'all(#Irrigator)' is used instead of '(#Irrigator)'."
7,2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""triggered := false\nif ((#Television).switch_switch == \""on\"") {\n  if (triggered == false) {\n    (#Speaker).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'TurnOnSpeakersWhenTVOn', 'cron': '', 'period': 2000, 'code': 'previous_tv_on := false\ncurrent_tv_on = ((#Television).switch_switch == ""on"")\nif ((current_tv_on == true) and (previous_tv_on == false)) {\n  (#Speaker).switch_on()\n}\nprevious_tv_on = current_tv_on'}]",0.8,"The generated code uses a different state variable 'previous_tv_on' instead of 'triggered', and updates it after the action."
7,토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)\n  (#Irrigator).switch_on()\n  active = True\n}\nif (active == True) {\n  if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 30.0) {\n      break\n  }\n  (#Irrigator).switch_toggle()\n}""}","[{'name': 'IrrigatorControl', 'cron': '', 'period': 3000, 'code': 'irrigatorOn := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) {\n  if (irrigatorOn == false) {\n    (#Irrigator).switch_on()\n    irrigatorOn = true\n  } else {\n    (#Irrigator).switch_off()\n    (#Clock).clock_delay(100)\n    (#Irrigator).switch_on()\n  }\n} else {\n  if (irrigatorOn == true) {\n    (#Irrigator).switch_off()\n    irrigatorOn = false\n    break\n  }\n}'}]",0.6,"The generated code uses a different logic for toggling the irrigator and includes a delay, whereas the ground truth uses a 'wait until' construct and toggles based on soil humidity."
7,"일조량이 200룩스 이하가 되면 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 4000, ""code"": ""active := False\nif (active == False) {\n  wait until((#LightSensor).lightLevel_light <= 200.0)\n  active = True\n}\nif (active == True) {\n  (#Light).switch_on()\n  (#Clock).clock_delay(2000)\n  (#Light).switch_off()\n}""}","[{'name': 'Sunlight Controlled Light Blink', 'cron': '', 'period': 1000, 'code': 'timer := 0\nlightOn := false\nwait until((#LightSensor).lightLevel_light < 200.0)\ntimer = timer + 1000\nif (timer >= 4000) {\n  (#Light).switch_on()\n  lightOn = true\n}\nif ((lightOn == true) and (timer >= 6000)) {\n  (#Light).switch_off()\n  timer = 0\n  lightOn = false\n}'}]",0.7,"The generated code uses a timer to control the light blink, while the ground truth uses a 'wait until' and clock delay for timing."
7,"조명이 켜지면 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""active := False\nif (active == False) {\n  wait until((#Light).switch_switch == \""on\"")\n  (#Blind).blind_close()\n  active = True\n}\nif (active == True) {\n  (#Curtain).curtain_open()\n  (#Clock).clock_delay(1000)\n  (#Curtain).curtain_close()\n}""}","[{'name': 'BlindCurtainControl', 'cron': '', 'period': 100, 'code': 'blindsClosed := false\ncurtainOpened := false\ncurtainLastToggleTime := 0\nnow := 0\nif ((#Light).switch_switch == ""on"") and (blindsClosed == false) {\n  all(#Blind).blind_close()\n  blindsClosed = true\n  curtainOpened = false\n  curtainLastToggleTime = 0\n} else if (blindsClosed == true) {\n  now = (#Clock).clock_timestamp\n  if (curtainLastToggleTime == 0) {\n    (#Curtain).curtain_open()\n    curtainOpened = true\n    curtainLastToggleTime = now\n  } else {\n    elapsed = now - curtainLastToggleTime\n    if (elapsed >= 2000) {\n      if (curtainOpened == true) {\n        (#Curtain).curtain_close()\n        curtainOpened = false\n      } else {\n        (#Curtain).curtain_open()\n        curtainOpened = true\n      }\n      curtainLastToggleTime = now\n    }\n  }\n}'}]",0.65,"The generated code uses a timestamp-based toggle logic for curtains, while the ground truth uses a 'wait until' and clock delay for curtain control."
7,"현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 경광등을 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#DoorLock).doorControl_door == \""closed\"")\n  (#Light).switch_off()\n  active = True\n}\nif (active == True) {\n  (#Siren).sirenMode_setSirenMode(\""strobe\"")\n}""}","[{'name': 'TurnOffLightsAfterFrontDoorClose', 'cron': '', 'period': 100, 'code': 'turnedOff := false\nwait until((#DoorLock).doorControl_door == ""closed"")\nif (turnedOff == false) {\n  all(#Light).switch_off()\n  turnedOff = true\n} else {\n  all(#Light).switch_off()\n}'}]",0.75,"The generated code focuses on turning off lights repeatedly, while the ground truth includes a siren activation after the door closes."
5,매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘.,"{""name:""Scenario1"", ""cron"":""0 7 * * *"", ""period"":-1, ""code"":""if ((#Irrigator).switch_switch == \""off\"" and (#Window).windowControl_window == \""closed\"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n  wait until((#Irrigator).switch_switch == \""on\"")\n  (#Blind).blind_close()\n}""}","[{'name': 'Morning Irrigation and Window Open', 'cron': '0 7 * * *', 'period': 0, 'code': 'if ((#Irrigator).switch_switch == ""off"" and all(#Window).windowControl_window == ""closed"") {\n  (#Irrigator).switch_on()\n  all(#Window).windowControl_open()\n}'}, {'name': 'Close Blinds When Irrigation On', 'cron': '', 'period': -1, 'code': 'wait until((#Irrigator).switch_switch == ""on"")\nall(#Blind).blind_close()'}]",0.9,"The generated code splits the logic into two separate scripts, while the ground truth combines them into one. The actions and conditions are otherwise similar."
7,"실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""temperature = (#TemperatureSensor).temperatureMeasurement_temperature\nhumidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\nif (temperature >= 28.0) {\n  (#Fan).switch_on()\n}\nif (humidity >= 80.0) {\n  (#Dehumidifier).switch_on()\n}""}","[{'name': 'TemperatureFanDehumidifierControl', 'cron': '', 'period': 1000, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 28.0) {\n  all(#Fan).switch_on()\n} else {\n  all(#Fan).switch_off()\n}\nif ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  all(#Dehumidifier).switch_on()\n} else {\n  all(#Dehumidifier).switch_off()\n}'}]",0.85,"The generated code includes explicit off actions for both fan and dehumidifier, while the ground truth only specifies on actions when conditions are met."
6,"주말에는 5초마다 펌프가 꺼져 있으면 켜고, 켜져 있으면 꺼 주고, 선풍기 속도를 10으로 설정해 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 * * 6,7"", ""period"": 5000, ""code"": ""weekday = (#Clock).clock_weekday\nif ((weekday != \""saturday\"") and (weekday != \""sunday\"")) {\n  break\n}\n(#Fan).fanControl_setFanSpeed(10)\n(#Pump).switch_toggle()""}","[{'name': 'Weekend Pump Toggle and Fan Speed Set', 'cron': '', 'period': 5000, 'code': 'toggleFlag := false\nif ((#Clock).clock_weekday == #Clock.clock_weekday or (#Clock).clock_weekday == #Clock.clock_weekday) {\n  if ((#Pump).switch_switch == ""off"") {\n    (#Pump).switch_on()\n  } else if ((#Pump).switch_switch == ""on"") {\n    (#Pump).switch_off()\n  }\n  (#Fan).fanControl_setFanSpeed(10)\n} else {\n}'}]",0.6,"The generated code uses a redundant condition for weekdays and directly toggles the pump, while the ground truth checks for specific weekend days and uses a break statement."
7,"실시간으로 확인하여 움직임이 감지될 때마다 조명을 켜고, 선풍기 속도를 10 높여 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""motion = (#MotionSensor).motionSensor_motion\nif (motion == \""active\"") {\n  (#Light).switch_on()\n  current_speed = (#Fan).fanControl_fanSpeed\n  new_speed = current_speed + 10\n  (#Fan).fanControl_setFanSpeed(new_speed)\n}""}","[{'name': 'Motion Activated Light and Fan Speed Increase', 'cron': '', 'period': 1000, 'code': 'previousMotionActive := false\nmotionActive = (any(#MotionSensor).motionSensor_motion == ""active"")\nif (motionActive == true) {\n  if (previousMotionActive == false) {\n    all(#Light).switch_on()\n    currentSpeed = (#Fan).fanControl_percent\n    newSpeed = currentSpeed + 10\n    if (newSpeed > 100) {\n      newSpeed = 100\n    }\n    all(#Fan).fanControl_setPercent(newSpeed)\n  }\n  previousMotionActive = true\n} else {\n  previousMotionActive = false\n}'}]",0.8,"The generated code includes a check for previous motion state and limits fan speed to 100, while the ground truth directly increases fan speed without such checks."
5,"실시간으로 확인하여 창문이 열려 있으면 블라인드를 닫고, 창문이 닫혀 있으면 커튼을 열어 줘. 또한 실시간으로 확인하여 알람의 사이렌이 울리고 있지 않다면 즉시 알람의 사이렌을 울려 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""window_status = (#Window).windowControl_window\nif (window_status == \""open\"") {\n  (#Blind).blind_close()\n} else if (window_status == \""closed\"") {\n  (#Curtain).curtain_open()\n}\nalarm_status = (#Alarm).alarm_alarm\nif ((alarm_status != \""siren\"") and (alarm_status != \""both\"")) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'triggeredAlarm := false\nif ((#Window).windowControl_window == ""open"") {\n  (#Blind).blind_close()\n} else if ((#Window).windowControl_window == ""closed"") {\n  (#Curtain).curtain_open()\n}\nif ((#Alarm).alarm_alarm != ""siren"") {\n  if (triggeredAlarm == false) {\n    (#Alarm).alarm_siren()\n    triggeredAlarm = true\n  }\n} else {\n  triggeredAlarm = false\n}'}]",0.9,"The generated code uses a 'triggeredAlarm' state variable, while the ground truth uses a direct condition check for alarm status."
5,"매주 금요일 오후 6시에 조명이 켜져 있으면 밝기를 30으로 낮추고, TV가 꺼져 있으면 TV를 켜 줘. 선풍기가 꺼져 있으면 선풍기도 켜 줘.","{""name"": ""Scenario1"", ""cron"": ""0 18 * * 5"", ""period"": 0, ""code"": ""if ((#Light).switch_switch == \""on\"") {\n  (#Light).switchLevel_setLevel(30, 0)\n}\nif ((#Television).switch_switch == \""off\"") {\n  (#Television).switch_on()\n}\nif ((#Fan).switch_switch == \""off\"") {\n  (#Fan).switch_on()\n}""}","[{'name': 'FridayEveningAdjustment', 'cron': '0 18 * * 5', 'period': 0, 'code': 'if (any(#Light).switch_switch == ""on"") {\n  all(#Light).switchLevel_setLevel(30, 0)\n}\nif (all(#Television).switch_switch == ""off"") {\n  all(#Television).switch_on()\n}\nif (any(#Fan).switch_switch == ""off"") {\n  all(#Fan).switch_on()\n}'}]",0.95,"The generated code uses 'all' and 'any' for device checks, while the ground truth uses direct checks. The actions are otherwise similar."
6,매일 아침 8시에 스피커가 꺼져 있으면 스피커를 켜고 ‘오늘 날씨입니다’라고 말해 줘. 이후 조명이 꺼져 있으면 켜고 블라인드를 열어 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8 * * *"", ""period"": 0, ""code"": ""if ((#Speaker).switch_switch == \""off\"") {\n  (#Speaker).switch_on()\n  (#Speaker).mediaPlayback_speak(\""This is the weather today\"")\n  if ((#Light).switch_switch == \""off\"") {\n    (#Light).switch_on()\n    (#Blind).blind_open()\n  }\n}""}","[{'name': 'MorningAnnouncementAndLighting', 'cron': '0 8 * * *', 'period': 0, 'code': 'if ((#Speaker).switch_switch == ""off"") {\n  (#Speaker).switch_on()\n  (#Speaker).mediaPlayback_speak(""오늘의 날씨입니다."")\n}\nif (any(#Light).switch_switch == ""off"") {\n  all(#Light).switch_on()\n}\nall(#Blind).blind_open()'}]",0.85,"The generated code separates the light and blind actions, while the ground truth nests them under the speaker condition."
7,1초마다 확인하여 관개 장치가 꺼졌다 켜진 횟수가 4번을 초과하고 펌프가 2번 이상 작동했으면 블라인드를 닫고 커튼을 내려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""prev_irrigator_state := (#Irrigator).switch_switch\nirrigator_off_to_on_count := 0\nprev_pump_state := (#Pump).switch_switch\npump_on_count := 0\nirrigator_state = (#Irrigator).switch_switch\npump_state = (#Pump).switch_switch\nif ((prev_irrigator_state == \""off\"") and (irrigator_state == \""on\"")) {\n  irrigator_off_to_on_count = irrigator_off_to_on_count + 1\n}\nprev_irrigator_state = irrigator_state\nif ((pump_state == \""on\"") and (prev_pump_state != \""on\"")) {\n  pump_on_count = pump_on_count + 1\n}\nprev_pump_state = pump_state\nif ((irrigator_off_to_on_count > 4) and (pump_on_count >= 2)) {\n  (#Blind).blind_close()\n  (#Curtain).curtain_close()\n  break\n}""}","[{'name': 'IrrigationAndPumpCountCheck', 'cron': '', 'period': 1000, 'code': 'irrigationToggleCount := 0\npumpRunCount := 0\nirrigationPreviouslyOn := false\npumpPreviouslyOn := false\nirrigationCurrentlyOn = (any(#Irrigator).switch_switch == ""on"")\nif ((irrigationCurrentlyOn == true) and (irrigationPreviouslyOn == false)) {\n  irrigationToggleCount = irrigationToggleCount + 1\n}\nirrigationPreviouslyOn = irrigationCurrentlyOn\npumpCurrentlyOn = (any(#Pump).switch_switch == ""on"")\nif ((pumpCurrentlyOn == true) and (pumpPreviouslyOn == false)) {\n  pumpRunCount = pumpRunCount + 1\n}\npumpPreviouslyOn = pumpCurrentlyOn\nif ((irrigationToggleCount > 4) and (pumpRunCount > 2)) {\n  all(#Blind).blind_close()\n  all(#Curtain).curtain_close()\n}'}]",0.9,"The generated code uses 'any' for device checks and lacks a break statement, while the ground truth uses direct checks and includes a break."
7,"2초마다 체크해서 매일 오전 6시부터 9시 사이에 조명이 켜져 있는 누적 시간이 10분 이상이고, 관개 장치가 세 번 이상 꺼졌다 켜졌으면 스피커로 '관수 완료되었습니다'라고 말해 줘.","{""name"": ""Scenario1"", ""cron"": ""0 6 * * *"", ""period"": 2000, ""code"": ""light_on_duration := 0\nirrigator_toggle_count := 0\nprev_irrigator := \""\""\n\nif ((#Clock).clock_hour < 9) {\n  if ((#Light).switch_switch == \""on\"") {\n    light_on_duration = light_on_duration + 2000\n  }\n\n  current_irrigator = (#Irrigator).switch_switch\n  if ((prev_irrigator == \""on\"") and (current_irrigator == \""off\"")) {\n    irrigator_toggle_count = irrigator_toggle_count + 1\n  }\n  prev_irrigator = current_irrigator\n\n  if ((light_on_duration >= 600000) and (irrigator_toggle_count >= 3)) {\n    (#Speaker).mediaPlayback_speak(\""Watering complete\"")\n    break\n  }\n} else {\n  break\n}""}","[{'name': 'LightOnIrrigatorUsageMonitor', 'cron': '', 'period': 2000, 'code': 'cumulativeLightOnTime := 0\nirrigatorOnOffCount := 0\nlastIrrigatorState := ""off""\ncurrentDay := 0\nannounceDone := false\nif (currentDay == 0) {\n  currentDay = (#Clock).clock_date\n  lastIrrigatorState = (#Irrigator).switch_switch\n}\ncurrentDate = (#Clock).clock_date\ncurrentHour = (#Clock).clock_hour\nif (currentDate != currentDay) {\n  cumulativeLightOnTime = 0\n  irrigatorOnOffCount = 0\n  announceDone = false\n  currentDay = currentDate\n}\nif ((currentHour >= 6) and (currentHour < 9)) {\n  if ((#Light).switch_switch == ""on"") {\n    cumulativeLightOnTime = cumulativeLightOnTime + 2\n  }\n  currentIrrigatorState = (#Irrigator).switch_switch\n  if (currentIrrigatorState != lastIrrigatorState) {\n    irrigatorOnOffCount = irrigatorOnOffCount + 1\n    lastIrrigatorState = currentIrrigatorState\n  }\n  if ((cumulativeLightOnTime >= 600) and (irrigatorOnOffCount >= 3) and (announceDone == false)) {\n    (#Speaker).mediaPlayback_speak(""급수 완료"")\n    announceDone = true\n  }\n}'}]",0.7,"The generated code uses a different time increment for light on duration and lacks a break statement, while the ground truth uses a larger increment and includes a break."
7,"실시간으로 확인하여 토양 습도 센서 값이 연속으로 3회 15 이하를 기록하고 그 중 두 번째 값이 가장 낮았다면 관개 장치를 켜고 블라인드를 닫아 줘. 단, 3월은 제외하고.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""h1 := 100\nh2 := 100\nh3 := 100\n\nif ((#Clock).clock_month != 3) {\n  h1 = h2\n  h2 = h3\n  h3 = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\n\n  if ((h1 <= 15) and (h2 <= 15) and (h3 <= 15) and (h2 < h1) and (h2 < h3)) {\n    (#Irrigator).switch_on()\n    (#Blind).blind_close()\n  }\n}""}","[{'name': 'SoilMoistureIrrigationControl', 'cron': '', 'period': 1000, 'code': 'count := 0\nvalues := [100.0, 100.0, 100.0]\nif ((#Clock).clock_month == 3) {\n  count = 0\n} else {\n  currentValue = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\n  values = [values[1], values[2], currentValue]\n  belowThreshold = (values[0] < 15.0) and (values[1] < 15.0) and (values[2] < 15.0)\n  secondLowest = (values[1] < values[0]) and (values[1] < values[2])\n  if (belowThreshold and secondLowest) {\n    count = count + 1\n  } else {\n    count = 0\n  }\n  if (count >= 1) {\n    (#Irrigator).switch_on()\n    (#Blind).blind_close()\n    break\n  }\n}'}]",0.85,"The generated code includes a count variable and a break statement, while the ground truth directly checks conditions without counting."
4,"실시간으로 확인하여 움직임이 감지되면 5초 대기 후 조명을 켜고, 10초 후 커튼을 열고, 15초 후 펌프가 꺼져 있으면 펌프를 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#MotionSensor).motionSensor_motion == \""active\"")\n(#Clock).clock_delay(5000)\n(#Light).switch_on()\n(#Clock).clock_delay(10000)\n(#Curtain).curtain_open()\n(#Clock).clock_delay(15000)\nif ((#Pump).switch_switch == \""off\"") {\n  (#Pump).switch_on()\n}""}","[{'name': 'MotionTriggeredActions', 'cron': '', 'period': 100, 'code': 'motionDetected := false\nmotionDetectedTime := 0\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (motionDetected == false) {\n    motionDetected = true\n    motionDetectedTime = (#Clock).clock_timestamp\n  }\n} else {\n  motionDetected = false\n  motionDetectedTime = 0\n}\nif (motionDetected == true) {\n  elapsed = (#Clock).clock_timestamp - motionDetectedTime\n  if (elapsed >= 5000) {\n    all(#Light).switch_on()\n  }\n  if (elapsed >= 10000) {\n    all(#Curtain).curtain_open()\n  }\n  if ((elapsed >= 15000) and (any(#Pump).switch_switch == ""off"")) {\n    all(#Pump).switch_on()\n  }\n}'}]",0.75,"The generated code uses elapsed time checks for actions, while the ground truth uses 'wait until' and clock delays for timing."
3,"1월 1일에, 실시간으로 확인하여 조명이 꺼지면 3초 대기 후 펌프를 끄고, 5초 후 블라인드를 닫으며, 추가로 7초 후 조명을 다시 켠 다음 알람의 사이렌을 울려 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 1 1 *"", ""period"": 0, ""code"": ""wait until((#Light).switch_switch == \""off\"")\nif (((#Clock).clock_month == 1) and ((#Clock).clock_day == 1)) {\n  (#Clock).clock_delay(3000)\n  (#Pump).switch_off()\n  (#Clock).clock_delay(5000)\n  (#Blind).blind_close()\n  (#Clock).clock_delay(7000)\n  (#Light).switch_on()\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'January1_LightPumpBlindAlarm', 'cron': '0 0 1 1 *', 'period': 200, 'code': 'lightOffDetected := false\nstep := 0\nstartTime := 0.0\nif (step == 0) {\n  if ((#Light).switch_switch == ""off"") {\n    lightOffDetected = true\n  } else {\n    lightOffDetected = false\n  }\n  if (lightOffDetected == true) {\n    step = 1\n    startTime = (#Clock).clock_timestamp\n  }\n} else if (step == 1) {\n  elapsed = (#Clock).clock_timestamp - startTime\n  if (elapsed >= 3000) {\n    (#Pump).switch_off()\n    step = 2\n    startTime = (#Clock).clock_timestamp\n  }\n} else if (step == 2) {\n  elapsed = (#Clock).clock_timestamp - startTime\n  if (elapsed >= 5000) {\n    (#Blind).blind_close()\n    step = 3\n    startTime = (#Clock).clock_timestamp\n  }\n} else if (step == 3) {\n  elapsed = (#Clock).clock_timestamp - startTime\n  if (elapsed >= 7000) {\n    (#Light).switch_on()\n    (#Alarm).alarm_siren()\n    break\n  }\n}'}]",0.8,"The generated code uses a step-based approach with elapsed time checks, while the ground truth uses 'wait until' and clock delays for timing."
4,"에어컨이 켜지면 5초 후 블라인드를 닫고, 5초 더 기다린 후 커튼이 열려 있으면 커튼을 닫고, 이후 10초 후 조명 밝기를 10퍼센트로 낮춰 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#AirConditioner).switch_switch == \""on\"")\n(#Clock).clock_delay(5000)\n(#Blind).blind_close()\n(#Clock).clock_delay(5000)\nif ((#Curtain).curtain_curtain == \""open\"") {\n  (#Curtain).curtain_close()\n}\n(#Clock).clock_delay(10000)\n(#Light).switchLevel_setLevel(10, 1)""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'triggered := false\nphase := 0\nstartTime := 0\nif ((#AirConditioner).switch_switch == ""on"") {\n  if (triggered == false) {\n    triggered = true\n    phase = 1\n    startTime = (#Clock).clock_timestamp\n  }\n} else {\n  triggered = false\n  phase = 0\n}\nif (triggered == true) {\n  currentTime = (#Clock).clock_timestamp\n  elapsed = currentTime - startTime\n  if ((phase == 1) and (elapsed >= 5000)) {\n    all(#Blind).blind_close()\n    phase = 2\n  } else if ((phase == 2) and (elapsed >= 10000)) {\n    if (any(#Curtain).curtain_curtain == ""open"") {\n      all(#Curtain).curtain_close()\n    }\n    phase = 3\n  } else if ((phase == 3) and (elapsed >= 20000)) {\n    all(#Light).switchLevel_setLevel(10, 1000)\n    phase = 4\n  }\n  if (phase == 4) {\n    break\n  }\n}'}]",0.75,"The generated code uses a phased approach with elapsed time checks, while the ground truth uses 'wait until' and clock delays for timing."
8,섹터 에이에 있는 선풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#SectorA #Fan).switch_off()""}","[{'name': 'TurnOffSectorAFan', 'cron': '', 'period': -1, 'code': 'all(#SectorA #Fan).switch_off()'}]",0.95,"The generated code uses 'all' for the action, while the ground truth uses a direct action. The effect is the same."
8,섹터 비와 섹터 에이에 있는 선풍기가 모두 켜져 있으면 홀수 태그가 붙은 블라인드 중 하나를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Fan #SectorA).switch_switch == \""on\"") and (all(#Fan #SectorB).switch_switch == \""on\"")) {\n  (#Odd #Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((all(#SectorB #Fan).switch_switch == ""on"") and (all(#SectorA #Fan).switch_switch == ""on"")) {\n  (#Blind #odd).blind_close()\n}'}]",0.9,"The generated code uses a different order for tags in the condition and action, but the logic is equivalent."
8,"홀수 태그가 붙은 선풍기 중 하나라도 켜져 있으면, 하단부에 있는 모든 관개 장치를 꺼 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Odd #Fan).switch_switch == \""on\"") {\n  all(#Lower #Irrigator).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Fan #Odd).switch_switch == ""on"") {\n  all(#Irrigator #Lower).switch_off()\n}'}]",0.95,"The generated code uses a different order for tags in the condition and action, but the logic is equivalent."
8,짝수 태그가 붙은 창문이 열려 있으면 섹터 에이에 있는 선풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Even #Window).windowControl_window == \""open\"") {\n  (#SectorA #Fan).switch_off()\n}""}","[{'name': 'TurnOffFanIfEvenWindowOpen', 'cron': '', 'period': -1, 'code': 'if (any(#Window #Even).windowControl_window == open) {\n  all(#Fan #SectorA).switch_off()\n}'}]",0.9,"The generated code uses 'any' for the condition and 'all' for the action, while the ground truth uses direct checks. The logic is equivalent."
8,섹터 비에 있는 홀수 태그가 붙은 관개 장치를 모두 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#SectorB #Odd #Irrigator).switch_off()""}","[{'name': 'TurnOffOddSectorBIrrigators', 'cron': '', 'period': -1, 'code': 'all(#Irrigator #Odd #SectorB).switch_off()'}]",0.95,"The generated code uses a different order for tags in the action, but the logic is equivalent."
8,상단부에 있는 짝수 태그가 붙은 창문이 열려 있으면 커튼을 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Upper #Even #Window).windowControl_window == \""open\"") {\n  (#Curtain).curtain_close()\n}""}","[{'name': 'Close Curtains If Even Upper Windows Open', 'cron': '', 'period': -1, 'code': 'if (any(#Window #Even #Upper).windowControl_window == ""open"") {\n  all(#Curtain).curtain_close()\n}'}]",0.9,"The generated code uses 'any' for the condition and 'all' for the action, while the ground truth uses direct checks. The logic is equivalent."
8,"상단부에 있는 조명이 모두 꺼져 있으면, 홀수 태그가 붙은 모든 창문을 열어 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (all(#Upper #Light).switch_switch == \""off\"") {\n  all(#Odd #Window).windowControl_open()\n}""}","[{'name': 'OpenOddWindowsIfTopLightsOff', 'cron': '', 'period': -1, 'code': 'if (all(#Upper #Light).switch_switch == ""off"") {\n  all(#Odd #Window).windowControl_open()\n}'}]",1.0,
8,짝수 태그가 붙은 스피커 중 하나라도 켜져 있으면 섹터 비에 있는 조명을 모두 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Even #Speaker).switch_switch == \""on\"") {\n  all(#SectorB #Light).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Speaker #Even).switch_switch == ""on"") {\n  all(#Light #SectorB).switch_off()\n}'}]",0.9,"The generated code uses a different order for tags in the condition and action, but the logic is equivalent."
8,벽에 있는 홀수 태그가 붙은 모든 블라인드가 열려 있으면 조명을 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (all(#Wall #Odd #Blind).blind_blind == \""open\"") {\n  (#Light).switch_off()\n}""}","[{'name': 'TurnOffLightsIfOddBlindsOpen', 'cron': '', 'period': -1, 'code': 'if (all(#Blind #Odd #Wall).blind_blind == ""open"") {\n  all(#Light).switch_off()\n}'}]",0.9,"The generated code uses a different order for tags in the condition, but the logic is equivalent."
8,상단부에 있거나 섹터 에이에 있는 조명 중 하나가 켜져 있으면 선풍기를 모두 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((any(#Upper #Light).switch_switch == \""on\"") or (any(#SectorA #Light).switch_switch == \""on\"")) {\n  all(#Fan).switch_on()\n}""}","[{'name': 'FanOnIfTopOrSectorALightOn', 'cron': '', 'period': 100, 'code': 'if ((any(#Upper #Light).switch_switch == ""on"") or (any(#SectorA #Light).switch_switch == ""on"")) {\n  all(#Fan).switch_on()\n} else {\n  all(#Fan).switch_off()\n}'}]",0.85,"The generated code includes an else clause to switch off the fan, while the ground truth only specifies the on condition."
6,매일 자정 선풍기가 꺼져 있으면 선풍기를 꺼 줘. 또한 그 때마다 선풍기를 꺼 줘,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * *"", ""period"": 0, ""code"": ""if ((#Fan).switch_switch == \""off\"") {\n  (#Fan).switch_off()\n  (#Fan).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '0 0 * * *', 'period': -1, 'code': 'if ((#Fan).switch_switch == ""on"") {\n  (#Fan).switch_off()\n}\n(#Fan).switch_off()'}]",0.7,"The generated code checks if the fan is on before switching off, while the ground truth checks if the fan is off before switching off twice."
4,주말에는 관개 장치가 꺼지면 관개 장치를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * 6,0"", ""period"": 0, ""code"": ""wait until((#Irrigator).switch_switch == \""off\"")\n(#Irrigator).switch_off()""}","[{'name': 'Turn off irrigation on weekends if it turns off', 'cron': '', 'period': 100, 'code': 'isIrrigationOffPrev := true\nwait until(((#Clock).clock_weekday == #Clock.clock_weekday) or ((#Clock).clock_weekday == #Clock.clock_weekday))\nif (((#Irrigator).switch_switch == ""off"") and (isIrrigationOffPrev == false)) {\n  (#Irrigator).switch_off()\n  isIrrigationOffPrev = true\n} else if ((#Irrigator).switch_switch == ""on"") {\n  isIrrigationOffPrev = false\n}'}]",0.6,"The generated code uses a redundant wait condition and state tracking, while the ground truth directly waits for the irrigator to turn off."
7,실시간으로 확인하여 블라인드가 닫힌 상태에서 또 닫히면 전등을 켜 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""wasClosed := false\nif (wasClosed == true) {\n  if ((wasClosed == false) and ((#Blind).blind_blind == \""closed\"")) {\n    (#Light).switch_on()\n  }\n}\nwasClosed = ((#Blind).blind_blind == \""closed\"")""}","[{'name': 'DetectBlindsClosedAgain', 'cron': '', 'period': 100, 'code': 'blindsPreviouslyClosed := false\nblindsCurrentlyClosed = any(#Blind).blind_blind == ""closed""\nif (blindsCurrentlyClosed == true) {\n  if (blindsPreviouslyClosed == true) {\n    (#Light).switch_on()\n  }\n  blindsPreviouslyClosed = true\n} else {\n  blindsPreviouslyClosed = false\n}'}]",0.7,"The generated code uses a different logic for detecting blinds closure, while the ground truth uses a simpler state check."
6,1초마다 확인하여 온도가 30도 미만이면서 25도 이상일 때마다 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""temp = (#TemperatureSensor).temperatureMeasurement_temperature\nif ((temp < 30.0) and (temp >= 25.0)) {\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'TemperatureBasedACControl', 'cron': '', 'period': 1000, 'code': 'if (((#TemperatureSensor).temperatureMeasurement_temperature < 30.0) and ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0)) {\n  if ((#AirConditioner).switch_switch == ""off"") {\n    (#AirConditioner).switch_on()\n  }\n} else {\n  if ((#AirConditioner).switch_switch == ""on"") {\n    (#AirConditioner).switch_off()\n  }\n}'}]",0.8,"The generated code includes conditions to switch off the AC, while the ground truth only specifies the condition to switch it on."
7,실시간으로 확인하여 재실 센서가 감지 상태일 때마다 10초 대기 후 조명의 밝기를 현재 밝기로 맞춰줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""wait until((#OccupancySensor).presenceSensor_presence == \""present\"")\n(#Clock).clock_delay(10000)\nlevel = (#Light).switchLevel_level\n(#Light).switchLevel_setLevel(level, 1)""}","[{'name': 'AdjustLightsToCurrentBrightnessOnOccupancy', 'cron': '', 'period': 100, 'code': 'detected := false\nif (any(#OccupancySensor).presenceSensor_presence == present) {\n  if (detected == false) {\n    detected = true\n    (#Clock).clock_delay(10000)\n    all(#Light).switchLevel_setLevel((#Light).switchLevel_level, 0)\n  }\n} else {\n  detected = false\n}'}]",0.75,"The generated code uses a detected state variable and sets the light level immediately, while the ground truth uses 'wait until' and sets the level with a delay."
7,TV가 꺼져 있으면 10초 대기 후 다시 TV를 확인하여 켜져 있으면 TV를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Television).switch_switch == \""off\"") {\n  (#Clock).clock_delay(10000)\n  if ((#Television).switch_switch == \""on\"") {\n    (#Television).switch_on()\n  }\n}""}","[{'name': 'TurnOnTVIfOff', 'cron': '', 'period': 0, 'code': 'if ((#Television).switch_switch == ""off"") {\n  (#Clock).clock_delay(10000)\n  if ((#Television).switch_switch == ""off"") {\n    (#Television).switch_on()\n  }\n}'}]",0.85,"The generated code checks if the TV is off before turning it on, while the ground truth checks if the TV is on before turning it on."
3,"월, 수, 금에 실시간으로 확인하여 창문이 열려 있지 않으면 창문을 닫아 줘.","{""name"": ""Scenario1"", ""cron"": ""0 0 * * 1,3,5"", ""period"": 100, ""code"": ""if ((#Window).windowControl_window != \""open\"") {\n  (#Window).windowControl_close()\n}""}","[{'name': 'CloseWindowIfNotOpen', 'cron': '0 * * * 1,3,5', 'period': 1000, 'code': 'triggered := false\nif ((#Window).windowControl_window != ""open"") {\n  if (triggered == false) {\n    (#Window).windowControl_close()\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.8,"The generated code uses a triggered state variable, while the ground truth directly closes the window if not open."
7,"매주 평일 오전 9시 창문이 닫혀 있고 이산화탄소 농도가 1000ppm 이상이며 기온이 30도 이상이면, 5초 후 창문을 열고, 팬이 꺼져 있으면 켜 줘. 그 후, 실시간으로 확인하여 1분 연속으로 미세먼지 농도가 50 이상으로 유지되면 창문을 다시 닫고, 팬도 꺼 줘. 만약 그 때 온실 내 습도가 40% 이하이면 가습기를 작동시켜 줘. 또한 마찬가지로 그 때 토양 습도가 25% 이하이고 관개 장치가 꺼져 있으면 물을 줘.","{""name"": ""Scenario1"", ""cron"": ""0 9 * * *"", ""period"": 100, ""code"": ""phase := 0\nconsecutive_time := 0\nif ((#Clock).clock_weekday == \""saturday\"") or ((#Clock).clock_weekday == \""sunday\"") {\n  break\n}\n\nif (phase == 0) {\n  if ((#Window).windowControl_window == \""closed\"") and \n  ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and \n  ((#AirQualityDetector).temperatureMeasurement_temperature >= 30.0) {\n    (#Clock).clock_delay(5000)\n    (#Window).windowControl_open()\n    \n    if ((#Fan).switch_switch == \""off\"") {\n      (#Fan).switch_on()\n    }\n    \n    phase = 1  \n  }\n} \nelse if (phase == 1) {\n  if ((#AirQualityDetector).dustSensor_fineDustLevel >= 50) {\n    consecutive_time = consecutive_time + 100  \n  } else {\n    consecutive_time = 0\n  }\n  if (consecutive_time >= 60000) {\n    (#Window).windowControl_close()\n    (#Fan).switch_off()\n    \n    if ((#HumiditySensor).relativeHumidityMeasurement_humidity <= 40.0) {\n      (#Humidifier).switch_on()\n    }\n    \n    if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) and ((#Irrigator).switch_switch == \""off\"") {\n      (#Irrigator).switch_on()\n    }\n    \n    break\n  }\n}""}","[{'name': 'MorningVentilationAndAirQualityControl', 'cron': '0 9 * * 1-5', 'period': 1000, 'code': 'wait_start := false\nwait_pm := false\npm_start_timestamp := 0\nif (((#Window).windowControl_window == ""closed"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) and ((#AirQualityDetector).temperatureMeasurement_temperature > 30.0) and (wait_start == false)) {\n  wait_start = true\n  (#Clock).clock_delay(5000)\n  all(#Window).windowControl_open()\n  if (any(#Fan).switch_switch == ""off"") {\n    all(#Fan).switch_on()\n  }\n}\nif (wait_start == true) {\n  pm_concentration_high = false\n  if (any(#AirQualityDetector).dustSensor_dustLevel > 50) {\n    pm_concentration_high = true\n  }\n  current_time = (#Clock).clock_timestamp\n  if (pm_concentration_high == true) {\n    if (wait_pm == false) {\n      wait_pm = true\n      pm_start_timestamp = current_time\n    } else {\n      duration = current_time - pm_start_timestamp\n      if (duration >= 60000) {\n        all(#Window).windowControl_close()\n        all(#Fan).switch_off()\n        pm_soil_humid_check := true\n        wait_pm = false\n        wait_start = false\n      }\n    }\n  } else {\n    wait_pm = false\n  }\n}\nif (defined(pm_soil_humid_check) and pm_soil_humid_check == true) {\n  pm_soil_humid_check = false\n  if ((#AirQualityDetector).relativeHumidityMeasurement_humidity < 40.0) {\n    all(#Humidifier).switch_on()\n  }\n  if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 25.0) and (any(#Irrigator).switch_switch == ""off"")) {\n    all(#Irrigator).switch_on()\n  }\n}'}]",0.7,"The generated code uses a more complex state management with timestamps, while the ground truth uses a phased approach with consecutive time checks."
7,매일 밤 10시에 하단부에 있는 창문이 열려 있고 짝수 태그가 붙은 조명이 켜져 있으면 사이렌을 울려 줘. 사이렌을 울렸다면 5초 후 블라인드를 닫아 줘. 사이렌을 울렸는지 상관 없이 5초 후부터는 실시간으로 확인해서 홀수 태그가 붙은 문이 두 번 열렸다 닫히면 커튼을 닫아 줘. 커튼을 닫은 후 문이 두 번 열린 총 시간만큼 알람의 경광등을 켰다가 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * *"", ""period"": 100, ""code"": ""state := 0\nsiren_triggered := false\ndoor_open_flag := false\ndoor_open_count := 0\nfirst_open_start := 0\nfirst_open_end := 0\nsecond_open_start := 0\nsecond_open_end := 0\n\nif (state == 0) {\n  if ((#Window #Lower).windowControl_window == \""open\"" and (#Light #Even).switch_switch == \""on\"") {\n    (#Alarm).alarm_siren()\n    siren_triggered = true\n  }\n  (#Clock).clock_delay(5000)\n  state = 1\n}\n\nif (state == 1) {\n  if (siren_triggered == true) {\n    (#Blind).blind_close()\n  }\n  state = 2\n}\n\nif (state == 2 and door_open_count >= 2) {\n  (#Curtain).curtain_close()\n  total_time = (first_open_end - first_open_start) + (second_open_end - second_open_start)\n  total_time = total_time * 1000\n  (#Alarm).alarm_siren()\n  (#Clock).clock_delay(total_time)\n  (#Alarm).alarm_off()\n  break\n}\n\nif ((#DoorLock #Odd).doorControl_door == \""open\"" and door_open_flag == false) {\n  door_open_flag = true\n  now = (#Clock).clock_timestamp\n  door_open_count = door_open_count + 1\n  if (door_open_count == 1) {\n    first_open_start = now\n  } else if (door_open_count == 2) {\n    second_open_start = now\n  }\n}\nif ((#DoorLock #Odd).doorControl_door == \""closed\"" and door_open_flag == true) {\n  door_open_flag = false\n  now = (#Clock).clock_timestamp\n  if (door_open_count == 1) {\n    first_open_end = now\n  } else if (door_open_count == 2) {\n    second_open_end = now\n  }\n}""}","[{'name': 'NightSirenAndBlind', 'cron': '0 22 * * *', 'period': 0, 'code': 'sirenTriggered := false\nif ((any(#Window).windowControl_window == ""open"") and (any(#Light).switch_switch == ""on"")) {\n  (#Siren).sirenMode_setSirenMode(\'siren\')\n  sirenTriggered = true\n}\nif (sirenTriggered == true) {\n  (#Blind).blind_close()\n}'}, {'name': 'DoorOpenCloseMonitor', 'cron': '0 22 * * *', 'period': 1000, 'code': 'doorOpenCount := 0\ntotalOpenDuration := 0.0\ndoorOpenStart := 0.0\ndoorStatePrevious := ""closed""\ncurtainClosed := false\nalarmActive := false\nwait until((#Clock).clock_second >= 5)\ncurrentDoorState = """"\nif (any(#DoorLock).doorControl_door == ""open"") {\n  currentDoorState = ""open""\n} else {\n  currentDoorState = ""closed""\n}\nif ((doorStatePrevious == ""closed"") and (currentDoorState == ""open"")) {\n  doorOpenStart = (#Clock).clock_timestamp\n}\nif ((doorStatePrevious == ""open"") and (currentDoorState == ""closed"")) {\n  openDuration = (#Clock).clock_timestamp - doorOpenStart\n  totalOpenDuration = totalOpenDuration + openDuration\n  doorOpenCount = doorOpenCount + 1\n}\ndoorStatePrevious = currentDoorState\nif ((doorOpenCount >= 2) and (curtainClosed == false)) {\n  (#Curtain).curtain_close()\n  curtainClosed = true\n  alarmActive = true\n  alarmOffTime := (#Clock).clock_timestamp + totalOpenDuration\n}\nif ((alarmActive == true) and ((#Clock).clock_timestamp < alarmOffTime)) {\n  (#Alarm).alarm_strobe()\n} else if (alarmActive == true) {\n  (#Alarm).alarm_off()\n  alarmActive = false\n  break\n}'}]",0.65,"The generated code splits the logic into two separate scripts, while the ground truth combines them into one. The actions and conditions are otherwise similar."
1,팔을 위로 들어.,{},"[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""팔을 들어 올립니다."")'}]",0.0,The generated code contains a single action with no corresponding ground truth code to compare against.
8,그룹1번의 습도가 하나라도 30미만이 되면 그룹1번의 관개장치를 켜줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(any(#Group1 #HumiditySensor).relativeHumidityMeasurement_humidity<30))\n (#Group1 #Irrigator).irrigatorOperatingState_startWatering()""
}","[{'name': 'TurnOnIrrigatorWhenHumidityLow', 'cron': '', 'period': 1000, 'code': 'if (any(#Group1 #HumiditySensor).relativeHumidityMeasurement_humidity < 30.0) {\n  all(#Group1 #Irrigator).switch_on()\n} else {\n  all(#Group1 #Irrigator).switch_off()\n}'}]",0.7,"The generated code uses an if-else structure for switching the irrigator, while the ground truth uses a 'wait until' and a different method for starting watering."
8,홀수 태그가 붙은 창문이 하나라도 열려 있으면 홀수 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (any(#Odd #Window).windowControl_window == \""open\"") {\n  (#Odd #Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Window #Odd).windowControl_window == ""open"") {\n  all(#Blind #Odd).blind_close()\n}'}]",0.9,"The generated code uses a different order for tags in the condition and action, but the logic is equivalent."
8,상단부에 있는 조명과 커튼이 모두 꺼져 있으면 스피커를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Upper #Light).switch_switch == \""off\"") and (all(#Curtain).curtain_curtain == \""closed\"")) {\n  (#Speaker).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((all((#Upper #Light)).switch_switch == ""off"") and (all((#Upper #Curtain)).curtain_curtain == ""closed"")) {\n  (#Speaker).switch_on()\n}'}]",0.95,"The generated code uses additional parentheses around tags, but the logic is equivalent."
8,그룹2번의 습도가 모두 80을 초과하면 관개장치를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(all(#Group2 #HumiditySensor).relativeHumidityMeasurement_humidity > 80) {\n  (#Group2 #Irrigator).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (all(#Group2 #HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Irrigator).switch_off()\n}'}]",0.7,"The generated code uses an if structure for switching off the irrigator, while the ground truth uses a 'wait until' and a different method for switching off."
8,홀수 태그의 커튼이 열려 있고 상단부 조명이 꺼져 있으면 창문을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Odd #Curtain).curtain_curtain == \""open\"") and (all(#Upper #Light).switch_switch == \""off\"")) {\n  (#Window).windowControl_open()\n}""}","[{'name': 'OpenWindowOnCurtainLightCondition', 'cron': '', 'period': -1, 'code': 'if (((#Odd).curtain_curtain == ""open"") and ((#Upper).switch_switch == ""off"")) {\n  (#Window).windowControl_open()\n}'}]",0.85,"The generated code uses a different order for tags in the condition, but the logic is equivalent."
8,거실 불을 모두 켜줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#Livingroom #Light).switch_on()""}","[{'name': 'TurnOnLivingRoomLights', 'cron': '', 'period': -1, 'code': 'all(#Livingroom #Light).switch_on()'}]",1.0,
8,하우스A 모두 닫아줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#SectorA).blind_close()""}","[{'name': 'CloseAllBlindsHouseA', 'cron': '', 'period': -1, 'code': 'all(#Blind #SectorA).blind_close()'}]",0.95,"The generated code uses 'all' for the action, while the ground truth uses a direct action. The effect is the same."
8,그룹1번 태그 모두 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""all(#Group1).switch_off()\n
all(#Group1).alarm_off()""}","[{'name': 'TurnOffGroup1', 'cron': '', 'period': -1, 'code': 'all(#Group1).switch_off()'}]",0.8,"The generated code only switches off the group, while the ground truth also turns off the alarm."
8,상단부가 모두 꺼져있거나 닫혀있으면 모두 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((all(#Upper).switch_switch == \""off\"") and (all(#Upper).curtain_curtain == \""closed\"")) {\n  (#Upper).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((all(#Upper).switch_switch == ""off"") and (all(#Upper).curtain_curtain == ""closed"")) {\n  all(#Upper).switch_off()\n  all(#Upper).curtain_close()\n}'}]",0.85,"The generated code includes additional actions to close curtains, while the ground truth only switches off the upper devices."
8,그룹2번이 하나라도 80을 초과하면 그룹2번은 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(any(#Group2).relativeHumidityMeasurement_humidity > 80) {\n  (#Group2).switch_off()\n}""}",[],0.0,"The generated code is empty, whereas the ground truth code contains a wait condition and an action to switch off a group when humidity exceeds 80."
1,알람의 사이렌과 경광등을 모두 켜줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()\n
(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""if (any(#Alarm)) {\n  all(#Alarm).alarm_both()\n} else {\n  if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode('both')\n  }\n}""}]",0.2,"The generated code activates alarms and sirens, while the ground truth code turns them off. The actions are opposite in intent."
9,가장 최근에 찍은 사진을 홍길동 이메일로 제목 '사진'과 내용 '사진입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""honggd@test.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'SendLatestPhotoByEmail', 'cron': '', 'period': -1, 'code': 'image = (#Camera).camera_take()\nif (image != null) {\n  (#EmailProvider).emailProvider_sendMailWithFile(""Honggildong"", ""Photo"", ""This is a photo"", image)\n} else {\n  (#Speaker).mediaPlayback_speak(""보낼 수 있는 사진이 없습니다."")\n}'}]",0.5,"Both codes send an email with a photo, but the generated code includes a check for null and a fallback action, while the ground truth directly uses a stored image."
9,가장 최근에 찍은 동영상을 첨부파일로 장보고 이메일로 제목 '동영상'과 내용 '동영상입니다.'로 보내줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""jangbogo@naver.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'SendLatestVideoByEmail', 'cron': '', 'period': -1, 'code': 'video = (#Camera).camera_video\nif (video != null) {\n  (#EmailProvider).emailProvider_sendMailWithFile(""Jang Bogo"", ""Video"", ""This is a video"", video)\n}'}]",0.8,"Both codes send a video via email. The generated code checks for null, which is a minor difference in logic."
9,김무개 메일로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(""Kim Mugae"", ""Alert"", ""This is an emergency"")'}]",0.9,The generated code uses a different email address but performs the same action of sending an emergency alert.
3,비가 오는데 창문이 열려있으면 창문을 닫아줘.,"{""name"": ""CloseWindowWhenRaining"",  ""cron"": """", ""period"": -1, ""code"": ""rain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") and ((#Window).windowControl_window == \""open\"") {\n  (#Window).windowControl_close()\n}""}","[{'name': 'CloseWindowWhenRaining', 'cron': '', 'period': -1, 'code': 'if (((#WeatherProvider).weatherProvider_weather == ""rain"") and ((#Window).windowControl_window == ""open"")) {\n  (#Window).windowControl_close()\n}'}]",1.0,
3,문이 열렸다 닫히면 알림을 울려줘.,"{""name"": ""DoorClosedAlert"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#DoorLock).doorControl_door == \""open\"")\nwait until((#DoorLock).doorControl_door == \""closed\"")\n(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'alertSent := false\ndoorOpenDetected := false\nif ((#DoorLock).doorControl_door == open) {\n  doorOpenDetected = true\n}\nif ((doorOpenDetected == true) and ((#DoorLock).doorControl_door == closed)) {\n  if (alertSent == false) {\n    (#Speaker).mediaPlayback_speak(""경고: 문이 열렸다가 닫혔습니다."")\n    alertSent = true\n  }\n}\nif ((#DoorLock).doorControl_door == closed and doorOpenDetected == false) {\n  alertSent = false\n}'}]",0.4,"The generated code uses a state-based approach to detect door status changes, while the ground truth uses wait statements to trigger an alarm."
3,문이 닫혔다 열리면 사진을 5초 단위로 찍어줘.,"{""name"": ""CaptureAfterDoorClosedAndOpened"", ""cron"": """",  ""period"": 100,  ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  wait until((#DoorLock).doorControl_door == \""open\"")\n  loop {\n    (#Camera).camera_take()\n    (#Clock).clock_delay(5000)\n  }\n}""}","[{'name': 'TakePhotoOnDoorOpen', 'cron': '', 'period': 100, 'code': 'started := false\nif ((#DoorLock).doorControl_door == open) {\n  if (started == false) {\n    started = true\n  }\n  image = (#Camera).camera_take()\n} else {\n  started = false\n}'}]",0.3,"The generated code takes a photo when the door is open, while the ground truth waits for the door to open and then takes photos in a loop."
3,불이 30분이상 켜져있으면 알림을 울려줘.,"{""name"": ""LightOnTooLongAlert"",  ""cron"": """",
  ""period"": -1,  ""code"": ""wait until((#Light).switch_switch == \""on\"")\n(#Clock).clock_delay(1800000)\nif ((#Light).switch_switch == \""on\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'TurnOnAlarmIfLightOn30Min', 'cron': '', 'period': 1000, 'code': 'lightOnSince := 0\nif ((#Light).switch_switch == ""on"") {\n  if (lightOnSince == 0) {\n    lightOnSince = (#Clock).clock_timestamp\n  } else {\n    elapsed = (#Clock).clock_timestamp - lightOnSince\n    if (elapsed >= 1800000) {\n      (#Alarm).alarm_siren()\n    }\n  }\n} else {\n  lightOnSince = 0\n}'}]",0.7,"Both codes aim to trigger an alarm if the light is on for 30 minutes, but the generated code uses a timestamp approach, while the ground truth uses a wait and delay method."
3,창문이 닫혀있다가 열리면 알림을 울려줘.,"{""name"": ""WindowIsClosedThenOpens"",  ""cron"": """",  ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""closed\"") {\n  wait until((#Window).windowControl_window == \""open\"")\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'windowClosed := false\nif ((#Window).windowControl_window == ""closed"") {\n  windowClosed = true\n} else {\n  windowClosed = false\n}\nif ((windowClosed == true) and ((#Window).windowControl_window == ""open"")) {\n  if (any(#Alarm)) {\n    all(#Alarm).alarm_siren()\n  } else if (any(#Siren)) {\n    all(#Siren).switch_on()\n    all(#Siren).sirenMode_setSirenMode(\'siren\')\n  }\n  windowClosed = false\n}'}]",0.6,"The generated code uses state variables to track window status and trigger alarms, while the ground truth uses a wait statement to detect window opening."
9,"주소록에서 나를 제외한 모든 사람에게 이메일로 내 생일을 알려주는 내용으로 메일을 보내줘. 제목은 ""생일 알림"", 내용은 ""제 생일은 ~입니다""로 보내줘.","{""name"": ""BirthdayNotification"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""honggd@test.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""jangbogo@naver.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")""}","[{'name': 'BirthdayEmailNotification', 'cron': '', 'period': -1, 'code': 'text = ""It\'s my birthday today!""\ntitle = ""Birthday Notification""\ntoAddress = ""all_contacts_except_me@example.com""\n(#EmailProvider).emailProvider_sendMail(toAddress, title, text)'}]",0.3,"The generated code sends a birthday notification to a single address, while the ground truth sends reminders to multiple specific addresses with a different message."
9,"매년 내 생일이 되면 아침 9시에 ""생일 축하합니다"" 노래를 불러 줘.","{""name"": ""BirthdayGreeting"",
  ""cron"": ""0 9 3 3 *"",
  ""period"": 0,
  ""code"": ""(#Speaker).mediaPlayback_speak(\""생일 축하합니다\"")""
}","[{'name': 'BirthdayGreeting', 'cron': '0 9 16 6 *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""생일 축하"")'}]",0.7,"Both codes perform a birthday greeting, but the cron schedules differ, and the spoken message is slightly different."
9,"알림이 울리면, 나와 홍길동에게 제목은 알림 발생, 내용은 알림이 울렸습니다라고 작성해서 메일을 보내줘. ","{""name"": ""AlarmAlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Alarm).alarm_alarm == ""siren"")\n(#EmailProvider).emailProvider_sendMailWithFile(""abcd1234@test.com"", ""Alert Triggered"", ""The alarm has turned on."")\n(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Alert Triggered"", ""The alarm has turned on."")""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'alertTriggered := false\nif ((#Alarm).alarm_alarm != ""off"") {\n  if (alertTriggered == false) {\n    alertTriggered = true\n    (#EmailProvider).emailProvider_sendMail(""me@example.com"", ""Alert Triggered"", ""The alarm has turned on."")\n    (#EmailProvider).emailProvider_sendMail(""honggildong@example.com"", ""Alert Triggered"", ""The alarm has turned on."")\n  }\n} else {\n  alertTriggered = false\n}'}]",0.5,"The generated code checks if the alarm is not off and sends emails, while the ground truth waits for a specific alarm state and sends emails with files."
9,"낙상 감지 센서에서 낙상이 감지된 상태이면, 내 주변사람들에게 제목은 ""낙상 감지"", 내용은 ""제가 넘어졌습니다. 도와주세요""로 메일을 보내줘.","{""name"": ""AlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#FallSensor).fallDetection_fall == ""detected"")
(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""kim@example.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""jangbogo@naver.com"", ""Fall Detected"", ""I have fallen. Please help me."")}""","[{'name': 'FallDetectionEmailAlert', 'cron': '', 'period': 1000, 'code': 'triggered := false\nif ((#FallDetector).fallDetection_fall == ""fall"") {\n  if (triggered == false) {\n    (#EmailProvider).emailProvider_sendMail(""mycontacts@example.com"", ""Fall Detected"", ""I have fallen. Please help me."")\n    triggered = true\n  }\n} else {\n  triggered = false\n}'}]",0.4,"The generated code sends a single email upon fall detection, while the ground truth waits for detection and sends multiple emails with files."
3,비어있다가 누군가 감지되면 알림을 울려줘.,"{""name"": ""AlertOnPresenceAfterEmpty"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""not present\"") {\n  wait until ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n    (#Alarm).alarm_siren()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'spaceEmpty := true\nif (all(#PresenceSensor).presenceSensor_presence == not_present) {\n  spaceEmpty = true\n}\nif ((spaceEmpty == true) and (any(#PresenceSensor).presenceSensor_presence == present)) {\n  (#Alarm).alarm_siren()\n  spaceEmpty = false\n}\nif (all(#PresenceSensor).presenceSensor_presence == not_present) {\n  spaceEmpty = true\n}'}]",0.6,"The generated code uses state tracking for presence detection, while the ground truth uses a wait statement to trigger an alarm on presence."
4,조명이 꺼져 있고 사람이 감지되면 3초 후 조명을 켜 줘.,"{""name"": ""LightOnIfPersonDetected"",
  ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""off\"") and ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#clock).delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'TurnOnLightAfterMotion', 'cron': '', 'period': 100, 'code': 'triggered := false\nif (((#Light).switch_switch == ""off"") and ((#MotionSensor).motionSensor_motion == ""active"")) {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(3000)\n    (#Light).switch_on()\n  }\n} else {\n  triggered = false\n}'}]",0.7,"Both codes turn on a light after a delay if motion is detected, but the sensors used differ (motion vs. presence)."
4,문이 열려 있고 10초 이상 그대로면 알림을 울려 줘.,"{""name"": ""DoorOpenTooLongAlert"",
  ""cron"": """", ""period"": -1,  ""code"": ""if ((#Door).doorControl_door == \""open\"") {\n  (#Clock).clock_delay(10000)\n  if ((#Door).doorControl_door == \""open\"") {\n    (#Alarm).alarm_siren()\n  }\n}""
}","[{'name': 'DoorOpenAlarm', 'cron': '', 'period': 100, 'code': 'doorOpenDuration := 0\ntriggered := false\nif ((#DoorLock).doorControl_door == open) {\n  doorOpenDuration = doorOpenDuration + 100\n  if ((doorOpenDuration > 10000) and (triggered == false)) {\n    (#Alarm).alarm_siren()\n    triggered = true\n  }\n} else {\n  doorOpenDuration = 0\n  if (triggered == true) {\n    (#Alarm).alarm_off()\n    triggered = false\n  }\n}'}]",0.8,"Both codes aim to trigger an alarm if the door is open for too long, but the generated code uses a duration counter, while the ground truth uses a delay."
4,습도가 30% 이하로 떨어진 뒤 5초가 지나면 가습기를 켜 줘.,"{""name"": ""HumidityLowThenHumidifier"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity <=30)\n(#Clock).clock_delay(5000)\n(#Humidifier).switch_on()""}","[{'name': 'HumidityBelow30DelayHumidifierOn', 'cron': '', 'period': 100, 'code': 'triggered := false\nwaited := false\nif ((#HumiditySensor).relativeHumidityMeasurement_humidity < 30.0) {\n  if (triggered == false) {\n    triggered = true\n    waited = false\n  }\n  if (waited == false) {\n    (#Clock).clock_delay(5000)\n    waited = true\n  }\n  if (waited == true) {\n    (#Humidifier).switch_on()\n  }\n} else {\n  triggered = false\n  waited = false\n}'}]",0.9,"Both codes activate a humidifier after humidity drops below 30 and a delay, but the generated code uses state variables to manage the process."
4,창문이 열린 후 5초 내에 조명이 켜져 있으면 조명을 켜 줘.,"{""name"": ""WindowOpenThenLight"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Clock).clock_delay(5000)\nif ((#Light).switch_switch == \""on\"") {\n (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'timerStarted := false\nstartTime := 0\nif (((#Window).windowControl_window == ""open"") and ((#Light).switch_switch == ""on"")) {\n  if (timerStarted == false) {\n    startTime = (#Clock).clock_timestamp\n    timerStarted = true\n  } else {\n    elapsed = (#Clock).clock_timestamp - startTime\n    if (elapsed <= 5000) {\n      (#Light).switch_on()\n    } else {\n      timerStarted = false\n    }\n  }\n} else {\n  timerStarted = false\n}'}]",0.6,"The generated code uses a timestamp to manage light activation, while the ground truth uses a wait and delay approach."
4,"5초마다 움직임을 감지하고, 감지되면 2초 대기 후 알람을 울려 줘.","{""name"": ""MotionDetectedAlarm"", ""cron"": """", ""period"": 5000, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#clock).delay(2000)\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'triggered := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  if (triggered == false) {\n    triggered = true\n    (#Clock).clock_delay(2000)\n    (#Alarm).alarm_siren()\n  }\n} else {\n  triggered = false\n}'}]",0.9,"Both codes trigger an alarm after detecting motion and a delay, but the generated code uses a state variable to manage triggering."
