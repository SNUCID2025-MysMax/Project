category_analysis,command,GT,generated_code,cloud_similarity_gpt4o,explanation
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_siren()'}]",1.0,
1,사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""siren\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#Siren).switch_on()\n(#Siren).sirenMode_setSirenMode('siren')""}]",0.7,The generated code includes an additional action `(#Siren).switch_on()` which is not present in the ground truth.
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_strobe()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_siren()'}]",0.5,"The generated code calls `alarm_siren()` while the ground truth calls `alarm_strobe()`, indicating different actions."
1,경광등을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""strobe\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Siren).switch_on()'}]",0.4,"The generated code uses `switch_on()` while the ground truth uses `sirenMode_setSirenMode(""strobe"")`, indicating different actions."
1,사이렌과 경광등을 동시에 켜 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_both()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_both()\n(#Alarm).alarm_strobe()'}]",0.6,The generated code includes an additional `alarm_strobe()` action not present in the ground truth.
1,사이렌과 경광등을 둘 다 꺼 줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Siren).switch_off()\n(#left).switch_off()'}]",0.3,"The generated code uses `switch_off()` for both `#Siren` and `#left`, while the ground truth uses `sirenMode_setSirenMode(""off"")`."
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#OccupancySensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve similar conditional logic."
2,재실 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#PresenceSensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve similar conditional logic."
2,에어컨의 모드가 냉방 모드면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_airConditionerMode == \""cool\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""cool"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
2,에어컨의 목표 온도가 30도면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#AirConditioner).airConditionerMode_targetTemperature == 30) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_targetTemperature == 30.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.95,Minor difference in numeric representation (30.0 vs 30) which does not affect logic.
1,에어컨을 자동 모드로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': ""(#AirConditioner).airConditionerMode_setAirConditionerMode('auto')""}]",1.0,
1,알람을 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_off()'}]",1.0,
1,블라인드를 70 퍼센트로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blindLevel_setBlindLevel(70)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Blind).blindLevel_setBlindLevel(70)'}]",1.0,
2,블라인드 움직임을 멈춰줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Blind).blind_pause()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Blind).blind_pause()'}]",1.0,
2,버튼4가 위로 스와이프되었으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Buttonx4).buttonx4_button4 == \""swipe_up\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#Buttonx4).buttonx4_button4 == ""swipe_up""\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve similar conditional logic."
1,10을 3으로 나눈 나머지를 구해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Calculator).calculator_mod(10, 3)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'result := (#Calculator).calculator_mod(10.0, 3.0)\n(#Speaker).mediaPlayback_speak(""The remainder of 10 divided by 3 is "" + result.toString())'}]",0.5,"The generated code includes additional logic to speak the result, which is not present in the ground truth."
9,"가장 최근에 찍은 사진을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '사진'과 내용 '사진입니다.'로 보내줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'Send Email with Photo', 'cron': '', 'period': -1, 'code': '(#Camera).camera_take() -> lastImage\n(#EmailProvider).emailProvider_sendMailWithFile(toAddress: ""test@example.com"", title: ""Photo"", text: ""This is a photo"", file: lastImage)'}]",0.7,"The generated code uses `camera_take()` to get an image, while the ground truth uses `camera_image`. The email sending logic is similar."
9,"가장 최근에 찍은 동영상을 첨부파일로 이메일을 'test@example.com' 주소, 제목 '동영상'과 내용 '동영상입니다.'로 보내줘","{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""test@example.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'SendEmailWithVideo', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMailWithFile(\n  toAddress: ""test@example.com"",\n  title: ""Video"",\n  text: ""This is a video."",\n  file: (#Camera).camera_video\n)'}]",0.9,"The generated code directly uses `camera_video` in the email function, while the ground truth assigns it to `latest_video` first."
1,카메라로 10초 동안 속도 2로 타임랩스 영상을 촬영해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Camera).camera_takeTimelapse(10, 2)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Camera).camera_takeTimelapse(duration: 10.0, speed: 2.0)'}]",0.95,Minor difference in parameter representation (duration: 10.0 vs 10) which does not affect logic.
2,지금이 오후 3시 15분이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_time == 1515) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '0 15 * * *', 'period': -1, 'code': 'if (clock_time == 1515) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code uses `clock_time` directly, while the ground truth uses `(#Clock).clock_time`."
2,올해가 2025년이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Clock).clock_year == 2025) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Clock).clock_year == 2025) {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
4,1시간 20분 30초 뒤에 알람의 사이렌을 울려줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(4830000)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Clock).clock_delay(ms: 3600230)\n(#Alarm).alarm_siren()'}]",0.4,"The delay times differ significantly (3600230 ms vs 4830000 ms), affecting the timing logic."
2,접촉 센서가 접촉되어 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#ContactSensor).contactSensor_contact == \""closed\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#ContactSensor).contactSensor_contact == ""closed"")\n(#Siren).sirenMode_setSirenMode(""siren"")\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#ContactSensor).contactSensor_contact == ""open"")\n(#Siren).sirenMode_setSirenMode(""off"")'}]",0.5,"The generated code uses `wait until` for both closed and open states, while the ground truth uses an `if` statement for the closed state only."
9,이메일을 'test@example.com' 주소로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""test@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'SendEmail', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(""test@example.com"", ""Alert"", ""This is an emergency"")'}]",0.95,Minor difference in punctuation in the email text.
3,가스 밸브가 열려 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#GasValve).valve_valve == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#GasValve).valve_valve == ""open"") {\n  (#Siren).switch_on()\n  (#Siren).sirenMode_setSirenMode(""siren"")\n}'}]",0.7,"The generated code uses `switch_on()` and `sirenMode_setSirenMode(""siren"")` instead of `alarm_siren()`."
1,관개 장치의 급수를 시작해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Irrigator).switch_on()'}]",0.6,The generated code uses `switch_on()` while the ground truth uses `irrigatorOperatingState_startWatering()`.
2,누수가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LeakSensor).leakSensor_leakage == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#LeakSensor).leakSensor_leakage == ""detected"")\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#LeakSensor).leakSensor_leakage == ""not_detected"")\n(#Alarm).alarm_off()'}]",0.5,"The generated code uses `wait until` for both detected and not detected states, while the ground truth uses an `if` statement for the detected state only."
1,조명을 빨간색으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).colorControl_setColor(\""255|0|0\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).colorControl_setColor(""RED"")'}]",0.7,"The generated code uses a color name `""RED""`, while the ground truth uses an RGB string `""255|0|0""`."
1,5의 속도로 조명의 밝기를 80으로 설정해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switchLevel_setLevel(80, 5)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).switchLevel_setLevel(80, 5)'}]",1.0,
1,조명의 전원을 토글해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Light).switch_toggle()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).switch_toggle()'}]",1.0,
2,모션 센서가 활성 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#MotionSensor).motionSensor_motion == ""active"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve similar conditional logic."
2,움직임이 감지되고 있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#MotionSensor).motionSensor_motion == ""active"")\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#MotionSensor).motionSensor_motion == ""inactive"")\n(#Alarm).alarm_off()'}]",0.5,"The generated code uses `wait until` for both active and inactive states, while the ground truth uses an `if` statement for the active state only."
2,존재 감지 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#PresenceSensor).presenceSensor_presence == ""present"")\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#PresenceSensor).presenceSensor_presence == ""not_present"")\n(#Alarm).alarm_off()'}]",0.5,"The generated code uses `wait until` for both present and not present states, while the ground truth uses an `if` statement for the present state only."
2,펌프가 열려있으면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Pump).pump_pump == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Pump).pump_pump == ""open"") {\n  (#Siren).switch_on()\n  (#Siren).sirenMode_setSirenMode(""siren"")\n}'}]",0.7,"The generated code uses `switch_on()` and `sirenMode_setSirenMode(""siren"")` instead of `alarm_siren()`."
2,연기 감지기에서 연기가 감지되면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SmokeDetector).smokeDetector_smoke == \""detected\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#SmokeDetector).smokeDetector_smoke == ""detected"")\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#SmokeDetector).smokeDetector_smoke == ""clear"")\n(#Alarm).alarm_off()'}]",0.5,"The generated code uses `wait until` for both detected and clear states, while the ground truth uses an `if` statement for the detected state only."
1,스피커에서 music.mp3를 재생해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Speaker).mediaPlayback_play(\""music.mp3\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Speaker).mediaPlayback_play(""music.mp3"")'}]",1.0,
1,녹음기로 10초 동안 녹음해서 test.wav로 저장해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Recorder).audioRecord_record(\""test.wav\"", 10)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Recorder).audioRecord_record(""test.wav"", 10.0)'}]",0.95,Minor difference in numeric representation (10.0 vs 10) which does not affect logic.
2,현재 실내 온도가 25도 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 25) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 25.0) {\n  (#Alarm).alarm_siren()\n}'}]",0.9,"The generated code uses `>` while the ground truth uses `>=`, which could affect the triggering condition."
3,바깥 습도가 80퍼센트 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_humidityWeather >= 80) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#WeatherProvider).weatherProvider_humidityWeather > 80.0)\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#WeatherProvider).weatherProvider_humidityWeather <= 80.0)\n(#Alarm).alarm_off()'}]",0.5,"The generated code uses `wait until` for both > 80 and <= 80, while the ground truth uses `if` for >= 80."
3,바깥의 초미세먼지 농도가 50 이상이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#WeatherProvider).weatherProvider_pm25Weather >= 50) {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#AirQualityDetector).dustSensor_dustLevel > 50)\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#AirQualityDetector).dustSensor_dustLevel <= 50)\n(#Alarm).alarm_off()'}]",0.4,"The generated code uses `wait until` for dust levels, while the ground truth uses `if` for PM2.5 levels."
3,창문이 열린 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") {\n  (#Alarm).alarm_siren()\n}'}]",1.0,
2,낙상 감지 센서에서 낙상이 감지된 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#FallDetector).fallDetection_fall == \""fall\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#FallDetector).fallDetection_fall == ""fall"")\n(#Alarm).alarm_siren()'}]",0.8,"The generated code uses `wait until` instead of `if`, but both achieve similar conditional logic."
2,점유 센서가 감지 상태이면 알람의 사이렌을 울려줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#OccupancySensor).presenceSensor_presence == \""present\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#OccupancySensor).presenceSensor_presence == ""present""\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until(#OccupancySensor).presenceSensor_presence == ""not_present""\n(#Alarm).alarm_off()'}]",0.5,"The generated code uses `wait until` for both present and not present states, while the ground truth uses an `if` statement for the present state only."
1,테스트 타이머라는 이름의 60초 길이의 타이머를 추가해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Timer).timer_add(\""Test Timer\"", 60)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Timer).timer_add(name: ""Test Timer"", timeout: 60.0)'}]",0.95,Minor difference in parameter representation (timeout: 60.0 vs 60) which does not affect logic.
5,토양 수분이 30% 이하이고 조명이 꺼져 있으면 관개 장치를 작동시키고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 30.0) and ((#Light).switch_switch == \""off\"")) {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) and ((#Light).switch_switch == ""off"") {\n  (#Irrigator).switch_on()\n  (#Light).switch_on()\n}'}]",0.9,"The generated code uses `<` while the ground truth uses `<=`, which could affect the triggering condition."
2,온도가 33도 이상이면 제습기를 켜고 커튼을 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#TemperatureSensor).temperatureMeasurement_temperature >= 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 33.0) {\n  (#Dehumidifier).switch_on()\n  (#Curtain).curtain_close()\n}'}]",0.9,"The generated code uses `>` while the ground truth uses `>=`, which could affect the triggering condition."
5,이산화탄소가 1000ppm 이상이고 블라인드가 열려 있으면 환풍기를 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Blind).blind_blind == \""open\"")) {\n  (#Fan).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000.0) and ((#Blind).blind_blind == ""open"") {\n  (#Fan).fanControl_setFanSpeed(100)\n  (#Blind).blind_close()\n}'}]",0.8,"The generated code uses `>` while the ground truth uses `>=`, and different fan actions are used."
5,온도가 29도 이상이고 습도가 80% 이상이며 조명이 꺼져 있으면 에어컨을 켜고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) and ((#Light).switch_switch == \""off\"")) {\n  (#AirConditioner).switch_on()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) and ((#Light).switch_switch == ""off"") {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\'cool\')\n  (#AirConditioner).airConditionerMode_setTemperature(27.0)\n  (#Light).switch_on()\n}'}]",0.7,"The generated code uses `>` while the ground truth uses `>=`, and different air conditioner actions are used."
5,조명이 켜져 있고 창문이 닫혀 있으면 커튼을 열고 환풍기를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Curtain).curtain_open()\n  (#Fan).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") and ((#Window).windowControl_window == ""closed"") {\n  (#Curtain).windowShadeLevel_setShadeLevel(100)\n  (#Fan).switch_off()\n}'}]",0.6,Different curtain actions are used in the generated code compared to the ground truth.
5,TV가 꺼져 있고 스피커가 재생 중이면 TV를 켜고 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Speaker).mediaPlayback_playbackStatus == \""playing\"")) {\n  (#Television).switch_on()\n  (#Speaker).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"" and (#Speaker).mediaPlayback_playbackStatus == ""playing"") {\n  (#Television).switch_on()\n  (#Speaker).switch_off()\n}'}]",1.0,
5,조명이 켜져 있고 블라인드가 열려 있으며 움직임이 감지되면 조명을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""on\"") and ((#Blind).blind_blind == \""open\"") and ((#MotionSensor).motionSensor_motion == \""active\"")) {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") and ((#Blind).blind_blind == ""open"") and ((#MotionSensor).motionSensor_motion == ""active"") {\n  (#Light).switch_off()\n  (#Blind).blind_close()\n}'}]",1.0,
5,알람이 꺼져 있고 조명이 꺼져 있으며 커튼이 열려 있으면 사이렌을 울리고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Alarm).alarm_alarm == \""off\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Alarm).alarm_siren()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Alarm).alarm_alarm == ""off"") and ((#Light).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""open"") {\n  (#Siren).switch_on()\n  (#Light).switch_on()\n}'}]",0.8,The generated code uses a different action for the siren (switch_on) compared to the ground truth (alarm_siren).
5,에어컨이 꺼져 있고 커튼이 닫혀 있으면 에어컨을 켜고 커튼을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"") {\n  (#AirConditioner).switch_on()\n  (#Curtain).curtain_open()\n}'}]",1.0,
5,창문이 열려 있고 조명이 꺼져 있으며 커튼이 닫혀 있으면 조명을 켜고 커튼을 열어 줘. 또한 관수기가 꺼져 있고 토양 수분이 40% 이하이면 관수기를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 40.0)) {\n  (#Irrigator).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"" and (#Light).switch_switch == ""off"" and (#Curtain).windowShade_windowShade == ""closed"") {\n  (#Light).switch_on()\n  (#Curtain).windowShadeLevel_setShadeLevel(100)\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"" and (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 40.0) {\n  (#Irrigator).switch_on()\n}'}]",0.7,The generated code uses a different method for curtain control (windowShadeLevel_setShadeLevel vs. curtain_open) and has a different condition for soil humidity (< 40.0 vs. <= 40.0).
5,환풍기가 꺼져 있고 이산화탄소 수치가 1000 이상이며 커튼이 닫혀 있으면 환풍기를 켜고 커튼을 열어 줘. 조명이 꺼져 있고 온도가 27도 이상이면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Fan).switch_switch == \""off\"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide >= 1000.0) and ((#Curtain).curtain_curtain == \""closed\"")) {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Light).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 27.0)) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Fan).switch_switch == ""off"") and ((#AirQualityDetector).carbonDioxideMeasurement_carbonDioxide > 1000) and ((#Curtain).curtain_curtain == ""closed"") {\n  (#Fan).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 27.0) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}'}]",0.9,The generated code uses '>' instead of '>=' for carbon dioxide and temperature conditions.
5,에어컨이 꺼져 있고 온도가 29도 이상이며 습도가 70% 이상이면 제습기를 제습 모드로 설정하고 켜 줘. 커튼이 열려 있고 조명이 꺼져 있으면 커튼을 닫고 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 70.0)) {\n  (#Dehumidifier).airConditionerMode_setAirConditionerMode(\""dehumidifying\"")\n  (#Dehumidifier).switch_on()\n}\nif (((#Curtain).curtain_curtain == \""open\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 29.0) and ((#HumiditySensor).relativeHumidityMeasurement_humidity > 70.0) {\n  (#Dehumidifier).dehumidifierMode_setDehumidifierMode(""dehumidifying"")\n  (#Dehumidifier).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).curtain_curtain == ""open"") and ((#Light).switch_switch == ""off"") {\n  (#Curtain).curtain_close()\n  (#Light).switch_on()\n}'}]",0.85,"The generated code uses '>' instead of '>=' for temperature and humidity conditions, and uses a different method for setting the dehumidifier mode."
5,조명이 꺼져 있고 움직임이 감지되지 않으며 커튼이 열려 있으면 조명을 켜고 커튼을 닫아 줘. 관수기가 꺼져 있고 창문이 닫혀 있으면 관수기를 켜고 창문을 열어 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Light).switch_switch == \""off\"") and ((#MotionSensor).motionSensor_motion == \""inactive\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Light).switch_on()\n  (#Curtain).curtain_close()\n}\nif (((#Irrigator).switch_switch == \""off\"") and ((#Window).windowControl_window == \""closed\"")) {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""off"") and ((#MotionSensor).motionSensor_motion == ""inactive"") and ((#Curtain).curtain_curtain == ""open"") {\n  (#Light).switch_on()\n  (#Curtain).curtain_close()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"") and ((#Window).windowControl_window == ""closed"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}'}]",1.0,
5,블라인드가 열려 있고 조명이 꺼져 있으며 습도가 80% 이상이면 블라인드를 닫고 조명을 켜 줘. 창문이 닫혀 있고 에어컨이 꺼져 있으면 창문을 열고 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Blind).blind_blind == \""open\"") and ((#Light).switch_switch == \""off\"") and ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)) {\n  (#Blind).blind_close()\n  (#Light).switch_on()\n}\nif (((#Window).windowControl_window == \""closed\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#Window).windowControl_open()\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Blind).blind_blind == ""open"" and (#Light).switch_switch == ""off"" and (#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Blind).blind_close()\n  (#Light).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""closed"" and (#AirConditioner).switch_switch == ""off"") {\n  (#Window).windowControl_open()\n  (#AirConditioner).switch_on()\n}'}]",0.9,The generated code uses '>' instead of '>=' for humidity condition.
5,TV가 꺼져 있고 블라인드가 닫혀 있으며 커튼이 열려 있으면 TV를 켜고 블라인드를 열어 줘. 에어컨이 자동 모드가 아니고 꺼져 있으면 자동 모드로 설정하고 전원을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Blind).blind_blind == \""closed\"") and ((#Curtain).curtain_curtain == \""open\"")) {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode != \""auto\"") and ((#AirConditioner).switch_switch == \""off\"")) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""auto\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"" and (#Blind).blind_blind == ""closed"" and (#Curtain).curtain_curtain == ""open"") {\n  (#Television).switch_on()\n  (#Blind).blind_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode != ""auto"" and (#AirConditioner).switch_switch == ""off"") {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(""auto"")\n  (#AirConditioner).switch_on()\n}'}]",1.0,
5,문이 열려 있고 알람이 꺼져 있으면 사이렌을 울리고 블라인드가 열려 있으면 닫아 줘. 에어컨이 꺼져 있고 온도가 30도 이상이면 냉방 모드로 설정하고 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#DoorLock).doorControl_door == \""open\"") and ((#Alarm).alarm_alarm == \""off\"")) {\n  (#Siren).sirenMode_setSirenMode(\""siren\"")\n  if ((#Blind).blind_blind == \""open\"") {\n    (#Blind).blind_close()\n  }\n}\nif (((#AirConditioner).switch_switch == \""off\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 30.0)) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(\""cool\"")\n  (#AirConditioner).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#DoorLock).doorControl_door == ""open"") and ((#Alarm).alarm_alarm == ""off"") {\n  (#Siren).switch_on()\n}\nif (#Blind).blind_blind == ""open"" {\n  (#Blind).blind_close()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).switch_switch == ""off"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 30.0) {\n  (#AirConditioner).airConditionerMode_setAirConditionerMode(""cool"")\n  (#AirConditioner).switch_on()\n}'}]",0.75,"The generated code uses switch_on for the siren instead of setting the siren mode, and uses '>' instead of '>=' for temperature condition."
5,TV가 꺼져 있고 커튼이 닫혀 있으며 선풍기가 꺼져 있으면 TV를 켜고 커튼을 열어 줘. 스피커가 재생 중이고 조명이 꺼져 있으면 조명을 켜고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""off\"") and ((#Curtain).curtain_curtain == \""closed\"") and ((#Fan).switch_switch == \""off\"")) {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}\nif (((#Speaker).mediaPlayback_playbackStatus == \""playing\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Light).switch_on()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") and ((#Curtain).curtain_curtain == ""closed"") and ((#Fan).switch_switch == ""off"") {\n  (#Television).switch_on()\n  (#Curtain).curtain_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#Speaker).mediaPlayback_playbackStatus == ""playing"") and ((#Light).switch_switch == ""off"") {\n  (#Light).switch_on()\n  (#Blind).blind_open()\n}'}]",0.9,The generated code opens the blind instead of closing it when the speaker is playing.
5,TV가 켜져 있고 스피커가 꺼져 있으며 조명이 꺼져 있으면 스피커를 켜고 조명을 켜 줘. 에어컨이 난방 모드이고 온도가 21도 이상이면 에어컨을 끄고 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Television).switch_switch == \""on\"") and ((#Speaker).switch_switch == \""off\"") and ((#Light).switch_switch == \""off\"")) {\n  (#Speaker).switch_on()\n  (#Light).switch_on()\n}\nif (((#AirConditioner).airConditionerMode_airConditionerMode == \""heat\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 21.0)) {\n  (#AirConditioner).switch_off()\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""on"" and (#Speaker).switch_switch == ""off"" and (#Light).switch_switch == ""off"") {\n  (#Speaker).switch_on()\n  (#Light).switch_on()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""heat"" and (#TemperatureSensor).temperatureMeasurement_temperature > 21.0) {\n  (#AirConditioner).switch_off()\n  (#Blind).blind_close()\n}'}]",0.9,The generated code uses '>' instead of '>=' for the temperature condition.
6,매일 아침 8시에 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8 * * *"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '0 8 * * *', 'period': 0, 'code': '(#Light).switch_on()'}, {'name': 'Scenario2', 'cron': '0 8 * * *', 'period': 0, 'code': '(#Light).switch_on()'}]",1.0,
6,매일 오후 6시부터 7시 사이에 15초마다 커튼을 닫았다 열었다 해 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 18 * * *"", ""period"": 15000, ""code"": ""curtain_action := true\nif ((#Clock).clock_hour == 18) {\n  if (curtain_action == true) {\n    (#Curtain).curtain_close()\n    curtain_action = false\n  } else {\n    (#Curtain).curtain_open()\n    curtain_action = true\n  }\n} else {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 15000, 'code': 'if (clock_hour >= 18 and clock_hour < 19) {\n  (#Curtain).curtain_close()\n  wait until(clock_second == 0)\n  (#Curtain).curtain_open()\n  wait until(clock_second == 0)\n}'}]",0.6,The generated code uses a different logic for curtain control and lacks the curtain_action toggle logic present in the ground truth.
6,주말 오후 10시부터 11시까지 3분마다 블라인드를 닫아 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 180000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Blind).blind_close()\n} else {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '0 10 * * 0,6', 'period': 180000, 'code': '(#Blind).blind_close()\n#'}, {'name': 'Scenario2', 'cron': '0 11 * * 0,6', 'period': 180000, 'code': '(#Blind).blind_close()'}]",0.5,The generated code has different cron timings and lacks the conditional logic based on clock_hour present in the ground truth.
6,주말 오후 10시부터 11시까지 3초마다 제습기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 22 * * 6,0"", ""period"": 3000, ""code"": ""if ((#Clock).clock_hour == 22) {\n  (#Dehumidifier).switch_on()\n} else {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '0 22 * * 0,6', 'period': 3000, 'code': 'dehumidifierOn := false\nif (not dehumidifierOn) {\n  (#Dehumidifier).switch_on()\n  dehumidifierOn := true\n}\nwait until(#Clock).clock_time >= 2300\n(#Dehumidifier).switch_off()\ndehumidifierOn := false'}]",0.6,The generated code uses a different logic for controlling the dehumidifier and has different cron timings.
7,10초마다 알람과 사이렌을 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""alarm_state := true\nif (alarm_state == true) {\n  (#Alarm).alarm_off()\n  (#Siren).switch_off()\n  alarm_state = false\n} else {\n  (#Alarm).alarm_siren()\n  (#Siren).switch_on()\n  alarm_state = true\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': '(#Alarm).alarm_off()\n(#Siren).switch_off()\n(#Alarm).alarm_off()\n(#Siren).switch_on()'}]",0.4,The generated code lacks the state management logic for the alarm and siren present in the ground truth.
7,매일 30초마다 선풍기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 30000, ""code"": ""fan_on := true\nif (fan_on == true) {\n  (#Fan).switch_off()\n  fan_on = false\n} else {\n  (#Fan).switch_on()\n  fan_on = true\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 30000, 'code': '(#Fan).fanControl_setPercent(0)\n(#Fan).fanControl_setPercent(100)'}]",0.3,The generated code directly sets fan speed without the conditional toggle logic present in the ground truth.
6,매일 자정에 TV를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 0 * * *"", ""period"": 0, ""code"": ""(#Television).switch_off()""}","[{'name': 'Scenario1', 'cron': '0 0 * * *', 'period': -1, 'code': '(#Television).switch_off()'}, {'name': 'Scenario2', 'cron': '0 0 * * *', 'period': -1, 'code': '(#Television).switch_off()'}]",1.0,
6,평일 오전 8시부터 자정까지 한 시간마다 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": ""0 8-23 * * 1-5"", ""period"": 0, ""code"": ""(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '0 8-23 * * 1-5', 'period': 0, 'code': '(#Light).switch_on()\nname = ""Scenario2""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()\nname = ""Scenario3""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()\nname = ""Scenario4""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()\nname = ""Scenario5""\ncron = ""0 8-23 * * 1-5""\nperiod = 0\n(#Light).switch_on()'}]",0.7,"The generated code contains multiple redundant scenarios with the same action, which is not present in the ground truth."
4,창문이 열리면 알람의 사이렌을 울려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#Window).windowControl_window == ""open""\n(#Alarm).alarm_siren()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until(#Window).windowControl_window == ""closed""\n(#Alarm).alarm_off()'}]",0.5,"The generated code includes additional logic for closing the window and turning off the alarm, which is not present in the ground truth."
3,토양 수분이 20% 이상이었다가 이하가 되면 관개 장치를 작동시켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 20.0)\nwait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 20.0)\n(#Irrigator).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 20.0)\n(#Irrigator).switch_on()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 20.0)\n(#Irrigator).switch_off()'}]",0.6,The generated code has different conditions for activating and deactivating the irrigator compared to the ground truth.
3,움직임이 감지되면 최대 3번까지 조명을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""motion_count := 0\nprev_motion := \""inactive\""\ncurrent = (#MotionSensor).motionSensor_motion\nif (current == \""active\"") and (prev_motion == \""inactive\"") {\n  if (motion_count < 3) {\n    (#Light).switch_on()\n    motion_count = motion_count + 1\n  }\n}\nprev_motion = current""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#MotionSensor).motionSensor_motion == ""active"") {\n  (#Light).colorControl_setColor(30, 1000)\n  wait until((#MotionSensor).motionSensor_motion == ""inactive"")\n  (#Light).colorControl_setColor(30, 1000)\n  wait until((#MotionSensor).motionSensor_motion == ""inactive"")\n  (#Light).colorControl_setColor(30, 1000)\n}'}]",0.4,The generated code repeatedly sets the light color without the motion count logic present in the ground truth.
3,온도가 35도 이상이 되면 에어컨을 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)\n(#AirConditioner).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#AirConditioner).airConditionerMode_airConditionerMode == ""auto"") {\n  if ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n    (#AirConditioner).airConditionerMode_setAirConditionerMode(""cool"")\n    (#AirConditioner).airConditionerMode_setTemperature(22.0)\n  }\n}'}]",0.3,"The generated code uses a different logic for setting the air conditioner mode and temperature, lacking the wait condition present in the ground truth."
3,습도가 80% 이상이 되면 블라인드를 내려 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0)\n(#Blind).blind_close()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Blind).blindLevel_setBlindLevel(0)\n}'}]",0.4,The generated code uses a different method for closing the blind and lacks the wait condition present in the ground truth.
3,블라인드가 닫히면 ‘블라인드가 닫혔습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Blind).blind_blind == \""closed\"")\n(#Speaker).mediaPlayback_speak(\""Blinds are closed\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#Blind).blind_blind == ""closed""\n(#Speaker).mediaPlayback_speak(""블라인드가 닫혀 있습니다."")'}]",0.9,The generated code uses a different language for the speaker message.
3,TV가 꺼지면 스피커를 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Television).switch_switch == \""off\"")\n(#Speaker).switch_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Television).switch_switch == ""off"") {\n  (#Speaker).switch_off()\n}'}]",0.8,The generated code uses an if statement instead of a wait condition.
3,커튼이 3번 열렸다 닫히면 조명을 꺼 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""close_count := 0\nprev_state := \""closed\""\nopened := false\ncurr = (#Curtain).curtain_curtain\nif (curr == \""open\"") and (prev_state == \""closed\"") {\n  opened = true\n}\nif (curr == \""closed\"") and (prev_state == \""open\"") and (opened == true) {\n  close_count = close_count + 1\n  opened = false\n}\nprev_state = curr\nif (close_count >= 3) {\n  (#Light).switch_off()\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).curtain_curtain == ""open"") {\n  (#Light).switch_off()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 100, 'code': 'counter := 0\nif ((#Curtain).curtain_curtain == ""open"") {\n  counter += 1\n  if (counter == 3) {\n    (#Light).switch_on()\n    counter := 0\n  }\n}'}]",0.5,The generated code lacks the state tracking and counting logic present in the ground truth.
4,제습기가 꺼지면 다시 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Dehumidifier).switch_switch == \""off\"")\n(#Dehumidifier).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Dehumidifier).switch_switch == ""off"") {\n  (#Dehumidifier).switch_on()\n}'}]",0.8,The generated code uses an if statement instead of a wait condition.
4,재실 센서에서 더 이상 감지가 안 되면 ‘문이 열렸습니다’라고 말해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#PresenceSensor).presenceSensor_presence == \""not present\"")\n(#Speaker).mediaPlayback_speak(\""Door is open\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#OccupancySensor).presenceSensor_presence == ""not_present""\n(#Speaker).mediaPlayback_speak(""문이 열려 있습니다."")'}]",0.8,The generated code uses a different language for the speaker message and a different sensor name.
2,토양 습도가 30% 미만이면 5초 후 급수기를 작동해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  (#Clock).clock_delay(5000)\n  (#Irrigator).irrigatorOperatingState_startWatering()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity < 30.0) {\n  wait until(#Clock).clock_delay(5000)\n  (#Irrigator).switch_on()\n}'}]",0.9,The generated code uses a different method for starting the irrigator.
3,창문이 열려 있고 온도가 35도 이상이면 10초 대기 후 블라인드를 내려 줘.,"{""name"": ""Scenario2"", ""cron"": """", ""period"": -1, ""code"": ""if (((#Window).windowControl_window == \""open\"") and ((#TemperatureSensor).temperatureMeasurement_temperature >= 35.0)) {\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") and ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  wait until(#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}'}]",0.9,The generated code uses '>' instead of '>=' for the temperature condition.
4,"습도가 80% 이상이면 3초 뒤 제습기를 켜고, 7초 더 지난 후 창문을 닫아 줘.","{""name"": ""Scenario3"", ""cron"": """", ""period"": -1, ""code"": ""if ((#HumiditySensor).relativeHumidityMeasurement_humidity >= 80.0) {\n  (#Clock).clock_delay(3000)\n  (#Dehumidifier).switch_on()\n  (#Clock).clock_delay(7000)\n  (#Window).windowControl_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0\nwait until(#Clock).clock_delay(3000)\n(#Dehumidifier).switch_on()\nwait until(#Clock).clock_delay(7000)\n(#Window).windowControl_close()'}]",0.9,The generated code uses '>' instead of '>=' for the humidity condition.
4,빛의 세기가 100룩스 이하면 5초 대기 후 LED 조명을 켜 줘.,"{""name"": ""Scenario4"", ""cron"": """", ""period"": -1, ""code"": ""if ((#LightSensor).lightLevel_light <= 100.0) {\n  (#Clock).clock_delay(5000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#LightSensor).lightLevel_light < 100.0) {\n  wait until(#Clock).clock_delay(5000)\n  (#Light).switch_on()\n}'}]",0.9,The generated code uses '<' instead of '<=' for the light level condition.
4,급수기를 작동 후 10초 기다렸다가 환풍기를 켜 줘.,"{""name"": ""Scenario5"", ""cron"": """", ""period"": -1, ""code"": ""(#Irrigator).irrigatorOperatingState_startWatering()\n(#Clock).clock_delay(10000)\n(#Fan).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Timer).switch_on()\nwait until(#Timer).switch_switch == ""off""\n(#Fan).fanControl_setFanSpeed(100)\n(#Fan).switch_on()\nname = ""Scenario2""\ncron = """"\nperiod = 10000\n(#Fan).fanControl_setFanSpeed(100)\n(#Fan).switch_on()'}]",0.5,The generated code uses a different logic for fan control and lacks the watering logic present in the ground truth.
4,"창문이 열려 있으면 5초 후 커튼을 닫고, 10초 더 지난 뒤 블라인드를 닫아 줘.","{""name"": ""Scenario6"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""open\"") {\n  (#Clock).clock_delay(5000)\n  (#Curtain).curtain_close()\n  (#Clock).clock_delay(10000)\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Window).windowControl_window == ""open"") {\n  wait until(#Window).windowControl_window == ""closed""\n  wait until(#Blind).blind_blind == ""closed""\n  (#Curtain).curtain_close()\n  wait until(#Blind).blind_blind == ""closed""\n  (#Blind).blind_close()\n}'}]",0.6,The generated code uses wait conditions instead of clock delays for curtain and blind control.
4,조명이 켜져 있으면 3초 대기 후 조명을 껐다가 3초 뒤 다시 켜 줘.,"{""name"": ""Scenario7"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""on\"") {\n  (#Clock).clock_delay(3000)\n  (#Light).switch_off()\n  (#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""on"") {\n  wait until(#Clock).clock_delay(3000)\n  (#Light).switch_off()\n  wait until(#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}'}]",1.0,
4,7초 후에 조명을 끄고 5초 뒤 다시 켜 줘.,"{""name"": ""Scenario8"", ""cron"": """", ""period"": -1, ""code"": ""(#Clock).clock_delay(7000)\n(#Light).switch_off()\n(#Clock).clock_delay(5000)\n(#Light).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Light).switch_off()'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until(#Clock).clock_delay(7000)\n(#Light).switch_on()\nwait until(#Clock).clock_delay(5000)\n(#Light).switch_off()'}]",0.7,The generated code has a different order of light switching and delay logic compared to the ground truth.
4,문이 닫혀 있는데 5초가 지나도 창문이 열려 있지 않으면 블라인드를 열어 줘.,"{""name"": ""Scenario9"", ""cron"": """", ""period"": -1, ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  (#Clock).clock_delay(5000)\n  if ((#Window).windowControl_window != \""open\"") {\n      (#Blind).blind_open()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#DoorLock).doorControl_door == ""closed"" and (#Window).windowControl_window != ""open"") {\n  wait until(#Window).windowControl_window == ""open""\n  (#Blind).blind_open()\n}'}]",0.6,The generated code uses a wait condition instead of a clock delay and has a different logic for checking window state.
4,"커튼이 열린 상태라면 2초 뒤 조명을 50으로 낮추고, 다시 4초 기다려서 꺼 줘.","{""name"": ""Scenario10"", ""cron"": """", ""period"": -1, ""code"": ""if ((#Curtain).curtain_curtain == \""open\"") {\n  (#Clock).clock_delay(2000)\n  (#Light).switchLevel_setLevel(50, 0)\n  (#Clock).clock_delay(4000)\n  (#Light).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Curtain).curtain_curtain == ""open"") {\n  wait until(#Clock).clock_delay(2000)\n  (#Light).switchLevel_setLevel(50, 1000)\n  wait until(#Clock).clock_delay(4000)\n  (#Light).switchLevel_setLevel(0, 1000)\n}'}]",0.8,The generated code uses different parameters for switchLevel_setLevel and lacks the switch_off action.
6,5초마다 토양 습도를 측정해서 30% 이하이면 급수기를 켜 줘. 만약 그 때 온도가 35도 이상이면 급수기를 끄고 반복도 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""soil = (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\ntemp = (#TemperatureSensor).temperatureMeasurement_temperature\nif (soil <= 30.0) {\n  (#Irrigator).switch_on()\n  if (temp >= 35.0) {\n      (#Irrigator).switch_off()\n      break\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'waterLevel := 30.0\ntemperatureThreshold := 35.0\ncurrentHumidity := (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity\ncurrentTemperature := (#TemperatureSensor).temperatureMeasurement_temperature\nif (currentHumidity < waterLevel) {\n  (#Irrigator).switch_on()\n  wait until(currentTemperature > temperatureThreshold)\n  (#Irrigator).switch_off()\n}'}]",0.7,The generated code uses '<' instead of '<=' for humidity and '>' instead of '>=' for temperature conditions.
6,3초 간격으로 조명을 10번 깜빡여 줘. 깜빡일 때마다 확인해서 비 감지 센서가 비를 감지하는 순간 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""count := 0\n\nif (count >= 10) {\n  break\n}\n(#Light).switch_toggle()\nrain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") {\n  break\n}\ncount = count + 1""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'counter := 0\nmax_blinks := 10\nwhile (counter < max_blinks) {\n  (#Light).switch_toggle()\n  wait until(#LightSensor).soundSensor_sound == true\n  counter = counter + 1\n  wait until(#LightSensor).soundSensor_sound == false\n  wait until(#Clock).clock_delay(3000)\n}'}]",0.5,The generated code uses a different logic for toggling the light and lacks the weather condition check present in the ground truth.
6,1초마다 선풍기의 전원을 켜고 끄는 토글 동작을 반복해 줘. 매번 동작 직전에 습도를 확인해서 80% 이상이면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""humidity = (#AirQualityDetector).relativeHumidityMeasurement_humidity\nif (humidity >= 80.0) {\n  break\n}\n(#Fan).switch_toggle()""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'humidityThreshold := 80.0\nhighHumidityDetected := false\nif ((#HumiditySensor).relativeHumidityMeasurement_humidity > humidityThreshold) {\n  highHumidityDetected = true\n  wait until(highHumidityDetected == false)\n}\n(#Fan).fanControl_setPercent(50)\n(#Fan).fanControl_setPercent(0)\nif (highHumidityDetected) {\n  break\n}'}]",0.6,The generated code uses a different logic for humidity detection and fan control compared to the ground truth.
6,5초마다 블라인드를 10퍼센트씩 닫아줘. 더 이상 못 내릴 때까지.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""current_level = (#Blind).blindLevel_blindLevel\nif (current_level <= 10) {\n  (#Blind).blindLevel_setBlindLevel(0)\n  break\n}\nnext_level = current_level - 10\n(#Blind).blindLevel_setBlindLevel(next_level)""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'blindLevel := 100\nrepeat := true\nwhile (repeat) {\n  wait until(all(#Blind).blindLevel_blindLevel > blindLevel)\n  all(#Blind).blindLevel_setBlindLevel(blindLevel)\n  blindLevel -= 10\n  if (blindLevel <= 0) {\n    repeat = false\n  }\n}'}]",0.7,The generated code uses a different loop logic for adjusting blind levels compared to the ground truth.
6,"10초마다 관개기를 켰다가 5초 뒤에 꺼 줘. 관개기를 끌 때, 켤 때 모두 확인해서 일조량이 500룩스 이상이면 관개기를 끄고 반복을 종료해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""lux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_on()\n(#Clock).clock_delay(5000)\nlux = (#LightSensor).lightLevel_light\nif (lux >= 500.0) {\n  (#Irrigator).switch_off()\n  break\n}\n(#Irrigator).switch_off()""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': '(#Irrigator).switch_on()\nwait until(#Clock).clock_delay(5000)\n(#Irrigator).switch_off()\nif ((#LightSensor).lightLevel_light > 500.0) {\n  (#Irrigator).switch_off()\n  period = -1\n}'}]",0.6,The generated code uses '>' instead of '>=' for light level condition and lacks the repeated check logic present in the ground truth.
6,2초마다 거실 조명을 켰다 껐다 반복해 줘. 조명을 끌 때마다 확인해서 창문이 열려 있는 게 감지되면 반복을 즉시 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Light).switch_toggle()\nlight_state = (#Light).switch_switch\nif (light_state == \""off\"") {\n  window_state = (#Window).windowControl_window\n  if (window_state == \""open\"") {\n      break\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 2000, 'code': 'triggered := false\nif ((#Light).switch_switch == ""off"") {\n  (#Light).switch_on()\n  triggered = true\n} else {\n  triggered = false\n}\nif (triggered && (#Window).windowControl_window == ""open"") {\n  wait until(false)\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 2000, 'code': 'if (triggered && (#Window).windowControl_window == ""open"") {\n  (#Light).switch_off()\n  triggered = false\n}'}]",0.5,The generated code uses a different logic for light and window control compared to the ground truth.
6,3초마다 텔레비전의 볼륨을 1씩 증가시켜서 5단계가 되면 초기값으로 되돌리는 동작을 반복해 줘. 초기값으로 되돌릴 때 확인해서 움직임이 감지되면 반복을 중단해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""volume := 0\n\nif (volume >= 5) {\n  motion = (#MotionSensor).motionSensor_motion\n  if (motion == \""active\"") {\n      break\n  }\n  volume = 0\n} else {\n  volume = volume + 1\n}\n(#Television).audioVolume_setVolume(volume)""}","[{'name': 'Scenario1', 'cron': '', 'period': 3000, 'code': 'volume_step := 1\nmax_volume := 100\ncurrent_volume := (#Television).audioVolume_volume\ninitial_volume := current_volume\nwhile (true) {\n  if (current_volume < max_volume) {\n    (#Television).audioVolume_setVolume(current_volume + volume_step)\n    current_volume = (#Television).audioVolume_volume\n  } else {\n    (#Television).audioVolume_setVolume(initial_volume)\n    current_volume = initial_volume\n  }\n  wait until(#MotionSensor).motionSensor_motion == ""inactive""\n  if (current_volume == initial_volume) {\n    break\n  }\n}'}]",0.6,The generated code uses a different logic for adjusting volume and lacks the motion condition check present in the ground truth.
6,10초마다 블라인드를 완전히 닫아 줘. 그 때마다 확인해서 TV가 켜져 있으면 즉시 반복을 종료해.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 10000, ""code"": ""(#Blind).blind_close()\ntv = (#Television).switch_switch\nif (tv == \""on\"") {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'blindsClosed := false\nwhile (not blindsClosed) {\n  all(#Blind).blind_close()\n  wait until((#Television).tvChannel_tvChannel != 0)\n  blindsClosed = true\n}'}]",0.7,The generated code uses a different logic for closing blinds and checking television state compared to the ground truth.
6,"2초마다 알람의 사이렌을 1초간 울렸다 꺼지게 하고, 알람의 사이렌을 울릴 때마다 창문이 닫혀 있는지 확인해서 닫혀 있으면 반복을 중단해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""(#Alarm).alarm_siren()\nstate = (#Window).windowControl_window\n(#Clock).clock_delay(1000)\n(#Alarm).alarm_off()\nif (state == \""closed\"") {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 2000, 'code': 'windowClosed := false\nwhile (true) {\n  (#Siren).switch_on()\n  wait until(#Clock).clock_delay(1000)\n  (#Siren).switch_off()\n  wait until(#Clock).clock_delay(1000)\n  if ((#Window).windowControl_window == ""closed"") {\n    windowClosed = true\n  }\n  if (windowClosed) {\n    break\n  }\n}'}]",0.7,The generated code uses a different logic for siren control and window state checking compared to the ground truth.
6,5초마다 실내 공기청정기를 ‘자동’ 모드로 전환해 줘. 그 때마다 확인해서 창문이 열려 있으면 모든 반복을 종료해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 5000, ""code"": ""(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(\""auto\"")\nstate = (#Window).windowControl_window\nif (state == \""open\"") {\n  break\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'windowOpen := false\nif (any(#Window).windowControl_window == ""open"") {\n  windowOpen = true\n  break\n}\n(#AirPurifier).airPurifierFanMode_setAirPurifierFanMode(\'quiet\')\nif (windowOpen) {\n  break\n}'}]",0.6,The generated code uses a different logic for fan mode setting and window state checking compared to the ground truth.
7,실시간으로 확인해서 토양 습도가 25% 이하로 떨어질 때마다 급수기를 켜고 '급수 시작'이라고 스피커로 출력해줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""triggered := false\nif ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {\n  if (triggered == false) {\n    (#Irrigator).switch_on()\n    (#Speaker).mediaPlayback_speak(\""Start watering\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'if (any(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0) {\n  (#Timer).switch_on()\n  (#Speaker).mediaPlayback_speak(""급수 시작"")\n}'}]",0.4,"The generated code uses a different device (#Timer) instead of (#Irrigator) and lacks the 'triggered' logic to prevent repeated actions. Also, the period values differ significantly."
7,1초마다 상태를 확인해서 온도가 35도를 초과할 때마다 환풍기를 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 1000, ""code"": ""triggered := false\nif ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (triggered == false) {\n    (#Fan).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 1000, 'code': 'fanOn := false\nif ((#TemperatureSensor).temperatureMeasurement_temperature > 35.0) {\n  if (fanOn == false) {\n    (#Fan).fanControl_setPercent(100)\n    fanOn = true\n  }\n} else {\n  fanOn = false\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 1000, 'code': 'if (fanOn == true) {\n  if ((#TemperatureSensor).temperatureMeasurement_temperature <= 35.0) {\n    (#Fan).fanControl_setPercent(0)\n    fanOn = false\n  }\n}'}]",0.7,"The generated code uses 'fanControl_setPercent' instead of 'switch_on', and the logic for turning off the fan is split into a separate scenario."
7,현재 날씨에서 비가 감지될 때마다 관개 장치를 꺼 주고 '비가 감지되었습니다'라고 스피커로 출력해줘. 감지는 1분에 한번씩만 하자.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 60000, ""code"": ""triggered := false\nif ((#WeatherProvider).weatherProvider_weather == \""rain\"") {\n  if (triggered == false) {\n    (#Irrigator).switch_off()\n    (#Speaker).mediaPlayback_speak(\""Rain detected\"")\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 60000, 'code': 'wait until(#WeatherProvider).weatherProvider_weather == ""rain""\n(#Irrigator).switch_off()\n(#Speaker).mediaPlayback_speak(""비 감지"")\nname = ""Scenario2""\ncron = """"\nperiod = 60000\nwait until(#WeatherProvider).weatherProvider_weather == ""rain""\n(#Irrigator).switch_off()\n(#Speaker).mediaPlayback_speak(""비 감지"")'}]",0.6,"The generated code uses 'wait until' instead of 'if' with a 'triggered' flag, and repeats the same logic twice. The message spoken is also different."
7,2초마다 상태를 확인해서 TV가 켜질 때마다 스피커도 켜 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""triggered := false\nif ((#Television).switch_switch == \""on\"") {\n  if (triggered == false) {\n    (#Speaker).switch_on()\n    triggered = true\n  }\n} else {\n  triggered = false\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 2000, 'code': 'tv_on := false\nif ((#Television).switch_switch == ""on"") {\n  if (tv_on == false) {\n    (#Speaker).switch_on()\n    tv_on = true\n  }\n} else {\n  tv_on = false\n}\ntv_on := false\nif ((#Television).switch_switch == ""on"") {\n  if (tv_on == false) {\n    (#Speaker).switch_on()\n    tv_on = true\n  }\n} else {\n  tv_on = false\n}'}]",0.8,"The generated code repeats the same logic twice, but otherwise matches the ground truth in logic and action."
7,토양 습도가 25% 이하가 되면 급수기를 켜고 이후 3초마다 상태를 확인해서 습도가 30% 이상이 될 때까지 급수기를 껐다 켰다 반복해 줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= 25.0)\n  (#Irrigator).switch_on()\n  active = True\n}\nif (active == True) {\n  if ((#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity >= 30.0) {\n      break\n  }\n  (#Irrigator).switch_toggle()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 3000, 'code': 'waterLevel := 25.0\ntargetLevel := 30.0\nwhile (#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= waterLevel {\n  (#Timer).switch_on()\n  wait until(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity > targetLevel\n  (#Timer).switch_off()\n  wait until(#SoilMoistureSensor).soilHumidityMeasurement_soilHumidity <= waterLevel\n}'}]",0.5,"The generated code uses a loop with 'wait until' for moisture levels, while the ground truth uses 'if' conditions with a break statement. Different devices are used (#Timer vs #Irrigator)."
7,"일조량이 200룩스 이하가 되면 4초마다 조명을 켜고, 2초 후에 꺼 주는 동작을 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 4000, ""code"": ""active := False\nif (active == False) {\n  wait until((#LightSensor).lightLevel_light <= 200.0)\n  active = True\n}\nif (active == True) {\n  (#Light).switch_on()\n  (#Clock).clock_delay(2000)\n  (#Light).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#LightSensor).lightLevel_light <= 200.0)\n(#Light).switch_on()'}, {'name': 'Scenario2', 'cron': '', 'period': 2000, 'code': '(#Light).switch_off()'}]",0.6,The generated code splits the logic into two scenarios and lacks the delay logic present in the ground truth.
7,"조명이 켜지면 블라인드를 닫고, 이후 2초마다 커튼을 열었다 닫았다 반복해 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 2000, ""code"": ""active := False\nif (active == False) {\n  wait until((#Light).switch_switch == \""on\"")\n  (#Blind).blind_close()\n  active = True\n}\nif (active == True) {\n  (#Curtain).curtain_open()\n  (#Clock).clock_delay(1000)\n  (#Curtain).curtain_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Blind).blind_blind == ""unknown"") {\n  (#Blind).blind_close()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 2000, 'code': 'if ((#Blind).blind_blind == ""closed"") {\n  (#Blind).blind_open()\n  wait until((#Blind).blind_blind == ""open"")\n  (#Blind).blind_close()\n}'}]",0.3,The generated code focuses on blind states without considering light switch conditions or curtain actions present in the ground truth.
7,"현관 문이 닫히면 즉시 조명을 끄고, 이후 3초마다 경광등을 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 3000, ""code"": ""active := False\nif (active == False) {\n  wait until((#DoorLock).doorControl_door == \""closed\"")\n  (#Light).switch_off()\n  active = True\n}\nif (active == True) {\n  (#Siren).sirenMode_setSirenMode(\""strobe\"")\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#DoorLock).doorControl_door == ""closed"")\n(#Light).switch_off()'}, {'name': 'Scenario2', 'cron': '', 'period': 3000, 'code': '(#Light).switch_off()'}]",0.5,The generated code lacks the 'active' state logic and siren action present in the ground truth.
5,매일 오전 7시에 관개 장치가 꺼져 있고 창문이 닫혀 있으면 관개 장치를 켜고 창문을 열어 줘. 이후 관개 장치가 켜지면 블라인드를 닫아 줘.,"{""name:""Scenario1"", ""cron"":""0 7 * * *"", ""period"":-1, ""code"":""if ((#Irrigator).switch_switch == \""off\"" and (#Window).windowControl_window == \""closed\"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n  wait until((#Irrigator).switch_switch == \""on\"")\n  (#Blind).blind_close()\n}""}","[{'name': 'Scenario1', 'cron': '0 7 * * *', 'period': -1, 'code': 'if ((#Irrigator).switch_switch == ""off"" and (#Window).windowControl_window == ""closed"") {\n  (#Irrigator).switch_on()\n  (#Window).windowControl_open()\n}'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until((#Irrigator).switch_switch == ""on"")\n(#Blind).blind_close()'}]",0.9,"The generated code is missing the 'wait until' logic for the blind action, but otherwise matches the ground truth."
7,"실시간으로 확인하여 온도가 28도 이상이면 선풍기를 켜고, 습도가 80% 이상이면 제습기를 켜 줘.","{""name"": ""Scenario1"", ""cron"": """", ""period"": 100, ""code"": ""temperature = (#TemperatureSensor).temperatureMeasurement_temperature\nhumidity = (#HumiditySensor).relativeHumidityMeasurement_humidity\nif (temperature >= 28.0) {\n  (#Fan).switch_on()\n}\nif (humidity >= 80.0) {\n  (#Dehumidifier).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'if ((#TemperatureSensor).temperatureMeasurement_temperature > 28.0) {\n  (#Fan).fanControl_setFanSpeed(100)\n}'}, {'name': 'Scenario2', 'cron': '', 'period': 10000, 'code': ""if ((#HumiditySensor).relativeHumidityMeasurement_humidity > 80.0) {\n  (#Dehumidifier).dehumidifierMode_setDehumidifierMode('dehumidifying')\n}""}]",0.7,The generated code uses different methods for fan and dehumidifier actions and lacks the combined logic for temperature and humidity present in the ground truth.
8,그룹2번이 하나라도 80을 초과하면 그룹2번은 꺼줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""wait until(any(#Group2).relativeHumidityMeasurement_humidity > 80) {\n  (#Group2).switch_off()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if (any(#Group2).temperatureMeasurement_temperature > 80.0) {\n  all(#Group2).switch_off()\n}'}]",0.2,"The generated code checks for temperature > 80, while the ground truth checks for humidity > 80. These are fundamentally different conditions leading to different actions."
1,알람의 사이렌과 경광등을 모두 켜줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#Alarm).alarm_off()\n
(#Siren).sirenMode_setSirenMode(\""off\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Alarm).alarm_both()'}]",0.0,"The generated code activates both alarm functions, while the ground truth deactivates the alarm and siren. These actions are opposite in intent."
9,가장 최근에 찍은 사진을 홍길동 이메일로 제목 '사진'과 내용 '사진입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_photo = (#Camera).camera_image\n(#EmailProvider).emailProvider_sendMailWithFile(\""honggd@test.com\"", \""Photo\"", \""This is a photo.\"", latest_photo)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Camera).camera_take() -> BINARY\n(#EmailProvider).emailProvider_sendMail(toAddress: ""honggd@test.com"", title: ""Photo"", text: ""This is a photo"")'}]",0.6,"Both codes involve taking a photo and sending an email, but the generated code does not attach the photo to the email as the ground truth does."
9,가장 최근에 찍은 동영상을 첨부파일로 장보고 이메일로 제목 '동영상'과 내용 '동영상입니다.'로 보내줘,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""latest_video = (#Camera).camera_video\n(#EmailProvider).emailProvider_sendMailWithFile(\""jangbogo@naver.com\"", \""Video\"", \""This is a video.\"", latest_video)""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#Camera).camera_take() -> BINARY\nimageData := (#Camera).camera_image'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until(#Clock).clock_delay(10000)\n(#EmailProvider).emailProvider_sendMailWithFile(\n  toAddress: ""abcd1234@test.com"",\n  title: ""Video"",\n  text: ""This is a video."",\n  file: imageData\n)'}]",0.4,"The generated code captures an image and sends it after a delay, while the ground truth captures and sends a video immediately. Different media types and email recipients are used."
9,김무개 메일로 제목 '알림'과 내용 '긴급 상황입니다.'로 보내줘.,"{""name"": ""Scenario1"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Alert\"", \""This is an emergency.\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': '(#EmailProvider).emailProvider_sendMail(""kim@example.com"", ""Notification"", ""This is an emergency"")'}]",0.9,"The generated code uses 'Notification' as the email title, while the ground truth uses 'Alert'. The rest of the email content is identical."
3,비가 오는데 창문이 열려있으면 창문을 닫아줘.,"{""name"": ""CloseWindowWhenRaining"",  ""cron"": """", ""period"": -1, ""code"": ""rain = (#WeatherProvider).weatherProvider_weather\nif (rain == \""rain\"") and ((#Window).windowControl_window == \""open\"") {\n  (#Window).windowControl_close()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#WeatherProvider).weatherProvider_weather == ""rain"" and (#Window).windowControl_window == ""open""\n(#Window).windowControl_close()\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until(#WeatherProvider).weatherProvider_weather != ""rain"" and (#Window).windowControl_window == ""closed""\n(#Window).windowControl_open()'}]",0.7,"The generated code uses 'wait until' for both closing and opening the window based on weather, while the ground truth uses an 'if' statement only for closing when it rains."
3,문이 열렸다 닫히면 알림을 울려줘.,"{""name"": ""DoorClosedAlert"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#DoorLock).doorControl_door == \""open\"")\nwait until((#DoorLock).doorControl_door == \""closed\"")\n(#Alarm).alarm_siren()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#DoorLock).doorControl_door == ""open""\n(#Speaker).mediaPlayback_speak(""문 1 열림"")'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until(#DoorLock).doorControl_door == ""closed""\n(#Speaker).mediaPlayback_speak(""도어 1 닫힘"")'}, {'name': 'Scenario3', 'cron': '', 'period': -1, 'code': 'wait until(#DoorLock).doorControl_door == ""open""\n(#Speaker).mediaPlayback_speak(""2번 문 열림"")'}, {'name': 'Scenario4', 'cron': '', 'period': -1, 'code': 'wait until(#DoorLock).doorControl_door == ""closed""\n(#Speaker).mediaPlayback_speak(""도어 2 닫힘"")'}]",0.5,"The generated code announces door status changes, while the ground truth waits for the door to open and close before sounding an alarm."
3,문이 닫혔다 열리면 사진을 5초 단위로 찍어줘.,"{""name"": ""CaptureAfterDoorClosedAndOpened"", ""cron"": """",  ""period"": 100,  ""code"": ""if ((#DoorLock).doorControl_door == \""closed\"") {\n  wait until((#DoorLock).doorControl_door == \""open\"")\n  loop {\n    (#Camera).camera_take()\n    (#Clock).clock_delay(5000)\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 100, 'code': 'doorClosed := false\nif ((#DoorLock).doorControl_door == ""closed"" and doorClosed == false) {\n  doorClosed = true\n  (#Camera).camera_take()\n  wait until(#DoorLock).doorControl_door == ""open""\n  (#Camera).camera_take()\n  wait until(#DoorLock).doorControl_door == ""closed""\n  doorClosed = false\n}'}]",0.6,"The generated code captures images based on door status changes, while the ground truth captures images in a loop after the door opens."
3,불이 30분이상 켜져있으면 알림을 울려줘.,"{""name"": ""LightOnTooLongAlert"",  ""cron"": """",
  ""period"": -1,  ""code"": ""wait until((#Light).switch_switch == \""on\"")\n(#Clock).clock_delay(1800000)\nif ((#Light).switch_switch == \""on\"") {\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'lastSwitchOnTime := 0\nif ((#Light).switch_switch == ""on"") {\n  if (lastSwitchOnTime == 0) {\n    lastSwitchOnTime = (#Clock).clock_timestamp\n  }\n} else {\n  lastSwitchOnTime = 0\n}\nif (lastSwitchOnTime != 0) {\n  wait until(#Clock).clock_timestamp - lastSwitchOnTime > 1800000\n  (#Speaker).mediaPlayback_speak(""알림: 표시등이 30분 이상 켜져 있습니다."")\n  lastSwitchOnTime = 0\n}'}]",0.7,"Both codes aim to alert if the light is on too long, but the generated code uses a timestamp to track duration, while the ground truth uses a fixed delay."
3,창문이 닫혀있다가 열리면 알림을 울려줘.,"{""name"": ""WindowIsClosedThenOpens"",  ""cron"": """",  ""period"": -1, ""code"": ""if ((#Window).windowControl_window == \""closed\"") {\n  wait until((#Window).windowControl_window == \""open\"")\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#Window).windowControl_window == ""closed"")\n(#Speaker).mediaPlayback_speak(""창이 닫혀 있습니다."")\nname = ""Scenario2""\ncron = """"\nperiod = -1\nwait until((#Window).windowControl_window == ""open"")\n(#Speaker).mediaPlayback_speak(""창이 열려 있습니다."")'}]",0.5,"The generated code announces window status changes, while the ground truth waits for the window to open after being closed to trigger an alarm."
9,"주소록에서 나를 제외한 모든 사람에게 이메일로 내 생일을 알려주는 내용으로 메일을 보내줘. 제목은 ""생일 알림"", 내용은 ""제 생일은 ~입니다""로 보내줘.","{""name"": ""BirthdayNotification"", ""cron"": """", ""period"": -1, ""code"": ""(#EmailProvider).emailProvider_sendMail(\""honggd@test.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""kim@example.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")\n(#EmailProvider).emailProvider_sendMail(\""jangbogo@naver.com\"", \""Birthday Reminder\"", \""My birthday is 1991-03-03\"")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'contacts = [\n  {\n    ""name"": ""홍길동"",\n    ""contact"": ""010-9999-8888"",\n    ""email"": ""honggd@test.com"",\n    ""birthday"": ""1988-07-15"",\n    ""alternate_contact"": ""010-8888-7777""\n  },\n  {\n    ""name"": ""김무개"",\n    ""contact"": ""010-7777-6666"",\n    ""email"": ""kim@example.com"",\n    ""birthday"": ""1990-11-25""\n  },\n  {\n    ""name"": ""장보고"",\n    ""contact"": ""010-2222-3333"",\n    ""email"": ""jangbogo@naver.com"",\n    ""birthday"": ""1985-05-10"",\n    ""alternate_contact"": ""010-4444-5555""\n  }\n]\nfor contact in contacts {\n  (#EmailProvider).emailProvider_sendMail(\n    toAddress: contact.email,\n    title: ""Birthday reminder"",\n    text: ""My birthday is on "" + contact.birthday + "".""\n  )\n}'}]",0.6,"The generated code sends personalized birthday reminders using a list, while the ground truth sends a fixed message to specific contacts."
9,"매년 내 생일이 되면 아침 9시에 ""생일 축하합니다"" 노래를 불러 줘.","{""name"": ""BirthdayGreeting"",
  ""cron"": ""0 9 3 3 *"",
  ""period"": 0,
  ""code"": ""(#Speaker).mediaPlayback_speak(\""생일 축하합니다\"")""
}","[{'name': 'Scenario1', 'cron': '0 9 3 3 *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""생일 축하해, 나!"")'}, {'name': 'Scenario2', 'cron': '0 9 15 7 *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""생일 축하해요, 홍길동!"")'}, {'name': 'Scenario3', 'cron': '0 9 25 11 *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""생일 축하해요, 김무개!"")'}, {'name': 'Scenario4', 'cron': '0 9 10 5 *', 'period': -1, 'code': '(#Speaker).mediaPlayback_speak(""생일 축하해요, 장보고!"")'}]",0.4,"The generated code has personalized birthday greetings with different cron schedules, while the ground truth has a single generic greeting."
9,"알림이 울리면, 나와 홍길동에게 제목은 알림 발생, 내용은 알림이 울렸습니다라고 작성해서 메일을 보내줘. ","{""name"": ""AlarmAlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#Alarm).alarm_alarm == ""siren"")\n(#EmailProvider).emailProvider_sendMailWithFile(""abcd1234@test.com"", ""Alert Triggered"", ""The alarm has turned on."")\n(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Alert Triggered"", ""The alarm has turned on."")""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#Alarm).notificationEvent_occurred == true)\n(#EmailProvider).emailProvider_sendMail(""abcd1234@test.com"", ""Notification occurred"", ""Notification went off"")'}]",0.5,"Both codes send an email when an alarm condition is met, but the generated code uses a different event and sends to fewer recipients without attaching a file."
9,"낙상 감지 센서에서 낙상이 감지된 상태이면, 내 주변사람들에게 제목은 ""낙상 감지"", 내용은 ""제가 넘어졌습니다. 도와주세요""로 메일을 보내줘.","{""name"": ""AlertEmail"", ""cron"": """", ""period"": -1, ""code"": ""wait until((#FallSensor).fallDetection_fall == ""detected"")
(#EmailProvider).emailProvider_sendMailWithFile(""honggd@test.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""kim@example.com"", ""Fall Detected"", ""I have fallen. Please help me."")
(#EmailProvider).emailProvider_sendMailWithFile(""jangbogo@naver.com"", ""Fall Detected"", ""I have fallen. Please help me."")}""","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#FallDetector).fallDetection_fall == ""fall"")\n(#Speaker).mediaPlayback_speak(""넘어졌어요. 도와주세요."")\n(#EmailProvider).emailProvider_sendMail(\n  toAddress = ""abcd1234@test.com, honggd@test.com, kim@example.com, jangbogo@naver.com"",\n  title = ""Fall detected"",\n  text = ""I fell. Please help me.""\n)'}]",0.7,"Both codes detect a fall and send emails, but the generated code uses a different sensor and sends a single email to multiple recipients without attaching a file."
3,비어있다가 누군가 감지되면 알림을 울려줘.,"{""name"": ""AlertOnPresenceAfterEmpty"", ""cron"": """", ""period"": -1, ""code"": ""if ((#PresenceSensor).presenceSensor_presence == \""not present\"") {\n  wait until ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n    (#Alarm).alarm_siren()\n  }\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#SoundSensor).binarySensor_binaryState == ""empty""\nwait until(#PresenceSensor).presenceSensor_presence == ""present""\n(#Speaker).mediaPlayback_speak(""경고: 휴지통이 비어 있고 누군가 있습니다."")'}, {'name': 'Scenario2', 'cron': '', 'period': -1, 'code': 'wait until(#SoundSensor).binarySensor_binaryState == ""full""\nwait until(#PresenceSensor).presenceSensor_presence == ""not_present""\n(#Speaker).mediaPlayback_speak(""경고: 빈칸이 꽉 찼는데 아무도 없습니다."")'}]",0.4,"The generated code checks for bin status and presence, while the ground truth checks for presence change to trigger an alarm."
4,조명이 꺼져 있고 사람이 감지되면 3초 후 조명을 켜 줘.,"{""name"": ""LightOnIfPersonDetected"",
  ""cron"": """", ""period"": -1, ""code"": ""if ((#Light).switch_switch == \""off\"") and ((#PresenceSensor).presenceSensor_presence == \""present\"") {\n  (#clock).delay(3000)\n  (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'if ((#Light).switch_switch == ""off"") and ((#FallDetector).presenceSensor_presence == true) {\n  wait until(#Clock).clock_delay(3000)\n  (#Light).switch_on()\n}'}]",0.8,"Both codes turn on the light after a delay if a person is detected, but the generated code uses a different sensor for presence detection."
4,문이 열려 있고 10초 이상 그대로면 알림을 울려 줘.,"{""name"": ""DoorOpenTooLongAlert"",
  ""cron"": """", ""period"": -1,  ""code"": ""if ((#Door).doorControl_door == \""open\"") {\n  (#Clock).clock_delay(10000)\n  if ((#Door).doorControl_door == \""open\"") {\n    (#Alarm).alarm_siren()\n  }\n}""
}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until(#DoorLock).doorControl_door == ""open"" and (#DoorLock).doorControl_door == ""unlocked""\nwait until(#Clock).clock_delay(10000)\n(#Speaker).mediaPlayback_speak(""도어가 10초 이상 잠금 해제된 상태입니다."")'}]",0.6,"Both codes check for door status and delay, but the generated code checks for both open and unlocked status, while the ground truth only checks for open status."
4,습도가 30% 이하로 떨어진 뒤 5초가 지나면 가습기를 켜 줘.,"{""name"": ""HumidityLowThenHumidifier"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#HumiditySensor).relativeHumidityMeasurement_humidity <=30)\n(#Clock).clock_delay(5000)\n(#Humidifier).switch_on()""}","[{'name': 'Scenario1', 'cron': '', 'period': -1, 'code': 'wait until((#HumiditySensor).relativeHumidityMeasurement_humidity <= 30.0)\n(#Humidifier).switch_on()\n(#Clock).clock_delay(ms: 5000)\n(#Humidifier).switch_on()'}]",0.9,"Both codes turn on the humidifier after detecting low humidity and a delay, but the generated code turns it on twice."
4,창문이 열린 후 5초 내에 조명이 켜져 있으면 조명을 켜 줘.,"{""name"": ""WindowOpenThenLight"",
  ""cron"": """", ""period"": -1, ""code"": ""wait until((#Window).windowControl_window == \""open\"")\n(#Clock).clock_delay(5000)\nif ((#Light).switch_switch == \""on\"") {\n (#Light).switch_on()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 10000, 'code': 'windowOpened := false\nif ((#Window).windowControl_window == ""open"") {\n  windowOpened = true\n}\nif (windowOpened) {\n  wait until(#Light).switch_switch == ""on""\n  (#Speaker).mediaPlayback_speak(""이미 불이 켜져 있습니다."")\n} else {\n  (#Speaker).mediaPlayback_speak(""창이 아직 열려 있지 않습니다."")\n}'}]",0.5,"The generated code checks window status and light, while the ground truth waits for the window to open and then checks the light status."
4,"5초마다 움직임을 감지하고, 감지되면 2초 대기 후 알람을 울려 줘.","{""name"": ""MotionDetectedAlarm"", ""cron"": """", ""period"": 5000, ""code"": ""if ((#MotionSensor).motionSensor_motion == \""active\"") {\n  (#clock).delay(2000)\n  (#Alarm).alarm_siren()\n}""}","[{'name': 'Scenario1', 'cron': '', 'period': 5000, 'code': 'motionDetected := false\nif ((#MotionSensor).motionSensor_motion == ""active"") {\n  motionDetected = true\n  wait until(#Clock).clock_delay(2000)\n  (#Alarm).alarm_siren()\n  motionDetected = false\n}'}]",0.9,"Both codes trigger an alarm after detecting motion and a delay, but the generated code uses a flag to track motion detection."
