[
  {
    "text": "\"연기 감지기가 실시간으로 확인하여 연기를 감지하면, 에어컨을 끄고 이후에 알림을 보내줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"16 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        if Tags(\"SmokeDetector\").smokeDetector_smoke == \"detected\":\n            Tags(\"AirConditioner\").switch_off()\n            # Notification code goes here\n            self.period = -1\n```"
  },
  {
    "text": "\"연기를 감지할 경우 실시간으로 연기 감지기를 사용하여 에어컨을 끄고 그 후 알림을 발송해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"16 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        if Tags(\"SmokeDetector\").smokeDetector_smoke == \"detected\":\n            Tags(\"AirConditioner\").switch_off()\n            # Notification code goes here\n            self.period = -1\n```"
  },
  {
    "text": "\"연기 감지기를 이용해 실시간으로 모니터링하고, 연기 발견 시 에어컨을 중단하고 알림을 전송해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"16 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        if Tags(\"SmokeDetector\").smokeDetector_smoke == \"detected\":\n            Tags(\"AirConditioner\").switch_off()\n            # Notification code goes here\n            self.period = -1\n```"
  },
  {
    "text": "\"실시간으로 연기 감지기를 체크하고, 만약 연기를 발견하면 에어컨을 꺼주고 결과를 알려줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"16 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        if Tags(\"SmokeDetector\").smokeDetector_smoke == \"detected\":\n            Tags(\"AirConditioner\").switch_off()\n            # Notification code goes here\n            self.period = -1\n```"
  },
  {
    "text": "\"에어컨이 켜져 있는 상태이고, 현재 온도가 22도보다 낮을 때에는, 에어컨을 끄고 그리고 알림을 보내줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").switch_switch == \"on\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 22:\n            Tags(\"AirConditioner\").switch_off()\n            # here should be a code to send notification, but there is no available method in the given device classes\n```"
  },
  {
    "text": "\"에어컨이 작동 중이며, 현재의 온도가 22도 이하라면, 에어컨의 작동을 중지시키고 알림을 발송해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").switch_switch == \"on\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 22:\n            Tags(\"AirConditioner\").switch_off()\n            # here should be a code to send notification, but there is no available method in the given device classes\n```"
  },
  {
    "text": "\"만약 에어컨이 켜져 있고, 온도가 22도 미만이라면, 에어컨을 종료하고 알림을 통보해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").switch_switch == \"on\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 22:\n            Tags(\"AirConditioner\").switch_off()\n            # here should be a code to send notification, but there is no available method in the given device classes\n```"
  },
  {
    "text": "\"에어컨이 켜진 상태에서, 현재의 온도가 22도보다 더 낮다면, 에어컨을 끄는 동시에 알림을 전해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").switch_switch == \"on\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 22:\n            Tags(\"AirConditioner\").switch_off()\n            # here should be a code to send notification, but there is no available method in the given device classes\n```"
  },
  {
    "text": "\"토양 습도 센서가 실시간으로 확인하여 습도가 70% 보다 높으면, 알림을 보내줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"17 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        soil_humidity = Tags(\"SoilMoistureSensor\").soilHumidityMeasurement_soilHumidity\n        if soil_humidity > 70:\n            # send notification\n            pass\n```"
  },
  {
    "text": "\"토양 습도 센서를 이용해 실시간으로 습도를 감지하고, 이가 70%를 초과하면 알림을 전송해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"17 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        soil_humidity = Tags(\"SoilMoistureSensor\").soilHumidityMeasurement_soilHumidity\n        if soil_humidity > 70:\n            # send notification\n            pass\n```"
  },
  {
    "text": "\"알림을 보내주게, 토양 습도 센서가 실시간으로 습도를 측정하며 이 값이 70% 이상이라면.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"17 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        soil_humidity = Tags(\"SoilMoistureSensor\").soilHumidityMeasurement_soilHumidity\n        if soil_humidity > 70:\n            # send notification\n            pass\n```"
  },
  {
    "text": "\"습도가 70%를 넘어가면, 토양 습도 센서를 통해 실시간으로 알림을 보내줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"17 3 16 5 5\"\n        self.period = 100\n\n    def run(self):\n        soil_humidity = Tags(\"SoilMoistureSensor\").soilHumidityMeasurement_soilHumidity\n        if soil_humidity > 70:\n            # send notification\n            pass\n```"
  },
  {
    "text": "\"에어컨을 냉방 모드로 설정하고, 이후에 목표 온도를 정확하게 24도로 설정해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        Tags(\"AirConditioner\").airConditionerMode_setAirConditionerMode(\"cool\")\n        Tags(\"AirConditioner\").airConditionerMode_setTemperature(24)\n```"
  },
  {
    "text": "\"에어컨을 냉방 모드로 바꾼 후, 목표 온도를 24도로 맞춰줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        Tags(\"AirConditioner\").airConditionerMode_setAirConditionerMode(\"cool\")\n        Tags(\"AirConditioner\").airConditionerMode_setTemperature(24)\n```"
  },
  {
    "text": "\"냉방 모드로 에어컨을 조절하고, 그다음에는 24도로 온도를 설정해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        Tags(\"AirConditioner\").airConditionerMode_setAirConditionerMode(\"cool\")\n        Tags(\"AirConditioner\").airConditionerMode_setTemperature(24)\n```"
  },
  {
    "text": "\"에어컨이 냉방 모드로 작동하게 하고, 이어서 24도를 목표 온도로 정해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        Tags(\"AirConditioner\").airConditionerMode_setAirConditionerMode(\"cool\")\n        Tags(\"AirConditioner\").airConditionerMode_setTemperature(24)\n```"
  },
  {
    "text": "\"에어컨이 가열 모드로 설정되어 있는 상태이고, 목표 온도가 정확하게 20도보다 낮을 경우, 목표 온도를 20도로 설정해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").airConditionerMode_airConditionerMode == \"heat\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 20:\n            Tags(\"AirConditioner\").airConditionerMode_setTemperature(20)\n```"
  },
  {
    "text": "\"에어컨이 가열 모드로 작동 중이며, 설정 온도가 20도 미만일 때에는 목표 온도를 20도로 조정해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").airConditionerMode_airConditionerMode == \"heat\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 20:\n            Tags(\"AirConditioner\").airConditionerMode_setTemperature(20)\n```"
  },
  {
    "text": "\"가열 모드에서 작동하는 에어컨의 목표 온도가 20도 이하일 경우, 그 목표 온도를 20도로 바꿔줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").airConditionerMode_airConditionerMode == \"heat\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 20:\n            Tags(\"AirConditioner\").airConditionerMode_setTemperature(20)\n```"
  },
  {
    "text": "\"에어컨이 가열 모드로 동작하고 있고, 만약 설정된 온도가 20도보다 작다면, 그 목표 온도를 20도로 설정해줘.\"",
    "code": "```python\nclass Scenario1:\n    def __init__(self):\n        self.cron = \"* * * * *\"\n        self.period = -1\n\n    def run(self):\n        if Tags(\"AirConditioner\").airConditionerMode_airConditionerMode == \"heat\" and Tags(\"AirConditioner\").airConditionerMode_targetTemperature < 20:\n            Tags(\"AirConditioner\").airConditionerMode_setTemperature(20)\n```"
  }
]