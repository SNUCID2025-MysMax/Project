[
    {
        "command": "문이 닫히면 5초마다 조명을 끄고 3번 반복해 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('DoorLock').doorControl_door == 'closed')
        Tags('Light').switch_off()
        Tags('Clock').clock_delay(0, 0, 5)
        Tags('Light').switch_off()
        Tags('Clock').clock_delay(0, 0, 5)
        Tags('Light').switch_off()",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#DoorLock).doorControl_door == 'closed')
(#Light).switch_off()
(#Clock).clock_delay(0, 0, 5)
(#Light).switch_off()
(#Clock).clock_delay(0, 0, 5)
(#Light).switch_off()"
            }
        ]
    },
    {
        "command": "창문이 열리면 2초마다 블라인드를 10씩 내려 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100

    def run(self):
        wait_until(Tags('Window').windowControl_window == 'open')
        current_level = Tags('Blind').blindLevel_blindLevel
        new_level = current_level
        if new_level > 0:
            new_level = new_level - 10
            if new_level < 0:
                new_level = 0
            Tags('Blind').blindLevel_setBlindLevel(new_level)
        Tags('Clock').clock_delay(0, 0, 2)",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "wait until((#Window).windowControl_window == 'open')
current_level = (#Blind).blindLevel_blindLevel
new_level = current_level
if (new_level > 0) {
    new_level = new_level - 10
    if (new_level < 0) {
        new_level = 0
    }
    (#Blind).blindLevel_setBlindLevel(new_level)
}
(#Clock).clock_delay(0, 0, 2)"
            }
        ]
    },
    {
        "command": "움직임이 감지되면 1초마다 TV 볼륨을 2씩 높여서 최대 10까지 올려 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('MotionSensor').motionSensor_motion == 'active')
            self.active = True

        if Tags('MotionSensor').motionSensor_motion == 'active':
            current_volume = Tags('Television').audioVolume_volume
            if current_volume >= 10:
                break
            new_volume = current_volume + 2
            if new_volume > 10:
                new_volume = 10
            Tags('Television').audioVolume_setVolume(new_volume)
            Tags('Clock').clock_delay(0, 0, 1)
        else:
            self.active = False",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "active := False
if (active == False) {
    wait until((#MotionSensor).motionSensor_motion == 'active')
    active = True
}
if ((#MotionSensor).motionSensor_motion == 'active') {
    current_volume = (#Television).audioVolume_volume
    if (current_volume >= 10) {
        break
    }
    new_volume = current_volume + 2
    if (new_volume > 10) {
        new_volume = 10
    }
    (#Television).audioVolume_setVolume(new_volume)
    (#Clock).clock_delay(0, 0, 1)
} else {
    active = False
}"
            }
        ]
    },
    {
        "command": "에어컨이 꺼지면 5초마다 ‘에어컨을 켜 주세요’라고 3번 말해 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = -1

    def run(self):
        wait_until(Tags('AirConditioner').switch_switch == 'off')
        Tags('Speaker').mediaPlayback_speak('에어컨을 켜 주세요')
        Tags('Clock').clock_delay(0, 0, 5)
        Tags('Speaker').mediaPlayback_speak('에어컨을 켜 주세요')
        Tags('Clock').clock_delay(0, 0, 5)
        Tags('Speaker').mediaPlayback_speak('에어컨을 켜 주세요')",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": -1,
                "code": "wait until((#AirConditioner).switch_switch == 'off')
(#Speaker).mediaPlayback_speak('에어컨을 켜 주세요')
(#Clock).clock_delay(0, 0, 5)
(#Speaker).mediaPlayback_speak('에어컨을 켜 주세요')
(#Clock).clock_delay(0, 0, 5)
(#Speaker).mediaPlayback_speak('에어컨을 켜 주세요')"
            }
        ]
    },
    {
        "command": "문이 닫히면 10초마다 조명의 밝기를 10씩 낮춰서 완전히 꺼질 때까지 반복해 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('DoorLock').doorControl_door == 'closed')
            self.active = True

        if Tags('DoorLock').doorControl_door == 'closed':
            current_level = Tags('Light').switchLevel_level
            if current_level == 0:
                break
            new_level = current_level - 10
            if new_level < 0:
                new_level = 0
            Tags('Light').switchLevel_setLevel(new_level, 0)
            Tags('Clock').clock_delay(0, 0, 10)
        else:
            self.active = False",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "active := False
if (active == False) {
    wait until((#DoorLock).doorControl_door == 'closed')
    active = True
}
if ((#DoorLock).doorControl_door == 'closed') {
    current_level = (#Light).switchLevel_level
    if (current_level == 0) {
        break
    }
    new_level = current_level - 10
    if (new_level < 0) {
        new_level = 0
    }
    (#Light).switchLevel_setLevel(new_level, 0)
    (#Clock).clock_delay(0, 0, 10)
} else {
    active = False
}"
            }
        ]
    },
    {
        "command": "조명이 켜지면 2초마다 창문과 커튼을 번갈아 열고 닫아 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.active = False
        self.toggle = False

    def run(self):
        if self.active == False:
            wait_until(Tags('Light').switch_switch == 'on')
            self.active = True

        if Tags('Light').switch_switch == 'on':
            if self.toggle == False:
                window_state = Tags('Window').windowControl_window
                if window_state == 'open':
                    Tags('Window').windowControl_close()
                else:
                    Tags('Window').windowControl_open()
                self.toggle = True
            else:
                curtain_state = Tags('Curtain').curtain_curtain
                if curtain_state == 'open':
                    Tags('Curtain').curtain_close()
                else:
                    Tags('Curtain').curtain_open()
                self.toggle = False
            Tags('Clock').clock_delay(0, 0, 2)
        else:
            self.active = False
            self.toggle = False",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "active := False
toggle := False
if (active == False) {
    wait until((#Light).switch_switch == 'on')
    active = True
}
if ((#Light).switch_switch == 'on') {
    if (toggle == False) {
        window_state = (#Window).windowControl_window
        if (window_state == 'open') {
            (#Window).windowControl_close()
        } else {
            (#Window).windowControl_open()
        }
        toggle = True
    } else {
        curtain_state = (#Curtain).curtain_curtain
    }
    (#Clock).clock_delay(0, 0, 2)
} else {
    active = False
}"
            }
        ]
    },
    {
        "command": "알람이 울리면 3초마다 커튼을 열고 닫아 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('Alarm').alarm_alarm != 'off')
            self.active = True

        if Tags('Alarm').alarm_alarm != 'off':
            curtain_state = Tags('Curtain').curtain_curtain
            if curtain_state == 'open':
                Tags('Curtain').curtain_close()
            else:
                Tags('Curtain').curtain_open()
            Tags('Clock').clock_delay(0, 0, 3)
        else:
            self.active = False",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "active := False
if (active == False) {
    wait until((#Alarm).alarm_alarm != 'off')
    active = True
}
if ((#Alarm).alarm_alarm != 'off') {
    curtain_state = (#Curtain).curtain_curtain
    if (curtain_state == 'open') {
        (#Curtain).curtain_close()
    } else {
        (#Curtain).curtain_open()
    }
    (#Clock).clock_delay(0, 0, 3)
} else {
    active = False
}"
            }
        ]
    },
    {
        "command": "블라인드가 열리면 1초마다 조명의 밝기를 10씩 밝게 해 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.active = False

    def run(self):
        if self.active == False:
            wait_until(Tags('Blind').blind_blind == 'open')
            self.active = True

        if Tags('Blind').blind_blind == 'open':
            current_level = Tags('Light').switchLevel_level
            new_level = current_level + 10
            if new_level > 100:
                new_level = 100
            if new_level != current_level:
                Tags('Light').switchLevel_setLevel(new_level, 0)
            Tags('Clock').clock_delay(0, 0, 1)
        else:
            self.active = False",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "active := False
if (active == False) {
    wait until((#Blind).blind_blind == 'open')
    active = True
}
if ((#Blind).blind_blind == 'open') {
    current_level = (#Light).switchLevel_level
    new_level = current_level + 10
    if (new_level > 100) {
        new_level = 100
    }
    if (new_level != current_level) {
        (#Light).switchLevel_setLevel(new_level, 0)
    }
    (#Clock).clock_delay(0, 0, 1)
} else {
    active = False
}"
            }
        ]
    },
    {
        "command": "제습기가 켜지면 4초마다 스피커를 껐다 켜 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.active = False
        self.toggle = False

    def run(self):
        if self.active == False:
            wait_until(Tags('Dehumidifier').switch_switch == 'on')
            self.active = True

        if Tags('Dehumidifier').switch_switch == 'on':
            if self.toggle == False:
                Tags('Speaker').switch_off()
                self.toggle = True
            else:
                Tags('Speaker').switch_on()
                self.toggle = False
            Tags('Clock').clock_delay(0, 0, 4)
        else:
            self.active = False
            self.toggle = False",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "active := False
toggle := False
if (active == False) {
    wait until((#Dehumidifier).switch_switch == 'on')
    active = True
}
if ((#Dehumidifier).switch_switch == 'on') {
    if (toggle == False) {
        (#Speaker).switch_off()
        toggle = True
    } else {
        (#Speaker).switch_on()
    }
    (#Clock).clock_delay(0, 0, 4)
} else {
    active = False
}"
            }
        ]
    },
    {
        "command": "TV가 켜지면 3초마다 스피커와 조명을 껐다 켰다 반복해 줘.",
        "python": "class Scenario1:
    def __init__(self):
        self.cron = ''
        self.period = 100
        self.active = False
        self.toggle = False

    def run(self):
        if self.active == False:
            wait_until(Tags('Television').switch_switch == 'on')
            self.active = True

        if Tags('Television').switch_switch == 'on':
            if self.toggle == False:
                Tags('Speaker').switch_off()
                Tags('Light').switch_off()
                self.toggle = True
            else:
                Tags('Speaker').switch_on()
                Tags('Light').switch_on()
                self.toggle = False
            Tags('Clock').clock_delay(0, 0, 3)
        else:
            self.active = False
            self.toggle = False",
        "code": [
            {
                "name": "Scenario1",
                "cron": "",
                "period": 100,
                "code": "active := False
toggle := False
if (active == False) {
    wait until((#Television).switch_switch == 'on')
    active = True
}
if ((#Television).switch_switch == 'on') {
    if (toggle == False) {
        (#Speaker).switch_off()
        (#Light).switch_off()
        toggle = True
    } else {
        (#Speaker).switch_on()
    }
    (#Clock).clock_delay(0, 0, 3)
} else {
    active = False
}"
            }
        ]
    }
]