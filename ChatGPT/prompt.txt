# Devices
class Blind:
	"""
	Tags: ["Blind"]

	---

	Enums:
		blindEnum (Enum):
			closed: closed
			closing: closing…
			open: open
			opening: opening…
			partially
			paused
			unknown: unknown

	---

	Attributes:
		blindLevel_blindLevel (INTEGER): A number that represents the current level as a function of being open, ``0-100`` in percent; 0 representing completely closed, and 100 representing completely open.
		blind_blind (blindEnum): A string representation of whether the blind is open or closed

	---

	Methods:
		blindLevel_setBlindLevel(blindLevel: INTEGER) -> VOID:
			Set the blind level to the given value.
	
			Args:
				blindLevel (INTEGER): The level to which the blind should be set, ``0-100`` in percent; 0 representing completely closed, and 100 representing completely open.
	
		blind_close() -> VOID:
			Close the blind
	
		blind_open() -> VOID:
			Open the blind
	
		blind_pause() -> VOID:
			Pause opening or closing the blind
	
	"""
class Clock:
	"""
	Tags: ["Clock"]

	---

	Enums:
		weekdayEnum (Enum):
			monday
			tuesday
			wednesday
			thursday
			friday
			saturday
			sunday

	---

	Attributes:
		clock_date (DOUBLE): Current date as double number - format: YYYYMMdd
		clock_datetime (DOUBLE): Current date and time as double number - format: YYYYMMddhhmm
		clock_day (INTEGER): Current day
		clock_hour (INTEGER): Current hour
		clock_isHoliday (BOOL): today is holiday or not
		clock_minute (INTEGER): Current minute
		clock_month (INTEGER): Current month
		clock_second (INTEGER): Current second
		clock_time (DOUBLE): Current time as double number - format: hhmm
		clock_timestamp (DOUBLE): Current timestamp (return current unix time - unit: seconds with floating point)
		clock_weekday (weekdayEnum): Current weekday
		clock_year (INTEGER): Current year

	---

	Methods:
		clock_delay(hour: INTEGER, minute: INTEGER, second: INTEGER) -> VOID:
			delay for a given amount of time
	
			Args:
				hour (INTEGER): hour
				minute (INTEGER): minute
				second (INTEGER): second
	
	"""
class Humidifier:
	"""
	Tags: ["Humidifier"]

	---

	Enums:
		switchEnum (Enum):
			on: The value of the ``switch`` attribute if the switch is on
			off: The value of the ``switch`` attribute if the switch is off
		humidifierModeEnum (Enum):
			auto
			low
			medium
			high

	---

	Attributes:
		switch_switch (switchEnum): A string representation of whether the switch is on or off
		humidifierMode_humidifierMode (humidifierModeEnum): Current mode of the humidifier

	---

	Methods:
		switch_off() -> VOID:
			Turn a switch off
	
		switch_on() -> VOID:
			Turn a switch on
	
		switch_toggle() -> VOID:
			Toggle a switch
	
		humidifierMode_setHumidifierMode(mode: humidifierModeEnum) -> VOID:
			Set the humidifier mode
	
			Args:
				mode (humidifierModeEnum): Set the humidifier mode to "auto", "low", "medium", or "high" mode
	
	"""
class AirConditioner:
	"""
	Tags: ["AirConditioner"]

	---

	Enums:
		switchEnum (Enum):
			on: The value of the ``switch`` attribute if the switch is on
			off: The value of the ``switch`` attribute if the switch is off
		airConditionerModeEnum (Enum):
			auto: auto
			cool: cool
			heat: heat

	---

	Attributes:
		switch_switch (switchEnum): A string representation of whether the switch is on or off
		airConditionerMode_airConditionerMode (airConditionerModeEnum): Current mode of the air conditioner
		airConditionerMode_supportedAcModes (list[airConditionerModeEnum]): Supported states for this air conditioner to be in
		airConditionerMode_targetTemperature (INTEGER): Current temperature status of the air conditioner

	---

	Methods:
		switch_off() -> VOID:
			Turn a switch off
	
		switch_on() -> VOID:
			Turn a switch on
	
		switch_toggle() -> VOID:
			Toggle a switch
	
		airConditionerMode_setAirConditionerMode(mode: airConditionerModeEnum) -> VOID:
			Set the air conditioner mode
	
			Args:
				mode (airConditionerModeEnum): Set the air conditioner mode
	
		airConditionerMode_setTemperature(temperature: INTEGER) -> VOID:
			Set the air conditioner temperature
	
			Args:
				temperature (INTEGER): Set the air conditioner temperature
	
	"""
class DoorLock:
	"""
	Tags: ["DoorLock"]

	---

	Enums:
		doorEnum (Enum):
			closed: The door is closed
			closing: The door is closing
			open: The door is open
			opening: The door is opening
			unknown: The current state of the door is unknown

	---

	Attributes:
		doorControl_door (doorEnum): The current state of the door

	---

	Methods:
		doorControl_close() -> VOID:
			Close the door
	
		doorControl_open() -> VOID:
			Open the door
	
	"""
class HumiditySensor:
	"""
	Tags: ["HumiditySensor"]

	---

	Attributes:
		relativeHumidityMeasurement_humidity (DOUBLE): A numerical representation of the relative humidity measurement taken by the device
	"""
class Window:
	"""
	Tags: ["Window"]

	---

	Enums:
		windowEnum (Enum):
			closed: closed
			open: open
			unknown: unknown

	---

	Attributes:
		windowControl_window (windowEnum): A string representation of whether the window is open or closed

	---

	Methods:
		windowControl_close() -> VOID:
			Close the window
	
		windowControl_open() -> VOID:
			Open the window
	
	"""
class Curtain:
	"""
	Tags: ["Curtain"]

	---

	Enums:
		curtainEnum (Enum):
			closed: closed
			closing: closing…
			open: open
			opening: opening…
			partially
			paused
			unknown: unknown

	---

	Attributes:
		curtain_curtain (curtainEnum): A string representation of whether the curtain is open or closed
		curtain_supportedCurtainCommands (list[curtainEnum]): Curtain commands supported by this instance of Curtain

	---

	Methods:
		curtain_close() -> VOID:
			Close the curtain
	
		curtain_open() -> VOID:
			Open the curtain
	
		curtain_pause() -> VOID:
			Pause opening or closing the curtain
	
	"""

# User Command
command: 에어컨이 꺼진 상태에서 창문이 열렸을 때부터 10초 간격으로 습도를 체크해서, 습도가 60%를 초과하면 블라인드를 내리고 조명을 꺼 줘. 이후 문이 닫히면 5초 지연 후 알람을 울리고, 알람이 울린 후 1분 동안은 문이 열려 있는 동안 1초 간격으로 조명을 깜빡이다가 문이 닫히면 스피커로 ‘문이 닫혔습니다’를 말해 줘.

# Current Time
current: Wed, 30 Apr 2025 21:29:52