# Devices
class DoorLock:
	"""
	Tags: ["DoorLock"]

	---

	Enums:
		doorEnum (Enum):
			closed: The door is closed
			closing: The door is closing
			open: The door is open
			opening: The door is opening
			unknown: The current state of the door is unknown

	---

	Attributes:
		doorControl_door (doorEnum): The current state of the door

	---

	Methods:
		doorControl_close() -> VOID:
			Close the door
	
		doorControl_open() -> VOID:
			Open the door
	
	"""
class Fan:
	"""
	Tags: ["Fan"]

	---

	Enums:
		switchEnum (Enum):
			on: The value of the ``switch`` attribute if the switch is on
			off: The value of the ``switch`` attribute if the switch is off

	---

	Attributes:
		switch_switch (switchEnum): A string representation of whether the switch is on or off
		fanControl_fanSpeed (INTEGER): The current fan speed represented as a integer value. - unit: RPM
		fanControl_percent (INTEGER): The current fan speed represented as a percent value.

	---

	Methods:
		switch_off() -> VOID:
			Turn a switch off
	
		switch_on() -> VOID:
			Turn a switch on
	
		switch_toggle() -> VOID:
			Toggle a switch
	
		fanControl_setFanSpeed(speed: INTEGER) -> VOID:
			Set the fan speed
	
			Args:
				speed (INTEGER): Set the fan to this speed
	
		fanControl_setPercent(percent: INTEGER) -> VOID:
			Set the fan speed percent.
	
			Args:
				percent (INTEGER): The percent value to set the fan speed to.
	
	"""
class Humidifier:
	"""
	Tags: ["Humidifier"]

	---

	Enums:
		switchEnum (Enum):
			on: The value of the ``switch`` attribute if the switch is on
			off: The value of the ``switch`` attribute if the switch is off
		humidifierModeEnum (Enum):
			auto
			low
			medium
			high

	---

	Attributes:
		switch_switch (switchEnum): A string representation of whether the switch is on or off
		humidifierMode_humidifierMode (humidifierModeEnum): Current mode of the humidifier

	---

	Methods:
		switch_off() -> VOID:
			Turn a switch off
	
		switch_on() -> VOID:
			Turn a switch on
	
		switch_toggle() -> VOID:
			Toggle a switch
	
		humidifierMode_setHumidifierMode(mode: humidifierModeEnum) -> VOID:
			Set the humidifier mode
	
			Args:
				mode (humidifierModeEnum): Set the humidifier mode to "auto", "low", "medium", or "high" mode
	
	"""
class AirPurifier:
	"""
	Tags: ["AirPurifier"]

	---

	Enums:
		switchEnum (Enum):
			on: The value of the ``switch`` attribute if the switch is on
			off: The value of the ``switch`` attribute if the switch is off
		airPurifierFanModeEnum (Enum):
			auto: The fan is on auto
			sleep: The fan is in sleep mode to reduce noise
			low: The fan is on low
			medium: The fan is on medium
			high: The fan is on high
			quiet: The fan is on quiet mode to reduce noise
			windFree: The fan is on wind free mode to reduce the feeling of cold air
			off: The fan is off

	---

	Attributes:
		switch_switch (switchEnum): A string representation of whether the switch is on or off
		airPurifierFanMode_airPurifierFanMode (airPurifierFanModeEnum): The current mode of the air purifier fan, an enum of auto, low, medium, high, sleep, quiet or windFree
		airPurifierFanMode_supportedAirPurifierFanModes (list[airPurifierFanModeEnum]): Supported states for this air purifier fan to be in

	---

	Methods:
		switch_off() -> VOID:
			Turn a switch off
	
		switch_on() -> VOID:
			Turn a switch on
	
		switch_toggle() -> VOID:
			Toggle a switch
	
		airPurifierFanMode_setAirPurifierFanMode(mode: airPurifierFanModeEnum) -> VOID:
			Set the air purifier fan's mode
	
			Args:
				mode (airPurifierFanModeEnum): Set the air purifier fan's mode
	
	"""
class Dehumidifier:
	"""
	Tags: ["Dehumidifier"]

	---

	Enums:
		switchEnum (Enum):
			on: The value of the ``switch`` attribute if the switch is on
			off: The value of the ``switch`` attribute if the switch is off
		dehumidifierModeEnum (Enum):
			cooling
			delayWash
			drying
			finished
			refreshing
			weightSensing
			wrinklePrevent
			dehumidifying
			AIDrying
			sanitizing
			internalCare
			freezeProtection
			continuousDehumidifying
			thawingFrozenInside

	---

	Attributes:
		switch_switch (switchEnum): A string representation of whether the switch is on or off
		dehumidifierMode_dehumidifierMode (dehumidifierModeEnum): Current mode of the dehumidifier

	---

	Methods:
		switch_off() -> VOID:
			Turn a switch off
	
		switch_on() -> VOID:
			Turn a switch on
	
		switch_toggle() -> VOID:
			Toggle a switch
	
		dehumidifierMode_setDehumidifierMode(mode: dehumidifierModeEnum) -> VOID:
			Set the dehumidifier mode
	
			Args:
				mode (dehumidifierModeEnum): Set the dehumidifier mode
	
	"""
class AirConditioner:
	"""
	Tags: ["AirConditioner"]

	---

	Enums:
		switchEnum (Enum):
			on: The value of the ``switch`` attribute if the switch is on
			off: The value of the ``switch`` attribute if the switch is off
		airConditionerModeEnum (Enum):
			auto: auto
			cool: cool
			heat: heat

	---

	Attributes:
		switch_switch (switchEnum): A string representation of whether the switch is on or off
		airConditionerMode_airConditionerMode (airConditionerModeEnum): Current mode of the air conditioner
		airConditionerMode_supportedAcModes (list[airConditionerModeEnum]): Supported states for this air conditioner to be in
		airConditionerMode_targetTemperature (INTEGER): Current temperature status of the air conditioner

	---

	Methods:
		switch_off() -> VOID:
			Turn a switch off
	
		switch_on() -> VOID:
			Turn a switch on
	
		switch_toggle() -> VOID:
			Toggle a switch
	
		airConditionerMode_setAirConditionerMode(mode: airConditionerModeEnum) -> VOID:
			Set the air conditioner mode
	
			Args:
				mode (airConditionerModeEnum): Set the air conditioner mode
	
		airConditionerMode_setTemperature(temperature: INTEGER) -> VOID:
			Set the air conditioner temperature
	
			Args:
				temperature (INTEGER): Set the air conditioner temperature
	
	"""
class Clock:
	"""
	Tags: ["Clock"]

	---

	Enums:
		weekdayEnum (Enum):
			monday
			tuesday
			wednesday
			thursday
			friday
			saturday
			sunday

	---

	Attributes:
		clock_date (DOUBLE): Current date as double number - format: YYYYMMdd
		clock_datetime (DOUBLE): Current date and time as double number - format: YYYYMMddhhmm
		clock_day (INTEGER): Current day
		clock_hour (INTEGER): Current hour
		clock_isHoliday (BOOL): today is holiday or not
		clock_minute (INTEGER): Current minute
		clock_month (INTEGER): Current month
		clock_second (INTEGER): Current second
		clock_time (DOUBLE): Current time as double number - format: hhmm
		clock_timestamp (DOUBLE): Current timestamp (return current unix time - unit: seconds with floating point)
		clock_weekday (weekdayEnum): Current weekday
		clock_year (INTEGER): Current year

	---

	Methods:
		clock_delay(hour: INTEGER, minute: INTEGER, second: INTEGER) -> VOID:
			delay for a given amount of time
	
			Args:
				hour (INTEGER): hour
				minute (INTEGER): minute
				second (INTEGER): second
	
	"""
class Button:
	"""
	Tags: ["Button"]

	---

	Enums:
		buttonEnum (Enum):
			pushed: The value if the button is pushed
			held: The value if the button is held
			double: The value if the button is pushed twice
			pushed_2x: The value if the button is pushed twice
			pushed_3x: The value if the button is pushed three times
			pushed_4x: The value if the button is pushed four times
			pushed_5x: The value if the button is pushed five times
			pushed_6x: The value if the button is pushed six times
			down: The value if the button is clicked down
			down_2x: The value if the button is clicked down twice
			down_3x: The value if the button is clicked down three times
			down_4x: The value if the button is clicked down four times
			down_5x: The value if the button is clicked down five times
			down_6x: The value if the button is clicked down six times
			down_hold: The value if the button is clicked down and held
			up: The value if the button is clicked up
			up_2x: The value if the button is clicked up twice
			up_3x: The value if the button is clicked up three times
			up_4x: The value if the button is clicked up four times
			up_5x: The value if the button is clicked up five times
			up_6x: The value if the button is clicked up six times
			up_hold: The value if the button is clicked up and held
			swipe_up: The value if the button is swiped up from botton to top
			swipe_down: The value if the button is swiped down from top to bottom
			swipe_left: The value if the button is swiped from right to left
			swipe_right: The value if the button is swiped from left to right

	---

	Attributes:
		button_button (buttonEnum): The state of the buttons
		button_numberOfButtons (INTEGER): The number of buttons on the device
		button_supportedButtonValues (list[buttonEnum]): List of valid button attribute values
	"""

# User Command
command: 3분마다 알람을 울려줘. 5분마다 에어컨 스위치를 토글해.

# Current Time
current: Fri, 09 May 2025 09:35:43