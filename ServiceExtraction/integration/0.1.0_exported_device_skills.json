{
  "AirConditioner": {
    "skills": [
      {
        "id": "airConditionerMode",
        "descriptor": "Allows for the control of the air conditioner.",
        "values": [
          {
            "id": "airConditionerMode",
            "descriptor": "Current mode of the air conditioner",
            "type": "ENUM",
            "format": "airConditionerModeEnum"
          },
          {
            "id": "supportedAcModes",
            "descriptor": "Supported states for this air conditioner to be in",
            "type": "LIST",
            "format": "list[airConditionerModeEnum]"
          },
          {
            "id": "targetTemperature",
            "descriptor": "Current temperature status of the air conditioner",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setAirConditionerMode",
            "descriptor": "Set the air conditioner mode",
            "arguments": [
              {
                "id": "mode",
                "descriptor": "Set the air conditioner mode",
                "type": "ENUM",
                "format": "airConditionerModeEnum"
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "setTemperature",
            "descriptor": "Set the air conditioner temperature",
            "arguments": [
              {
                "id": "temperature",
                "descriptor": "Set the air conditioner temperature",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• auto - The fan is on auto\n• cool - The fan is in sleep mode to reduce noise\n• heat - The fan is on low",
          "airConditionerModeEnum": [
            "auto",
            "cool",
            "heat",
            "fanonly",
            "dehumidify"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "AirPurifier": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "airPurifierFanMode",
        "descriptor": "Maintains and sets the state of an air purifier's fan",
        "values": [
          {
            "id": "airPurifierFanMode",
            "descriptor": "The current mode of the air purifier fan, an enum of auto, low, medium, high, sleep, quiet or windFree",
            "type": "ENUM",
            "format": "airPurifierFanModeEnum"
          },
          {
            "id": "supportedAirPurifierFanModes",
            "descriptor": "Supported states for this air purifier fan to be in",
            "type": "LIST",
            "format": "list[airPurifierFanModeEnum]"
          }
        ],
        "functions": [
          {
            "id": "setAirPurifierFanMode",
            "descriptor": "Set the air purifier fan's mode",
            "arguments": [
              {
                "id": "mode",
                "descriptor": "Set the air purifier fan's mode",
                "type": "ENUM",
                "format": "airPurifierFanModeEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• auto - The fan is on auto\n• sleep - The fan is in sleep mode to reduce noise\n• low - The fan is on low\n• medium - The fan is on medium\n• high - The fan is on high\n• quiet - The fan is on quiet mode to reduce noise\n• windFree - The fan is on wind free mode to reduce the feeling of cold air\n• off - The fan is off",
          "airPurifierFanModeEnum": [
            "auto",
            "sleep",
            "low",
            "medium",
            "high",
            "quiet",
            "windFree",
            "off"
          ]
        }
      }
    ]
  },
  "AirQualityDetector": {
    "skills": [
      {
        "id": "tvocMeasurement",
        "descriptor": "Measure total volatile organic compound levels",
        "values": [
          {
            "id": "tvocLevel",
            "descriptor": "The level of total volatile organic compounds detected",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "temperatureMeasurement",
        "descriptor": "Get the temperature from a Device that reports current temperature",
        "values": [
          {
            "id": "temperature",
            "descriptor": "A number that usually represents the current temperature",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "temperatureRange",
            "descriptor": "Constraints on the temperature value",
            "type": "DICT",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "carbonDioxideMeasurement",
        "descriptor": "Measure carbon dioxide levels",
        "values": [
          {
            "id": "carbonDioxide",
            "descriptor": "The level of carbon dioxide detected",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "dustSensor",
        "descriptor": "Gets the reading of the dust sensor.",
        "values": [
          {
            "id": "dustLevel",
            "descriptor": "Current dust level -- also refered to as PM10, measured in micrograms per cubic meter",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "fineDustLevel",
            "descriptor": "Current level of fine dust -- also refered to as PM2.5, measured in micrograms per cubic meter",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "veryFineDustLevel",
            "descriptor": "Current level of fine dust -- also refered to as PM1.0, measured in micrograms per cubic meter",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "relativeHumidityMeasurement",
        "descriptor": "Allow reading the relative humidity from devices that support it",
        "values": [
          {
            "id": "humidity",
            "descriptor": "A numerical representation of the relative humidity measurement taken by the device",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "Alarm": {
    "skills": [
      {
        "id": "alarm",
        "descriptor": "The Alarm skill allows for interacting with devices that serve as alarms",
        "values": [
          {
            "id": "alarm",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "alarmEnum"
          },
          {
            "id": "alarmVolume",
            "descriptor": "A string representation of the volume of the alarm",
            "type": "ENUM",
            "format": "alarmVolumeEnum"
          }
        ],
        "functions": [
          {
            "id": "both",
            "descriptor": "Strobe and sound the alarm",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "off",
            "descriptor": "Turn the alarm (siren and strobe) off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "setAlarmVolume",
            "descriptor": "Set the volume of the alarm",
            "arguments": [
              {
                "id": "alarmVolume",
                "descriptor": "Set the volume of the alarm to \"mute\", \"low\", \"medium\", or \"high\"",
                "type": "ENUM",
                "format": "alarmVolumeEnum"
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "siren",
            "descriptor": "Sound the siren on the alarm",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "strobe",
            "descriptor": "Strobe the alarm",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "# alarm\n• both - if the alarm is strobing and sounding the alarm\n• off - if the alarm is turned off\n• siren - if the alarm is sounding the siren\n• strobe - if the alarm is strobing\n\n# alarmVolume\n• mute - \n• low - \n• medium - \n• high - ",
          "alarmEnum": [
            "both",
            "off",
            "siren",
            "strobe"
          ],
          "alarmVolumeEnum": [
            "mute",
            "low",
            "medium",
            "high"
          ]
        }
      },
      {
        "id": "battery",
        "descriptor": "Defines that the device has a battery",
        "values": [
          {
            "id": "battery",
            "descriptor": "An indication of the status of the battery",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "Blind": {
    "skills": [
      {
        "id": "blindLevel",
        "descriptor": "Allows for the control of the level of a blind.",
        "values": [
          {
            "id": "blindLevel",
            "descriptor": "A number that represents the current level as a function of being open, ``0-100`` in percent; 0 representing completely closed, and 100 representing completely open.",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setBlindLevel",
            "descriptor": "Set the blind level to the given value.",
            "arguments": [
              {
                "id": "blindLevel",
                "descriptor": "The level to which the blind should be set, ``0-100`` in percent; 0 representing completely closed, and 100 representing completely open.",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      },
      {
        "id": "blind",
        "descriptor": "Allows for the control of the blind.",
        "values": [
          {
            "id": "blind",
            "descriptor": "A string representation of whether the blind is open or closed",
            "type": "ENUM",
            "format": "blindEnum"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the blind",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the blind",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "pause",
            "descriptor": "Pause opening or closing the blind",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - closed\n• closing - closing…\n• open - open\n• opening - opening…\n• partially open - partially open\n• paused -\n• unknown - unknown",
          "blindEnum": [
            "closed",
            "closing",
            "open",
            "opening",
            "partially",
            "paused",
            "unknown"
          ]
        }
      }
    ]
  },
  "Button": {
    "skills": [
      {
        "id": "button",
        "descriptor": "A device with one or more buttons",
        "values": [
          {
            "id": "button",
            "descriptor": "The state of the buttons",
            "type": "ENUM",
            "format": "buttonEnum"
          },
          {
            "id": "numberOfButtons",
            "descriptor": "The number of buttons on the device",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "supportedButtonValues",
            "descriptor": "List of valid button attribute values",
            "type": "LIST",
            "format": "list[buttonEnum]"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• pushed - The value if the button is pushed\n• held - The value if the button is held\n• double - The value if the button is pushed twice\n• pushed_2x - The value if the button is pushed twice\n• pushed_3x - The value if the button is pushed three times\n• pushed_4x - The value if the button is pushed four times\n• pushed_5x - The value if the button is pushed five times\n• pushed_6x - The value if the button is pushed six times\n• down - The value if the button is clicked down\n• down_2x - The value if the button is clicked down twice\n• down_3x - The value if the button is clicked down three times\n• down_4x - The value if the button is clicked down four times\n• down_5x - The value if the button is clicked down five times\n• down_6x - The value if the button is clicked down six times\n• down_hold - The value if the button is clicked down and held\n• up - The value if the button is clicked up\n• up_2x - The value if the button is clicked up twice\n• up_3x - The value if the button is clicked up three times\n• up_4x - The value if the button is clicked up four times\n• up_5x - The value if the button is clicked up five times\n• up_6x - The value if the button is clicked up six times\n• up_hold - The value if the button is clicked up and held\n• swipe_up - The value if the button is swiped up from botton to top\n• swipe_down - The value if the button is swiped down from top to bottom\n• swipe_left - The value if the button is swiped from right to left\n• swipe_right - The value if the button is swiped from left to right",
          "buttonEnum": [
            "pushed",
            "held",
            "double",
            "pushed_2x",
            "pushed_3x",
            "pushed_4x",
            "pushed_5x",
            "pushed_6x",
            "down",
            "down_2x",
            "down_3x",
            "down_4x",
            "down_5x",
            "down_6x",
            "down_hold",
            "up",
            "up_2x",
            "up_3x",
            "up_4x",
            "up_5x",
            "up_6x",
            "up_hold",
            "swipe_up",
            "swipe_down",
            "swipe_left",
            "swipe_right"
          ]
        }
      }
    ]
  },
  "Buttonx4": {
    "skills": [
      {
        "id": "buttonx4",
        "descriptor": "A device with four buttons",
        "values": [
          {
            "id": "button1",
            "descriptor": "The state of the button1",
            "type": "ENUM",
            "format": "buttonEnum"
          },
          {
            "id": "button2",
            "descriptor": "The state of the button2",
            "type": "ENUM",
            "format": "buttonEnum"
          },
          {
            "id": "button3",
            "descriptor": "The state of the button3",
            "type": "ENUM",
            "format": "buttonEnum"
          },
          {
            "id": "button4",
            "descriptor": "The state of the button4",
            "type": "ENUM",
            "format": "buttonEnum"
          },
          {
            "id": "numberOfButtons",
            "descriptor": "The number of buttons on the device",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "supportedButtonValues",
            "descriptor": "List of valid button attribute values",
            "type": "LIST",
            "format": "list[buttonEnum]"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• pushed - The value if the button is pushed\n• held - The value if the button is held\n• double - The value if the button is pushed twice\n• pushed_2x - The value if the button is pushed twice\n• pushed_3x - The value if the button is pushed three times\n• pushed_4x - The value if the button is pushed four times\n• pushed_5x - The value if the button is pushed five times\n• pushed_6x - The value if the button is pushed six times\n• down - The value if the button is clicked down\n• down_2x - The value if the button is clicked down twice\n• down_3x - The value if the button is clicked down three times\n• down_4x - The value if the button is clicked down four times\n• down_5x - The value if the button is clicked down five times\n• down_6x - The value if the button is clicked down six times\n• down_hold - The value if the button is clicked down and held\n• up - The value if the button is clicked up\n• up_2x - The value if the button is clicked up twice\n• up_3x - The value if the button is clicked up three times\n• up_4x - The value if the button is clicked up four times\n• up_5x - The value if the button is clicked up five times\n• up_6x - The value if the button is clicked up six times\n• up_hold - The value if the button is clicked up and held\n• swipe_up - The value if the button is swiped up from botton to top\n• swipe_down - The value if the button is swiped down from top to bottom\n• swipe_left - The value if the button is swiped from right to left\n• swipe_right - The value if the button is swiped from left to right",
          "buttonEnum": [
            "pushed",
            "held",
            "double",
            "pushed_2x",
            "pushed_3x",
            "pushed_4x",
            "pushed_5x",
            "pushed_6x",
            "down",
            "down_2x",
            "down_3x",
            "down_4x",
            "down_5x",
            "down_6x",
            "down_hold",
            "up",
            "up_2x",
            "up_3x",
            "up_4x",
            "up_5x",
            "up_6x",
            "up_hold",
            "swipe_up",
            "swipe_down",
            "swipe_left",
            "swipe_right"
          ]
        }
      }
    ]
  },
  "Calculator": {
    "skills": [
      {
        "id": "calculator",
        "descriptor": "Provides calculation services",
        "values": [],
        "functions": [
          {
            "id": "add",
            "descriptor": "Add two numbers",
            "arguments": [
              {
                "id": "a",
                "descriptor": "The first number to add",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "b",
                "descriptor": "The second number to add",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "DOUBLE"
          },
          {
            "id": "div",
            "descriptor": "Divide two numbers",
            "arguments": [
              {
                "id": "a",
                "descriptor": "The first number to add",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "b",
                "descriptor": "The second number to add",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "DOUBLE"
          },
          {
            "id": "mod",
            "descriptor": "Modulo two numbers",
            "arguments": [
              {
                "id": "a",
                "descriptor": "The first number to add",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "b",
                "descriptor": "The second number to add",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "DOUBLE"
          },
          {
            "id": "mul",
            "descriptor": "Multiply two numbers",
            "arguments": [
              {
                "id": "a",
                "descriptor": "The first number to add",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "b",
                "descriptor": "The second number to add",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "DOUBLE"
          },
          {
            "id": "sub",
            "descriptor": "Subtract two numbers",
            "arguments": [
              {
                "id": "a",
                "descriptor": "The first number to add",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "b",
                "descriptor": "The second number to add",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "DOUBLE"
          }
        ],
        "enum": null
      }
    ]
  },
  "Camera": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "camera",
        "descriptor": "Allows for the control of a camera device",
        "values": [
          {
            "id": "image",
            "descriptor": "The latest image captured by the camera",
            "type": "BINARY",
            "format": null
          },
          {
            "id": "video",
            "descriptor": "The latest video captured by the camera",
            "type": "BINARY",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "take",
            "descriptor": "Take a picture with the camera - Return the image as binary data",
            "arguments": [],
            "return_type": "BINARY"
          },
          {
            "id": "takeTimelapse",
            "descriptor": "Take a picture with the camera - Return the video as binary data",
            "arguments": [
              {
                "id": "duration",
                "descriptor": "The duration of the timelapse in seconds",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "speed",
                "descriptor": "The speed of the timelapse",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "BINARY"
          }
        ],
        "enum": null
      }
    ]
  },
  "Charger": {
    "skills": [
      {
        "id": "voltageMeasurement",
        "descriptor": "Get the value of voltage measured from devices that support it",
        "values": [
          {
            "id": "voltage",
            "descriptor": "A number representing the current voltage measured",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "currentMeasurement",
        "descriptor": "Get the value of electrical current measured from a device.",
        "values": [
          {
            "id": "current",
            "descriptor": "A number representing the current measured.",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "chargingState",
        "descriptor": "The current status of battery charging",
        "values": [
          {
            "id": "chargingState",
            "descriptor": "The current charging state of the device",
            "type": "ENUM",
            "format": "chargingStateEnum"
          },
          {
            "id": "supportedChargingStates",
            "descriptor": "The list of charging states that the device supports. Optional, defaults to all states if not set.",
            "type": "LIST",
            "format": "list[chargingStateEnum]"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• charging - charging\n• discharging - discharging\n• stopped - stopped\n• fullyCharged - fully charged\n• error - error",
          "chargingStateEnum": [
            "charging",
            "discharging",
            "stopped",
            "fullyCharged",
            "error"
          ]
        }
      }
    ]
  },
  "Clock": {
    "skills": [
      {
        "id": "clock",
        "descriptor": "Provide current date and time",
        "values": [
          {
            "id": "date",
            "descriptor": "Current date as double number - format: YYYYMMdd",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "datetime",
            "descriptor": "Current date and time as double number - format: YYYYMMddhhmm",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "day",
            "descriptor": "Current day",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "hour",
            "descriptor": "Current hour",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "isHoliday",
            "descriptor": "today is holiday or not",
            "type": "BOOL",
            "format": null
          },
          {
            "id": "minute",
            "descriptor": "Current minute",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "month",
            "descriptor": "Current month",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "second",
            "descriptor": "Current second",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "time",
            "descriptor": "Current time as double number - format: hhmm",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "timestamp",
            "descriptor": "Current timestamp (return current unix time - unit: seconds with floating point)",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "weekday",
            "descriptor": "Current weekday",
            "type": "ENUM",
            "format": "weekdayEnum"
          },
          {
            "id": "year",
            "descriptor": "Current year",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "delay",
            "descriptor": "delay for a given amount of time",
            "arguments": [
              {
                "id": "hour",
                "descriptor": "hour",
                "type": "INTEGER",
                "format": null
              },
              {
                "id": "minute",
                "descriptor": "minute",
                "type": "INTEGER",
                "format": null
              },
              {
                "id": "second",
                "descriptor": "second",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• monday\n• tuesday\n• wednesday\n• thursday\n• friday\n• saturday\n• sunday",
          "weekdayEnum": [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday"
          ]
        }
      }
    ]
  },
  "ContactSensor": {
    "skills": [
      {
        "id": "contactSensor",
        "descriptor": "Allows reading the value of a contact sensor device",
        "values": [
          {
            "id": "contact",
            "descriptor": "The current state of the contact sensor",
            "type": "ENUM",
            "format": "contactEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• closed - The value if closed\n• open - The value if open",
          "contactEnum": [
            "open",
            "closed"
          ]
        }
      }
    ]
  },
  "Curtain": {
    "skills": [
      {
        "id": "curtain",
        "descriptor": "Allows for the control of the curtain.",
        "values": [
          {
            "id": "curtain",
            "descriptor": "A string representation of whether the curtain is open or closed",
            "type": "ENUM",
            "format": "curtainEnum"
          },
          {
            "id": "supportedCurtainCommands",
            "descriptor": "Curtain commands supported by this instance of Curtain",
            "type": "LIST",
            "format": "list[curtainEnum]"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the curtain",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the curtain",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "pause",
            "descriptor": "Pause opening or closing the curtain",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - closed\n• closing - closing…\n• open - open\n• opening - opening…\n• partially open - partially open\n• paused -\n• unknown - unknown",
          "curtainEnum": [
            "closed",
            "closing",
            "open",
            "opening",
            "partially",
            "paused",
            "unknown"
          ]
        }
      }
    ]
  },
  "Dehumidifier": {
    "skills": [
      {
        "id": "dehumidifierMode",
        "descriptor": "Allows for the control of the dehumidifier mode.",
        "values": [
          {
            "id": "dehumidifierMode",
            "descriptor": "Current mode of the dehumidifier",
            "type": "ENUM",
            "format": "dehumidifierModeEnum"
          }
        ],
        "functions": [
          {
            "id": "setDehumidifierMode",
            "descriptor": "Set the dehumidifier mode",
            "arguments": [
              {
                "id": "mode",
                "descriptor": "Set the dehumidifier mode",
                "type": "ENUM",
                "format": "dehumidifierModeEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• cooling\n• delayWash\n• drying\n• finished\n• refreshing\n• weightSensing\n• wrinklePrevent\n• dehumidifying\n• AIDrying\n• sanitizing\n• internalCare\n• freezeProtection\n• continuousDehumidifying\n• thawingFrozenInside",
          "dehumidifierModeEnum": [
            "cooling",
            "delayWash",
            "drying",
            "finished",
            "refreshing",
            "weightSensing",
            "wrinklePrevent",
            "dehumidifying",
            "AIDrying",
            "sanitizing",
            "internalCare",
            "freezeProtection",
            "continuousDehumidifying",
            "thawingFrozenInside"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "Dishwasher": {
    "skills": [
      {
        "id": "dishwasherMode",
        "descriptor": "Allows for the control of the dishwasher mode.",
        "values": [
          {
            "id": "dishwasherMode",
            "descriptor": "Current mode of the dishwasher",
            "type": "ENUM",
            "format": "dishwasherModeEnum"
          }
        ],
        "functions": [
          {
            "id": "setDishwasherMode",
            "descriptor": "Set the dishwasher mode",
            "arguments": [
              {
                "id": "mode",
                "descriptor": "Set the dishwasher mode to \"eco\", \"intense\", \"auto\", \"quick\", \"rinse\", or \"dry\" mode",
                "type": "ENUM",
                "format": "dishwasherModeEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• eco - The dishwasher is in \"eco\" mode\n• intense - The dishwasher is in \"intense\" mode\n• auto - The dishwasher is in \"auto\" mode\n• quick - The dishwasher is in \"quick\" mode\n• rinse - The dishwasher is in \"rinse\" mode\n• dry - The dishwasher is in \"dry\" mode",
          "dishwasherModeEnum": [
            "eco",
            "intense",
            "auto",
            "quick",
            "rinse",
            "dry"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "DoorLock": {
    "skills": [
      {
        "id": "doorControl",
        "descriptor": "Allow for the control of a door",
        "values": [
          {
            "id": "door",
            "descriptor": "The current state of the door",
            "type": "ENUM",
            "format": "doorEnum"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the door",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the door",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - The door is closed\n• closing - The door is closing\n• open - The door is open\n• opening - The door is opening\n• unknown - The current state of the door is unknown",
          "doorEnum": [
            "closed",
            "closing",
            "open",
            "opening",
            "unknown"
          ]
        }
      }
    ]
  },
  "EmailProvider": {
    "skills": [
      {
        "id": "emailProvider",
        "descriptor": "Provides email services",
        "values": [],
        "functions": [
          {
            "id": "sendMail",
            "descriptor": "Send an email",
            "arguments": [
              {
                "id": "toAddress",
                "descriptor": "The email address of the recipient",
                "type": "STRING",
                "format": null
              },
              {
                "id": "title",
                "descriptor": "The title of the email",
                "type": "STRING",
                "format": null
              },
              {
                "id": "text",
                "descriptor": "The text of the email",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "sendMailWithFile",
            "descriptor": "Send an email with an attachment",
            "arguments": [
              {
                "id": "toAddress",
                "descriptor": "The email address of the recipient",
                "type": "STRING",
                "format": null
              },
              {
                "id": "title",
                "descriptor": "The title of the email",
                "type": "STRING",
                "format": null
              },
              {
                "id": "text",
                "descriptor": "The text of the email",
                "type": "STRING",
                "format": null
              },
              {
                "id": "file",
                "descriptor": "The path to the file to be attached",
                "type": "BINARY",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      }
    ]
  },
  "Fan": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "fanControl",
        "descriptor": "Allows for the control of the fan.",
        "values": [
          {
            "id": "fanSpeed",
            "descriptor": "The current fan speed represented as a integer value. - unit: RPM",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "percent",
            "descriptor": "The current fan speed represented as a percent value.",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setFanSpeed",
            "descriptor": "Set the fan speed",
            "arguments": [
              {
                "id": "speed",
                "descriptor": "Set the fan to this speed",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "setPercent",
            "descriptor": "Set the fan speed percent.",
            "arguments": [
              {
                "id": "percent",
                "descriptor": "The percent value to set the fan speed to.",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      }
    ]
  },
  "Feeder": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "feederPortion",
        "descriptor": "Allows for the portion control of a feeder device.",
        "values": [
          {
            "id": "feedPortion",
            "descriptor": "A number that represents the portion (in grams, pounds, ounces, or servings) that will dispense.",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setFeedPortion",
            "descriptor": "Set the portion (in grams, pounds, ounces, or servings) that the feeder will dispense.",
            "arguments": [
              {
                "id": "portion",
                "descriptor": "The portion (in grams, pounds, ounces, or servings) to dispense.",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "unit",
                "descriptor": "",
                "type": "ENUM",
                "format": "unitEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• grams\n• pounds\n• ounces\n• servings",
          "unitEnum": [
            "grams",
            "pounds",
            "ounces",
            "servings"
          ]
        }
      },
      {
        "id": "feederOperatingState",
        "descriptor": "Allows for the control of a feeder device.",
        "values": [
          {
            "id": "feederOperatingState",
            "descriptor": "The current state of the feeder.",
            "type": "ENUM",
            "format": "feederOperatingStateEnum"
          }
        ],
        "functions": [
          {
            "id": "startFeeding",
            "descriptor": "Begin the feeding process.",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• idle - idle\n• feeding - feeding\n• error - error",
          "feederOperatingStateEnum": [
            "idle",
            "feeding",
            "error"
          ]
        }
      }
    ]
  },
  "GasMeter": {
    "skills": [
      {
        "id": "gasMeter",
        "descriptor": "Read the gas consumption of an energy metering device",
        "values": [
          {
            "id": "gasMeter",
            "descriptor": "the gas energy reported by the metering device. unit: kWh",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "gasMeterCalorific",
            "descriptor": "a measure of the available heat energy, used as part of the calculation to convert gas volume to gas energy. - unit: kcal",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "gasMeterTime",
            "descriptor": "The cumulative gas use time reported by the metering device. - unit: seconds",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "gasMeterVolume",
            "descriptor": "the cumulative gas volume reported by the metering device. - unit: cubic meters",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "GasValve": {
    "skills": [
      {
        "id": "gasMeter",
        "descriptor": "Read the gas consumption of an energy metering device",
        "values": [
          {
            "id": "gasMeter",
            "descriptor": "the gas energy reported by the metering device. unit: kWh",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "gasMeterCalorific",
            "descriptor": "a measure of the available heat energy, used as part of the calculation to convert gas volume to gas energy. - unit: kcal",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "gasMeterTime",
            "descriptor": "The cumulative gas use time reported by the metering device. - unit: seconds",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "gasMeterVolume",
            "descriptor": "the cumulative gas volume reported by the metering device. - unit: cubic meters",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "valve",
        "descriptor": "Allows for the control of a valve device",
        "values": [
          {
            "id": "valve",
            "descriptor": "A string representation of whether the valve is open or closed",
            "type": "ENUM",
            "format": "valveEnum"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the valve",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the valve",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - The value of the ``valve`` attribute if the valve is closed\n• open - The value of the ``valve`` attribute if the valve is open",
          "valveEnum": [
            "open",
            "closed"
          ]
        }
      }
    ]
  },
  "Humidifier": {
    "skills": [
      {
        "id": "humidifierMode",
        "descriptor": "Maintains and sets the state of an humidifier",
        "values": [
          {
            "id": "humidifierMode",
            "descriptor": "Current mode of the humidifier",
            "type": "ENUM",
            "format": "humidifierModeEnum"
          }
        ],
        "functions": [
          {
            "id": "setHumidifierMode",
            "descriptor": "Set the humidifier mode",
            "arguments": [
              {
                "id": "mode",
                "descriptor": "Set the humidifier mode to \"auto\", \"low\", \"medium\", or \"high\" mode",
                "type": "ENUM",
                "format": "humidifierModeEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• auto -\n• low -\n• medium -\n• high -",
          "humidifierModeEnum": [
            "auto",
            "low",
            "medium",
            "high"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "HumiditySensor": {
    "skills": [
      {
        "id": "relativeHumidityMeasurement",
        "descriptor": "Allow reading the relative humidity from devices that support it",
        "values": [
          {
            "id": "humidity",
            "descriptor": "A numerical representation of the relative humidity measurement taken by the device",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "Irrigator": {
    "skills": [
      {
        "id": "irrigatorOperatingState",
        "descriptor": "Allows for the control of a irrigator device.",
        "values": [
          {
            "id": "irrigatorOperatingState",
            "descriptor": "The current state of the irrigator.",
            "type": "ENUM",
            "format": "irrigatorOperatingStateEnum"
          }
        ],
        "functions": [
          {
            "id": "startWatering",
            "descriptor": "Begin the watering process.",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• idle - idle\n• watering - watering\n• error - error",
          "irrigatorOperatingStateEnum": [
            "idle",
            "watering",
            "error"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "irrigatorPortion",
        "descriptor": "Allows for the portion control of a irrigator device.",
        "values": [
          {
            "id": "waterPortion",
            "descriptor": "A number that represents the portion (in liters, milliliters, gallons, or ounces) that will dispense.",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setWaterPortion",
            "descriptor": "Set the portion (in liters, milliliters, gallons, or ounces) that the irrigator will dispense.",
            "arguments": [
              {
                "id": "portion",
                "descriptor": "The portion (in grams, pounds, ounces, or servings) to dispense.",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "unit",
                "descriptor": "",
                "type": "ENUM",
                "format": "unitEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• liters\n• milliliters\n• gallons\n• ounces\n",
          "unitEnum": [
            "liters",
            "milliliters",
            "gallons",
            "ounces"
          ]
        }
      }
    ]
  },
  "LeakSensor": {
    "skills": [
      {
        "id": "leakSensor",
        "descriptor": "A Device that senses water leakage",
        "values": [
          {
            "id": "leakage",
            "descriptor": "Whether or not water leakage was detected by the Device",
            "type": "ENUM",
            "format": "presenceEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• detected - water leak is detected\n• not detected - no leak",
          "presenceEnum": [
            "detected",
            "not_detected"
          ]
        }
      }
    ]
  },
  "Light": {
    "skills": [
      {
        "id": "switchLevel",
        "descriptor": "Allows for the control of the level of a device like a light or a dimmer switch.",
        "values": [
          {
            "id": "level",
            "descriptor": "A number that represents the current level, usually ``0-100`` in percent",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "levelRange",
            "descriptor": "Constraints on the level value",
            "type": "DICT",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "alert",
            "descriptor": "Alert with dimming",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "setLevel",
            "descriptor": "Set the level to the given value. If the device supports being turned on and off then it will be turned on if ``level`` is greater than 0 and turned off if ``level`` is equal to 0.",
            "arguments": [
              {
                "id": "level",
                "descriptor": "The level value, usually ``0-100`` in percent",
                "type": "INTEGER",
                "format": null
              },
              {
                "id": "rate",
                "descriptor": "The rate at which to change the level",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "colorControl",
        "descriptor": "Allows for control of a color changing device by setting its hue, saturation, and color values",
        "values": [
          {
            "id": "color",
            "descriptor": "``{\"hue\":\"0-100 (percent)\", \"saturation\":\"0-100 (percent)\"}``",
            "type": "STRING",
            "format": null
          },
          {
            "id": "hue",
            "descriptor": "``0-100`` (percent)",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "saturation",
            "descriptor": "``0-100`` (percent)",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setColor",
            "descriptor": "Sets the color based on the values passed in with the given map",
            "arguments": [
              {
                "id": "color",
                "descriptor": "The color map supports the following key/value pairs:",
                "type": "DICT",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "setHue",
            "descriptor": "Set the hue value of the color",
            "arguments": [
              {
                "id": "hue",
                "descriptor": "A number in the range ``0-100`` representing the hue as a value of percent",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "setSaturation",
            "descriptor": "Set the saturation value of the color",
            "arguments": [
              {
                "id": "saturation",
                "descriptor": "A number in the range ``0-100`` representing the saturation as a value of percent",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      }
    ]
  },
  "LightSensor": {
    "skills": [
      {
        "id": "lightLevel",
        "descriptor": "A numerical representation of the brightness intensity",
        "values": [
          {
            "id": "light",
            "descriptor": "brightness intensity (Unit: lux)",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "MenuProvider": {
    "skills": [
      {
        "id": "menuProvider",
        "descriptor": "Provides menu information services",
        "values": [],
        "functions": [
          {
            "id": "menu",
            "descriptor": "Get the menu - Return the menu list",
            "arguments": [
              {
                "id": "command",
                "descriptor": "The command to get the menu - format: [오늘|내일] [학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당] [아침|점심|저녁]",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "STRING"
          },
          {
            "id": "todayMenu",
            "descriptor": "Get today's menu randomly - Return the menu list",
            "arguments": [],
            "return_type": "STRING"
          },
          {
            "id": "todayPlace",
            "descriptor": "Get today's restaurant randomly - Return the restaurant name",
            "arguments": [],
            "return_type": "STRING"
          }
        ],
        "enum": null
      }
    ]
  },
  "MotionSensor": {
    "skills": [
      {
        "id": "motionSensor",
        "descriptor": "• active - The value when motion is detected\n• inactive - The value when no motion is detected",
        "values": [
          {
            "id": "motion",
            "descriptor": "The current state of the motion sensor",
            "type": "ENUM",
            "format": "motionEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "",
          "motionEnum": [
            "active",
            "inactive"
          ]
        }
      }
    ]
  },
  "PresenceSensor": {
    "skills": [
      {
        "id": "presenceSensor",
        "descriptor": "The ability to see the current status of a presence sensor device",
        "values": [
          {
            "id": "presence",
            "descriptor": "The current state of the presence sensor",
            "type": "ENUM",
            "format": "presenceEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• present - The device is present\n• not present - left",
          "presenceEnum": [
            "present",
            "not_present"
          ]
        }
      }
    ]
  },
  "Pump": {
    "skills": [
      {
        "id": "pumpOperationMode",
        "descriptor": "Allows for setting the operation mode on a pump.",
        "values": [
          {
            "id": "currentOperationMode",
            "descriptor": "The current effective operation mode of the pump",
            "type": "ENUM",
            "format": "pumpOperationModeEnum"
          },
          {
            "id": "operationMode",
            "descriptor": "The operation mode of the pump",
            "type": "ENUM",
            "format": "pumpOperationModeEnum"
          },
          {
            "id": "supportedOperationModes",
            "descriptor": "Supported operation modes for this device to be in",
            "type": "LIST",
            "format": "list[pumpOperationModeEnum]"
          }
        ],
        "functions": [
          {
            "id": "setOperationMode",
            "descriptor": "Set the operation mode",
            "arguments": [
              {
                "id": "operationMode",
                "descriptor": "The operation mode to set the device to",
                "type": "ENUM",
                "format": "pumpOperationModeEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• normal - The pump is controlled by a setpoint.\n• minimum - This value sets the pump to run at the minimum possible speed it can without being stopped.\n• maximum - This value sets the pump to run at its maximum possible speed.\n• localSetting - This value sets the pump to run with the local settings of the pump.",
          "pumpOperationModeEnum": [
            "normal",
            "minimum",
            "maximum",
            "localSetting"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "pump",
        "descriptor": "Allows for the control of a pump device",
        "values": [
          {
            "id": "pump",
            "descriptor": "A string representation of whether the pump is open or closed",
            "type": "ENUM",
            "format": "pumpEnum"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the pump",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the pump",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - The value of the ``pump`` attribute if the pump is closed\n• open - The value of the ``pump`` attribute if the pump is open",
          "pumpEnum": [
            "open",
            "closed"
          ]
        }
      }
    ]
  },
  "Refrigerator": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "refrigeration",
        "descriptor": "Allows for the control of the refrigeration.",
        "values": [
          {
            "id": "defrost",
            "descriptor": "Status of the defrost",
            "type": "ENUM",
            "format": "defrostEnum"
          },
          {
            "id": "rapidCooling",
            "descriptor": "Status of the rapid cooling",
            "type": "ENUM",
            "format": "rapidCoolingEnum"
          },
          {
            "id": "rapidFreezing",
            "descriptor": "Status of the rapid freezing",
            "type": "ENUM",
            "format": "rapidFreezingEnum"
          }
        ],
        "functions": [
          {
            "id": "setDefrost",
            "descriptor": "Sets the defrost on or off",
            "arguments": [
              {
                "id": "defrost",
                "descriptor": "The on or off value for the defrost",
                "type": "ENUM",
                "format": "defrostEnum"
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "setRapidCooling",
            "descriptor": "Sets the rapid cooling on or off",
            "arguments": [
              {
                "id": "rapidCooling",
                "descriptor": "The on or off value for the rapid cooling",
                "type": "ENUM",
                "format": "rapidCoolingEnum"
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "setRapidFreezing",
            "descriptor": "Sets the rapid freezing on or off",
            "arguments": [
              {
                "id": "rapidFreezing",
                "descriptor": "The on or off value for the rapid freezing",
                "type": "ENUM",
                "format": "rapidFreezingEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``defrost``, ``rapidCooling``, ``rapidFreezing`` attribute if the defrost, rapidCooling, rapidFreezing is on\n• off - The value of the ``defrost``, ``rapidCooling``, ``rapidFreezing`` attribute if the defrost, rapidCooling, rapidFreezing is off",
          "defrostEnum": [
            "on",
            "off"
          ],
          "rapidCoolingEnum": [
            "on",
            "off"
          ],
          "rapidFreezingEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "RobotCleaner": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "robotCleanerCleaningMode",
        "descriptor": "Allows for the control of the robot cleaner cleaning mode.",
        "values": [
          {
            "id": "robotCleanerCleaningMode",
            "descriptor": "Current status of the robot cleaner cleaning mode",
            "type": "ENUM",
            "format": "robotCleanerCleaningModeEnum"
          }
        ],
        "functions": [
          {
            "id": "setRobotCleanerCleaningMode",
            "descriptor": "Set the robot cleaner cleaning mode",
            "arguments": [
              {
                "id": "mode",
                "descriptor": "Set the robot cleaner cleaning mode, to \"auto\", \"part\", \"repeat\", \"manual\" or \"stop\" modes",
                "type": "ENUM",
                "format": "robotCleanerCleaningModeEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• auto - The robot cleaner cleaning mode is in \"auto\" mode\n• part - The robot cleaner cleaning mode is in \"part\" mode\n• repeat - The robot cleaner cleaning mode is in \"repeat\" mode\n• manual - The robot cleaner cleaning mode is in \"manual\" mode\n• stop - The robot cleaner cleaning mode is in \"stop\" mode\n• map - The robot cleaner cleaning mode is in \"map\" mode",
          "robotCleanerCleaningModeEnum": [
            "auto",
            "part",
            "repeat",
            "manual",
            "stop",
            "map"
          ]
        }
      }
    ]
  },
  "Shade": {
    "skills": [
      {
        "id": "windowShadeLevel",
        "descriptor": "Allows for the control of the level of a window shade.",
        "values": [
          {
            "id": "shadeLevel",
            "descriptor": "A number that represents the current level as a function of being open, ``0-100`` in percent; 0 representing completely closed, and 100 representing completely open.",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setShadeLevel",
            "descriptor": "Set the shade level to the given value.",
            "arguments": [
              {
                "id": "shadeLevel",
                "descriptor": "The level to which the shade should be set, ``0-100`` in percent; 0 representing completely closed, and 100 representing completely open.",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      },
      {
        "id": "windowShade",
        "descriptor": "Allows for the control of the window shade.",
        "values": [
          {
            "id": "supportedWindowShadeCommands",
            "descriptor": "Window shade commands supported by this instance of Window Shade",
            "type": "LIST",
            "format": "list[windowShadeEnum]"
          },
          {
            "id": "windowShade",
            "descriptor": "A string representation of whether the window shade is open or closed",
            "type": "ENUM",
            "format": "windowShadeEnum"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the window shade",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the window shade",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "pause",
            "descriptor": "Pause opening or closing the window shade",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - closed\n• closing - closing…\n• open - open\n• opening - opening…\n• partially open - partially open\n• paused -\n• unknown - unknown",
          "windowShadeEnum": [
            "closed",
            "closing",
            "open",
            "opening",
            "partially",
            "paused",
            "unknown"
          ]
        }
      }
    ]
  },
  "Siren": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "sirenMode",
        "descriptor": "Allows for the control of the siren.",
        "values": [
          {
            "id": "sirenMode",
            "descriptor": "Current mode of the siren",
            "type": "ENUM",
            "format": "sirenModeEnum"
          }
        ],
        "functions": [
          {
            "id": "setSirenMode",
            "descriptor": "Set the siren mode",
            "arguments": [
              {
                "id": "mode",
                "descriptor": "Set the siren mode",
                "type": "ENUM",
                "format": "sirenModeEnum"
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• both - \n• off - \n• siren - \n• strobe - ",
          "sirenModeEnum": [
            "both",
            "off",
            "siren",
            "strobe"
          ]
        }
      }
    ]
  },
  "SmartPlug": {
    "skills": [
      {
        "id": "voltageMeasurement",
        "descriptor": "Get the value of voltage measured from devices that support it",
        "values": [
          {
            "id": "voltage",
            "descriptor": "A number representing the current voltage measured",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "currentMeasurement",
        "descriptor": "Get the value of electrical current measured from a device.",
        "values": [
          {
            "id": "current",
            "descriptor": "A number representing the current measured.",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "powerMeter",
        "descriptor": "Allows for reading the power consumption from devices that report it",
        "values": [
          {
            "id": "power",
            "descriptor": "A number representing the current power consumption. Check the device documentation for how this value is reported - unit: Watts",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "powerConsumption",
            "descriptor": "energy and power consumption during specific time period - unit: Wh",
            "type": "DICT",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "SmokeDetector": {
    "skills": [
      {
        "id": "smokeDetector",
        "descriptor": "A device that detects the presence or absence of smoke.",
        "values": [
          {
            "id": "smoke",
            "descriptor": "The state of the smoke detection device",
            "type": "ENUM",
            "format": "smokeEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• clear - No smoke detected\n• detected - Smoke detected\n• tested - Smoke detector test button was activated",
          "smokeEnum": [
            "clear",
            "detected",
            "tested"
          ]
        }
      }
    ]
  },
  "SoilMoistureSensor": {
    "skills": [
      {
        "id": "soilHumidityMeasurement",
        "descriptor": "Allow reading the soil humidity from devices that support it",
        "values": [
          {
            "id": "soilHumidity",
            "descriptor": "A numerical representation of the soil humidity measurement taken by the device",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "SoundSensor": {
    "skills": [
      {
        "id": "soundSensor",
        "descriptor": "A Device that senses sound",
        "values": [
          {
            "id": "sound",
            "descriptor": "Whether or not sound was detected by the Device",
            "type": "ENUM",
            "format": "soundEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• detected - Sound is detected\n• not detected - no sound",
          "soundEnum": [
            "detected",
            "not_detected"
          ]
        }
      },
      {
        "id": "soundPressureLevel",
        "descriptor": "Gets the value of the sound pressure level.",
        "values": [
          {
            "id": "soundPressureLevel",
            "descriptor": "Level of the sound pressure",
            "type": "DOUBLE",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "Speaker": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "mediaPlayback",
        "descriptor": "Allows for the control of the media playback.",
        "values": [
          {
            "id": "playbackStatus",
            "descriptor": "Status of the media playback",
            "type": "ENUM",
            "format": "mediaPlaybackEnum"
          },
          {
            "id": "supportedPlaybackCommands",
            "descriptor": "Media playback commands which are supported",
            "type": "LIST",
            "format": "list[mediaPlaybackEnum]"
          }
        ],
        "functions": [
          {
            "id": "fastForward",
            "descriptor": "Fast forward the media playback",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "pause",
            "descriptor": "Pause the media playback",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "play",
            "descriptor": "Play the media playback",
            "arguments": [
              {
                "id": "source",
                "descriptor": "The source of the media playback",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "rewind",
            "descriptor": "Rewind the media playback",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "setPlaybackStatus",
            "descriptor": "Set the playback status",
            "arguments": [
              {
                "id": "status",
                "descriptor": "Set the playback status to \"paused\", \"playing\", \"stopped\", \"fast forwarding\" or \"rewinding\" state.",
                "type": "ENUM",
                "format": "mediaPlaybackEnum"
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "speak",
            "descriptor": "TTS feature",
            "arguments": [
              {
                "id": "text",
                "descriptor": "The text to be spoken",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "stop",
            "descriptor": "Stop the media playback",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• paused - Media playback is in a \"paused\" state\n• playing - Media playback is in a \"playing\" state\n• stopped - Media playback is in a \"stopped\" state\n• fast forwarding - Media playback is in a \"fast forwarding\" state\n• rewinding - Media playback is in a \"rewinding\" state\n• buffering - Media playback is in a \"buffering\" state",
          "mediaPlaybackEnum": [
            "paused",
            "playing",
            "stopped",
            "fast",
            "rewinding",
            "buffering"
          ]
        }
      }
    ]
  },
  "Recorder": {
    "skills": [
      {
        "id": "audioRecord",
        "descriptor": "Record audio",
        "values": [
          {
            "id": "recordStatus",
            "descriptor": "The current status of the audio recorder",
            "type": "ENUM",
            "format": "recordStatusEnum"
          }
        ],
        "functions": [
          {
            "id": "record",
            "descriptor": "Record audio",
            "arguments": [
              {
                "id": "file",
                "descriptor": "The file to record to",
                "type": "STRING",
                "format": null
              },
              {
                "id": "duration",
                "descriptor": "The duration to record for",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• idle - The audio recorder is idle\n• recording - The audio recorder is recording",
          "recordStatusEnum": [
            "idle",
            "recording"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "Switch": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "Television": {
    "skills": [
      {
        "id": "tvChannel",
        "descriptor": "Allows for the control of the TV channel.",
        "values": [
          {
            "id": "tvChannel",
            "descriptor": "Current status of the TV channel",
            "type": "INTEGER",
            "format": null
          },
          {
            "id": "tvChannelName",
            "descriptor": "Current status of the TV channel name",
            "type": "STRING",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "channelDown",
            "descriptor": "Move the TV channel down",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "channelUp",
            "descriptor": "Move the TV channel up",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "setTvChannel",
            "descriptor": "Set the TV channel",
            "arguments": [
              {
                "id": "tvChannel",
                "descriptor": "",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "setTvChannelName",
            "descriptor": "Set the TV channel Name",
            "arguments": [
              {
                "id": "tvChannelName",
                "descriptor": "",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      },
      {
        "id": "audioMute",
        "descriptor": "Allows for the control of audio mute.",
        "values": [
          {
            "id": "muteStatus",
            "descriptor": "Current status of the audio mute",
            "type": "ENUM",
            "format": "muteEnum"
          }
        ],
        "functions": [
          {
            "id": "mute",
            "descriptor": "Set the audio to mute state",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "setMute",
            "descriptor": "Set the state of the audio mute",
            "arguments": [
              {
                "id": "state",
                "descriptor": "Set the audio mute state to \"muted\" or \"unmuted\"",
                "type": "ENUM",
                "format": "muteEnum"
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "unmute",
            "descriptor": "Set the audio to unmute state",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• muted - The audio is in \"muted\" state\n• unmuted - The audio is in \"unmuted\" state",
          "muteEnum": [
            "muted",
            "unmuted"
          ]
        }
      },
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      },
      {
        "id": "audioVolume",
        "descriptor": "Allows for the control of audio volume.",
        "values": [
          {
            "id": "volume",
            "descriptor": "The current volume setting of the audio",
            "type": "INTEGER",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "setVolume",
            "descriptor": "Set the audio volume level",
            "arguments": [
              {
                "id": "volume",
                "descriptor": "A value to which the audio volume level should be set",
                "type": "INTEGER",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "volumeDown",
            "descriptor": "Turn the audio volume down",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "volumeUp",
            "descriptor": "Turn the audio volume up",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": null
      }
    ]
  },
  "TemperatureSensor": {
    "skills": [
      {
        "id": "temperatureMeasurement",
        "descriptor": "Get the temperature from a Device that reports current temperature",
        "values": [
          {
            "id": "temperature",
            "descriptor": "A number that usually represents the current temperature",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "temperatureRange",
            "descriptor": "Constraints on the temperature value",
            "type": "DICT",
            "format": null
          }
        ],
        "functions": [],
        "enum": null
      }
    ]
  },
  "TestDevice": {
    "skills": [
      {
        "id": "testSkill",
        "descriptor": "testSkill",
        "values": [
          {
            "id": "testSkillValue",
            "descriptor": "testSkillValue",
            "type": "STRING",
            "format": null
          }
        ],
        "functions": [
          {
            "id": "testSkillFunction",
            "descriptor": "testSkillFunction",
            "arguments": [
              {
                "id": "testArgument",
                "descriptor": "testArgument",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "STRING"
          }
        ],
        "enum": {
          "descriptor": "testSkill Enums",
          "testSkillEnum": [
            "enum1",
            "enum2",
            "enum3"
          ]
        }
      }
    ]
  },
  "Valve": {
    "skills": [
      {
        "id": "valve",
        "descriptor": "Allows for the control of a valve device",
        "values": [
          {
            "id": "valve",
            "descriptor": "A string representation of whether the valve is open or closed",
            "type": "ENUM",
            "format": "valveEnum"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the valve",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the valve",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - The value of the ``valve`` attribute if the valve is closed\n• open - The value of the ``valve`` attribute if the valve is open",
          "valveEnum": [
            "open",
            "closed"
          ]
        }
      }
    ]
  },
  "WeatherProvider": {
    "skills": [
      {
        "id": "weatherProvider",
        "descriptor": "Provides weather information",
        "values": [
          {
            "id": "humidityWeather",
            "descriptor": "Current humidity level",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "pm10Weather",
            "descriptor": "Current pm10 level",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "pm25Weather",
            "descriptor": "Current pm25 level",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "pressureWeather",
            "descriptor": "Current pressure level",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "temperatureWeather",
            "descriptor": "Current temperature level",
            "type": "DOUBLE",
            "format": null
          },
          {
            "id": "weather",
            "descriptor": "Current weather condition",
            "type": "ENUM",
            "format": "weatherEnum"
          }
        ],
        "functions": [
          {
            "id": "getWeatherInfo",
            "descriptor": "Get the current weather information - Return whole weather information, format: \"temperature, humidity, pressure, pm25, pm10, weather, weather_string, icon_id, location\"",
            "arguments": [
              {
                "id": "lat",
                "descriptor": "The latitude of the location",
                "type": "DOUBLE",
                "format": null
              },
              {
                "id": "lon",
                "descriptor": "The longitude of the location",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "STRING"
          }
        ],
        "enum": {
          "descriptor": "• thunderstorm - thunderstorm\n• drizzle - drizzle\n• rain - rain\n• snow - snow\n• mist - mist\n• smoke - smoke\n• haze - haze\n• dust - dust\n• fog - fog\n• sand - sand\n• ash - ash\n• squall - squall\n• tornado - tornado\n• clear - clear\n• clouds - clouds",
          "weatherEnum": [
            "thunderstorm",
            "drizzle",
            "rain",
            "snow",
            "mist",
            "smoke",
            "haze",
            "dust",
            "fog",
            "sand",
            "ash",
            "squall",
            "tornado",
            "clear",
            "clouds"
          ]
        }
      }
    ]
  },
  "Window": {
    "skills": [
      {
        "id": "windowControl",
        "descriptor": "Allows for the control of the window shade.",
        "values": [
          {
            "id": "window",
            "descriptor": "A string representation of whether the window is open or closed",
            "type": "ENUM",
            "format": "windowEnum"
          }
        ],
        "functions": [
          {
            "id": "close",
            "descriptor": "Close the window",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "open",
            "descriptor": "Open the window",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• closed - closed\n• open - open\n• unknown - unknown",
          "windowEnum": [
            "closed",
            "open",
            "unknown"
          ]
        }
      }
    ]
  },
  "FallDetector": {
    "skills": [
      {
        "id": "fallDetection",
        "descriptor": "Detects if a fall has occurred",
        "values": [
          {
            "id": "fall",
            "descriptor": "Whether or not a fall was detected",
            "type": "ENUM",
            "format": "fallEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• fall - fall detected\n• normal - no fall detected",
          "fallEnum": [
            "fall",
            "normal"
          ]
        }
      }
    ]
  },
  "FaceRecognizer": {
    "skills": []
  },
  "CloudServiceProvider": {
    "skills": []
  },
  "NewsProvider": {
    "skills": []
  },
  "OccupancySensor": {
    "skills": [
      {
        "id": "presenceSensor",
        "descriptor": "The ability to see the current status of a presence sensor device",
        "values": [
          {
            "id": "presence",
            "descriptor": "The current state of the presence sensor",
            "type": "ENUM",
            "format": "presenceEnum"
          }
        ],
        "functions": [],
        "enum": {
          "descriptor": "• present - The device is present\n• not present - left",
          "presenceEnum": [
            "present",
            "not_present"
          ]
        }
      }
    ]
  },
  "Relay": {
    "skills": [
      {
        "id": "switch",
        "descriptor": "Allows for the control of a switch device",
        "values": [
          {
            "id": "switch",
            "descriptor": "A string representation of whether the switch is on or off",
            "type": "ENUM",
            "format": "switchEnum"
          }
        ],
        "functions": [
          {
            "id": "off",
            "descriptor": "Turn a switch off",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "on",
            "descriptor": "Turn a switch on",
            "arguments": [],
            "return_type": "VOID"
          },
          {
            "id": "toggle",
            "descriptor": "Toggle a switch",
            "arguments": [],
            "return_type": "VOID"
          }
        ],
        "enum": {
          "descriptor": "• on - The value of the ``switch`` attribute if the switch is on\n• off - The value of the ``switch`` attribute if the switch is off",
          "switchEnum": [
            "on",
            "off"
          ]
        }
      }
    ]
  },
  "Timer": {
    "skills": [
      {
        "id": "timer",
        "descriptor": "The Timer allows for interacting with devices that serve as timers",
        "values": [],
        "functions": [
          {
            "id": "add",
            "descriptor": "Add a timer",
            "arguments": [
              {
                "id": "name",
                "descriptor": "The time name",
                "type": "STRING",
                "format": null
              },
              {
                "id": "timeout",
                "descriptor": "The time at which the timer should expire",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "isExist",
            "descriptor": "Check if a timer is exist",
            "arguments": [
              {
                "id": "name",
                "descriptor": "The time name",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "BOOL"
          },
          {
            "id": "isSet",
            "descriptor": "Check if a timer is set",
            "arguments": [
              {
                "id": "name",
                "descriptor": "The time name",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "BOOL"
          },
          {
            "id": "reset",
            "descriptor": "Reset a timer",
            "arguments": [
              {
                "id": "name",
                "descriptor": "The time name",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "set",
            "descriptor": "Set a timer",
            "arguments": [
              {
                "id": "name",
                "descriptor": "The time name",
                "type": "STRING",
                "format": null
              },
              {
                "id": "timeout",
                "descriptor": "The time at which the timer should expire",
                "type": "DOUBLE",
                "format": null
              }
            ],
            "return_type": "VOID"
          },
          {
            "id": "start",
            "descriptor": "Start a timer",
            "arguments": [
              {
                "id": "name",
                "descriptor": "The time name",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "VOID"
          }
        ],
        "enum": null
      }
    ]
  },
  "ManagerThing": {
    "skills": [
      {
        "id": "manager",
        "descriptor": "Allow Manager Thing's features",
        "values": [],
        "functions": [
          {
            "id": "add_thing",
            "descriptor": "Add staff thing - Return error string",
            "arguments": [
              {
                "id": "parameter",
                "descriptor": "Staff thing's parameter",
                "type": "STRING",
                "format": null
              },
              {
                "id": "client_id",
                "descriptor": "Requester's client id",
                "type": "STRING",
                "format": null
              },
              {
                "id": "name",
                "descriptor": "Staff thing's name",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "STRING"
          },
          {
            "id": "delete_thing",
            "descriptor": "Delete staff thing - Return error string",
            "arguments": [
              {
                "id": "name",
                "descriptor": "Staff thing's name",
                "type": "STRING",
                "format": null
              },
              {
                "id": "client_id",
                "descriptor": "Requester's client id",
                "type": "STRING",
                "format": null
              }
            ],
            "return_type": "STRING"
          },
          {
            "id": "discover",
            "descriptor": "Discover local devices - Return device list with json format",
            "arguments": [],
            "return_type": "STRING"
          }
        ],
        "enum": null
      }
    ]
  },
  "SuperThing": {
    "skills": []
  },
  "Undefined": {
    "skills": []
  }
}