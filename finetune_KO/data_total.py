data_total = [
    [
        {
            "from": "human",
            "value": "Input: 10초 후에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (10 SEC)\nif ((#AirConditioner).switch != \"off\") {\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 일주일 후, 이때 스피커를 통해 'playlist.mp3'를 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (168 HOUR)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"playlist.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 30분 후에 그늘막을 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (30 MIN)\nif ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7분 15초 후에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 MIN)\nwait until (15 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5초 후에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1분 후 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 MIN)\nif ((#Fan).switch != \"off\") {\n    (#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분 안에 음악을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (10 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"song.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5시간 후에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nif ((#Refrigerator).switch != \"off\") {\n    (#Refrigerator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3일 후 조명을 주황색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (72 HOUR)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"30|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 4초 후 스피커 볼륨을 50으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).setVolume(50)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 채널을 1시간에 5번으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTvChannel(5)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분 후에 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 MIN)\nif ((#Window).window != \"open\") {\n    (#Window).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2일 후 에어컨을 난방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (48 HOUR)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\n(#AirConditioner).setAirConditionerMode(\"heat\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 8시간 후에 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (8 HOUR)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3분 후에 물 밸브를 열어줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 MIN)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 50분 후에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (50 MIN)\nif ((#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 후에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15초 후 스피커를 통해 '안녕하세요'라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"안녕하세요\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5시간 후에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nif ((#Humidifier).switch != \"on\") {\n    (#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6분 후 스피커 볼륨을 30으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).setVolume(30)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 8분 후 조명을 파란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (8 MIN)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7시간 후에 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\n(#AirConditioner).setAirConditionerMode(\"cool\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 텔레비전 볼륨을 3초 안에 20으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setVolume(20)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 4분 후에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 MIN)\nif ((#Humidifier).switch != \"off\") {\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 11시간이 지나면 스피커를 통해 '굿나잇'이라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (11 HOUR)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"굿나잇\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 9초 후에 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (9 SEC)\nif ((#Window).window != \"closed\") {\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시간 후에 수도 밸브를 닫아줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nif ((#Valve).valveStatus == \"open\") {\n    (#Valve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간이 지나면 스피커를 통해 '휴식 시간입니다'라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"휴식 시간입니다\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5초 후에 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 SEC)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 12초 후 조명을 켜고 노란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (12 SEC)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"60|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 텔레비전 채널을 8시간에 7로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (8 HOUR)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTVChannel(7)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2분 후 TV 볼륨을 10으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Television).setVolume(10)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 하루가 지나면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (24 HOUR)\nif ((#Humidifier).switch != \"off\") {\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15초 후에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30초 후에 로봇 청소기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 SEC)\nif ((#RobotCleaner).switch != \"off\") {\n    (#RobotCleaner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분 후 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (10 MIN)\nif ((#Fan).switch != \"off\") {\n    (#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 후에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 20분 후에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (20 MIN)\nif ((#Humidifier).switch != \"on\") {\n    (#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분 후에 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (15 MIN)\nif ((#Window).window != \"closed\") {\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2초 후에 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 SEC)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시간 후에 물 밸브를 열어줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3분 후에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 MIN)\nif ((#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 12분 후 스피커를 통해 'Hello World'라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (12 MIN)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"Hello World\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 텔레비전 채널을 30초 후 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTvChannel(3)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 20분 후에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (20 MIN)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3분 후에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 MIN)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 20분 2초 후에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (20 MIN)\nwait until (2 SEC)\nif ((#AirConditioner).switch != \"off\") {\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분 10초 후 스피커를 통해 'playlist.mp3'를 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"playlist.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 2분 5초 후에 그늘막을 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (2 MIN)\nwait until (5 SEC)\nif ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5시간 30분 45초 후에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nwait until (30 MIN)\nwait until (45 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간 20분 10초 후에 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 HOUR)\nwait until (20 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"off\") {\n    (#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 50분 5초 후에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (50 MIN)\nwait until (5 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시간 40분 30초 후에 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nwait until (40 MIN)\nwait until (30 SEC)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 4시간 30분 10초 후에 물 밸브를 열어줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 HOUR)\nwait until (30 MIN)\nwait until (10 SEC)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7시간 20분 30초 후 조명을 켜고 파란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nwait until (20 MIN)\nwait until (30 SEC)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5시간 50분 5초 후에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nwait until (50 MIN)\nwait until (5 SEC)\nif ((#Fan).switch != \"on\") {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간 5분 25초 후에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 HOUR)\nwait until (5 MIN)\nwait until (25 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 4시간 20분 40초 후에 에어컨을 난방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 HOUR)\nwait until (20 MIN)\nwait until (40 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\n(#AirConditioner).setAirConditionerMode(\"heat\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 30분 45초 후에 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (30 MIN)\nwait until (45 SEC)\nif ((#Window).window != \"closed\") {\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 텔레비전 채널을 1시간 45분 20초 후에 7로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (45 MIN)\nwait until (20 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}\n(#Television).setTvChannel(7)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시간 10분 5초 후에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nwait until (10 MIN)\nwait until (5 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 20분 50초 후에 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (20 MIN)\nwait until (50 SEC)\nif ((#Fan).switch != \"off\") {\n    (#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7시간 5분 10초 후에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nwait until (5 MIN)\nwait until (10 SEC)\nif ((#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 40분 15초 후에 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (40 MIN)\nwait until (15 SEC)\nif ((#Window).window != \"open\") {\n    (#Window).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 20분 2초 후에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (2 HOUR)\nwait until (20 MIN)\nwait until (2 SEC)\nif ((#AirConditioner).switch != \"off\") {\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분 10초 후 스피커를 통해 'playlist.mp3'를 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).play(\"playlist.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 2분 5초 후에 그늘막을 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (2 MIN)\nwait until (5 SEC)\nif ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5시간 30분 45초 후에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (5 HOUR)\nwait until (30 MIN)\nwait until (45 SEC)\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간 20분 10초 후에 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (3 HOUR)\nwait until (20 MIN)\nwait until (10 SEC)\nif ((#Speaker).switch != \"off\") {\n    (#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 50분 5초 후에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nwait until (50 MIN)\nwait until (5 SEC)\nif ((#Television).switch != \"on\") {\n    (#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시간 40분 30초 후에 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (6 HOUR)\nwait until (40 MIN)\nwait until (30 SEC)\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 4시간 30분 10초 후에 물 밸브를 열어줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (4 HOUR)\nwait until (30 MIN)\nwait until (10 SEC)\nif ((#Valve).valveStatus == \"closed\") {\n    (#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7시간 20분 30초 후 조명을 켜고 파란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (7 HOUR)\nwait until (20 MIN)\nwait until (30 SEC)\nif ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 50분 후에 에어컨을 켜고 1시간 30분 후에 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(2 HOUR)\nwait until(50 MIN)\nif((#AirConditioner).switch !=\"on\"){\n    (#AirConditioner).on()\n}\nwait until(1 HOUR)\nwait until(30 MIN)\nif((#AirConditioner).switch != \"off\"){\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 4시간 후에도 온도가 25도 이상이면 에어컨을 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(4 HOUR)\nif((#TemperatureSensor).temperature >= 25){\n    if((#AirConditioner).switch != \"on\"){\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 후에도 먼지 농도가 100을 넘으면 공기청정기를 3시간 동안 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(2 HOUR)\nif((#AirQualityDetector).dustLevel >= 100){\n    if((#AirPurifier).switch != \"on\"){\n        (#AirPurifier).on()\n    }\n    wait until(3 HOUR)\n    if((#AirPurifier).switch != \"off\"){\n        (#AirPurifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분 후 에어컨을 4시간 동안 켜줘. 4시간 후에도 온도가 24도 이상이면 1시간 더 틀어줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(30 MIN)\nif((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n    }\nwait until(4 HOUR)\nif((#TemperatureSensor).temperature >= 24){\n    wait until(1 HOUR)\n}\nif((#AirConditioner).switch != \"off\"){\n    (#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간 35분 10초 후에 식기세척기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(2 HOUR)\nwait until(35 MIN)\nwait until(10 SEC)\nif((#Dishwasher).switch != \"on\"){\n    (#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 6)\nif((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시 23분에 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 16 and (#Clock).minute == 23)\nif((#Fan).switch != \"on\"){\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜고 습도가 50%를 초과하면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#Humidifier).switch != \"on\"){\n    (#Humidifier).on()\n}\nwait until((#HumiditySensor).humidity >= 50)\nif((#Humidifier).switch != \"off\"){\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 외부 온도가 26도 이상이면 에어컨을 켜고, 40분 후 실내 온도가 23도 미만이면 에어컨을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#WeatherProvider).temperatureWeather >= 26){\n    if((#AirConditioner).switch != \"on\"){\n        (#AirConditioner).on()\n    }\n    wait until(40 MIN)\n    if((#TemperatureSensor).temperature <=24){\n        if((#AirConditioner).switch != \"off\"){\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금부터 1시간 후에 조명을 끄고, 3시간 후에 에어컨을 켜고, 5시간 20분 후에 가습기를 켜고, 습도가 60%를 넘으면 가습기를 꺼줘.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(1 HOUR)\nif((#Light).switch != \"off\"){\n    (#Light).off()\n}\nwait until(2 HOUR)\nif((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n}\nwait until(2 HOUR)\nwait until(20 MIN)\nif((#Humidifier).switch!=\"on\"){\n    (#Humidifier).on()\n}\nwait until((#HumiditySensor).humidity >= 60)\nif((#Humidifier).switch!=\"off\"){\n    (#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간 후에 식기세척기를 자동 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until(3 HOUR)\nif((#Dishwasher).dishwasherMode != \"auto\"){\n    (#Dishwasher).setDishwasherMode(\"auto\")\n}\nif((#Dishwasher).switch != \"on\"){\n    (#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 온도가 26도 이상이면 선풍기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 23)\nif((#TemperatureSensor).temperature >=26){\n    if((#Fan).switch != \"on\"){\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시 30분에 기온이 26도 이상이면 선풍기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until((#Clock).hour == 23)\nif((#TemperatureSensor).temperature >=26){\n    if((#Fan).switch != \"on\"){\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 후 현재 누적 가스 사용 시간과 사용한 가스 양을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR)\nusage_time = (#GasMeter).gasMeterTime\nusage_amount = (#GasMeter).gasMeterVolume\n(#Speaker).speak(\"현재 누적 가스 사용 시간은 \" + usage_time)\n(#Speaker).speak(\"현재 사용된 가스의 양은 \" + usage_amount)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기를 켜고 1시간 15분 후 습도가 50% 이상이면 세척기를 꺼줘. 50% 미만인 경우 100ml의 물을 넣은 다음 세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n    (#Irrigator).on()\n}\nwait until (1 HOUR 15 MIN)\ncurr_humidity = (#HumiditySensor).humidity\nif (curr_humidity >= 50.0) {\n    (#Irrigator).off()\n} else {\n    (#Irrigator).setWaterPortion(100, \"milliliters\")\n    (#Irrigator).startwatering()\n    (#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 24분이 지나면 현재 온도와 습도를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (24 MIN)\ncurr_temperature = \"현재 온도는 \" + (#TemperatureSensor).temperature\ncurr_humidity = \"현재 습도는 \" + (#HumiditySensor).humidity\n(#Speaker).speak(curr_temperature + \"도 입니다.\")\n(#Speaker).speak(curr_humidity + \"% 입니다.\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1시간 53분 후에 사람이 있는지 확인해줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (1 HOUR 53 MIN)\nif ((#PresenceSensor).presence == \"detected\") {\n    (#Speaker).speak(\"사람이 감지되었습니다.\")\n} else {\n    (#Speaker).speak(\"사람이 감지되지 않았습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 가스 농도가 0.5% 이상이면 가스 밸브를 닫고 1시간 10분 후에 다시 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeter >= 0.5) {\n    if ((#GasValve).valve != \"closed\"){\n    (#GasValve).close()\n    }\n    wait until (1 HOUR)\n    wait until (10 MIN)\n    if ((#GasValve).valve != \"open\"){\n    (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 온도가 25도 이상이면 에어컨을 켜고 도어록이 열려 있는지 확인한 후 열려 있으면 창문을 닫고 식기세척기를 켜고 2시간 후에 모든 것을 꺼줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature >= 25.0) {\n    if ((#AirConditioner).switch != \"on\"){\n    (#AirConditioner).on()\n    }\n    if ((#DoorLock).door == \"open\") {\n        if ((#Window).window == \"open\"){\n        (#Window).close()\n        }\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n        wait until (2 HOUR)\n        if ((#AirConditioner).switch != \"off\"){\n        (#AirConditioner).off()\n        }\n        if ((#Dishwasher).switch != \"off\"){\n        (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분 동안 급수 시스템을 가동하고 누수 감지기가 누수를 감지하면 급수 시스템을 중지하고 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#Irrigator).on()\nwait until (10 MIN)\nif ((#LeakSensor).leakage == \"detected\") {\n    if ((#Irrigator).switch != \"off\") {\n        (#Irrigator).off()\n    }\n    (#EmailProvider).send(\"user@dummy.com\", \"누수 감지 알림\", \"급수 중 누수가 감지되었습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분 후에 에어컨을 켜고, 1시간 후에 공기청정기를 켜고, 2시간 후에 창문을 열어줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until (30 MIN)\n(#AirConditioner).on()\nwait until (30 MIN)\n(#AirPurifier).on()\nwait until (1 HOUR)\n(#Window).open()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 움직임이 감지되지 않고 아무도 없는 경우 펌프를 켜고 2시간 후에 냉장고를 꺼줘.\n\nServices: {'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"inactive\" and (#PresenceSensor).presence == \"not_present\") {\n    if ((#Pump).switch != \"on\") {\n        (#Pump).on()\n    }\n    wait until (2 HOUR)\n    if ((#Refrigerator).switch != \"off\") {\n        (#Refrigerator).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 연기가 감지되지 않으면 그늘막을 열고 30분 후에 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmokeDetector).smoke == \"not_detected\") {\n    if ((#Shade).shadeLevel != 100) {\n        (#Shade).open()\n    }\n    wait until (30 MIN)\n    if ((#Shade).shadeLevel != 0) {\n        (#Shade).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도가 30% 이상이면 가습기를 약하게 1시간 동안 켜줘. 그렇지 않으면 2시간 동안 강하게 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#HumiditySensor).humidity >= 30){\n    if((#Humidifier).switch != \"on\"){\n        (#Humidifier).on()\n    }\n    if((#Humidifier).humidifierMode != \"low\"){\n        (#Humidifier).setHumidifierMode(\"low\")\n    }\n    wait until(1 HOUR)\n    if((#Humidifier).switch != \"off\"){\n        (#Humidifier).off()\n    }\n}\nelse{\n    if((#Humidifier).switch != \"on\"){\n        (#Humidifier).on()\n    }\n    if((#Humidifier).humidifierMode != \"high\"){\n        (#Humidifier).setHumidifierMode(\"high\")\n    }\n    wait until(2 HOUR)\n    if((#Humidifier).switch != \"on\"){\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 버튼을 누르고 있으면 공기청정기를 켜고 절전 모드로 설정해줘. 또한 에어컨이 꺼져 있으면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"held\") \nif ((#AirPufier).switch != \"on\") {\n    (#AirPufier).on()\n}\nif ((#AirPufier).airPurifierFanMode != \"sleep\") {\n(#AirPufier).setPurifierFanMode(\"sleep\")\n}\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 버튼을 두 번 길게 누르면 조명이 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"double\" and (#Button).button == \"held\") \n(#Light).off()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 날씨가 좋으면 창문을 열어줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#WeatherProvider).weather == \"clear\"){\n    if((#Window).window != \"open\"){\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 날씨가 맑지 않은 경우 창문을 닫아줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#WeatherProvider).weather != \"clear\"){\n    if((#Window).window != \"closed\"){\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 날씨가 흐린 경우 창문을 닫고 스피커를 통해 '오늘은 흐리네요'라고 말해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clouds\") {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n    }\n    (#Speaker).speak(\"오늘은 흐리네요\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지 수치가 50 이상이면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel > 50.0) {\n    if ((#AirPurifier).switch != \"on\"){\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시에 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\"){\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 커튼을 닫아줘.\n\nServices: {'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"open\") {\n    if  ((#Curtain).curtain != \"closed\"){\n        (#Curtain).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 누출이 감지되면 표시등 색상을 빨간색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"detected\") {\n    if ((#Light).switch != \"on\"){\n        (#Light).on()\n    }\n    if ((#Light).color != \"0|100|100\"){\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지 농도가 50 이상이면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel > 50.0) {\n    (#AirPurifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨이 켜져 있는 경우 창문을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n    if ((#Window).window != \"closed\"){\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30도를 넘으면 선풍기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature > 30.0) {\n    (#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 열려 있고 CO2 수준이 1000ppm을 초과하는 경우 이메일 보내기\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve == \"open\" and (#AirQualityDetector).carbonDioxide > 1000.0) {\n    (#EmailProvider).send(\"user@example.com\", \"Gas Valve Alert\", \"CO2 level is too high!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 재실 감지 센서가 아무도 없는 것을 감지하면 TV를 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"not present\" and (#Television).switch != \"off\") {\n    (#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1월 1일인 경우 조명 색상을 빨간색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).month == 1 and (#Clock).day == 1) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    (#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 토요일인 경우 에어컨 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"saturday\" and (#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 창문을 닫고 에어컨을 켜고 공기청정기를 최대로 설정해줘. 10분 후 모든 것을 끄고 창문을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"closed\") {\n    (#Window).close()\n}\nif ((#AirConditioner).switch != \"on\") {\n    (#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n    (#AirConditioner).setAirConditionerMode(\"cool\")\n}\nif ((#AirPurifier).switch != \"on\") {\n    (#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"high\") {\n    (#AirPurifier).setPurifierFanMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있고 현재 시간이 오전 8시인 경우 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"open\" and (#Clock).hour == 8) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고가 꺼져 있으면 전원을 켜줘. 모드가 급속냉동인 경우 급속냉각으로, 급속냉각인 경우 급속냉각으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#Refrigerator).switch != \"on\"){\n    (#Refrigerator).on()\n}\nif((#Refrigerator).refrigeratorMode == \"RapidFreeze\") {\n    (#Refrigerator).setRefrigeratorMode(\"rapidCool\")\n}\nif((#Refrigerator).refrigeratorMode == \"RapidCool\") {\n    (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 켜주시겠어요?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n\t(#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n\t(#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n\t(#AirConditioner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"auto\") {\n\t(#AirConditioner).setAirConditionerMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 자동으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"auto\") {\n\t(#AirConditioner).setAirConditionerMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 냉방 모드로 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"cool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"cool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 날씨가 더우니 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"cool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 난방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 난방 모드로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨 모드를 따뜻하게로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨을 온난화 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n\t(#AirConditioner).on()\n}\nif ((#AirConditioner).airConditionerMode != \"heat\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 에어컨이 켜져 있다면 창문을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"off\") {\n    if ((#Window).window != \"open\") {\n\t    (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 에어컨이 꺼져 있는 경우 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).switch != \"on\") {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨이 자동 모드가 아닌 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).airConditionerMode != \"auto\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨이 현재 냉방 모드로 작동 중인 경우 난방 모드로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).airConditionerMode == \"cool\") {\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨이 현재 난방 모드인 경우 로봇청소기를 켜줘. 에어컨 온도를 20도로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirConditioner).airConditionerMode == \"heat\") {\n\tif ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}\n(#AirConditioner).setTemperature(20.0)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 에어컨 상태를 확인하고 꺼져 있으면 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시마다 에어컨을 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 창문이 닫혀 있는지 확인하고 에어컨이 켜져 있으면 창문을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#AirConditioner).switch != \"off\") {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 22:00에 에어컨을 난방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"heat\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시에 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 에어컨을 끄고 가스 밸브를 잠가줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#AirConditioner).switch != \"on\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 자동 모드가 아닌 경우 5초마다 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 SEC) {\n    if ((#AirConditioner).airConditionerMode != \"auto\") {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨이 냉방 모드로 작동 중인 경우 45분마다 난방 모드로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n    if ((#AirConditioner).airConditionerMode == \"cool\") {\n        (#AirConditioner).setAirConditionerMode(\"heat\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 18:00에 에어컨이 난방 모드에 있으면 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirConditioner).airConditionerMode == \"heat\") {\n            if ((#RobotCleaner).switch != \"on\") {\n                (#RobotCleaner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"off\") {\n\t(#AirPurifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기를 자동 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"auto\") {\n\t(#AirPurifier).setPurifierFanMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기를 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n\t(#AirPurifier).setPurifierFanMode(\"sleep\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 팬 모드를 낮음으로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"low\") {\n\t(#AirPurifier).setPurifierFanMode(\"low\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 팬을 중간으로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"medium\") {\n\t(#AirPurifier).setPurifierFanMode(\"medium\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 팬을 강 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"high\") {\n\t(#AirPurifier).setPurifierFanMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 팬을 조용하게 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n\t(#AirPurifier).setPurifierFanMode(\"quiet\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 무풍 모드의 공기 청정기.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n\t(#AirPurifier).setPurifierFanMode(\"windFree\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 팬 모드를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"off\") {\n\t(#AirPurifier).setPurifierFanMode(\"off\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 켜져 있으면 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode == \"on\") {\n\t(#AirPurifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 꺼져 있으면 블라인드를 닫아줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"off\") {\n    if ((#Blind).blindLevel > 0) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 현재 자동 모드인 경우 절전 모드로 변경해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"auto\") {\n\t(#AirPurifier).setPurifierFanMode(\"sleep\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 현재 절전 모드에 있는 경우 식기세척기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"sleep\") {\n    if ((#Dishwasher).switch != \"on\") {\n\t    (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기의 팬이 현재 저풍 모드로 설정되어 있는 경우 무풍 모드로 변경해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode == \"low\") {\n\t(#AirPurifier).setPurifierFanMode(\"windFree\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 현재 중간 모드에 있는 경우 팬을 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"medium\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기의 팬이 현재 강풍 모드가 아닌 경우 강풍 모드로 변경해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).switch != \"on\") {\n\t(#AirPurifier).on()\n}\nif ((#AirPurifier).airPurifierFanMode != \"high\") {\n\t(#AirPurifier).setPurifierFanMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기 청정기가 현재 저소음 모드가 아닌 경우 스피커를 통해 \"시끄러워\"라고 말해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n    (#Speaker).speak(\"시끄러워\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기의 팬이 현재 무풍 모드인 경우 그늘막을 열어줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"windFree\") {\n    if ((#Shade).shadeLevel != 100) {\n\t    (#Shade).setShadeLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 모드가 꺼져 있으면 그늘막을 열어줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirPurifier).airPurifierFanMode == \"off\") {\n    if ((#Shade).shadeLevel != 100) {\n\t    (#Shade).setShadeLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 공기청정기 상태를 확인하고 꺼져 있으면 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7시마다 공기청정기 꺼줘\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기를 20분마다 자동 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (20 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"auto\") {\n        (#AirPurifier).setPurifierFanMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 23:00에 공기청정기를 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 공기청정기 팬 모드를 낮음으로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"low\") {\n        (#AirPurifier).setPurifierFanMode(\"low\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 10시에 공기청정기 팬을 중간으로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 팬을 30분마다 강 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"high\") {\n        (#AirPurifier).setPurifierFanMode(\"high\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 21:00에 공기청정기 팬을 조용하게 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기를 매시간 무풍 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n        (#AirPurifier).setPurifierFanMode(\"windFree\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 19:00에 공기청정기 팬 모드를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode != \"off\") {\n            (#AirPurifier).setPurifierFanMode(\"off\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 매일 9시에 켜져 있으면 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 17:00에 공기청정기가 꺼지면 블라인드를 닫아줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            if ((#Blind).blindLevel > 0) {\n                (#Blind).setBlindLevel(0)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 현재 자동 모드인 경우 10분마다 절전 모드로 변경해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode == \"auto\") {\n        (#AirPurifier).setPurifierFanMode(\"sleep\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 공기청정기가 현재 절전 모드에 있는 경우 식기세척기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode == \"sleep\") {\n            (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기의 팬이 저속 모드로 설정되어 있는 경우 5분마다 무풍 모드로 변경해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode == \"low\") {\n        (#AirPurifier).setPurifierFanMode(\"windFree\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 14:00에 공기청정기가 중간 모드에 있으면 팬을 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode == \"medium\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기의 팬이 강풍 모드가 아닌 경우 10분마다 강풍 모드로 변경해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"high\") {\n        (#AirPurifier).setPurifierFanMode(\"high\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 5분마다 조용한 모드로 전환되지 않으면 스피커를 통해 '시끄러워'라고 말해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"시끄러워\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기 모드가 6시마다 꺼져 있으면 그늘막을 열어줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirPurifier).airPurifierFanMode == \"off\") {\n            if ((#Shade).shadeLevel != 100) {\n                (#Shade).setShadeLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 미세먼지 농도가 50보다 낮으면 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).dustLevel < 50.0) {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 미세먼지(PM 10) 농도를 측정하여 스피커를 통해 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 미세먼지 농도는 \" + (#AirQualityDetector).dustLevel)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 초미세먼지 농도가 40이 넘으면 창문을 닫고 공기청정기를 켜시나요?\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel >= 40.0) {\n    if ((#Window).window != \"closed\") {\n\t    (#Window).close()\n    }\n    if ((#AirPurifier).switch != \"on\") {\n\t    (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 초미세먼지(PM 2.5) 농도가 15보다 낮으면 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel < 15.0) {\n    if ((#Curtain).curtainLevel > 0) {\n\t    (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 기준 미세먼지 농도가 40보다 높으면 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).fineDustLevel > 40.0) {\n    if ((#Camera).switch != \"on\") {\n\t    (#Camera).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 PM 1.0 기준 초미세먼지 농도가 50보다 높으면 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n    if ((#Siren).switch != \"on\") {\n\t    (#Siren).on()\n    }\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 이산화탄소 농도가 400ppm이면 스피커를 통해 \"축하합니다!\"라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).carbonDioxide == 400.0) {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n\t(#Speaker).speak(\"축하합니다!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기질 센서 주변의 현재 온도가 30도 이상이면 팬을 켜고 속도를 100으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).temperature > 30.0) {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n\t(#Fan).setFanSpeed(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기질 센서가 습도를 측정하여 50을 넘으면 스피커를 통해 \"너무 습해요\"라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).humidity > 50.0) {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n\t(#Speaker).speak(\"너무 습해요\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 VOC 농도가 0.03보다 낮으면 표시등을 켜고 빨간색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).tvocLevel < 0.03) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n\t(#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 공기질 센서에서 불활성 가스 농도가 3ppm보다 높다고 보고되면 \"불활성 가스 농도 경고: (현재 불활성 가스 농도)\"라는 제목으로 내용 없이 user@dummy.com 으로 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#AirQualityDetector).tvocLevel > 3.0) {\n\t(#EmailProvider).sendMail(\"user@dummy.com\", \"비활성기체 농도 주의: \" + (#AirQualityDetector).tvocLevel, \"\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 미세먼지 농도가 50보다 낮으면 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirQualityDetector).dustLevel < 50.0) {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 미세먼지(PM 10) 농도를 측정하여 스피커를 통해 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 미세먼지 농도는 \" + (#AirQualityDetector).dustLevel)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 초미세먼지 농도가 40 이상이면 창문을 닫고 공기청정기를 켜줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#AirQualityDetector).fineDustLevel >= 40.0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#AirPufier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 기준 초미세먼지 농도가 10분마다 15보다 낮으면 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#AirQualityDetector).fineDustLevel < 15.0) {\n        if ((#Curtain).curtainLevel > 0) {\n            (#Curtain).setCurtainLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 PM 2.5 기준 미세먼지 농도가 40보다 높으면 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 40.0) {\n            if ((#Camera).switch != \"on\") {\n                (#Camera).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 PM 1.0 기준 초미세먼지 농도가 5분마다 50보다 높으면 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 이산화탄소 농도가 400ppm이 되면 스피커를 통해 '축하합니다!\"라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#AirQualityDetector).carbonDioxide == 400.0) {\n        if ((#Speaker).switch != \"on\") {\n\t        (#Speaker).on()\n        }\n        (#Speaker).speak(\"축하합니다!\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시에 공기질 센서 주변의 온도가 30도 이상이면 선풍기를 켜고 속도를 100으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 블라인드가 전혀 열려 있지 않으면 급이기를 켜고 100g의 쌀을 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 0) {\n    if ((#Feeder).switch != \"on\") {\n\t    (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(100, \"grams\")\n\t(#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 20% 정도만 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 20) {\n    (#Blind).setBlindLevel(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 25% 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 25) {\n    (#Blind).setBlindLevel(25)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 반만 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 50) {\n    (#Blind).setBlindLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 조금만 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 50) {\n    (#Blind).setBlindLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 100) {\n    (#Blind).setBlindLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 0) {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 완전히 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel != 100) {\n    (#Blind).setBlindLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드를 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 0) {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 블라인드 열기\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Blind).blindLevel != 100) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 블라인드가 72% 이상 열려 있는 경우 30%로 낮춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel > 72) {\n\t(#Blind).setBlindLevel(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 절반 이하로 열려 있으면 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel <= 50) {\n    if ((#Humidifier).switch != \"on\") {\n\t    (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 22:00에 블라인드를 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Blind).blindLevel > 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시에 블라인드가 현재 50% 이상 열려 있으면 재배기를 켜고 80ml의 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Blind).blindLevel >= 50) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(80, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 잠시 후 버튼을 누르면 먹이공급기가 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"pushed\") {\n    if ((#Feeder).switch != \"on\") {\n\t    (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 나중에 버튼을 누르면 그늘막을 완전히 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"held\") {\n    if ((#Shade).shadeLevel > 0) {\n    \t(#Shade).setShadeLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 잠시 후 버튼을 두 번 연속으로 눌러 조명과 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "wait until ((#Button).button == \"double\") {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 버튼의 작동 상태를 확인하고 스피커를 통해 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak((#Button).button)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일마다 버튼 작동 상태를 점검하고 스피커를 통해 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\") {\n    if ((#Speaker).switch != \"on\") {\n\t    (#Speaker).on()\n    }\n    (#Speaker).speak((#Button).button)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일에는 버튼을 눌러 먹이공급기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n    wait until ((#Button).button == \"pushed\") {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일에 버튼을 길게 눌러 그늘막을 완전히 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1) {\n    wait until ((#Button).button == \"held\") {\n        if ((#Shade).shadeLevel > 0) {\n            (#Shade).setShadeLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 버튼을 연속으로 두 번 누를 때마다 조명과 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Button).button == \"double\") {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5와 3을 더하고 스피커를 통해 결과를 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).add(5, 3)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"5와 3을 더한 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10에서 4를 빼. 스피커를 통해 결과를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).sub(10, 4)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"10에서 4를 뺀 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 20을 4로 나누고 스피커를 통해 결과를 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).div(20, 4)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"20을 4로 나눈 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6과 7을 곱해. 그리고 스피커를 통해 결과를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).mul(6, 7)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"6과 7을 곱한 결과는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15를 4로 나눈 나머지를 구해. 스피커를 통해 결과를 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "result = (#Calculator).mod(15, 4)\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"15를 4로 나눈 나머지는 \" + result)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜주시겠어요?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 꺼주시겠어요?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"off\") {\n\t(#Camera).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"off\") {\n\t(#Camera).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 카메라가 켜져 있으면 건조기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"off\") {\n    if ((#Dehumidifier).switch != \"on\") {\n\t    (#Dehumidifier).on()   \n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라가 지금 꺼져 있지 않으면 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    if ((#Pump).switch != \"off\") {\n\t    (#Pump).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라로 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 사진을 찍어 이메일(my@email.com)로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\nimagePath = (#Camera).take()\n(#EmailProvider).sendMailWithFile(\"my@email.com\", \"사진\", \"가장 최근에 찍은 사진 파일입니다.\", imagePath)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가장 최근에 찍은 사진 파일을 my@email.com 으로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"my@email.com\", \"사진\", \"가장 최근에 찍은 사진 파일입니다.\", (#Camera).image)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라로 15분 동안 2배속으로 타임랩스를 촬영해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}\n(#Camera).takeTimelapse(0.25, 2.0)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라로 3시간 동안 10배속으로 타임랩스 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}\n(#Camera).takeTimelapse(3.0, 10.0)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라로 6시간 동안 10배속으로 타임랩스 동영상을 촬영하여 mail@example.com 으로 전송해줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n\t(#Camera).on()\n}\ntimeLapsePath = (#Camera).takeTimelapse(3.0, 10.0)\n(#EmailProvider).sendMailWithFile(\"mail@example.com\", \"타임랩스\", \"가장 최근에 찍은 타임랩스입니다.\", timeLapsePath)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라로 찍은 가장 최근의 사진 파일을 이메일로 보내줘. 주소는 name@cite.org, 제목은 '최근 사진'으로 하고 내용은 보내지 마.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"name@cite.org\", \"최근 사진\", \"\", (#Camera).image)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가장 최근에 카메라로 촬영한 사진 파일의 URL 주소를 스피커를 통해 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak((#Camera).image)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 사진을 찍고 임의의 제목과 내용을 적어 test@name.com 으로 사진 파일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "imagePath = (#Camera).take()\n(#EmailProvider).sendMailWithFile(\"test@name.com\", \"임의의 제목\", \"임의의 내용\", imagePath)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간마다 카메라 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (2 HOUR) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 카메라를 켜주실 수 있나요?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말마다 카메라를 꺼주실 수 있나요?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n    if ((#Camera).switch != \"off\") {\n        (#Camera).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 카메라 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Camera).switch != \"off\") {\n        (#Camera).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라가 켜질 때마다 건조기 켜줘\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Camera).switch != \"off\") {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 카메라로 사진 찍기\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 카메라로 15분 동안 2배속으로 타임랩스를 촬영해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(0.25, 2.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 18:00에 카메라로 10배속으로 3시간 동안 타임랩스 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(3.0, 10.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일마다 카메라로 촬영한 가장 최근의 사진 파일을 이메일로 보내줘. 이메일 주소는 name@cite.org, 제목은 '최근 사진'으로 하고 내용 없이 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"name@cite.org\", \"최근 사진\", \"\", (#Camera).image)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일마다 카메라로 촬영한 가장 최근 사진 파일의 URL 주소를 스피커로 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak((#Camera).image)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기가 현재 충전 중이면 파란색 표시등이 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).chargeState == \"charging\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n\t(#Light).setColor(\"240|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 충전기가 완전히 충전되면 녹색 표시등이 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).chargeState == \"fullyCharged\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n\t(#Light).setColor(\"120|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기가 현재 충전 중이 아닌 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).chargeState == \"error\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 충전기 전압이 210~230인 경우 그늘막을 약 50%까지 열어줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).voltage >= 210.0 and (#Charger).voltage <= 230.0) {\n\tif ((#Shade).shadeLevel != 50) {\n\t    (#Shade).setShadeLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기를 통해 흐르는 전류가 1보다 크면 가스 밸브를 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Charger).current > 1.0) {\n    if ((#GasValve).valve != \"open\") {\n\t    (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 충전기가 충전 중이면 5분마다 파란색 표시등이 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#Charger).chargeState == \"charging\") {\n        if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n        }\n        (#Light).setColor(\"240|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기가 완전히 충전되면 6시마다 녹색 표시등이 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Charger).chargeState == \"fullyCharged\") {\n        if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n        }\n        (#Light).setColor(\"120|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말마다 충전기가 현재 충전 중이 아닌 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n    if ((#Charger).chargeState == \"error\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분마다 현재 충전기 전압이 210~230이면 그늘막을 켜고 50%까지 열어줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#Charger).voltage >= 210.0 and (#Charger).voltage <= 230.0) {\n        if ((#Shade).shadeLevel != 50) {\n            (#Shade).setShadeLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 충전기를 통해 흐르는 전류가 1보다 크면 가스 밸브를 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Charger).current > 1.0) {\n        if ((#GasValve).valve != \"open\") {\n            (#GasValve).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 날짜가 1일인 경우 빨간색 표시등이 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).day == 1) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n\t(#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 시간이 9시인 경우 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 9) {\n    if ((#Pump).switch != \"off\") {\n\t    (#Pump).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 시간이 자정인 경우 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 0) {\n    if ((#Light).switch != \"off\") {\n\t    (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 시간이 정오인 경우 스피커를 통해 점심 시간임을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 12) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"점심 시간입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 시간이 오후 6시인 경우 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 18) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 시간이 오후 7시인 경우 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).hour == 19) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 분이 0이면 스피커에서 '정각입니다'라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"정각입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 월이 12월인 경우 식기세척기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).month == 12) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 초가 30초가 되면 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).second == 30) {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 월요일인 경우 커튼을 50% 정도 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"monday\") {\n    if ((#Curtain).curtainLevel != 50) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 화요일인 경우 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"tuesday\") {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 수요일인 경우 급식기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"wednesday\") {\n    if ((#Feeder).switch != \"on\") {\n\t    (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 목요일인 경우 블라인드를 67% 개방해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"thursday\") {\n    if ((#Blind).blindLevel != 67) {\n        (#Blind).setBlindLevel(67)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 토요일인 경우 로봇 청소기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).weekday == \"saturday\") {\n\tif ((#RobotCleaner).switch != \"off\") {\n        (#RobotCleaner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공휴일인 경우 가스 밸브를 잠그고 창문을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).isHoliday == true) {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공휴일이 아닌 경우 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).isHoliday == false) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 Unix 타임스탬프가 짝수인 경우 표시등을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Clock).timestamp % 2 == 0) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 8시에 스피커를 통해 회의 시작을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"회의 시작 시간입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 15일 14:00마다 펌프 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 15 and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Pump).switch != \"on\") {\n\t    (#Pump).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매년 1월 1일 자정에 스피커를 통해 새해를 축하해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).month == 1 and (#Clock).day == 1 and (#Clock).hour == 0 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"새해 복 많이 받으세요!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18:30에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말마다 10시에 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 10 and (#Clock).minute == 0) {\n\tif ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).minute == 30) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 초가 15초가 될 때마다 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC) {\n    if ((#Clock).second == 15) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 블라인드를 75% 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(75)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 시간이 22:45가 되면 조명을 어둡게 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 45) {\n        if ((#Light).switch != \"on\") {\n\t        (#Light).on()\n        }\n        (#Light).setLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 11시 11분이 될 때마다 스피커를 통해 소원을 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 11) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }    \n        (#Speaker).speak(\"소원을 빌어보세요.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 17:00에 스피커를 통해 주말의 시작을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 17 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"주말이 시작되었습니다!\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매년 12월 31일 23시 59분에 새해를 맞이하기 위해 노란색 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).month == 12 and (#Clock).day == 31 and (#Clock).hour == 23 and (#Clock).minute == 59) {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n    (#Light).setColor(\"60|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 접촉 센서가 닫혀 있으면 전구를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"closed\") {\n    if ((#Light).switch != \"off\") {\n\t    (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 현재 열려 있으면 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#ContactSensor).contact == \"open\") {\n\tif ((#Refrigerator).switch != \"on\") {\n\t\t(#Refrigerator).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 10분마다 접촉 센서가 닫혀 있으면 전구를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Light).switch != \"off\") {\n\t        (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시에 접촉 센서가 현재 열려 있으면 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#ContactSensor).contact == \"open\") {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫힐 때마다 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"closed\") {\n    if ((#Fan).switch != \"off\") {\n\t    (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열릴 때마다 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"open\") {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫힐 때마다 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"closed\") {\n    if ((#Humidifier).switch != \"off\") {\n\t    (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열릴 때마다 블라인드를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"open\") {\n    if ((#Blind).blindLevel > 0) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫힐 때마다 조명을 어둡게 해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#ContactSensor).contact == \"closed\") {\n    (#Light).setLevel(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 100) {\n    (#Curtain).setCurtainLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel > 0) {\n    (#Curtain).setCurtainLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 50% 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 50) {\n    (#Curtain).setCurtainLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 완전히 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 100) {\n    (#Curtain).setCurtainLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel > 0) {\n    (#Curtain).setCurtainLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 커튼이 열려 있는 경우 커튼을 30%로 줄여줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).switch != \"on\") {\n\t(#Curtain).on()\n}\nif ((#Curtain).curtainLevel > 0) {\n\t(#Curtain).setCurtainLevel(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 커튼이 닫혀 있는 경우 커튼을 80%까지 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel == 0) {\n    (#Curtain).setCurtainLevel(80)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 커튼이 24% 열려 있는 경우 커튼을 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel == 24) {\n\t(#Curtain).setCurtainLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 75%까지 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 75) {\n    (#Curtain).setCurtainLevel(75)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 25%로 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Curtain).curtainLevel != 25) {\n    (#Curtain).setCurtainLevel(25)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 22:00에 커튼을 열어주시겠어요?\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) { \n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 커튼을 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼이 열려 있을 때 창 열기\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Curtain).curtainLevel > 0) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼이 닫혀 있으면 커튼을 80%까지 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Curtain).curtainLevel == 0) {\n    if ((#Curtain).curtainLevel != 80) {\n        (#Curtain).setCurtainLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일에 커튼을 50% 개방해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 50) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 8시에 커튼을 완전히 개방해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매년 12월 31일에는 커튼이 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).month == 12 and (#Clock).day == 31 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel > 0) {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 닫을 때마다 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Curtain).curtainLevel == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 커튼을 75%까지 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 75) {\n        (#Curtain).setCurtainLevel(75)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 8시에 커튼을 25%로 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {  \n    if ((#Curtain).curtainLevel != 25) {\n        (#Curtain).setCurtainLevel(25)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"off\") {\n\t(#Dehumidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"off\") {\n\t(#Dehumidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 냉각 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"cooling\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 지연 세탁 모드로 변경해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"delayWash\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 건조 모드로 전환해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"drying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"drying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기 모드를 완료로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"finished\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"finished\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 새로 고침 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"refreshing\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 무게 감지 모드로 전환해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"weightSensing\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"weightSensing\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 주름 방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"wrinklePrevent\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 제습 모드로 변경해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"dehumidifying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"dehumidifying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 AI 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"AIDrying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 살균 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"sanitizing\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 내부 관리 모드로 전환해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"internalCare\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 동결 방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"freezeProtection\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 연속 제습 모드로 변경해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"continuousDehumidifying\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기를 제상 모드로 전환해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n\t(#Dehumidifier).on()\n}\nif ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n\t(#Dehumidifier).setDeHumidifierMode(\"thawingFrozenInside\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 건조기가 켜져 있는 경우 공기청정기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"off\") {\n\t(#AirPurifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 건조기가 꺼져 있는 경우 조명을 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).switch != \"on\") {\n    if ((#Light).switch != \"off\") {\n\t    (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 냉각 모드에 있으면 스피커를 통해 알림음이 울려줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"cooling\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"건조기가 냉각 모드입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 지연 세탁 모드에 있는 경우 창을 닫아줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"delayWash\") {\n    if ((#Window).window != \"closed\") {\n\t    (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 건조 모드에 있는 경우 가습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"drying\") {\n    if ((#Humidifier).switch != \"off\") {\n\t    (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 완료 상태인 경우 사이렌을 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"finished\") {\n    if ((#Siren).switch != \"on\") {\n\t    (#Siren).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 건조기가 새로 고침 모드에 있으면 TV를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"refreshing\") {\n    if ((#Television).switch != \"on\") {\n\t    (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 무게 감지 모드에 있는지 확인하고 그렇다면 에어컨을 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"weightSensing\") {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 주름 방지 모드로 설정되어 있는 경우 커튼을 50% 열어줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"wrinklePrevent\") {\n    if ((#Curtain).curtainLevel != 50) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 제습 모드에 있는 경우 팬을 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"dehumidifying\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 AI 건조 모드인 경우 스피커를 통해 \"music.mp3\" 노래를 재생해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"AIDrying\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).play(\"music.mp3\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 살균 모드에 있으면 창을 열어줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"sanitizing\") {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 내부 유지보수 모드에 있는 경우 로봇 청소기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"internalCare\") {\n\tif ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 동결 방지 모드에 있는 경우 팬을 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"freezeProtection\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 연속 제습 모드에 있는 경우 모든 조명을 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"continuousDehumidifying\") {\n    if ((#Light).switch != \"on\") {\n\t    (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 건조기가 현재 제상 모드에 있는 경우 팬을 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 건조기 켜줘\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 건조기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 22:00에 건조기 꺼줘\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Dehumidifier).switch != \"off\") {\n        (#Dehumidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 건조기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Dehumidifier).switch != \"off\") {\n        (#Dehumidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일에 건조기를 냉각 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1) {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n    if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n        (#Dehumidifier).setDeHumidifierMode(\"cooling\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일에는 건조기를 지연 청소 모드로 변경해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).day == 1) {\n    if ((#Dehumidifier).switch != \"on\") {\n        (#Dehumidifier).on()\n    }\n    if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n        (#Dehumidifier).setDeHumidifierMode(\"delayWash\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"off\") {\n\t(#Dishwasher).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"off\") {\n\t(#Dishwasher).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"eco\") {\n\t(#Dishwasher).setDishwasherMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 강력 모드로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"intense\") {\n\t(#Dishwasher).setDishwasherMode(\"normal\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 자동 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"auto\") {\n\t(#Dishwasher).setDishwasherMode(\"heavy\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 고속 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"quick\") {\n\t(#Dishwasher).setDishwasherMode(\"light\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 헹굼 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"rinse\") {\n\t(#Dishwasher).setDishwasherMode(\"heavy\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"dry\") {\n\t(#Dishwasher).setDishwasherMode(\"light\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 식기세척기가 켜져 있으면 스피커를 통해 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"off\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"식기세척기가 켜져 있습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기가 꺼져 있으면 전원을 켜고 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).switch != \"on\") {\n\t(#Dishwasher).on()\n}\nif ((#Dishwasher).dishwasherMode != \"auto\") {\n    (#Dishwasher).setDishwasherMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기가 현재 전원 모드에 있는 경우 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Dishwasher).dishwasherMode == \"intense\") {\n    if ((#Humidifier).switch != \"off\") {\n\t    (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 식기 세척기 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7시마다 식기세척기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 22:00에 식기 세척기 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"off\") {\n        (#Dishwasher).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Dishwasher).switch != \"off\") {\n        (#Dishwasher).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 식기세척기를 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"eco\") {\n        (#Dishwasher).setDishwasherMode(\"eco\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 식기세척기를 강력한 모드로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"intense\") {\n        (#Dishwasher).setDishwasherMode(\"intense\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 수요일 14:00에 식기세척기를 자동 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"wednesday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"auto\") {\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 16:45에 식기세척기를 고속 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 45) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"quick\") {\n        (#Dishwasher).setDishwasherMode(\"quick\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 19:00에 식기세척기를 헹굼 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 19 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"rinse\") {\n        (#Dishwasher).setDishwasherMode(\"rinse\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 22:00에 식기 세척기를 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"dry\") {\n        (#Dishwasher).setDishwasherMode(\"dry\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기가 켜지면 30분마다 스피커를 통해 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Dishwasher).switch != \"off\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"식기세척기가 켜져 있습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 식기세척기가 꺼져 있는 경우 전원을 켜고 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"auto\") {\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 식기세척기가 현재 전원 모드로 설정되어 있으면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Dishwasher).dishwasherMode == \"intense\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 문이 열려 있으면 스피커에서 도어록이 열려 있으므로 확인해야 한다고 알려줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"open\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"문의 잠금이 열려 있으므로 점검해주세요.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 문이 닫혀 있는 경우 스피커에게 문이 닫혀 있다고 말해줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"closed\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"문이 닫혀 있으므로 엽니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 문이 닫혀 있으면 선풍기를 켜줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"closing\") {\n    if ((#Fan).switch != \"on\") {\n\t    (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 문이 열려 있으면 조명을 켜줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"opening\") {\n    if ((#Light).switch != \"on\") {\n    \t(#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 문이 닫히는 중이라면 문이 닫힐 때까지 기다려.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"closing\") {\n\twait until((#DoorLock).door == \"closed\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 문이 열려 있으면 문이 열릴 때까지 기다렸다가 에어컨을 켜줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#DoorLock).door == \"opening\") {\n\twait until((#DoorLock).door == \"open\")\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 한 시간에 한 번씩 스피커를 통해 현재 도어록 상태를 알려줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#DoorLock).door == \"closed\") {\n\t    (#Speaker).speak(\"문이 닫혀 있습니다.\")\n    }\n    if ((#DoorLock).door == \"closing\") {\n\t    (#Speaker).speak(\"문이 닫히는 중입니다.\")\n    }\n    if ((#DoorLock).door == \"open\") {\n\t    (#Speaker).speak(\"문이 열려 있습니다.\")\n    }\n    if ((#DoorLock).door == \"opening\") {\n\t    (#Speaker).speak(\"문이 열리는 중입니다.\")\n    }\n    if ((#DoorLock).door == \"unknown\") {\n\t    (#Speaker).speak(\"문의 상태를 알 수 없습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이 주소(user@example.com)로 '회의 일정'이라는 제목과 '오후 3시에 회의 시작'이라는 문구를 포함한 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMail(\"user@example.com\", \"회의 일정\", \"회의는 오후 3시에 시작합니다.\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이 주소(boss@example.com)로 제목 '보고서 제출', 내용 '보고서 제출', 파일 경로 '/documents/report.pdf'를 포함한 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"boss@example.com\", \"보고서 제출\", \"보고서를 제출합니다.\", \"/documents/report.pdf\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 친구에게 이메일(friend@example.com)로 '안녕하세요'라는 제목과 '잘 지내세요'라는 문구를 포함한 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMail(\"friend@example.com\", \"안부\", \"잘 지내니?\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 관리자에게 파일, 주소 manager@example.com, 제목 '프로젝트 계획', 내용 '계획 첨부', 파일 경로 '/projects/plan.pdf'를 포함한 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"manager@example.com\", \"프로젝트 계획서\", \"계획서를 첨부합니다.\", \"/projects/plan.pdf\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이메일을 보내줘. 수신자는 colleague@example.com, 제목은 '업무 협조', 내용은 '협조 부탁드립니다'야.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMail(\"colleague@example.com\", \"업무 협조\", \"협조 부탁드립니다.\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 파일이 첨부된 이메일을 보내줘. 수신자는 client@example.com, 제목은 '계약서', 내용은 '계약서가 첨부되었습니다.', 파일 경로는 '/contracts/contract.pdf'야.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#EmailProvider).sendMailWithFile(\"client@example.com\", \"계약서\", \"계약서를 첨부합니다.\", \"/contracts/contract.pdf\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 이 주소(user@example.com)로 '회의 일정'이라는 제목과 '회의는 오후 3시에 시작됩니다'라는 문구가 포함된 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMail(\"user@example.com\", \"회의 일정\", \"회의는 오후 3시에 시작합니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 10시에 이 주소로 이메일을 보내줘: boss@example.com, 제목은 '보고서 제출', 내용은 '보고서 제출', 파일 경로는 '/documents/report.pdf'로 작성해.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"boss@example.com\", \"보고서 제출\", \"보고서를 제출합니다.\", \"/documents/report.pdf\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 친구에게 friend@example.com 주소, '안녕하세요'라는 제목, '잘 지내세요'라는 내용으로 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMail(\"friend@example.com\", \"안부\", \"잘 지내니?\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 15:00에 관리자에게 파일, 주소 manager@example.com, 제목 '프로젝트 계획', 내용 '계획 첨부', 파일 경로 '/projects/plan.pdf'를 포함한 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"manager@example.com\", \"프로젝트 계획서\", \"계획서를 첨부합니다.\", \"/projects/plan.pdf\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 14:00에 이메일을 보내줘. 수신자는 colleague@example.com, 제목은 '업무 협조', 내용은 '협조 부탁드립니다'야야.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 14 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMail(\"colleague@example.com\", \"업무 협조\", \"협조 부탁드립니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 16:00에 파일이 첨부된 이메일을 보내줘. 수신자는 client@example.com, 제목은 '계약서', 내용은 '계약서가 첨부되었습니다.', 파일 경로는 '/contracts/contract.pdf'야.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 0) {\n    (#EmailProvider).sendMailWithFile(\"client@example.com\", \"계약서\", \"계약서를 첨부합니다.\", \"/contracts/contract.pdf\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"off\") {\n\t(#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"off\") {\n\t(#Fan).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬 속도를 10으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#Fan).setFanSpeed(10)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬을 중간 속도로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "(#Fan).setFanSpeed(50)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬을 75 속도로 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}\n(#Fan).setFanSpeed(75)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬을 최대 속도로 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}\n(#Fan).setFanSpeed(100)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 팬이 꺼져 있는 경우 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"on\") {\n\t(#Fan).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 팬이 켜져 있는 경우 속도를 30으로 낮춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).switch != \"off\") {\n\t(#Fan).setFanSpeed(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 팬 속도가 60이면 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).fanSpeed == 60) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 팬 속도가 90이면 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).fanSpeed == 90) {\n    if ((#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 팬 속도가 10이면 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Fan).fanSpeed == 10) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 선풍기 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 10시에 선풍기 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"off\") {\n        (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Fan).switch != \"off\") {\n        (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬 속도를 30분마다 10으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    (#Fan).setFanSpeed(10)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 팬을 중간 속도로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    (#Fan).setFanSpeed(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 45분마다 75 속도로 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n    (#Fan).setFanSpeed(75)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 14:00에 선풍기를 최대 속도로 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n    (#Fan).setFanSpeed(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 팬이 꺼져 있는 경우 15분마다 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Fan).switch != \"on\") {\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 20분마다 현재 팬이 켜져 있는 경우 속도를 30으로 낮춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (20 MIN) {\n    if ((#Fan).switch != \"off\") {\n        (#Fan).setFanSpeed(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"off\") {\n\t(#Feeder).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 급식기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 급식기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"off\") {\n\t(#Feeder).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기에서 50그램을 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(50, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 100g의 음식을 제공하도록 먹이공급기를 설정해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(100, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 최대 5파운드까지 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(5, \"pounds\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 20g의 음식을 제공하도록 설정해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(20, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 현재 꺼져 있는 경우 먹이공급기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 먹이공급기가 켜져 있으면 30그램을 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"off\") {\n    (#Feeder).setFeedPortion(30, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 먹이공급기가 꺼져 있는 경우 먹이공급기를 켜고 60그램을 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).switch != \"on\") {\n\t(#Feeder).on()\n}\n(#Feeder).setFeedPortion(60, \"grams\")\n(#Feeder).startFeeding()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 먹이 중이면 스피커를 통해 '먹이공급기가 먹이를 주는 중입니다.'라고 말해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"feeding\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n\t(#Speaker).speak(\"먹이공급기가 먹이를 주는 중입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기 상태에 오류가 있는 경우 표시등을 빨간색으로 변경해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"error\") {\n    if ((#Light).switch != \"on\") {\n    \t(#Light).on()\n    }\n\t(#Light).setColor(\"255|0|0\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 급식기 상태에 오류가 있는 경우 가스 밸브를 닫아줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"error\") {\n    if ((#GasValve).valve != \"closed\") {\n\t    (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 쉬고 있으면 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"idle\") {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 급식기가 쉬고 있는 경우 커튼을 열어줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Feeder).feederState == \"idle\") {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 먹이공급기 켜줘\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 200g의 사료를줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(200, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 22:00에 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"off\") {\n        (#Feeder).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 먹이공급기에서 50개를 공급해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(50, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 먹이공급기에서 100g을 먹도록 설정해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(100, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 수요일 14:00에 45그램을 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"wednesday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(145, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 16시 45분에 20그램의 음식을 제공하도록 설정해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 45) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n    (#Feeder).setFeedPortion(20, \"grams\")\n    (#Feeder).startFeeding()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 먹이공급기가 꺼져 있는 경우 30분마다 먹이공급기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 가스 농도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 가스 농도는 \" + (#GasMeter).gasMeter)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 농도가 얼마인지 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"가스 농도는 \" + (#GasMeter).gasMeter)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스의 현재 발열량을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 가스의 열량 값은 \" + (#GasMeter).gasMeterCalorific)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스의 칼로리가 얼마나 되는지 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"가스의 열량은 \" + (#GasMeter).gasMeterCalorific)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 누적 가스 사용 시간을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 누적 가스 사용 시간은 \" + (#GasMeter).gasMeterTime)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스를 얼마나 오래 사용했는지 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"가스 사용 시간은 \" + (#GasMeter).gasMeterTime)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 사용 중인 가스 사용량을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금까지 얼마나 많은 가스를 사용했는지 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 농도가 5%를 초과하면 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeter >= 5) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스의 발열량이 1000kJ를 넘으면 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeterCalorific >= 1000) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 가스 사용 시간이 3600초를 초과하면 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeterTime >= 3600) {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금까지 사용한 가스의 양이 50 이상이면 지금까지 스피커에서 사용한 양을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasMeter).gasMeterVolume >= 50) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"사용된 가스의 양이 50을 넘었습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 현재 가스 농도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 가스 농도는 \" + (#GasMeter).gasMeter)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 가스 농도가 얼마인지 알려줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가스 농도는 \" + (#GasMeter).gasMeter)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 가스의 현재 발열량을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 가스의 열량 값은 \" + (#GasMeter).gasMeterCalorific)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 가스의 칼로리 양을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가스의 열량은 \" + (#GasMeter).gasMeterCalorific)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 5분마다 현재 누적 가스 사용 시간을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (5 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 누적 가스 사용 시간은 \" + (#GasMeter).gasMeterTime)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분마다 가스 사용량을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가스 사용 시간은 \" + (#GasMeter).gasMeterTime)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 현재 사용 중인 가스 양을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 지금까지 사용한 가스 사용량을 알려줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"사용된 가스의 양은 \" + (#GasMeter).gasMeterVolume)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 농도가 5% 이상이면 1시간마다 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#GasMeter).gasMeter >= 5) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 16:00에 가스의 발열량이 6000kJ를 넘으면 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 0) {\n    if ((#GasMeter).gasMeterCalorific >= 6000) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"closed\") {\n    (#GasValve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브를 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"open\") {\n    (#GasValve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브를 잠가줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"closed\") {\n    (#GasValve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브를 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"open\") {\n    (#GasValve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 현재 열려 있으면 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve == \"open\") {\n    (#GasValve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 현재 닫혀 있으면 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#GasValve).valve != \"open\") {\n    (#GasValve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시에 가스 밸브 열기\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#GasValve).valve != \"open\") {\n        (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 10시에 가스 밸브를 잠가줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18:30에 가스 밸브를 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#GasValve).valve != \"open\") {\n        (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 14:00에 현재 열려 있는 가스 밸브가 있으면 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 가스 밸브가 닫혀 있는 경우 15분마다 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#GasValve).valve != \"open\") {\n        (#GasValve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"off\") {\n\t(#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"off\") {\n\t(#Humidifier).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 자동 모드로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"auto\") {\n\t(#Humidifier).setHumidifierMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 낮음 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"low\") {\n\t(#Humidifier).setHumidifierMode(\"low\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 중간 모드로 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"medium\") {\n\t(#Humidifier).setHumidifierMode(\"medium\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 강 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}\nif ((#Humidifier).humidifierMode != \"high\") {\n\t(#Humidifier).setHumidifierMode(\"high\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기가 현재 꺼져 있는 경우 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"on\") {\n\t(#Humidifier).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기가 현재 켜져 있는 경우 중간 모드로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).switch != \"off\") {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"medium\") {\n        (#Humidifier).setHumidifierMode(\"medium\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기가 자동 모드가 아닌 경우 스피커를 통해 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).humidifierMode != \"auto\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"가습기가 자동 모드가 아닙니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기가 현재 낮음 모드에 있는 경우 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).humidifierMode == \"low\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기가 현재 중간 모드가 아닌 경우 급수기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Humidifier).humidifierMode != \"medium\") {\n    if ((#Feeder).switch != \"off\") {\n        (#Feeder).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 가습기 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시마다 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 10시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"off\") {\n        (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Humidifier).switch != \"off\") {\n        (#Humidifier).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 30분마다 자동 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"auto\") {\n        (#Humidifier).setHumidifierMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 가습기를 저속 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"low\") {\n        (#Humidifier).setHumidifierMode(\"low\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 45분마다 중간 모드로 돌려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n    if ((#Humidifier).humidifierMode != \"medium\") {\n        (#Humidifier).setHumidifierMode(\"medium\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 습도는 \" + (#HumiditySensor).humidity)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 얼마나 되는지 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"습도는 \" + (#HumiditySensor).humidity)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도가 50% 이상이면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity >= 50) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 습도가 30% 미만이면 스피커를 통해 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity <= 30) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"thunderstorm\") {\n        (#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n    } else if ((#WeatherProvider).weather == \"drizzle\") {\n        (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n    } else if ((#WeatherProvider).weather == \"rain\") {\n        (#Speaker).speak(\"현재 날씨는 비입니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n    } else if ((#WeatherProvider).weather == \"mist\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\") {\n        (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n    } else if ((#WeatherProvider).weather == \"haze\") {\n        (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"dust\") {\n        (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n    } else if ((#WeatherProvider).weather == \"fog\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"sand\") {\n        (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n    } else if ((#WeatherProvider).weather == \"ash\") {\n        (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n    } else if ((#WeatherProvider).weather == \"squall\") {\n        (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\") {\n        (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도가 70%를 초과하면 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity > 70) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 현재 습도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 습도는 \" + (#HumiditySensor).humidity)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 습도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"습도는 \" + (#HumiditySensor).humidity)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도가 50% 이상이면 30분마다 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#HumiditySensor).humidity >= 50) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 30% 미만이면 15분마다 스피커를 통해 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#HumiditySensor).humidity <= 30) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#WeatherProvider).weather == \"thunderstorm\") {\n            (#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n        } else if ((#WeatherProvider).weather == \"drizzle\") {\n            (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n        } else if ((#WeatherProvider).weather == \"rain\") {\n            (#Speaker).speak(\"현재 날씨는 비입니다.\")\n        } else if ((#WeatherProvider).weather == \"snow\") {\n            (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n        } else if ((#WeatherProvider).weather == \"mist\") {\n            (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n        } else if ((#WeatherProvider).weather == \"smoke\") {\n            (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n        } else if ((#WeatherProvider).weather == \"haze\") {\n            (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n        } else if ((#WeatherProvider).weather == \"dust\") {\n            (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n        } else if ((#WeatherProvider).weather == \"fog\") {\n            (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n        } else if ((#WeatherProvider).weather == \"sand\") {\n            (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n        } else if ((#WeatherProvider).weather == \"ash\") {\n            (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n        } else if ((#WeatherProvider).weather == \"squall\") {\n            (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n        } else if ((#WeatherProvider).weather == \"tornado\") {\n            (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n        } else if ((#WeatherProvider).weather == \"clear\") {\n            (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n        } else if ((#WeatherProvider).weather == \"clouds\") {\n            (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도가 70%를 초과하면 1시간마다 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#HumiditySensor).humidity > 70) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 관개 시스템을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n\t(#Irrigator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 관개 시스템을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n\t(#Irrigator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 관개 시스템을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"off\") {\n\t(#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 관개 시스템을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"off\") {\n\t(#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도가 40% 미만인 경우 관수 시스템을 켜고 300ml의 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity <= 40) {\n    if ((#Irrigator).switch != \"on\") {\n        (#Irrigator).on()\n    }\n    (#Irrigator).setWaterPortion(300, \"mililiters\")\n\t(#Irrigator).startWatering()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 습도가 20% 미만이면 물을 주기 시작하고 200ml의 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#HumiditySensor).humidity <= 20) {\n    if ((#Irrigator).switch != \"off\") {\n        (#Irrigator).off()\n    }\n    (#Irrigator).setWaterPortion(200, \"mililiters\")\n\t(#Irrigator).startWatering()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 급수기를 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Irrigator).switch != \"on\") {\n        (#Irrigator).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 관개 시스템을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Irrigator).switch != \"on\") {\n        (#Irrigator).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 관개 시스템을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Irrigator).switch != \"off\") {\n        (#Irrigator).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 온도가 30도 미만이면 5리터의 물을줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#WeatherProvider).temperature <= 30) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n        (#Irrigator).setWaterPortion(300, \"liters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 누수 센서가 누수를 감지하면 알람을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"detected\") {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 누수가 발생한 경우 가스 밸브를 잠가줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"detected\") {\n    if ((#GasValve).valve != \"closed\") {\n        (#GasValve).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 누수가 없는 경우 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LeakSensor).leakage == \"not_detected\") {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 누수 센서가 매시간 누수를 감지하면 알람이 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 누수가 발생하면 가스 밸브를 잠가줘.\n\nServices: {'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 누수가 없는 경우 30분마다 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#LeakSensor).leakage == \"not_detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 불을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 불을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명 밝기를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}\n(#Light).setLevel(50)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구 밝기를 75%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}\n(#Light).setLevel(75)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명의 밝기를 낮춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setLevel(10)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: HSV 값을 사용하여 조명 색상을 빨간색으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"0|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구 색상을 파란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"240|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 불 색깔을 녹색으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"120|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 밝은 색상을 노란색으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"60|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구 색상을 hsv 값을 사용하여 보라색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"300|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 불 색깔을 주황색으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n    (#Light).on()\n}\n(#Light).setColor(\"30|100|100\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 표시등이 꺼져 있으면 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"on\") {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전구가 현재 켜져 있는 경우 밝기를 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Light).switch != \"off\") {\n\t(#Light).setLevel(30)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 조명 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 전구를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 10시에 전등 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 조명 밝기를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n    (#Light).setLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 전구 밝기를 75%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n    (#Light).setLevel(75)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 45분마다 HSV 값을 사용하여 조명 색상을 빨간색으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (45 MIN) {\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n    (#Light).setColor(\"0|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 빛의 강도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 광량은 \" + (#LightSensor).light)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 조도 값을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 조도 값은 \" + (#LightSensor).light)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조도가 1000이 넘으면 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LightSensor).light >= 1000) {\n\t(#Light).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 조도 값이 100 미만인 경우 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#LightSensor).light <= 100) {\n\t(#Light).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 현재 빛의 강도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 광량은 \" + (#LightSensor).light)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 8시마다 현재 조도 값을 알려줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 조도 값은 \" + (#LightSensor).light)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 빛의 강도가 1000을 초과하면 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#LightSensor).light >= 1000) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 조도 값이 100 미만인 경우 15분마다 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#LightSensor).light <= 100) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 301호 빌딩의 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 301동 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 자하연의 저녁 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 자하연 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 기숙사 식당의 아침 식사 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 기숙사식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 학생 식당의 아침 식사 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 학생식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 수의대 급식 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 수의대식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 3개 레스토랑의 저녁 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 전망대(3식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 아트 레스토랑의 조식 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 예술계식당(아름드리) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 기숙사 식당의 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 기숙사식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘의 아워홈 디너 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 아워홈 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 동원관의 아침 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 동원관식당(113동) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 220동 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 웰스토리(220동) 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘 공대 식당의 저녁 메뉴가 뭔지 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 투굿(공대간이식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 자하연 레스토랑의 오늘의 조식 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"오늘 자하연식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 301동 레스토랑의 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 301동식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 학생 식당의 아침 식사 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 학생식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 수의대 구내식당의 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 수의대식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 전망대 저녁 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 전망대(3식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 아침 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 예술계식당(아름드리) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 기숙사 식당의 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 기숙사식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 아워홈의 저녁 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 아워홈 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 113빌딩의 조식 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 동원관식당(113동) 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 웰스토리 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 웰스토리(220동) 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 투굿 디너 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 투굿(공대간이식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 저녁 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 투굿(공대간이식당) 저녁\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 자하연 레스토랑의 조식 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 자하연식당 아침\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 내일 301호 빌딩의 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).menu(\"내일 301동식당 점심\")\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘의 무작위 레스토랑 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).todayMenu()\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 서울대 맛집을 추천해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).todayMenu()\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 레스토랑 메뉴에서 원하는 메뉴를 선택해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "menu_info = (#MenuProvider).todayMenu()\nif ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(menu_info)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 10시에 301호 빌딩의 오늘의 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 10 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 301동 점심\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 17:00에 오늘의 자하연 저녁 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 17 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 자하연 저녁\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 내일 기숙사 식당의 아침 식사 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"내일 기숙사식당 아침\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시에 오늘의 학생 식당 조식 메뉴가 무엇인지 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 학생식당 아침\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시가 되면 오늘의 수의대 구내식당 점심 메뉴를 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    menu_info = (#MenuProvider).menu(\"오늘 수의대식당 점심\")\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 통해 현재 이동 상태를 출력해줘.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\nif ((#MotionSensor).motion == active) {\n    (#Speaker).speak(\"움직임이 감지되었습니다.\")\n}\nif ((#MotionSensor).motion == inactive) {\n    (#Speaker).speak(\"움직임이 감지되지 않았습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 모션 센서에서 움직임이 감지되면 스피커로 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"active\") {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"움직임이 감지되었습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 당장 움직임이 감지되면 사진을 찍어 ssong@test.org 으로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"active\") {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    x = (#Camera).take()\n    (#EmailProvider).sendMailWithFile(\"ssong@test.org\", \"움직임이 감지되었습니다\", \"모션 센서에 의해 감지된 움직임에 대한 사진입니다.\", x)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 움직임이 없으면 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#MotionSensor).motion == \"inactive\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 현재 이동 상태를 스피커로 출력해줘.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#MotionSensor).motion == active) {\n        (#Speaker).speak(\"움직임이 감지되었습니다.\")\n    }\n    if ((#MotionSensor).motion == inactive) {\n        (#Speaker).speak(\"움직임이 감지되지 않았습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 모션 센서가 움직임을 감지하면 스피커를 통해 음성으로 알려줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"움직임이 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 움직임이 감지되면 사진을 찍어 ssong@test.org 으로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        x = (#Camera).take()\n        (#EmailProvider).sendMailWithFile(\"ssong@test.org\", \"움직임이 감지되었습니다\", \"모션 센서에 의해 감지된 움직임에 대한 사진입니다.\", x)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 움직임이 없는 경우 10분마다 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#MotionSensor).motion == \"inactive\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 통해 현재 재실 감지 상태를 말해줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\nif ((#PresenceSensor).presence == \"present\") {\n    (#Speaker).speak(현재 누군가가 있습니다.)\n}\nif ((#PresenceSensor).presence == \"not_present\") {\n    (#Speaker).speak(현재 아무도 없습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 존재 센서가 사람을 감지하면 식기세척기를 끄고 정수기를 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"present\") {\n    if ((#Dishwasher).switch != \"off\") {\n        (#Dishwasher).off()\n    }\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 아무도 없는 경우 사진을 찍어 dummy@mail.mail 으로 보내줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"not_present\") {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    x = (#Camera).take()\n    (#EmailProvider).sendMailWithFile(\"dummy@mail.mail\", \"존재 감지 없음\", \"존재 센서에 의해 감지되지 않은 상태입니다.\", x)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 참석하신 분이 계시면 오늘의 서울대 식당 메뉴를 추천해 주시고 스피커를 통해 발표해줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#PresenceSensor).presence == \"present\") {\n    menu_info = (#MenuProvider).todayMenu()\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(menu_info)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 스피커를 통해 현재 재실 감지 상태를 말해줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#PresenceSensor).presence == \"present\") {\n        (#Speaker).speak(현재 누군가가 있습니다.)\n    }\n    if ((#PresenceSensor).presence == \"not_present\") {\n        (#Speaker).speak(현재 아무도 없습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 재실 센서가 사람을 감지하면 식기세척기를 끄고 정수기를 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#PresenceSensor).presence == \"present\") {\n        if ((#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 아무도 없는 경우 사진을 찍어 dummy@mail.mail 으로 전송해줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        x = (#Camera).take()\n        (#EmailProvider).sendMailWithFile(\"dummy@mail.mail\", \"존재 감지 없음\", \"존재 센서에 의해 감지되지 않은 상태입니다.\", x)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분마다 참석자가 있으면 오늘의 서울대 식당 메뉴 중 하나를 추천하고 스피커를 통해 알려줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MenuProvider': 'Functions : [\\n    menu(command: string) : command format {\"{오늘|내일} {학생식당|수의대식당|전망대(3식당)|예술계식당(아름드리)|기숙사식당|아워홈|동원관식당(113동)|웰스토리(220동)|투굿(공대간이식당)|자하연식당|301동식당} {아침|점심|저녁}\"}\\n    todayMenu()\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#PresenceSensor).presence == \"present\") {\n        menu_info = (#MenuProvider).todayMenu()\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(menu_info)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"on\") {\n\t(#Pump).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"off\") {\n\t(#Pump).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 일반 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).operationMode != \"normal\") {\n\t(#Pump).setOperationMode(\"normal\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 최소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).operationMode != \"minimum\") {\n\t(#Pump).setOperationMode(\"minimum\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 최대 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).operationMode != \"maximum\") {\n\t(#Pump).setOperationMode(\"maximum\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 통해 펌프의 현재 작동 모드를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n    (#Speaker).on()\n}\n(#Speaker).speak(\"현재 펌프의 작동 모드는 \" + (#Pump).operationMode)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 펌프가 꺼져 있으면 전원을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"on\") {\n\t(#Pump).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 펌프가 켜져 있으면 최대 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Pump).switch != \"off\") {\n\t(#Pump).setOperationMode(\"maximum\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Pump).switch != \"on\") {\n        (#Pump).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 9시마다 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Pump).switch != \"off\") {\n        (#Pump).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 8시에 펌프를 일반 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Pump).operationMode != \"normal\") {\n        (#Pump).setOperationMode(\"normal\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18:30에 펌프를 최소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Pump).operationMode != \"minimum\") {\n        (#Pump).setOperationMode(\"minimum\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 펌프를 최대 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Pump).operationMode != \"maximum\") {\n        (#Pump).setOperationMode(\"maximum\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"on\") {\n\t(#Refrigerator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"off\") {\n\t(#Refrigerator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고를 래피드쿨 모드로 전환\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n\t(#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고를 급속 동결 모드로 전환\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n\t(#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고의 현재 작동 모드가 RapidCool이 아닌 경우 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n\tif ((#Light).switch != \"on\") {\n\t\t(#Light).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 냉장고가 켜져 있는 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"off\") {\n\tif ((#AirConditioner).switch != \"off\") {\n\t\t(#AirConditioner).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고가 켜져 있으면 빠른 동결 모드로 설정하고, 꺼져 있으면 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).switch != \"off\") {\n    if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n        (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n    }\n}\nelse {\n\tif ((#Refrigerator).switch != \"on\") {\n\t\t(#Refrigerator).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고가 급속 냉각 모드로 작동하는 경우 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Refrigerator).refrigeratorMode == \"RapidCool\") {\n\tif ((#Fan).switch != \"on\") {\n\t\t(#Fan).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Refrigerator).switch != \"on\") {\n        (#Refrigerator).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Refrigerator).switch != \"off\") {\n        (#Refrigerator).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 8시에 냉장고를 RapidCool 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n        (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 냉장고를 급속 동결 모드로 전환해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n        (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고의 현재 작동 모드가 RapidCool이 아닌 경우 매일 12시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 청소를 시작해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"on\") {\n\t(#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"on\") {\n\t(#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"on\") {\n\t(#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기의 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"off\") {\n\t(#RobotCleaner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기의 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"off\") {\n\t(#RobotCleaner).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 스팟 청소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 반복 청소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 수동 모드에서 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n}\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 정지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지도 모드에서 로봇 청소기를 작동해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n}\nif ((#RobotCleaner).switch != \"on\") {\n    (#RobotCleaner).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기가 현재 켜져 있는 경우 부분 청소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).switch != \"off\") {\n\t(#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기가 현재 자동 모드로 작동 중인 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#RobotCleaner).robotCleanerCleaningMode == \"auto\") {\n    if ((#AirConditioner).switch != \"off\") {\n        (#AirConditioner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간마다 로봇 청소기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 18:00에 로봇 청소기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).switch != \"off\") {\n        (#RobotCleaner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 8시에 로봇 청소기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 주말 20시 30분에 로봇 청소기를 부분 청소 모드로 실행해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 20 and (#Clock).minute == 30) {\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 지도 모드에서 청소를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 그늘이 전혀 열려 있지 않으면 스피커를 통해 '음악/내음악.mp3' 경로에서 음악을 재생해줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel > 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).play(\"Music/MyMusic.mp3\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 그늘이 절반 이상 열려 있으면 45% 정도로 줄여줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel >= 50) {\n    (#Shade).setShadeLevel(45)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 그늘이 80% 미만으로 열려 있는 경우 90%로 늘려줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel < 80) {\n\t(#Shade).setShadeLevel(90)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 차양이 절반 이상 열리면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel >= 50) {\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 그늘을 10% 정도 열어줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 10) {\n    (#Shade).setShadeLevel(10)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 그늘막을 살짝 열어줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 25) {\n    (#Shade).setShadeLevel(25)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 그늘막을 완전히 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel > 0) {\n    (#Shade).setShadeLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 그늘을 90% 열어줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 90) {\n    (#Shade).setShadeLevel(90)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음영을 60%로 조정해줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Shade).shadeLevel != 60) {\n    (#Shade).setShadeLevel(60)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간마다 음영 30% 개방\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    if ((#Shade).shadeLevel != 30) {\n        (#Shade).setShadeLevel(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 8시에 그늘을 25%로 설정해줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Shade).shadeLevel != 25) {\n        (#Shade).setShadeLevel(25)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 주말 10시 30분에 차양을 90%까지 개방해줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 10 and (#Clock).minute == 30) {\n    if ((#Shade).shadeLevel != 90) {\n        (#Shade).setShadeLevel(90)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 18:00에 그늘을 10%로 설정해줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Shade).shadeLevel != 10) {\n        (#Shade).setShadeLevel(10)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"off\") {\n\t(#Siren).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n    (#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 알람을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스트로브 모드에서 알람을 실행해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n    (#Siren).on()\n}\n(#Siren).setSirenMode(\"strobe\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 알람을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n    (#Siren).on()\n}\n(#Siren).setSirenMode(\"siren\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌을 켜고 알람 소리와 조명이 모두 켜지도록 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\n(#Siren).setSirenMode(\"both\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 알람 모드를 꺼짐으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"off\") {\n\t(#Siren).setSirenMode(\"off\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌 모드를 둘 다로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"both\") {\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 알람을 스트로브 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"strobe\") {\n\t(#Siren).setSirenMode(\"strobe\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌 소리만 울리도록 사이렌을 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode != \"siren\") {\n\t(#Siren).setSirenMode(\"siren\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 알람이 두 가지 모드 모두에 있는 경우 소리만 내도록 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode == \"both\") {\n\t(#Siren).setSirenMode(\"siren\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 사이렌이 스트로브 모드에 있는 경우 소리를 내도록 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode == \"strobe\") {\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 알람이 사이렌 모드인 경우 스트로브 라이트만 켜지도록 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"on\") {\n\t(#Siren).on()\n}\nif ((#Siren).sirenMode == \"siren\") {\n\t(#Siren).setSirenMode(\"strobe\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌이 켜져 있으면 냉장고를 켜고 모드를 쾌속냉각으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Siren).switch != \"off\") {\n\tif ((#Refrigerator).switch != \"on\") {\n\t\t(#Refrigerator).on()\n\t}\n    if ((#Refrigerator).refrigeratorMode() != \"RapidCool\") {\n    \t(#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 사이렌을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Siren).switch != \"off\") {\n        (#Siren).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 8시에 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 18시 30분에 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 18 and (#Clock).minute == 30) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 사이렌을 켜고 알람 소리와 조명이 모두 켜지도록 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Siren).switch != \"on\") {\n        (#Siren).on()\n    }\n    (#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그에 연결된 전원을 켜줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"on\") {\n\t(#SmartPlug).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그를 켜주시겠어요?\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"on\") {\n\t(#SmartPlug).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그를 꺼줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"off\") {\n\t(#SmartPlug).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그에 연결된 전원을 꺼줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"off\") {\n\t(#SmartPlug).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그를 통해 흐르는 전류가 1보다 크면 냉장고를 꺼줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).current > 1.0) {\n\tif ((#Refrigerator).switch != \"off\") {\n\t\t(#Refrigerator).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그가 현재 얼마나 많은 전력을 소비하고 있는지 스피커에 알려줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"현재 스마트 플러그의 전력 소비량은 \" + (#SmartPlug).powerConsumption)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그의 현재 전압을 알려줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"현재 스마트 플러그의 전압은 \" + (#SmartPlug).voltage)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그가 켜져 있으면 전원을 끄고 창을 닫아줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"off\") {\n\t(#SmartPlug).off()\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 스마트 플러그가 꺼져 있는 경우 로봇 청소기를 켜줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).switch != \"on\") {\n\tif ((#RobotCleaner).switch != \"on\") {\n\t\t(#RobotCleaner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그의 전력 소비량이 1000을 초과하면 가스 밸브를 닫고 가습기를 켜줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmartPlug).powerConsumption >= 1000.0) {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그에 연결된 전원을 4시간마다 켜줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (4 HOUR) {\n    if ((#SmartPlug).switch != \"on\") {\n        (#SmartPlug).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 6시에 스마트 플러그를 꺼줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#SmartPlug).switch != \"off\") {\n        (#SmartPlug).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 화요일 9시에 스피커를 통해 스마트 플러그의 전력 소비량을 안내해줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"tuesday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 스마트 플러그의 전력 소비량은 \" + (#SmartPlug).powerConsumption)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 12시 15분에 스마트 플러그를 꺼줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 12 and (#Clock).minute == 15) {\n    if ((#SmartPlug).switch != \"off\") {\n        (#SmartPlug).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 주말 18시 45분에 스마트 플러그를 켜줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 18 and (#Clock).minute == 45) {\n    if ((#SmartPlug).switch != \"on\") {\n        (#SmartPlug).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 연기 감지 상태를 스피커로 출력해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#SmokeDetector).smoke == \"detected\") {\n    (#Speaker).speak(현재 연기가 감지되었습니다. 확인해주세요.)\n}\nif ((#SmokeDetector).smoke == \"not_detected\") {\n    (#Speaker).speak(현재 연기가 감지되지 않았습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 화재 연기가 감지되면 알람을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#SmokeDetector).smoke == \"detected\") {\n\tif ((#Siren).switch != \"on\") {\n\t\t(#Siren).on()\n\t}\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 연기가 감지되지 않으면 창문을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmokeDetector).smoke == \"not_detected\") {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 연기가 감지되면 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SmokeDetector).smoke == \"detected\") {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 연기 감지 상태를 매시간 스피커로 출력해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#Speaker).speak(현재 연기가 감지되었습니다. 확인해주세요.)\n    }\n    if ((#SmokeDetector).smoke == \"not_detected\") {\n        (#Speaker).speak(현재 연기가 감지되지 않았습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7시마다 스피커를 통해 연기 감지 상태를 안내해줘.\n\nServices: {'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#Speaker).speak(현재 연기가 감지되었습니다. 확인해주세요.)\n    }\n    if ((#SmokeDetector).smoke == \"not_detected\") {\n        (#Speaker).speak(현재 연기가 감지되지 않았습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 9시에 연기 감지 상태를 확인하고 알람을 울려줘.\n\nServices: {'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되지 않으면 30분마다 창문을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#SmokeDetector).smoke == \"not_detected\") {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 연기 감지 상태를 확인하고 알람을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        (#Siren).setSirenMode(\"both\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시에 연기가 감지되는지 확인하고 가스 밸브를 닫아줘.\n\nServices: {'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 소리 감지 상태를 스피커로 출력해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#SoundSensor).sound == \"detected\") {\n    (#Speaker).speak(현재 소리가 감지됩니다.)\n}\nif ((#SoundSensor).sound == \"not_detected\") {\n    (#Speaker).speak(현재 소리가 감지되지 않았습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 소음 감지 상태를 스피커로 출력해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#SoundSensor).sound == \"detected\") {\n    (#Speaker).speak(현재 소리가 감지됩니다.)\n}\nif ((#SoundSensor).sound == \"not_detected\") {\n    (#Speaker).speak(현재 소리가 감지되지 않았습니다.)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이제 소리가 감지되지 않으면 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SoundSensor).sound == \"not_detected\") {\n\tif ((#Refrigerator).switch != \"off\") {\n\t\t(#Refrigerator).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 소리가 100데시벨보다 크면 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#SoundSensor).soundPressureLevel > 100) {\n\tif ((#Pump).switch != \"on\") {\n\t\t(#Pump).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간마다 현재 소음 수준을 스피커를 통해 출력해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (2 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 소음의 크기는\" + (#SoundSensor).soundPressureLevel)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 8시마다 스피커를 통해 소리 감지 상태를 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SoundSensor).sound == \"detected\") {\n        (#Speaker).speak(현재 소리가 감지됩니다.)\n    }\n    if ((#SoundSensor).sound == \"not_detected\") {\n        (#Speaker).speak(현재 소리가 감지되지 않았습니다.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 20분마다 소리가 감지되지 않으면 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (20 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분마다 소음이 40을 초과하면 스피커를 통해 주의 메시지를 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#SoundSensor).soundPressureLevel > 40) {\n        (#Speaker).speak(현재 소음이 너무 큽니다. 주의해 주세요.)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"off\") {\n\t(#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"off\") {\n\t(#Speaker).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음악을 일시 정지해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).pause()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 일시 정지해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).pause()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음악을 멈춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).stop()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 멈춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n    (#Speaker).stop()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: '폴더/경로/music.mp3' 경로에서 음악을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).play(\"folder/path/music.mp3\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 통해 '안녕하세요'라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"안녕하세요\")"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커가 현재 일시 중지 상태인 경우 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"paused\") {\n\tif ((#Refrigerator).switch != \"off\") {\n\t\t(#Refrigerator).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커가 현재 중지된 경우 스피커를 통해 '스피커가 현재 중지되었습니다'라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"stopped\") {\n\tif ((#Speaker).switch != \"on\") {\n\t\t(#Speaker).on()\n\t}\n\t(#Speaker).speak(\"스피커가 현재 중지되었습니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커가 현재 재생 중이면 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).playbackStatus == \"playing\") {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커가 켜져 있으면 가스 밸브를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"off\") {\n\tif ((#GasValve).valve != \"closed\") {\n\t\t(#GasValve).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 스피커가 꺼져 있는 경우 스피커를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 현재 스피커 상태를 스피커로 출력해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 스피커의 상태는 \" + (#Speaker).playbackStatus)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 스피커를 통해 '좋은 아침'이라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"좋은 아침\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 9시가 되면 스피커에서 '주간 회의 시작'이라는 안내를 해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"주간 회의가 시작됩니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 스피커를 켜고 '작업을 시작합니다'이라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"작업을 시작합니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분마다 스피커가 꺼져 있으면 스피커를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (15 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 12시가 되면 스피커를 통해 '점심 시간입니다'라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"점심 시간입니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스위치를 켜줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"on\") {\n\t(#Switch).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스위치를 켜줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"on\") {\n\t(#Switch).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 꺼줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"off\") {\n\t(#Switch).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스위치를 꺼줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"off\") {\n\t(#Switch).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스위치가 켜지면 스피커를 통해 알림이 울려줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"off\") {\n\t(#Speaker).speak(\"스위치가 켜져 있습니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스위치가 꺼져 있으면 스위치를 켜줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Switch).switch != \"on\") {\n\t(#Switch).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 스위치를 켜줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Switch).switch != \"on\") {\n        (#Switch).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 스위치를 꺼줘.\n\nServices: {'Switch': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Switch).switch != \"off\") {\n        (#Switch).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"off\") {\n\t(#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"off\") {\n\t(#Television).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 채널을 5로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\nif ((#Television).tvChannel != 5) {\n    (#Television).setTvChannel(5)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 채널을 높여줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).channelUp()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 채널을 낮춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).channelDown()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 텔레비전 볼륨을 20으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).setVolume(20)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 볼륨을 2단계 높여줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).volumeUp()\n(#Television).volumeUp()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 볼륨을 3단계 낮춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).volumeDown()\n(#Television).volumeDown()\n(#Television).volumeDown()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 텔레비전 볼륨을 10단계 낮춰줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "target_volume = (#Calculator).sub((#Television).volume, 10)\nif (target_volume < 0) {\n\ttarget_volume = 0\n}\nif ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).setVolume(target_volume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 볼륨을 20으로 높여줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Calculator': 'Functions : [\\n    add(double, double) : return double,\\n    sub(double, double) : return double,\\n    div(double, double) : return double,\\n    mul(double, double) : return double,\\n    mod(double, double) : return double\\n]\\nValues : []\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "target_volume = (#Calculator).add((#Television).volume, 20)\nif ((#Television).switch != \"on\") {\n\t(#Television).on()\n}\n(#Television).setVolume(target_volume)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 음소거해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 음소거해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 음소거를 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 음소거해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 음소거를 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV 음소거를 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 TV가 음소거된 경우 음소거를 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"muted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 TV가 음소거되어 있지 않다면 음소거해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).muteStatus == \"unmuted\") {\n\t(#Television).mute()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 텔레비전이 현재 켜져 있으면 창을 닫고 꺼져 있으면 켜줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).switch != \"off\") {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n} else {\n\t(#Television).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 볼륨이 30을 초과하면 10으로 줄여줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Television).volume > 30) {\n\tif ((#Television).switch != \"on\") {\n\t\t(#Television).on()\n\t}\n\t(#Television).setVolume(10)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간마다 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 8시에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 수요일 10시에 TV 채널을 11번으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"wednesday\" and (#Clock).hour == 10 and (#Clock).minute == 0) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n    if ((#Television).tvChannel != 11) {\n        (#Television).setTvChannel(11)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 12시 15분에 TV 볼륨을 20으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 12 and (#Clock).minute == 15) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n    (#Television).setVolume(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말마다 18시 45분에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 18 and (#Clock).minute == 45) {\n    if ((#Television).switch != \"on\") {\n        (#Television).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 실내 온도를 알려줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\n(#Speaker).speak(\"현재 온도는 \" + (#TemperatureSensor).temperature)"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 실내 온도가 25도 이상이면 에어컨을 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature >= 25) {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 집 안 온도가 30도를 넘으면 창문을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature > 30) {\n\tif ((#Window).window != \"open\") {\n\t\t(#Window).open()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 실내 온도가 너무 낮으면 가습기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#TemperatureSensor).temperature < 18) {\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간마다 집안의 현재 온도를 알려줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (3 HOUR) {\n    current_temperature = (#TemperatureSensor).temperature\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 온도는 \" + current_temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 7시에 현재 집의 온도를 알려줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    current_temperature = (#TemperatureSensor).temperature\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 온도는 \" + current_temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 9시에 현재 실제 온도를 확인하고 25도 이상이면 에어컨을 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"friday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#TemperatureSensor).temperature >= 25) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 25도 이상이면 30분마다 에어컨을 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#TemperatureSensor).temperature >= 25) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 30도를 넘으면 매일 12시에 창문을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#TemperatureSensor).temperature > 30) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 물 밸브를 열어줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"closed\") {\n\t(#Valve).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 수도 밸브를 켜줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).switch != \"on\") {\n\t(#Valve).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 물 밸브를 닫아줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"open\") {\n\t(#Valve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 수도 밸브를 꺼줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).switch != \"off\") {\n\t(#Valve).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 수도 밸브가 열려 있으면 닫아줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"open\") {\n\t(#Valve).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 수도 밸브가 닫혀 있으면 열어줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Valve).valveStatus == \"closed\") {\n\t(#Valve).open()\n}\n매 3시간마다 물 밸브를 열어줘.\nloop (3 HOUR) {\n    if ((#Valve).valveStatus == \"closed\") {\n        (#Valve).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 18:00에 수도 밸브를 잠가줘.\n\nServices: {'Valve': 'Functions : [\\n    on(),\\n\\toff(),\\n    open(),\\n    close()\\n]\\nValues : [\\n    switch : str{\"on\"|\"off\"},\\n    valve : str{\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Valve).switch != \"off\") {\n        (#Valve).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 대기압이 1기압 이상이면 스피커를 통해 '고기압입니다'라고 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).pressure > 1) {\n\tif ((#Speaker).switch != \"on\") {\n\t\t(#Speaker).on()\n\t}\n\t(#Speaker).speak(\"고기압입니다\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 바깥 날씨가 30도 이상이면 창문을 닫고 에어컨을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).temperature > 30) {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 외부 온도가 10도 미만인 경우 에어컨을 난방 모드로 켜고 22도로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).temperature < 10) {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n\t(#AirConditioner).setAirConditionerMode(\"heat\")\n\t(#AirConditioner).setTemperature(22)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스피커를 통해 현재 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif ((#WeatherProvider).weather == \"thunderstorm\") {\n\t(#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n} else if ((#WeatherProvider).weather == \"drizzle\") {\n\t(#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n} else if ((#WeatherProvider).weather == \"rain\") {\n\t(#Speaker).speak(\"현재 날씨는 비입니다.\")\n} else if ((#WeatherProvider).weather == \"snow\") {\n\t(#Speaker).speak(\"현재 날씨는 눈입니다.\")\n} else if ((#WeatherProvider).weather == \"mist\") {\n\t(#Speaker).speak(\"현재 날씨는 안개입니다.\")\n} else if ((#WeatherProvider).weather == \"smoke\") {\n\t(#Speaker).speak(\"현재 날씨는 연기입니다.\")\n} else if ((#WeatherProvider).weather == \"haze\") {\n\t(#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n} else if ((#WeatherProvider).weather == \"dust\") {\n\t(#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n} else if ((#WeatherProvider).weather == \"fog\") {\n\t(#Speaker).speak(\"현재 날씨는 안개입니다.\")\n} else if ((#WeatherProvider).weather == \"sand\") {\n\t(#Speaker).speak(\"현재 날씨는 모래입니다.\")\n} else if ((#WeatherProvider).weather == \"ash\") {\n\t(#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n} else if ((#WeatherProvider).weather == \"squall\") {\n\t(#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n} else if ((#WeatherProvider).weather == \"tornado\") {\n\t(#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n} else if ((#WeatherProvider).weather == \"clear\") {\n\t(#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n} else if ((#WeatherProvider).weather == \"clouds\") {\n\t(#Speaker).speak(\"현재 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 천둥이 치면 창문을 닫아줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"thunderstorm\") {\n\tif ((#Window).window != \"closed\") {\n\t\t(#Window).close()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 이슬비가 내리는 경우 조명을 켜고 주황색으로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"drizzle\") {\n\tif ((#Light).switch != \"on\") {\n\t\t(#Light).on()\n\t}\n\t(#Light).setColor(\"30|100|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 비가 내리는 경우 사이렌을 울려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"rain\") {\n\tif ((#Siren).switch != \"on\") {\n\t\t(#Siren).on()\n\t}\n\t(#Siren).setSirenMode(\"both\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 눈이 내리는 경우 조명을 켜고 흰색으로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"snow\") {\n\tif ((#Light).switch != \"on\") {\n\t\t(#Light).on()\n\t}\n\t(#Light).setColor(\"0|0|100\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 날씨가 흐린 경우 공기청정기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"mist\" or weather == \"fog\") {\n\tif ((#AirPurifier).switch != \"on\") {\n\t\t(#AirPurifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 날씨가 맑으면 에어컨을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clear\") {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 날씨가 좋으면 에어컨을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clear\") {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 날씨가 화창하다면 에어컨을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clear\") {\n\tif ((#AirConditioner).switch != \"on\") {\n\t\t(#AirConditioner).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 날씨가 흐린 경우 가습기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"clouds\") {\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 해당 지역의 날씨를 알려줘. 위도 37.5665, 경도 126.9780\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(37.5665, 126.9780)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"해당 지역의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 서울의 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(37.5665, 126.9780)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"서울의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"서울의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"서울의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"서울의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"서울의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"서울의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"서울의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"서울의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"서울의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"서울의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"서울의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"서울의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"서울의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"서울의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"서울의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 뉴욕의 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(40.7128, -74.0060)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"뉴욕의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 대구의 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "x = (#WeatherProvider).getWeatherInfo(35.8722, 128.6025)\nif ((#Speaker).switch != \"on\") {\n\t(#Speaker).on()\n}\nif (x == \"thunderstorm\") {\n\t(#Speaker).speak(\"대구의 날씨는 천둥입니다.\")\n} else if (x == \"drizzle\") {\n\t(#Speaker).speak(\"대구의 날씨는 이슬비입니다.\")\n} else if (x == \"rain\") {\n\t(#Speaker).speak(\"대구의 날씨는 비입니다.\")\n} else if (x == \"snow\") {\n\t(#Speaker).speak(\"대구의 날씨는 눈입니다.\")\n} else if (x == \"mist\") {\n\t(#Speaker).speak(\"대구의 날씨는 안개입니다.\")\n} else if (x == \"smoke\") {\n\t(#Speaker).speak(\"대구의 날씨는 연기입니다.\")\n} else if (x == \"haze\") {\n\t(#Speaker).speak(\"대구의 날씨는 실안개입니다.\")\n} else if (x == \"dust\") {\n\t(#Speaker).speak(\"대구의 날씨는 먼지입니다.\")\n} else if (x == \"fog\") {\n\t(#Speaker).speak(\"대구의 날씨는 안개입니다.\")\n} else if (x == \"sand\") {\n\t(#Speaker).speak(\"대구의 날씨는 모래입니다.\")\n} else if (x == \"ash\") {\n\t(#Speaker).speak(\"대구의 날씨는 화산재입니다.\")\n} else if (x == \"squall\") {\n\t(#Speaker).speak(\"대구의 날씨는 돌풍입니다.\")\n} else if (x == \"tornado\") {\n\t(#Speaker).speak(\"대구의 날씨는 토네이도입니다.\")\n} else if (x == \"clear\") {\n\t(#Speaker).speak(\"대구의 날씨는 맑음입니다.\")\n} else if (x == \"clouds\") {\n\t(#Speaker).speak(\"대구의 날씨는 구름입니다.\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시마다 현재 기압을 확인하고 1기압을 초과하면 스피커를 통해 '고기압입니다'라고 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#WeatherProvider).pressure > 1) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"고기압입니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 화요일 9시에 바깥 날씨를 확인하고 30도 이상이면 창문을 닫고 에어컨을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"tuesday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#WeatherProvider).temperature > 30) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 12시 15분에 외부 온도를 확인하고 10도보다 낮으면 에어컨을 난방 모드로 켜고 22도로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") and (#Clock).hour == 12 and (#Clock).minute == 15) {\n    if ((#WeatherProvider).temperature < 10) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        (#AirConditioner).setAirConditionerMode(\"heat\")\n        (#AirConditioner).setTemperature(22)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 주말 18시 45분에는 스피커를 통해 현재 날씨를 안내해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#Clock).hour == 18 and (#Clock).minute == 45) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"thunderstorm\") {\n        (#Speaker).speak(\"현재 날씨는 천둥입니다.\")\n    } else if ((#WeatherProvider).weather == \"drizzle\") {\n        (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n    } else if ((#WeatherProvider).weather == \"rain\") {\n        (#Speaker).speak(\"현재 날씨는 비입니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n    } else if ((#WeatherProvider).weather == \"mist\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\") {\n        (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n    } else if ((#WeatherProvider).weather == \"haze\") {\n        (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"dust\") {\n        (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n    } else if ((#WeatherProvider).weather == \"fog\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"sand\") {\n        (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n    } else if ((#WeatherProvider).weather == \"ash\") {\n        (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n    } else if ((#WeatherProvider).weather == \"squall\") {\n        (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\") {\n        (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"open\") {\n\t(#Window).open()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"closed\") {\n\t(#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 창이 열려 있으면 창을 닫고 가습기를 켜줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window != \"closed\") {\n\t(#Window).close()\n\tif ((#Humidifier).switch != \"on\") {\n\t\t(#Humidifier).on()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 창문이 닫혀 있다면 건조기를 꺼줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Window).window == \"closed\") {\n\tif ((#Dehumidifier).switch != \"off\") {\n\t\t(#Dehumidifier).off()\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간마다 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (2 HOUR) {\n    if ((#Window).window != \"open\") {\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 9시에 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 8시에 창문을 닫고 가습기를 켜줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Window).window != \"closed\") {\n        (#Window).close()\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공휴일 오후 6시에 사이렌을 켜고 사이렌 모드로 설정해줘. 스피커에서 \"휴일 사이렌 활성화됨\"이라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"siren\") {\n            (#Siren).setSirenMode(\"siren\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"휴일 사이렌 활성화됨\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11:00에 두 모드 모두에 있는 경우 사이렌을 꺼줘. 스피커에서 \"사이렌 꺼짐\"이라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"both\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"사이렌 꺼짐\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 7시에 사이렌을 스트로브 모드로 설정해줘. 스피커에서 \"사이렌을 스트로브 모드로 설정했습니다\"라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"사이렌을 스트로브 모드로 설정했습니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌 모드인 경우 오후 8시에 사이렌을 꺼줘. 스피커로 \"사이렌이 꺼졌습니다\"라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"siren\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"사이렌이 꺼졌습니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 6시에 사이렌을 두 가지 모드로 설정해줘. 스피커에서 \"이번 주에 사이렌이 활성화되었습니다\"라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"이번 주에 사이렌이 활성화되었습니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 마지막 금요일 오후 3시에 사이렌을 두 가지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day >= 24 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 볼륨이 1000을 초과하고 가스 밸브가 열려 있는 경우 오전 6시에 사이렌을 켜고 두 모드로 설정해줘. 스피커로 \"가스 누출 감지\"라고 안내해줘.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1000 and (#GasValve).valve == \"open\") {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 누출 감지\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 시간이 5000초를 초과하면 가스 밸브를 끄고 스피커에서 \"가스 사용량 제한에 도달했습니다\"라는 안내를 해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasMeter).gasMeterTime > 5000) {\n        if ((#GasValve).valve == \"open\") {\n            (#GasValve).valve = \"closed\"\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Gas usage limit reached\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 발열량이 1500을 초과하는 경우 오후 7시에 사이렌을 켜고 스트로브 모드로 설정해줘. 스피커에서 \"높은 가스 발열량 감지됨\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1500) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"높은 가스 발열량 감지됨\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시부터 오후 5시 사이에 가스 계량기 볼륨이 5000을 초과하는 경우 사이렌을 켜고 두 모드로 설정해줘. 스피커로 \"가스 누출 비상\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour >= 9 and (#Clock).hour < 17) {\n        if ((#GasMeter).gasMeterVolume > 5000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 누출 비상\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 가스 밸브가 열려 있고 가스 계량기 수량이 100 미만인 경우 스피커에서 \"가스 사용량 정상\"이라고 안내해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterVolume < 100) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 사용량 정상\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 열량이 2000을 초과하는 경우 오후 2시에 사이렌을 켜고 사이렌 모드로 설정해줘. 스피커에서 \"경고: 고열량 가스\"라고 스피커로 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 2000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"siren\") {\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"경고: 고열량 가스\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 두 모드 모두에 있는 경우 사이렌을 끄고 스피커에서 \"밤에는 사이렌이 비활성화되었습니다\"라는 안내 멘트를 내보내줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"both\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Siren deactivated for the night\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오후 3시에 가스 계량기 볼륨이 3000을 초과하면 사이렌을 켜고 스트로브 모드로 설정해줘. 스피커로 \"주말 가스 누출 감지\"라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#GasMeter).gasMeterVolume > 3000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"주말 가스 누출 감지\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 볼륨이 500 미만인 경우 오전 8시에 스피커를 켜고 사운드 파일을 재생해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume < 500) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"soundfile_path\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 가스 계량기 열량이 1200을 초과하면 사이렌을 켜고 사이렌 모드로 설정해줘. 스피커로 \"고열량 가스 경고\"를 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1200) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"siren\") {\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"High calorific gas warning\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 시간이 6000초를 초과하면 사이렌을 켜고 두 가지 모드로 설정해줘. 스피커로 \"가스 계량기 시간 제한 초과\"라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasMeter).gasMeterTime > 6000) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"가스 계량기 시간 제한 초과\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시에 가스 계량기 볼륨이 300 미만인 경우 스피커를 꺼줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume < 300) {\n            if ((#Speaker).switch != \"off\") {\n                (#Speaker).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 볼륨이 4000을 초과하는 경우 오후 5시에 사이렌을 켜고 스트로브 모드로 설정해줘. 스피커로 \"위험 가스량 감지됨\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 4000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"위험 가스량 감지됨\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 열려 있고 가스 계량기 열량이 1800 이상이면 오후 2시에 스피커를 켜고 사운드 파일을 재생해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterCalorific > 1800) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"soundfile_path\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 가스 계량기 볼륨이 1500을 초과하면 가스 밸브를 끄고 스피커에서 \"볼륨이 높아서 가스 밸브가 닫혔습니다\"라는 안내를 해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1500) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas valve closed due to high volume\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 시간이 8000초를 초과하는 경우 오후 9시에 사이렌을 켜고 두 모드로 설정해줘. 스피커에서 \"추가 가스 사용량 감지됨\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 8000) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"추가 가스 사용량 감지됨\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 가스 계량기 사용량이 600을 초과하면 스피커에서 \"가스 사용량 임계값 초과\"라는 안내를 해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 600) {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas volume threshold exceeded\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 가스 계량기 열량이 1000 미만인 경우 사이렌을 끄고 스피커에서 \"사이렌 꺼짐: 발열량 낮음\"이라고 스피커로 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific < 1000) {\n            if ((#Siren).switch != \"off\") {\n                (#Siren).off()\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"사이렌 꺼짐: 발열량 낮음\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 열려 있고 가스 계량기 볼륨이 2500을 초과하면 오후 1시에 사이렌을 켜고 사이렌 모드로 설정해줘. 스피커로 \"가스량 위험\"이라고 안내해줘.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterVolume > 2500) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"siren\") {\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스량 위험\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 시간이 9000초를 초과하는 경우 오전 8시에 가스 밸브를 잠가줘. 스피커에서 \"가스 밸브가 닫혔습니다: 시간이 초과되었습니다.\"라고 스피커로 안내해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 9000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 밸브가 닫혔습니다: 시간이 초과되었습니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 가스 계량기 볼륨이 3500을 초과하고 가스 계량기 발열량이 1600을 초과하면 사이렌을 켜고 두 가지 모드로 설정해줘. 스피커로 \"위급 가스 상황 감지됨\"을 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 3500 and (#GasMeter).gasMeterCalorific > 1600) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"위급 가스 상황 감지됨\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 5시에 가스 계량기 볼륨이 5000을 초과하면 가스 밸브를 잠가줘. 스피커로 \"높은 사용량으로 인해 가스 밸브가 닫혔습니다\"라고 안내해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 5000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"높은 사용량으로 인해 가스 밸브가 닫혔습니다\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 열량이 1400을 초과하는 경우 오후 12시에 사이렌을 켜고 스트로브 모드로 설정해줘. 스피커에서 \"경고: 가스 발열량이 높습니다.\"라고 스피커로 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1400) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"경고: 가스 발열량이 높습니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 닫혀 있는 경우 오후 3시에 스피커를 꺼줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"closed\") {\n            if ((#Speaker).switch != \"off\") {\n                (#Speaker).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 가스 계량기 볼륨이 4500을 초과하면 사이렌을 켜고 두 가지 모드로 설정해줘. 스피커로 \"가스 볼륨 위험\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 4500) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 볼륨 위험\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10:00에 가스 계량기 사용량이 2000을 초과하면 가스 밸브를 잠가줘. 스피커로 \"사용량이 많아 가스 밸브가 닫혔습니다\"라고 안내해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 2000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"사용량이 많아 가스 밸브가 닫혔습니다\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 발열량이 1600을 초과하는 경우 오후 4시에 사이렌을 켜고 스트로브 모드로 설정해줘. 스피커에서 \"높은 가스 발열량 감지됨\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1600) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"높은 가스 발열량 감지됨\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시에 가스 계량기 볼륨이 1200을 초과하면 사이렌을 켜고 두 가지 모드로 설정해줘. 스피커로 \"가스 누출 감지됨\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1200) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 누출 감지됨\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 시간이 15000초를 초과하는 경우 오후 6시에 가스 밸브를 잠가줘. 스피커로 \"가스 밸브가 닫혔습니다: 시간 제한에 도달했습니다.\"라고 스피커로 안내해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 15000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 밸브가 닫혔습니다: 시간 제한에 도달했습니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 가스 계량기 열량이 1300을 초과하면 사이렌을 켜고 두 가지 모드로 설정해줘. 스피커에서 \"고열량 가스 감지됨\"이라고 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterCalorific > 1300) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"고열량 가스 감지됨\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 열려 있고 오후 5시에 가스 계량기 볼륨이 1800을 초과하면 사이렌을 켜고 스트로브 모드로 설정해줘. 스피커로 \"가스 누출 비상\"이라고 안내해줘.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\" and (#GasMeter).gasMeterVolume > 1800) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"strobe\") {\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 누출 비상\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 볼륨이 700 미만인 경우 오후 3시에 스피커를 꺼줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume < 700) {\n            if ((#Speaker).switch != \"off\") {\n                (#Speaker).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 볼륨이 1400을 초과하는 경우 오후 8시에 사이렌을 켜고 두 모드로 설정해줘. 스피커에서 \"가스 누출 감지됨\"을 안내해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1400) {\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Gas leak detected\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 가스 계량기 시간이 7000초를 초과하면 가스 밸브를 잠가줘. 스피커에서 \"가스 밸브가 닫혔습니다: 사용 시간이 초과되었습니다.\"라고 스피커로 안내해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 7000) {\n            if ((#GasValve).valve == \"open\") {\n                (#GasValve).valve = \"closed\"\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"가스 밸브가 닫혔습니다: 사용 시간이 초과되었습니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 가습기를 켜고 높음 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"high\") {\n            (#Humidifier).setHumidifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 습도가 40% 미만이면 가습기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오전 6시에 가습기를 켜고 중간 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"medium\") {\n            (#Humidifier).setHumidifierMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 습도가 60% 이상이면 가습기를 저습 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 60.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"low\") {\n                (#Humidifier).setHumidifierMode(\"low\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 50%를 넘으면 오후 11시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 50.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 30% 미만인 경우 오전 9시에 가습기를 높음 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 8시에 가습기를 켜고 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 55% 이상이면 오후 5시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 55.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 45% 미만인 경우 오후 7시에 가습기를 중간 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 45.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 12시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 50% 미만인 경우 오후 6시에 가습기를 강 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 50.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜고 오전 10시에 습도가 70% 이상이면 낮은 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 70.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"low\") {\n                (#Humidifier).setHumidifierMode(\"low\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 35% 미만인 경우 오후 2시에 가습기를 중간 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 35.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 55% 이상이면 새벽 3시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 3 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 55.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 25% 미만인 경우 오후 9시에 가습기를 강 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 25.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜고 오전 8시에 습도가 30% 미만인 경우 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 40% 미만인 경우 오전 10:00에 가습기를 중간 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 65% 이상이면 오후 4시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 65.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 기온이 30°C를 넘고 블라인드가 닫혀 있는 경우 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 VOC 수치가 0.05 이상이고 습도가 40% 미만인 경우 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05 and (#AirQualityDetector).humidity < 40.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 800ppm 이상인 경우 오후 3시에 블라인드를 60%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 가스 계량기 볼륨이 50m³를 초과하면 카메라를 켜고 사진을 찍어줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 50.0) {\n            if ((#Camera).switch != \"on\") {\n                (#Camera).on()\n            }\n            (#Camera).take()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 70% 이상인 경우 오전 7시에 제습기를 켜고 높음 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 70.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"high\") {\n                (#Dehumidifier).setDehumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시이고 습도가 30% 미만인 경우 문을 잠가줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30.0) {\n            if ((#DoorLock).lockState == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 28°C 이상인 경우 오후 5시에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 시간이 10000초를 초과하는 경우 오후 8시에 공급기를 꺼줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 10000) {\n            if ((#Feeder).switch != \"off\") {\n                (#Feeder).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 9시에 습도가 35% 미만이면 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity < 35.0) {\n                if ((#Humidifier).switch != \"on\") {\n                    (#Humidifier).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 용량이 60m³를 초과하는 경우 오전 7시에 커튼을 80%로 설정해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 60.0) {\n            (#Curtain).setCurtainLevel(80)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 켜고 습도가 50% 이상일 경우 오후 10시에 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 50.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwasherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오후 6시에 습도가 60% 이상이면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity > 60.0) {\n                if ((#Humidifier).switch != \"off\") {\n                    (#Humidifier).off()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 에어컨을 켜고 온도가 28°C 이상이면 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 가스 농도가 200ppm을 초과하면 문을 잠그고 사이렌을 켜줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#GasValve).gasMeter > 200.0) {\n            if ((#DoorLock).lockState == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n            if ((#Siren).switch != \"on\") {\n                (#Siren).on()\n            }\n            if ((#Siren).sirenMode != \"both\") {\n                (#Siren).setSirenMode(\"both\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하는 경우 오전 6시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 35.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 20°C 미만인 경우 오후 7시에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 시간이 5000초를 초과하는 경우 오전 9시에 커튼을 100%로 설정해줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterTime > 5000) {\n            (#Curtain).setCurtainLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 용량이 70m³를 초과하는 경우 오후 8시에 공급기를 꺼줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 70.0) {\n            if ((#Feeder).switch != \"off\") {\n                (#Feeder).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말에 습도가 30% 미만인 경우 오전 10시에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity < 30.0) {\n                if ((#Humidifier).switch != \"on\") {\n                    (#Humidifier).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 40% 미만인 경우 오전 8시에 가습기를 중간 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 3시에 습도가 60% 이상이면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n            if ((#HumiditySensor).humidity > 60.0) {\n                if ((#Humidifier).switch != \"off\") {\n                    (#Humidifier).off()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30°C 이상인 경우 오후 12시에 팬 속도를 10으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기가 꺼져 있는 경우 전원을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n    (#Irrigator).on()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기가 켜져 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"off\") {\n    (#Irrigator).off()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 관개기가 꺼져 있으면 100ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Irrigator).switch != \"on\") {\n    (#Irrigator).on()\n}\n(#Irrigator).setWaterPortion(100, \"milliliters\")\n(#Irrigator).startWatering()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 50ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(50, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 관개기를 켜고 150ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(150, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 관개기가 켜져 있는 경우 75ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch == \"on\") {\n            (#Irrigator).setWaterPortion(75, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기가 켜져 있는 경우 오후 9시에 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말인 경우 200ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(200, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 6시에 관개기를 켜고 120ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(120, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기가 켜져 있는 경우 오후 11시에 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전원이 꺼져 있고 오전 8시인 경우 관개기를 켜고 100ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(100, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일이고 시간이 오전 10:00인 경우 80ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(80, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 시간이 오후 5시인 경우 관개기를 켜고 60ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(60, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기가 켜져 있고 오후 11시 30분인 경우 세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말이고 시간이 오전 9시인 경우 150ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(150, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일이고 시간이 오후 7시인 경우 관개기를 켜고 70ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(70, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기가 켜져 있고 오후 10:00시인 경우 세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시면 90ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(90, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 8시인 경우 관개기를 켜고 110ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(110, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 세척기가 켜져 있고 오후 10시 30분인 경우 세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 오전 7시에 열려 있으면 100ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(100, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 기온이 30°C 이상이면 150ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(150, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 습도가 40% 미만이면 50ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(50, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 관개 시스템을 켜고 블라인드를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 습도가 30% 미만인 경우 가습 시스템을 켜고 가습기를 높음 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 30) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 관개 시스템을 끄고 스피커에서 \"관개 시스템 꺼짐\"이라는 안내를 해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Irrigation system turned off\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 CO2 수치가 500ppm을 초과하면 200ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 500) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(200, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 가스 계량기가 50대를 초과하면 관개 시스템을 꺼줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeter > 50) {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 8시에 120ml로 물주기를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(120, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 10시에 관개 시스템을 켜고 80ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(80, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬이 켜져 있으면 관개 시스템을 켜고 오후 5시에 90ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Fan).switch == \"on\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(90, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 온도가 20°C 미만인 경우 110ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(110, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 닫혀 있는 경우 오후 7시에 130ml로 급수를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"closed\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(130, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있는 경우 오전 11시에 관개 시스템을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨이 켜져 있는 경우 오전 8시에 160ml로 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(160, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 CO2 수치가 400ppm 미만이면 관개 시스템을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide < 400) {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기가 켜져 있는 경우 오전 9시에 140ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch == \"on\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(140, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 팬이 꺼져 있고 온도가 25°C 이상인 경우 오전 6시에 관개 시스템을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Fan).switch == \"off\" and (#AirQualityDetector).temperature > 25) {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 3시에 180ml로 물주기를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(180, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 관개 시스템을 켜고 가스 밸브가 열려 있으면 오후 1시에 170ml로 물을 주기 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#GasValve).valve == \"open\") {\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(170, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 부분적으로 열려 있는 경우 오후 10시에 관개 시스템을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"partially\") {\n            if ((#Irrigator).switch != \"off\") {\n                (#Irrigator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 꺼져 있는 경우 오후 6시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"off\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 조명 밝기를 60%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 켜져 있는 경우 오후 10시에 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 조명 색상을 파란색으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Light).setColor(\"240|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 새벽 5시에 조명을 빨간색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 5 and (#Clock).minute == 0) {\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 9시에 조명 밝기를 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜고 오후 12시에 녹색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"120|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 꺼져 있는 경우 오후 3시에 조명 색상을 노란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"60|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 조명 밝기가 50% 미만인 경우 75%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Light).light < 50) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(75)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 1시에 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 켜져 있는 경우 새벽 2시에 보라색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"300|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 6시에 조명 색상을 주황색으로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 18 and (#Clock).minute == 0) {\n        (#Light).setColor(\"30|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 금요일 오후 8시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 켜져 있는 경우 오전 5시에 조명 밝기를 10%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).setLevel(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 켜져 있는 경우 오후 3시에 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜고 주말 오후 9시에 파란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setColor(\"240|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 7시에 조명을 소등해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 켜져 있는 경우 오후 8시에 조명 밝기를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).setLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 꺼져 있는 경우 오전 6시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 켜져 있는 경우 오후 9시에 조명 밝기를 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            (#Light).setLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 대기질(PM 2.5)이 좋지 않은 경우 오후 7시에 조명을 켜고 색상을 빨간색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 50.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setColor(\"0|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10:00에 가스 계량기 볼륨이 1000을 초과하면 조명을 꺼줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 1000) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜고 조명이 켜져 있으면 오전 9시에 높은 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명이 꺼져 있는 경우 오후 2시에 팬 속도를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"off\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일에는 오후 8시에 조명을 켜고 스피커에서 음악을 재생해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"path/to/music\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 불이 켜져 있는 경우 오후 11시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Light).switch == \"on\") {\n            if ((#Dehumidifier).switch == \"on\") {\n                (#Dehumidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 20°C 미만인 경우 오전 6시에 조명 밝기를 80%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(80)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 조명을 끄고 문을 잠가줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n        if ((#DoorLock).lock == \"unlocked\") {\n            (#DoorLock).lock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜고 오후 7시에 습도가 70% 이상이면 60% 수준으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(60)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 8시에 조명을 켜고 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Curtain).curtain == \"closed\") {\n                (#Curtain).setCurtainLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 800ppm 이상이면 불을 끄고 오후 9시에 반려동물에게 30g의 사료를 먹이기 시작해.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(30, \"grams\")\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 30% 미만인 경우 오전 7시에 조명을 켜고 스피커에서 알림음을 재생해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity < 30.0) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"path/to/notification\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 온도가 25°C를 초과하면 조명을 끄고 블라인드 레벨을 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            (#Blind).setBlindLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 계량기 수량이 500을 초과하면 오전 9시에 불을 켜고 식물에 물을 주기 시작해.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#GasMeter).gasMeterVolume > 500) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Irrigator).switch != \"on\") {\n                (#Irrigator).on()\n            }\n            (#Irrigator).setWaterPortion(200, \"milliliters\")\n            (#Irrigator).startWatering()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 불을 끄고 온도가 18°C 이하인 경우 반려동물에게 100g만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 18.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(100, \"grams\")\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 현재 조도가 800 이상이면 조명을 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 800) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 현재 조도가 200 미만인 경우 조명을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 200) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 정오에 현재 빛의 강도를 알려줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        current_light_intensity = (#LightSensor).light\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"현재 광량은 \" + current_light_intensity)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 조도가 300 미만인 경우 조명 밝기를 70%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 300) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(70)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 조도가 600을 넘으면 조명을 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 600) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 조도가 150 미만인 경우 조명을 켜고 색상을 파란색으로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 150) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setColor(\"240|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 조도가 900 이상인 경우 조명 밝기를 30%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 900) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 조도가 400 미만인 경우 오후 5시에 현재 조도를 알려줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 400) {\n            current_light_intensity = (#LightSensor).light\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"현재 광량은 \" + current_light_intensity)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 조도가 500 미만인 경우 조명을 켜고 밝기를 50%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 500) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            (#Light).setLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조도가 700 이상인 경우 오전 8시에 조명을 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 700) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 조도가 800을 넘으면 조명을 끄고 블라인드를 닫아줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 800) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#Blind).blind != \"closed\") {\n                (#Blind).setBlindLevel(0)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 조도가 100 미만인 경우 조명을 켜고 블라인드를 반쯤 열어줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 100) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Blind).blind != \"partially\") {\n                (#Blind).setBlindLevel(50)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 12시에 조도가 500 이상이면 에어컨을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n            if ((#LightSensor).light > 500) {\n                if ((#AirConditioner).switch != \"on\") {\n                    (#AirConditioner).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 조도가 200 미만인 경우 가습기를 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 200) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 9시에 조도가 1000 이상이면 공기청정기를 끄고 블라인드를 70%로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n            if ((#LightSensor).light > 1000) {\n                if ((#AirPurifier).switch != \"off\") {\n                    (#AirPurifier).off()\n                }\n                if ((#Blind).blind != \"70\") {\n                    (#Blind).setBlindLevel(70)\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 7시에 조도가 300 이하인 경우 조명을 켜고 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n            if ((#LightSensor).light < 300) {\n                if ((#Light).switch != \"on\") {\n                    (#Light).on()\n                }\n                if ((#AirConditioner).airConditionerMode != \"cool\") {\n                    (#AirConditioner).setAirConditionerMode(\"cool\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오후 6시에 조도가 400을 초과하는 경우 제습기를 켜고 강 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 400) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"high\") {\n                (#Dehumidifier).setDehumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 5시에 조도가 150 미만인 경우 조명을 끄고 블라인드를 30%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n            if ((#LightSensor).light < 150) {\n                if ((#Light).switch == \"on\") {\n                    (#Light).off()\n                }\n                if ((#Blind).blind != \"30\") {\n                    (#Blind).setBlindLevel(30)\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시에 조도가 600 이상이면 팬을 켜고 속도 3으로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 600) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 조도가 200 미만인 경우 가습기를 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 200) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 조도가 1000 이상이면 에어컨을 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 1000) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 조도가 300 미만인 경우 가습기를 켜고 중간 모드로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 300) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 조도가 800 이상이면 조명을 끄고 에어컨을 자동 모드로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 800) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 8시에 조도가 400 미만인 경우 제습기를 켜고 약하게 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n            if ((#LightSensor).light < 400) {\n                if ((#Dehumidifier).switch != \"on\") {\n                    (#Dehumidifier).on()\n                }\n                if ((#Dehumidifier).dehumidifierMode != \"low\") {\n                    (#Dehumidifier).setDehumidifierMode(\"low\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 조도가 700 이상이면 가습기를 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 700) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 조도가 250 미만인 경우 조명을 켜고 블라인드를 60%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 250) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#Blind).blind != \"60\") {\n                (#Blind).setBlindLevel(60)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 조도가 900 이상이면 에어컨을 켜고 냉방 모드로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 900) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"cool\") {\n                (#AirConditioner).setAirConditionerMode(\"cool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 조도가 100 미만인 경우 조명을 켜고 공기청정기를 강 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#LightSensor).light < 100) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 조도가 400 이상이면 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#LightSensor).light > 400) {\n            if ((#Dehumidifier).switch != \"off\") {\n                (#Dehumidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 존재가 감지되지 않으면 조명을 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 사람이 있는 것이 감지되면 에어컨을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 이후에 사람이 있는 것이 감지되면 스피커로 '집에 오신 것을 환영합니다'라고 안내해줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour >= 18 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"집에 오신 것을 환영합니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 가습기의 존재가 감지되지 않으면 가습기를 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 사람이 있는 것이 감지되면 조명을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 존재가 감지되면 팬을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"present\") {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 감지되지 않으면 공기 청정기를 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 사람이 있는 것이 감지되면 TV를 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 감지되지 않으면 제습기를 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 사람이 있는 것이 감지되면 조명을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 존재가 감지되지 않으면 팬을 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 존재가 감지되면 '좋은 아침'이라고 알려줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"좋은 아침\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 가습기의 존재가 감지되면 가습기를 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 아무도 감지되지 않으면 TV를 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Television).switch != \"off\") {\n                (#Television).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 존재가 감지되면 공기청정기를 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 존재가 감지되지 않으면 '굿나잇'을 알려줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Good night\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 습기가 감지되면 제습기를 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 아무도 감지되지 않으면 조명을 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 존재가 감지되면 팬을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 12:00에 존재가 감지되지 않으면 '시스템 종료'를 알려줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"System shutting down\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 사람이 있는 것이 감지되면 조명을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 사람이 감지되지 않으면 에어컨을 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 존재가 감지되면 공기청정기를 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 존재가 감지되면 '굿 이브닝'을 알려줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Good evening\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 2시에 아무도 감지되지 않으면 TV를 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 사람이 있는 것이 감지되면 에어컨을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 존재가 감지되면 '시스템 시작됨'을 알려줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"present\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"System started\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 5시에 사람이 있는 것이 감지되면 조명을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"present\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10:00에 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 펌프를 일반 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 펌프를 최소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"minimum\") {\n            (#Pump).setOperationMode(\"minimum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12:00에 펌프를 최대 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말에는 오전 8시에 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#Pump).switch != \"on\") {\n                (#Pump).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일에는 오후 11시에 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 4시에 펌프를 일반 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"normal\") {\n                (#Pump).setOperationMode(\"normal\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일 오후 1시에 펌프를 최소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"minimum\") {\n            (#Pump).setOperationMode(\"minimum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 마지막 날 오후 3시에 펌프를 최대 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 31 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 첫째 월요일 오전 5시에 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).day <= 7 and (#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 마지막 금요일 오후 9시에 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day >= 24 and (#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오전 7시에 펌프를 일반 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 10:00에 펌프를 최소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"minimum\") {\n                (#Pump).setOperationMode(\"minimum\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 4시에 펌프를 최대 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"maximum\") {\n                (#Pump).setOperationMode(\"maximum\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 첫째 주 금요일 오후 8시에 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day <= 7 and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일 오전 6시에 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 마지막 월요일 오후 3시에 펌프를 일반 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).day >= 24 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 펌프를 켜고 조명을 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 펌프와 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 최대 모드로 설정하고 오후 2시에 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 펌프를 켜고 스피커에서 음악을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"path_to_music\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 최소 모드로 설정하고 오후 5시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"minimum\") {\n            (#Pump).setOperationMode(\"minimum\")\n        }\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 펌프와 가습기를 켜줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 일반 모드로 설정하고 오후 3시에 스피커에서 \"펌프가 일반 모드로 설정되었습니다\"라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"펌프가 일반 모드로 설정되었습니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 펌프와 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 펌프와 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 최대 모드로 설정하고 오후 9시에 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"maximum\") {\n            (#Pump).setOperationMode(\"maximum\")\n        }\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 펌프와 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 펌프와 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 펌프를 켜고 제습기를 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 최소 모드로 설정하고 주말 오전 9시에 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#Pump).operationMode != \"minimum\") {\n                (#Pump).setOperationMode(\"minimum\")\n            }\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 펌프와 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 일반 모드로 설정하고 오후 5시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Pump).operationMode != \"normal\") {\n            (#Pump).setOperationMode(\"normal\")\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 펌프를 켜고 팬 속도를 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 펌프를 끄고 오후 10시에 스피커로 \"펌프가 꺼졌습니다\"라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"펌프가 꺼졌습니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 40% 미만인 경우 오전 8시에 펌프와 가습기를 켜줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Pump).switch != \"on\") {\n                (#Pump).on()\n            }\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일에는 오후 6시에 펌프와 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시에 냉장고를 급속 냉각 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 냉장고를 급속 냉동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 냉장고를 끄고 오전 6시에 다시 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 7시에 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"on\") {\n                (#Refrigerator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말에는 오후 9시에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"off\") {\n                (#Refrigerator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 3시에 냉장고를 쾌속냉각 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오전 10시에 냉장고를 급속 정온 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말인 경우 오후 11시 30분에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n            if ((#Refrigerator).switch != \"off\") {\n                (#Refrigerator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일인 경우 새벽 5시에 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"on\") {\n                (#Refrigerator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오후 12시에 냉장고를 급속 냉각 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n            if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n                (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 9시에 냉장고를 급속냉동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n            if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n                (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 1시에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 냉장고를 켜고 RapidCool 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 6시에 냉장고를 급속 냉동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일인 경우 오후 8시에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"off\") {\n                (#Refrigerator).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말인 경우 오전 7시에 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Refrigerator).switch != \"on\") {\n                (#Refrigerator).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 냉장고를 급속 냉각 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고를 켜고 오후 6시에 급속냉동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 냉장고를 켜고 조명 센서가 어두움을 감지하면 조명을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#LightSensor).light < 100) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 냉장고를 쾌속냉각 모드로 설정하고 온도가 25°C 이상이면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#AirQualityDetector).temperature > 25) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 냉장고를 끄고 모션 센서가 비활성화되어 있으면 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#MotionSensor).motion == \"inactive\") {\n            if ((#Curtain).curtain != \"closed\") {\n                (#Curtain).setCurtainLevel(0)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시에 냉장고를 급속 냉동 모드로 설정하고 습도가 60% 이상이면 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 5시에 냉장고를 켜고 스피커로 현재 시간을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current time is 5:00 AM\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 냉장고를 끄고 습도가 30% 미만인 경우 가습기를 저습 모드로 설정해줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#HumiditySensor).humidity < 30) {\n            if ((#Humidifier).humidifierMode != \"low\") {\n                (#Humidifier).setHumidifierMode(\"low\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 냉장고를 급속 냉각 모드로 설정하고 30분 동안 관수 시스템을 가동해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(30, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 냉장고를 켜고 문이 잠겨 있지 않으면 잠가줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#DoorLock).lock != \"locked\") {\n            (#DoorLock).lock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 냉장고를 급속 정온 모드로 설정하고 습도가 50% 이상이면 가습기를 꺼줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#HumiditySensor).humidity > 50) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 냉장고를 끄고 공기질이 좋지 않은 경우 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#AirQualityDetector).airQuality == \"poor\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 냉장고를 쾌속 냉각 모드로 설정하고 모션 센서가 활성화되어 있으면 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#MotionSensor).motion == \"active\") {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 냉장고를 켜고 휴일인 경우 현재 온도를 스피커로 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current temperature is \" + (#AirQualityDetector).temperature + \" degrees Celsius.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 냉장고를 끄고 조도가 500 이상이면 커튼을 50%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#LightSensor).light > 500) {\n            if ((#Curtain).curtainLevel != 50) {\n                (#Curtain).setCurtainLevel(50)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 냉장고를 켜고 습도가 40% 미만인 경우 가습기를 높음 모드로 설정해줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Humidifier).humidifierMode != \"high\") {\n                (#Humidifier).setHumidifierMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 냉장고를 급속 동결 모드로 설정하고 모션 센서가 비활성화되어 있으면 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#MotionSensor).motion == \"inactive\") {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 냉장고를 켜고 조도가 200 이하인 경우 팬을 저속으로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#LightSensor).light < 200) {\n            if ((#Fan).fanSpeed != 1) {\n                (#Fan).setFanSpeed(1)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 냉장고를 끄고 스피커로 현재 습도를 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current humidity is \" + (#HumiditySensor).humidity + \"%.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 냉장고를 쾌속냉각 모드로 설정하고 온도가 28°C 이상이면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#AirQualityDetector).temperature > 28) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 냉장고를 켜고 조도가 300 이하인 경우 조명을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#LightSensor).light < 300) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 냉장고를 급속냉동 모드로 설정하고 모션 센서가 작동하지 않으면 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#MotionSensor).motion == \"inactive\") {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 냉장고를 켜고 현재 가스 계량기 수치를 스피커로 알려줘.\n\nServices: {'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"The current gas meter reading is \" + (#GasMeter).gasMeter + \" units.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 냉장고를 끄고 공기질이 좋지 않은 경우 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#AirQualityDetector).airQuality == \"poor\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 냉장고를 쾌속냉방 모드로 설정하고 습도가 40% 미만이면 가습기를 켜줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 냉장고를 끄고 온도가 30°C 이상이면 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#AirQualityDetector).temperature > 30) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 냉장고를 켜고 온도가 32°C 이상이면 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#AirQualityDetector).temperature > 32) {\n            if ((#AirConditioner).airConditionerMode != \"cooling\") {\n                (#AirConditioner).setAirConditionerMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 냉장고를 급속냉동 모드로 설정하고 조도가 600 이상이면 팬을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidFreeze\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidFreeze\")\n        }\n        if ((#LightSensor).light > 600) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 냉장고를 켜고 습도가 35% 미만인 경우 가습기를 중간 모드로 설정해줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        if ((#HumiditySensor).humidity < 35) {\n            if ((#Humidifier).humidifierMode != \"medium\") {\n                (#Humidifier).setHumidifierMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 냉장고를 끄고 조도가 700 이상이면 커튼을 100%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n        if ((#LightSensor).light > 700) {\n            if ((#Curtain).curtainLevel != 100) {\n                (#Curtain).setCurtainLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 냉장고를 쾌속냉방 모드로 설정하고 공기질이 나쁘면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Refrigerator).refrigeratorMode != \"RapidCool\") {\n            (#Refrigerator).setRefrigeratorMode(\"RapidCool\")\n        }\n        if ((#AirQualityDetector).airQuality == \"bad\") {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 로봇 청소기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 로봇 청소기를 정지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11:00에 로봇 청소기를 수동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오후 2시에 지도 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오후 4시에 부품 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오후 6시에 반복 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오후 8시에 중지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 7시에 로봇 청소기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 5시에 로봇 청소기를 부품 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오전 10:00에 로봇 청소기를 수동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘이 일요일인 경우 로봇 청소기를 오후 3시에 중지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"sunday\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오전 8시에 자동 모드로 설정하고 오후 6시에 중지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오전 9시에 수동 모드로 설정하고 오후 7시에 반복 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n    }\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오전 6시에 부품 모드로 설정하고 오후 12시에 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n    }\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오전 7시에 지도 모드로 설정하고 오후 11시에 중지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 9시에 로봇 청소기를 자동 모드로, 오후 4시에 부품 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n        if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오전 8시에 반복 모드로, 주말에는 오후 5시에 수동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n            }\n        }\n        if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오전 9시에는 자동 모드로, 휴일에는 오후 6시에 부품 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n        if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n            if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오후 7시에 정지 모드로, 오후 8시에 수동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오전 10시에 반복 모드로, 오후 9시에 지도 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n    }\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 로봇 청소기를 자동 모드로 설정하고 온도가 25°C 이상이면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#AirQualityDetector).temperature > 25) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 로봇 청소기를 부품 모드로 설정하고 날씨가 맑으면 조명을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"sunny\") {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 로봇 청소기를 수동 모드로 설정하고 가스 밸브가 열려 있으면 문을 잠가줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#GasValve).valve == \"open\") {\n            if ((#DoorLock).lock == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오후 6시에 지도 모드로 설정하고 움직임이 감지되면 조명을 켜줘.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#MotionSensor).motion == \"active\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 로봇 청소기를 반복 모드로 설정하고 습도가 40% 미만이면 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#HumiditySensor).humidity < 40.0) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 로봇 청소기를 정지 모드로 설정하고 날씨가 흐린 경우 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"cloudy\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 로봇 청소기를 수동 모드로 설정하고 온도가 20°C 미만일 경우 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시에 로봇청소기를 부품 모드로 설정하고 습도가 60% 이상이면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#HumiditySensor).humidity > 60.0) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 로봇청소기를 자동 모드로 설정하고 비가 오면 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"rain\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 로봇청소기를 반복 모드로 설정하고 공기질이 좋으면 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#AirQualityDetector).dustLevel < 30) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 로봇 청소기를 오후 9시에 정지 모드로 설정하고 움직임이 감지되면 문을 잠가줘.\n\nServices: {'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n        if ((#MotionSensor).motion == \"active\") {\n            if ((#DoorLock).lock == \"unlocked\") {\n                (#DoorLock).lock()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 5시에 로봇 청소기를 자동 모드로 설정하고 조도가 300룩스 미만이면 조명을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#LightSensor).light < 300){\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 로봇 청소기를 맵 모드로 설정하고 온도가 22°C 이하인 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#AirQualityDetector).temperature < 22) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 로봇청소기를 부품 모드로 설정하고 습도가 60% 이상이면 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 로봇 청소기를 자동 모드로 설정하고 조도가 500룩스 이상이면 조명을 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#LightSensor).light > 500) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 로봇 청소기를 수동 모드로 설정하고 공기질이 나쁘면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).dustLevel > 70) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 로봇청소기를 자동 모드로 설정하고 습도가 40% 미만이면 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Dehumidifier).switch != \"off\") {\n                (#Dehumidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 로봇 청소기를 지도 모드로 설정하고 안개가 낀 날에는 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"fog\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 로봇청소기를 부품 모드로 설정하고 CO2 수치가 800ppm 이상이면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#AirQualityDetector).carbonDioxide > 800) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시에 로봇 청소기를 자동 모드로 설정하고 습도가 70% 이상이면 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#HumiditySensor).humidity > 70) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 로봇 청소기를 반복 모드로 설정하고 습도가 60% 이상이면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Humidifier).switch != \"off\") {\n                (#Humidifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 로봇 청소기를 정지 모드로 설정하고 눈이 내리는 경우 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"stop\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"snow\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 로봇 청소기를 수동 모드로 설정하고 온도가 18°C 미만이면 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).temperature < 18) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 로봇청소기를 지도 모드로 설정하고 습도가 30% 미만이면 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#HumiditySensor).humidity < 30) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 로봇청소기를 부품 모드로 설정하고 공기질이 좋으면 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n        }\n        if ((#AirQualityDetector).dustLevel < 30) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 로봇 청소기를 자동 모드로 설정하고 조도가 300룩스 미만이면 조명을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n        if ((#LightSensor).light < 300) {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 로봇청소기를 수동 모드로 설정하고 공기질이 좋으면 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n        }\n        if ((#AirQualityDetector).dustLevel < 30) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 로봇청소기를 반복 모드로 설정하고 습도가 70% 이상이면 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n        }\n        if ((#HumiditySensor).humidity > 70) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 로봇 청소기를 지도 모드로 설정하고 안개가 낀 날에는 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n        if ((#WeatherProvider).weatherCondition == \"fog\") {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 사이렌을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n            (#Siren).setSirenMode(\"siren\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 가스 밸브를 잠가줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#GasValve).valve == \"open\") {\n            (#GasValve).valve = \"closed\"\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜고 연기가 감지되면 빨간색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 스피커에서 '연기 감지됨'이라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"연기 감지됨\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 문을 잠금 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#DoorLock).lock == \"locked\") {\n            (#DoorLock).unlock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 습도가 30% 미만인 경우 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity < 30.0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 창문을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Window).window == \"closed\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 온도가 25°C 이상이면 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜고 연기가 감지되면 높음 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"high\") {\n            (#Humidifier).setHumidifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#EmailProvider).sendEmail(\"Smoke Alert\", \"Smoke has been detected in the house.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 습도가 20% 미만인 경우 관개 시스템을 가동해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity < 20.0) {\n        if ((#Irrigation).switch != \"on\") {\n            (#Irrigation).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 오후 6시 이후인 경우 블라인드를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#Clock).hour >= 18) {\n        if ((#Blind).blind != \"closed\") {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 공기질이 좋지 않은 경우 공기청정기를 강 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#AirQualityDetector).airQuality == \"poor\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).mode != \"high\") {\n            (#AirPurifier).setAirPurifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 충전기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Charger).switch != \"off\") {\n            (#Charger).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 습도가 70% 이상이면 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity > 70.0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 로봇 청소기를 켜고 지도 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 식기세척기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 스피커에서 '비상! 연기가 감지되면 스피커에서 '응급상황! 연기 감지됨'이라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"응급상황! 연기 감지됨\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 이메일 제공업체에 알림을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        (#EmailProvider).sendEmail(\"Smoke Alert\", \"Smoke has been detected in the house.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 사이렌을 스트로브 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가습기를 켜고 연기가 감지되고 습도가 50% 미만인 경우 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#HumiditySensor).humidity < 50.0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"auto\") {\n            (#Humidifier).setHumidifierMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 낮 시간대인 경우 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#Clock).hour >= 6 and (#Clock).hour < 18) {\n        if ((#Curtain).curtain == \"closed\") {\n            (#Curtain).setCurtainLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 소리 센서를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#SoundSensor).switch != \"on\") {\n            (#SoundSensor).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되고 온도가 20°C 미만인 경우 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\" and (#AirQualityDetector).temperature < 20.0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 조명을 켜고 연기가 감지되면 노란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"60|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 로봇 청소기를 끄고 정지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 조명을 켜고 파란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"240|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 80dB를 초과하면 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 80.0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되고 오후 2시인 경우 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 가습기를 켜고 중간 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"medium\") {\n            (#Humidifier).setHumidifierMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 90dB를 초과하면 충전기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 90.0) {\n        if ((#Charger).switch != \"off\") {\n            (#Charger).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜고 소리가 감지되면 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 로봇 청소기를 켜고 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 30dB 미만인 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel < 30.0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 식기세척기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 70dB를 초과하고 오후 10시가 넘은 경우 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 70.0 and (#Clock).hour >= 22) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 스피커에서 '소리가 감지되었습니다'라고 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"소리가 감지되었습니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분 동안 소리가 감지되지 않으면 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(30 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 공기청정기를 켜고 높음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분 동안 소리가 감지되지 않으면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되고 오후 3시인 경우 제습기를 강 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"high\") {\n            (#Dehumidifier).setDehumidifierMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되고 오후 11시인 경우 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 TV를 켜고 HDMI 1로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setSource(\"HDMI 1\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 15분 동안 소리가 감지되지 않으면 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(15 MIN) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 식기세척기를 켜고 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 85dB를 초과하면 로봇 청소기의 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 85.0) {\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"stop\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 100dB를 초과하면 스피커에서 '소음 감지됨'을 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 100.0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"Noise detected\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 20dB 미만이면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel < 20.0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 표시등을 켜고 빨간색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setColor(\"0|100|100\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 음압 레벨이 75dB를 초과하면 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).soundPressureLevel > 75.0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되고 오후 5시인 경우 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 가습기를 켜고 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Humidifier).humidifierMode != \"auto\") {\n            (#Humidifier).setHumidifierMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되고 오후 10시인 경우 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되고 오후 11시인 경우 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\" and (#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 오전 8시에 채널 5로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).setTvChannel(5)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11:00에 TV를 음소거해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시 30분에 TV 음소거를 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"muted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜고 오전 9시에 채널 10으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(10)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 TV를 채널 7로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).setTvChannel(7)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 아직 켜져 있는 경우 새벽 1시에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 TV를 켜고 채널 9로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(9)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV가 켜져 있는 경우 오후 5시에 음소거해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 TV 음소거를 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"muted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시 30분에 TV를 켜고 채널 11로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 30) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(11)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시 30분에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 30) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 45분에 TV 채널을 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 45) {\n        if ((#Television).switch != \"off\") {\n            (#Television).channelUp()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시 15분에 TV 채널을 아래로 변경해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 15) {\n        if ((#Television).switch != \"off\") {\n            (#Television).channelDown()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시 30분에 TV를 음소거해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 5시 30분에 TV 음소거를 해제해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 30) {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"muted\") {\n            (#Television).mute()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 TV를 켜고 채널 12로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(12)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시 30분에 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 30) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 TV를 끄고 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜고 오후 8시에 온도를 22°C로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#AirConditioner).temperature != 22) {\n            (#AirConditioner).setTemperature(22)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 거실에서 움직임이 감지되면 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜고 휴일인 경우 오전 6시 30분에 채널 5번으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30 and (#Clock).isHoliday==true) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(5)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기의 질이 좋지 않으면 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).airQuality == \"poor\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 TV를 켜고 기온이 18°C 미만인 경우 에어컨을 난방 모드로 설정해줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 18) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 TV를 끄고 문을 잠가줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#DoorLock).lock == \"unlocked\") {\n            (#DoorLock).lock()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 7시에 TV를 켜고 음악을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).play(\"music.mp3\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 아무도 없는 경우 오후 11시에 TV를 음소거하고 조명을 꺼줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#PresenceSensor).presence == \"not_present\") {\n            if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n                (#Television).mute()\n            }\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 60% 이상이면 TV를 켜고 오후 6시에 채널 8번으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 60) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            (#Television).setTvChannel(8)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 TV를 끄고 알람을 활성화해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Alarm).switch != \"on\") {\n            (#Alarm).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 TV를 켜고 로봇 청소기를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#RobotCleaner).mode != \"auto\") {\n            (#RobotCleaner).setMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 수치가 높으면 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasMeter': 'Functions : []\\nValues : [\\n    gasMeter : double,\\n    gasMeterCalorific : double : amount of heat produced (kJ),\\n    gasMeterTime : double seconds,\\n    gasMeterVolume : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasMeter).gasLevel > 100) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 입구에서 움직임이 감지되면 TV를 음소거하고 사이렌을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 TV를 켜고 반려동물에게 먹이를줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 65% 이상이면 오후 7시에 TV를 끄고 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 65) {\n            if ((#Television).switch != \"off\") {\n                (#Television).off()\n            }\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜고 거실에서 움직임이 감지되면 채널 7로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#MotionSensor).motion == \"active\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(7)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 끄고 오전 6시에 화분에 100ml의 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Irrigator).switch != \"on\") {\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(100, \"milliliters\")\n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 TV를 음소거하고 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜고 가스 밸브가 열려 있으면 채널 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasValve).valve == \"open\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 냉장고 모드가 급속냉동인 경우 TV를 끄고 사이렌을 활성화해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Refrigerator).refrigeratorMode == \"RapidFreeze\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 40% 미만인 경우 오후 8시에 TV를 켜고 식기 세척기를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity < 40) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            (#Dishwasher).setDishwasherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 열려 있으면 TV를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"open\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기의 질이 좋지 않은 경우 TV를 음소거하고 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).airQuality == \"poor\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜고 오후 7시에 온도가 20°C 미만인 경우 채널 10번으로 설정해줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 20) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            (#Television).setTvChannel(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 가스 밸브가 열려 있으면 TV를 끄고 사이렌을 작동해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#GasValve).valve == \"open\") {\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: TV를 켜고 냉장고 모드가 RapidCool인 경우 채널 12로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Refrigerator).refrigeratorMode == \"RapidCool\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        (#Television).setTvChannel(12)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 50% 이상이면 오후 9시에 TV를 끄고 가습기를 자동 모드로 설정해줘.\n\nServices: {'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 50) {\n            if ((#Television).switch != \"off\") {\n                (#Television).off()\n            }\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n            if ((#Humidifier).humidifierMode != \"auto\") {\n                (#Humidifier).setHumidifierMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 소리가 감지되면 TV를 음소거하고 팬 속도를 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#SoundSensor).sound == \"detected\") {\n        if ((#Television).switch == \"on\" and (#Television).muteStatus == \"unmuted\") {\n            (#Television).mute()\n        }\n        if ((#Fan).fanSpeed != 3) {\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30°C를 넘으면 에어컨을 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 30) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 TV를 켜고 기온이 18°C 미만인 경우 에어컨을 난방 모드로 설정해줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 18) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 28°C를 초과하면 팬 속도를 높음으로 설정해줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 28) {\n        if ((#Fan).fanSpeed != 3) {\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 18°C 미만인 경우 가습기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 18) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 35°C를 초과하면 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 35) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 15°C 미만인 경우 공기청정기를 높음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 15) {\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 40°C를 초과하면 조명을 꺼줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 40) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30°C 이상이면 관수 시스템을 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 30) {\n        if ((#Irrigation).switch != \"on\") {\n            (#Irrigation).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 45°C를 초과하면 카메라를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 45) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 50°C를 초과하면 가스 밸브를 잠가줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 50) {\n        if ((#GasValve).valve == \"open\") {\n            (#GasValve).valve = \"closed\"\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 20°C 미만인 경우 가습기를 자동 모드로 설정해줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 20) {\n        if ((#Humidifier).humidifierMode != \"auto\") {\n            (#Humidifier).setHumidifierMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 25°C 미만인 경우 TV를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 25) {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 22°C 미만인 경우 로봇 청소기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature < 22) {\n        if ((#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n            (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 35°C를 초과하는 경우 블라인드를 50%로 설정해줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 35) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 27°C를 초과하면 선풍기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 27) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 25°C를 초과하면 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#TemperatureSensor).temperature > 25) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시 12분에 날씨가 '눈'이고 기온이 0°C 이하인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 12) {\n        if ((#WeatherProvider).weather == 'snow' and (#WeatherProvider).temperature < 0) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시 43분에 날씨가 '맑음'이고 기온이 25°C 이상이면 에어컨을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 43) {\n        if ((#WeatherProvider).weather == 'clear' and (#WeatherProvider).temperature > 25) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시 15분에 날씨가 '안개'인 경우 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 15) {\n        if ((#WeatherProvider).weather == 'fog') {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시 30분에 스피커에서 '뇌우'인 경우 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 30) {\n        if ((#WeatherProvider).weather == 'thunderstorm') {\n            if ((#Speaker).switch != \"on\") {\n                (#Speaker).on()\n            }\n            (#Speaker).speak(\"Current weather is thunderstorm\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시 22분에 날씨가 '이슬비'이고 기온이 10°C 미만인 경우 에어컨을 난방 모드로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 22) {\n        if ((#WeatherProvider).weather == 'drizzle' and (#WeatherProvider).temperature < 10) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 8분에 습도가 30% 미만이면 가습기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 8) {\n        if ((#WeatherProvider).humidity < 30) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시 19분에 날씨가 '먼지'인 경우 공기청정기를 '높음'으로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 19) {\n        if ((#WeatherProvider).weather == 'dust') {\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시 7분에 온도가 15°C 미만이면 선풍기를 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 7) {\n        if ((#WeatherProvider).temperature < 15) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시 13분에 기온이 5°C 미만인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 13) {\n        if ((#WeatherProvider).temperature < 5) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시 44분에 습도가 70% 이상이면 제습기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 44) {\n        if ((#WeatherProvider).humidity > 70) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시 15분에 날씨가 '맑음'이고 기온이 30°C 이상이면 에어컨을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 15) {\n        if ((#WeatherProvider).weather == 'clear' and (#WeatherProvider).temperature > 30) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시 33분에 날씨가 '비'이고 기온이 18°C 이하인 경우 TV를 켜고 에어컨을 난방 모드로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 33) {\n        if ((#WeatherProvider).weather == 'rain' and (#WeatherProvider).temperature < 18) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 22분에 날씨가 '안개'인 경우 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 22) {\n        if ((#WeatherProvider).weather == 'mist') {\n            if ((#Light).switch != \"on\") {\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시 55분에 온도가 20°C를 넘으면 에어컨을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 55) {\n        if ((#WeatherProvider).temperature > 20) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시 7분에 기온이 15°C 미만인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 7) {\n        if ((#WeatherProvider).temperature < 15) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 1시 19분에 온도가 25°C를 넘으면 선풍기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 19) {\n        if ((#WeatherProvider).temperature > 25) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시 12분에 날씨가 '구름'이고 기온이 10°C 미만인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 12) {\n        if ((#WeatherProvider).weather == 'clouds' and (#WeatherProvider).temperature < 10) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시 55분에 습도가 25% 미만이면 가습기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 55) {\n        if ((#WeatherProvider).humidity < 25) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시 33분에 날씨가 '맑음'이면 조명을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 33) {\n        if ((#WeatherProvider).weather == 'clear') {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시 44분에 날씨가 '안개'이고 기온이 12°C 미만인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 44) {\n        if ((#WeatherProvider).weather == 'mist' and (#WeatherProvider).temperature < 12) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시 12분에 날씨가 '안개'인 경우 공기청정기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 12) {\n        if ((#WeatherProvider).weather == 'haze') {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시 37분에 온도가 10°C 미만이면 선풍기를 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 37) {\n        if ((#WeatherProvider).temperature < 10) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 15분에 날씨가 '눈'이고 기온이 5°C 이하인 경우 TV를 켜고 에어컨을 난방 모드로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 15) {\n        if ((#WeatherProvider).weather == 'snow' and (#WeatherProvider).temperature < 5) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시 21분에 날씨가 '구름'이고 기온이 20°C 이상이면 에어컨을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 21) {\n        if ((#WeatherProvider).weather == 'clouds' and (#WeatherProvider).temperature > 20) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시 8분에 기온이 8°C 미만인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 8) {\n        if ((#WeatherProvider).temperature < 8) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시 24분에 습도가 20% 미만이면 가습기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 24) {\n        if ((#WeatherProvider).humidity < 20) {\n            if ((#Humidifier).switch != \"on\") {\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시 17분에 날씨가 '맑음'이면 조명을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 17) {\n        if ((#WeatherProvider).weather == 'clear') {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시 35분에 날씨가 '안개'이고 기온이 12°C 미만인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 35) {\n        if ((#WeatherProvider).weather == 'mist' and (#WeatherProvider).temperature < 12) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시 18분에 날씨가 '안개'인 경우 공기청정기를 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 18) {\n        if ((#WeatherProvider).weather == 'haze') {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시 9분에 온도가 10°C 미만이면 선풍기를 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 9) {\n        if ((#WeatherProvider).temperature < 10) {\n            if ((#Fan).switch != \"off\") {\n                (#Fan).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 20분에 날씨가 '눈'이고 기온이 5°C 이하인 경우 TV를 켜고 에어컨을 난방 모드로 설정해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 20) {\n        if ((#WeatherProvider).weather == 'snow' and (#WeatherProvider).temperature < 5) {\n            if ((#Television).switch != \"on\") {\n                (#Television).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시 32분에 날씨가 '구름'이고 기온이 20°C 이상이면 에어컨을 꺼줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 32) {\n        if ((#WeatherProvider).weather == 'clouds' and (#WeatherProvider).temperature > 20) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시 8분에 기온이 8°C 미만인 경우 에어컨을 난방 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 8) {\n        if ((#WeatherProvider).temperature < 8) {\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 9시부터 오후 5시까지 창문을 열고 그 외 시간에는 창문을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\" ) {\n    if((#Clock).hour >= 9 and (#Clock).hour < 17 and (#Window).status == \"closed\"){\n        (#Window).open()\n    }\n    if((#Clock).hour < 9 or (#Clock).hour >= 17 and (#Window).status == \"opened\"){\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 9시에 아무도 없는 경우 에어컨, 조명, 텔레비전, 선풍기를 꺼줘.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\" and (#Clock).hour == 9 and (#Clock).minute == 0 and (#PresenceSensor).presence == \"not_present\" ){\n    if((#AirConditioner).status == \"on\"){\n        (#AirConditioner).off()\n    }\n    if((#Light).switch == \"on\"){\n        (#Light).off()\n    }\n    if((#Television).switch == \"on\"){\n        (#Television).off()\n    }\n    if((#Fan).status == \"on\"){\n        (#Fan).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 8시, 오후 12시, 오후 4시, 오후 8시에 반려견에게 15그램의 사료를 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0 or (#Clock).hour == 12 and (#Clock).minute == 0 or (#Clock).hour == 16 and (#Clock).minute == 0 or (#Clock).hour == 20 and (#Clock).minute == 0){\n    if((#Feeder).switch == \"on\" and (#Feeder).feederState ==\"Idle\"){\n        (#Feeder).setFeedPortion(15, \"grams\")\n        (#Feeder).startFeeding()\n        (#Feeder).off()\n    }\n    if((#Feeder).feederState == \"off\"){\n        (#Feeder).on()\n        (#Feeder).setFeedPortion(15, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Feeder).feederState == \"Error\"){\n        (#Feeder).off()\n        wait until (1 MIN)\n        (#Feeder).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기를 켜고 습도가 60% 이상이면 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC, (#HumiditySensor).humidity >= 60.0)\n{\n\tif((#Dehumidifier).switch == \"off\")\n\t{\n\t\t(#Dehumidifier).on()\n\t\t(#Dehumidifier).setDehumidifierMode(\"drying\")\n\t}\n\tif((#Dehumidifier).switch == \"on\" and not (#Dehumidifier).dehumidifierMode == \"drying\")\n\t{\n\t\t(#Dehumidifier).setDehumidifierMode(\"drying\")\n\t}\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 월요일과 화요일에는 밝기가 1000 이상이면 조명을 끄고, 100 이하이면 조명을 켜줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\")\n{\n    if((#LightSensor).light >= 1000)\n    {\n        if((#Light).switch != \"off\"){\n            (#Light).off()\n        }\n    }\n    if((#LightSensor).light <= 100)\n    {\n        if((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 농도가 600 이상 또는 미세먼지 농도가 20 이상 또는 TVOC 수치가 30 이상이면 공기청정기 모드를 높음으로 설정하고, 그렇지 않으면 자동으로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC) {\n    if ((#AirQualityDetector).carbonDioxide >= 600.0 or (#AirQualityDetector).veryFineDustLevel >= 20 or (#AirQualityDetector).tvocLevel >= 30) {\n        if((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        (#AirPurifier).setPurifierFanMode(\"high\")\n    } else {\n        (#AirPurifier).setPurifierFanMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 천둥번개나 토네이도가 치는 날씨라면 창문을 닫고 사이렌을 울린 다음 스피커로 경고하고 로봇 청소기, 가습기, 제습기, 에어컨, 선풍기, 식기세척기를 꺼줘.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#WeatherProvider).weather == \"thunderstorm\" or (#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"There is a thunderstorm or a tornado. Please be careful.\")\n        if ((#Window).window == \"open\") {\n            (#Window).close()\n        }\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).off()\n        }\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n        if ((#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시에 식기세척기, 로봇 청소기, 공기청정기를 켜고 각각 자동 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 12) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        (#Dishwasher).setDishwasherMode(\"auto\")\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if((#AirPurifier).airPurifierFanMode != \"auto\"){\n            (#AirPurifier).setPurifierFanMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 창문을 닫고 조명을 켜고 밝기를 75로 설정한 다음 오후 6시에 TV를 켜줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 18) {\n        if ((#Window).window == \"open\") {\n            (#Window).close()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(75)\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼을 닫고 가습기를 켜고 가습기 모드를 자동으로 설정한 다음 조명을 10으로 설정하고 오후 10시에 '오늘 하루도 수고하셨습니다. 잘 자요'이라고 말해줘.\n\nServices: {'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 22) {\n        if ((#Curtain).switch != \"on\") {\n            (#Curtain).on()\n        }\n        (#Curtain).close()\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        (#Humidifier).setHumidifierMode(\"auto\")\n        if ((#Light).switch != \"off\") {\n            (#Light).setLevel(10)\n        }\n        (#Speaker).speak(\"오늘 하루도 수고하셨습니다. 잘 자요.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 창문을 열고 블라인드를 열고 주말 오전 9시에 에어컨을 켜고 온도가 25도 이상이면 냉방 모드로 설정하고 그렇지 않으면 자동 모드로 설정해줘.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR, (#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\"){\n    if ((#Clock).hour >= 9 and (#Clock).hour < 12) {\n        (#Speaker).speak(\"주말입니다! 오늘도 즐거운 하루 보내세요.\")\n        if ((#Blind).switch != \"on\") {\n            (#Blind).on()\n        }\n        (#Blind).openPercent(100)\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if((#TemperatureSensor).temperature >= 25.0){\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n        if((#AirConditioner).airConditionerMode != \"auto\"){\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 8시에 하루 일정을 user@example.com 으로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0){\n        schedule = \"오늘의 일정은 다음과 같습니다: \\n- 오전 10시: 팀 회의\\n- 오후 1시: 점심 식사\\n- 오후 3시: 프로젝트 리뷰\\n- 오후 5시: 운동\"\n        (#EmailProvider).sendMail(\"user@example.com\", \"오늘의 일정\", schedule)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시부터 오후 5시까지 가스 밸브가 열려 있으면 닫고, 가스 누출이 감지되면 가스 밸브를 닫고, 움직임, 존재 또는 소리가 감지되면 알람을 작동시키고, 연기가 감지되면 창문을 열고 공기청정기를 켜줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour >= 9 and (#Clock).hour < 17){\n    if((#GasValve).valve == \"open\" or (#LeakSensor).leakage == \"leak\"){\n        (#GasValve).close()\n        (#EmailProvider).send(\"user@example.com\", (#Clock).timestamp + \" 가스 밸브가 닫았습니다.\", \"가스 밸브가 열려있거나 누출이 감지되었습니다\")\n    }\n    if((#MotionSensor).motion == \"detected\" or (#PresenceSensor).presence == \"detected\" or (#SoundSensor).sound == \"detected\"){\n        (#Siren).on()\n        (#EmailProvider).send(\"user@example.com\", (#Clock).timestamp + \" 움직임이 감지되었습니다.\", \"움직임이 감지되어 경보음을 울렸습니다.\")\n    }\n    if((#SmokeDetector).smoke == \"detected\"){\n        if((#AirPurifier).switch == \"off\"){\n            (#AirPurifier).on()\n        }\n        if((#Window).window == \"close\"){\n            (#Window).open()\n        }\n        (#EmailProvider).send(\"user@example.com\", (#Clock).timestamp + \" 연기가 감지되었습니다.\", \"연기가 감지되어 창문을 열고 공기청정기를 켰습니다.\")\n    }        \n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일, 수요일, 금요일 오후 1시에 로봇 청소기 모드를 자동, 부분, 반복, 수동, 지도 모드로 설정하고 각각 30분 동안 실행해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"friday\") {\n    if ((#Clock).hour == 13 and (#RobotCleaner).robotCleanerCleaningMode != \"auto\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n    }\n    if ((#Clock).hour == 14 and (#RobotCleaner).robotCleanerCleaningMode != \"part\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"part\")\n    }\n    if ((#Clock).hour == 15 and (#RobotCleaner).robotCleanerCleaningMode != \"repeat\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"repeat\")\n    }\n    if ((#Clock).hour == 16 and (#RobotCleaner).robotCleanerCleaningMode != \"manual\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"manual\")\n    }\n    if ((#Clock).hour == 17 and (#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 60% 이상이면 제습기를 켜고 건조 모드로 설정해줘. 스마트 플러그를 통해 흐르는 전류가 5A 이상이면 스마트 플러그를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC)\n{\n    if((#HumiditySensor).humidity >= 60.0)\n    {\n        if((#Dehumidifier).switch == \"off\")\n        {\n            (#Dehumidifier).on()\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n        if((#Dehumidifier).switch == \"on\" and not (#Dehumidifier).dehumidifierMode == \"drying\")\n        {\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n    }\n    if((#HumiditySensor).humidity < 60.0)\n    {\n        if((#Dehumidifier).switch == \"on\")\n        {\n            (#Dehumidifier).off()\n        }\n    }\n    if((#SmartPlug).current > 5.0)\n    {\n        if((#SmartPlug).switch == \"on\")\n        {\n            (#SmartPlug).off()\n        }\n    }\n    else\n    {\n        if((#SmartPlug).switch == \"off\")\n        {\n            (#SmartPlug).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 6시간마다 200g의 사료를 주고, 사진을 찍어줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(6 HOUR) {\n    if ((#Feeder).feederState == \"Error\"){\n        (#Feeder).off()\n        (#Feeder).on()\n    }\n    if ((#Feeder).feederState == \"Idle\") {\n        (#Feeder).setFeedPortion(200, \"grams\")\n        (#Feeder).startFeeding()\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 25도 이상이면 창문을 닫고 에어컨을 켜줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC, (#TemperatureSensor).temperature >= 25) {\n    if((#Window).window == \"open\"){\n        (#Window).close()\n    }\n    if((#AirConditioner).switch == \"off\"){\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 25도 이상이면 창문을 닫고 에어컨을 켜줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if((#TemperatureSensor).temperature >= 25) {\n    if((#Window).window != \"closed\"){\n        (#Window).close()\n    }\n    if((#AirConditioner).switch == \"off\"){\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 밝기가 1000 이상이면 조명을 끄고 100 미만이면 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC)\n{\n    if((#LightSensor).light >= 1000 and (#Light).switch == \"on\")\n    {\n        (#Light).off()\n    }\n    if((#LightSensor).light <= 100 and (#Light).switch == \"off\")\n    {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기, 로봇 청소기, 공기청정기는 매일 오후 1시와 오후 7시에 작동해게 해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR, (#Clock).hour == 13 or (#Clock).hour == 19) \n{\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if((#Dishwasher).dishwasherMode != \"auto\"){\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n    if((#RobotCleaner).robotCleanerCleaningMode != \"auto\"){\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n    }\n    if ((#AirPurifier).switch != \"on\") {\n        (#AirPurifier).on()\n    }\n    if((#AirPurifier).airPurifierFanMode != \"auto\"){\n        (#AirPurifier).setPurifierFanMode(\"auto\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지 수치가 50 이상이면 공기청정기를 강풍 모드로 설정하고, 10 이하이면 공기청정기를 끄고, 그 외에는 바람 청정 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC) \n{\n    if((#AirQualityDetector).fineDustLevel >= 50) {\n      if((#AirPurifier).switch == \"off\"){\n\t\t\t\t(#AirPurifier).on()\n\t\t}\n        if((#AirPurifier).airPurifierFanMode != \"high\"){\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if((#AirQualityDetector).fineDustLevel < 10) {\n        if ((#AirPurifier).switch == \"on\") {\n            (#AirPurifier).off()\n        }\n        if((#AirPurifier).airPurifierFanMode != \"windFree\"){\n\t\t    (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 25% 미만인 경우 가습기를 하이 모드로 작동하고 65% 이상인 경우 로우 모드로 작동해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC) {\n    if((#Humidifier).humidity < 25.0){\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n\t\t\t\t(#Humidifier).setHumidifierMode(\"high\")\n\t\t}\n\t\tif((#Humidifier).humidity > 65){\n\t\t\tif((#Humidifier).switch == \"off\"){\n\t\t\t\t(#Humidifier).on()\n\t\t\t}\n\t\t\t(#Humidifier).setHumidifierMode(\"low\")\n\t\t}\n\t\t(#Humidifier).setHumidifierMode(\"auto\")\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시 이후에는 조명을 끄고 공기청정기를 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if((#Clock).hour >= 22 or (#Clock).hour < 6) {\n        (#Light).off()\n        if((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if((#AirPurifier).airPurifierFanMode != \"sleep\"){\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 화재 경보가 울리면 가스 밸브를 닫고 창문을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC) {\n    if((#SmokeDetector).smoke == \"detected\") {\n        (#GasValve).close()\n        (#Window).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 2시간마다 창문을 열어 환기를 시키고 10분 후에 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(2 HOUR) {\n    if ((#Window).window == \"closed\") {\n        (#Window).open()\n        wait until(10 MIN)\n        (#Window).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 스마트 플러그의 전압이 230V 이상이면 스마트 플러그를 껐다가 220V 미만이 되면 다시 켜줘. 전력 소비량이 1200W를 초과하는 경우 스마트 플러그를 껐다가 1000W 미만이 되면 다시 켜줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 HOUR)\n{\n    if((#SmartPlug).voltage > 230.0)\n    {\n        (#SmartPlug).off()\n        wait until(voltage < 220.0)\n        (#SmartPlug).on()\n    }\n    if((#SmartPlug).powerConsumption > 1200.0)\n    {\n        (#SmartPlug).off()\n        wait until(power_consumption < 1000.0)\n        (#SmartPlug).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라가 꺼져 있으면 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Camera).switch != \"on\") {\n    (#Camera).on()\n}\n(#Camera).take()"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 50% 이상이면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC){\n    if((#HumiditySensor).humidity >= 50.0){\n        if((#AirConditioner).switch == \"off\"){\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 30% 미만인 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(10 SEC){\n    if((#HumiditySensor).humidity <= 30.0){\n        if((#AirConditioner).switch == \"on\"){\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 날씨가 화창하면 창문을 열고 블라인드를 올려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#WeatherProvider).weather == \"sunny\") {\n    if((#Window).window == \"closed\")\n    {\n        (#Window).open()\n    }\n    if((#Blind).switch == \"off\")\n    {\n        (#Blind).on()\n    }\n    (#Blind).setBlindLevel(100)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 창문을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 SEC){\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if((#Window).window == \"closed\")\n        {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 7시와 자정에 300ml의 물로 식물에 물을 줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(300,\"mililiters\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 7시와 자정에 1리터의 물로 식물에 물을 줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(1,\"liters\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 7시와 자정에 10갤런의 물로 식물에 물을 줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(10,\"gallons\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 7시와 자정에 28온스의 물로 식물에 물을 줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"clear\" and (#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n        (#Irrigator).setWaterPortion(28,\"ounces\") \n        (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 9시에 미세먼지 농도가 50 이상 또는 초미세먼지 농도가 30 이상이면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#AirQualityDetector).dustLevel >= 50 or (#AirQualityDetector).fineDustLevel >= 50){\n            if((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30°C를 넘으면 선풍기를 켜고 최대 속도로 설정해줘. 온도가 25°C 이하로 떨어지면 팬을 꺼줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if ((#TemperatureSensor).temperature > 30.0) {\n        if((#Fan).switch != \"on\"){\n            (#Fan).on()\n        }\n        if((#Fan).fanSpeed != 100){\n            (#Fan).setFanSpeed(100)\n        }\n    } else if ((#TemperatureSensor).temperature < 25.0) {\n        if((#Fan).switch != \"off\"){\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 7시에 창문을 닫고 조명을 켜고 TV를 켜서 채널 2로 설정하고 볼륨을 10으로 맞춘 다음 가습기를 켜줘.\n\nServices: {'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 19 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Window).window !=\"closed\"){\n            (#Window).close()\n        }\n        if((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n        if((#Television).switch != \"on\"){\n            (#Television).on()\n        }\n        if((#Television).tvChannel != 10){\n            (#Television).setTvChannel(10)\n        }\n        if((#Humidifier).switch != \"on\"){\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에서 9시 사이에 실내 조도가 50 이하로 떨어지면 블라인드를 80% 열고, 그렇지 않으면 20%로 유지해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour >= 7 and (#Clock).hour < 9){\n        if((#LightSensor).light < 50){\n            if((#Blind).blindLevel != 80){\n                (#Blind).setBlindLevel(80)\n            }\n        }\n    }\n    else{\n        if((#Blind).setBlindLevel != 20){\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휘도가 200 미만인 경우 커튼을 75%, 200에서 500 미만인 경우 50%, 500 이상인 경우 25%로 설정해줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour >= 9 and (#Clock).hour <= 17 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#LightSensor).light < 200){\n            if((#Curtain).openPercent != 75){\n                (#Curtain).setOpenPercent(75)\n            }\n        }\n        else if((#LightSensor).light < 500){\n            if((#Curtain).openPercent != 50){\n                (#Curtain).setOpenPercent(50)\n            }\n        }\n        else{\n            if((#Curtain).openPercent != 25){\n                (#Curtain).setOpenPercent(25)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 1시에 기온이 26도 이상이면 선풍기를 켜줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#TemperatureSensor).temperature >=26){\n            if((#Fan).switch != \"on\"){\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시, 오후 1시, 오후 7시에 강아지에게 50그램을 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 7 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시, 오후 1시, 오후 7시에 강아지에게 50파운드의 사료를 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 7 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시, 오후 1시, 오후 7시에 강아지에게 50온스의 사료를 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 7 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 8시에 50그램, 오후 2시에 100g, 오후 8시에 75그램을 반려견에게 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 8 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100, \"grams\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(75, \"grams\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 8시에 50파운드, 오후 2시에 100파운드, 오후 8시에 75파운드의 사료를 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 8 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(75, \"pounds\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 8시에 50온스, 오후 2시에 100온스, 오후 8시에 75온스를 반려견에게 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 8 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0){\n        if((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(75, \"ounces\")\n        (#Feeder).startFeeding()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 날씨가 맑으면 매일 오후 5시에 창문을 열어줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 17 and (#Clock).minute == 0){\n        if((#WeatherProvider).weather == \"clear\"){\n            if((#Window).window != \"open\"){\n                (#Window).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 날씨가 맑으면 매일 오후 4시 25분에 창을 열어줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 16 and (#Clock).minute == 25) {\n        if((#WeatherProvider).weather == \"clear\"){\n            if((#Window).window != \"open\"){\n                (#Window).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 비나 눈이 오면 매일 오전 5시 30분에 창문을 닫아줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 5 and (#Clock).minute == 30) {\n        if((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"snow\"){\n            if((#Window).window != \"closed\"){\n                (#Window).close()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간에 한 번씩 연기가 감지되면 스피커를 통해 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(3 HOUR){\n    if((#SmokeDetector).smoke == \"detected\"){\n        (#Speaker).speak(\"연기가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연기가 감지되면 스피커를 통해 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#SmokeDetector).smoke == \"detected\"){\n        (#Speaker).speak(\"연기가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 5시에 주변에 사람이 있으면 에어컨을 냉방 모드로 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 5 and (#Clock).minute == 0){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#AirConditioner).switch != \"on\"){\n                    (#AirConditioner).on()\n                }\n                if((#AirConditioner).airConditionerMode != \"cool\"){\n                    (#AirConditioner).setAirConditionerMode(\"cool\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 7시에 움직임이 감지되면 스피커를 통해 말해줘.\n\nServices: {'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0){\n            if((#MotionSensor).motion == \"active\"){\n                (#Speaker).speak(\"움직임이 감지되었습니다.\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 25% 미만이면 매일 오후 2시에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 14 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 25){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 30% 미만인 경우 매일 오후 11시에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 23 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 30){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 25% 미만일 경우 매일 새벽 2시에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 2 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 25){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 40% 미만이면 매일 오후 1시에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13 and (#Clock).minute == 0){\n        if((#HumiditySensor).humidity <= 40){\n            if((#Humidifier).switch != \"on\"){\n                (#Humidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 7시에 조도가 1000 이하인 경우 블라인드를 열어줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0){\n            if((#LightSensor).light <= 1000){\n                if((#Blind).blindLevel != 100){\n                    (#Blind).open()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 9시에 조도가 1000 이하인 경우 블라인드를 열어줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 9 and (#Clock).minute == 0){\n            if((#LightSensor).light <= 1000){\n                if((#Blind).blindLevel != 100){\n                    (#Blind).open()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 12시에 미세먼지 농도가 50 이상이면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 12 and (#Clock).minute == 0){\n        if((#AirQualityDetector).dustLevel >= 50){\n            if((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 미세먼지 농도가 50 이상이면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 6 and (#Clock).minute == 0){\n        if((#AirQualityDetector).dustLevel >= 50){\n            if((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오전 10시에 조명을 켜고 오후 12시에 소등해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 10 and (#Clock).minute == 0){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n        if((#Clock).hour == 0 and (#Clock).minute == 0){\n            if((#Light).switch != \"off\"){\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 수요일 오전 9시에 조명을 켜고 오후 1시에 소등해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"wednesday\"){\n        if((#Clock).hour == 9 and (#Clock).minute == 0){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n        if((#Clock).hour == 13 and (#Clock).minute == 0){\n            if((#Light).switch != \"off\"){\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오후 8시에 소리가 감지되면 가습기를 중간으로 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 20 and (#Clock).minute == 0){\n            if((#SoundSensor).sound == \"detected\"){\n                if((#Humidifier).switch != \"on\"){\n                    (#Humidifier).on()\n                }\n                if((#Humidifier).humidifierMode != \"medium\"){\n                    (#Humidifier).setHumidifierMode(\"medium\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오후 2시에 가습기에서 소리가 감지되면 가습기를 약하게 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 14 and (#Clock).minute == 0){\n            if((#SoundSensor).sound == \"detected\"){\n                if((#Humidifier).switch != \"on\"){\n                    (#Humidifier).on()\n                }\n                if((#Humidifier).humidifierMode != \"low\"){\n                    (#Humidifier).setHumidifierMode(\"low\")\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 오전 8시에 소리가 감지되면 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 8 and (#Clock).minute == 0){\n            if((#SoundSensor).sound == \"detected\"){\n                if((#Humidifier).switch != \"on\"){\n                    (#Humidifier).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오전 7시에 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0){\n            if((#Curtain).curtain != \"open\"){\n                (#Curtain).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오전 7시 20분에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"sunday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 20){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 목요일 또는 금요일 오후 4시 30분에 TV 채널 10을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 16 and (#Clock).minute == 30){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#Television).tvChannel != 10){\n                    (#Television).setTvChannel(10)\n                }\n                if((#Television).switch != \"on\"){\n                    (#Television).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 화요일과 월요일 오후 1시 30분에 누군가가 있을 때 텔레비전 채널 12번을 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 13 and (#Clock).minute == 30){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#Television).tvChannel != 12){\n                    (#Television).setTvChannel(12)\n                }\n                if((#Television).switch != \"on\"){\n                    (#Television).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 1시에 물 1ℓ로 식물에 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(1,\"liters\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 1시에 45ml의 물로 식물에 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(45,\"mililiters\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 1시에 15갤런의 물로 식물에 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(15,\"gallons\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 1시에 120온스의 물로 식물에 물을 줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 13){\n        if((#Irrigator).switch != \"on\"){\n            (#Irrigator).on()\n        }\n    (#Irrigator).setWaterPortion(45,\"ounces\")\n    (#Irrigator).startWatering()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 3시부터 오전 6시까지 움직임이 감지되면 사이렌을 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour >= 3 and (#Clock).hour < 6){\n        if((#MotionSensor).motion == \"active\"){\n            if((#Siren).sirenMode !=\"siren\"){\n                (#Siren).setSirenMode(\"siren\")\n            }\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 2시부터 오전 6시까지 움직임이 감지되면 사이렌과 스트로브 라이트를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour >= 2 and (#Clock).hour < 6){\n        if((#MotionSensor).motion == \"active\"){\n            if((#Siren).sirenMode !=\"strobe\"){\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 2시부터 오전 6시까지 움직임이 감지되면 사이렌과 점멸등을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour >= 2 and (#Clock).hour < 6){\n        if((#MotionSensor).motion == \"active\"){\n            if((#Siren).sirenMode !=\"strobe\"){\n                (#Siren).setSirenMode(\"strobe\")\n            }\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 6시에 집에 사람이 있으면 에어컨을 난방 모드로 켜줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"monday\"){\n        if((#Clock).hour == 6 and (#Clock).minute == 0){\n            if((#PresenceSensor).presence == \"present\"){\n                if((#AirConditioner).airConditionerMode != \"heat\"){\n                    (#AirConditioner).setAirConditionerMode(\"heat\")\n                }\n                if((#AirConditioner).switch != \"on\"){\n                    (#AirConditioner).on()\n                }\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 6시에 커튼을 완전히 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Curtain).curtainLevel != 100) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 스피커를 통해 현재 날씨를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"thunderstorm\") {\n        (#Speaker).speak(\"현재 날씨는 천둥입니다.)\n    } else if ((#WeatherProvider).weather == \"drizzle\") {\n        (#Speaker).speak(\"현재 날씨는 이슬비입니다.\")\n    } else if ((#WeatherProvider).weather == \"rain\") {\n        (#Speaker).speak(\"현재 날씨는 비입니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Speaker).speak(\"현재 날씨는 눈입니다.\")\n    } else if ((#WeatherProvider).weather == \"mist\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\") {\n        (#Speaker).speak(\"현재 날씨는 연기입니다.\")\n    } else if ((#WeatherProvider).weather == \"haze\") {\n        (#Speaker).speak(\"현재 날씨는 실안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"dust\") {\n        (#Speaker).speak(\"현재 날씨는 먼지입니다.\")\n    } else if ((#WeatherProvider).weather == \"fog\") {\n        (#Speaker).speak(\"현재 날씨는 안개입니다.\")\n    } else if ((#WeatherProvider).weather == \"sand\") {\n        (#Speaker).speak(\"현재 날씨는 모래입니다.\")\n    } else if ((#WeatherProvider).weather == \"ash\") {\n        (#Speaker).speak(\"현재 날씨는 화산재입니다.\")\n    } else if ((#WeatherProvider).weather == \"squall\") {\n        (#Speaker).speak(\"현재 날씨는 돌풍입니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\") {\n        (#Speaker).speak(\"현재 날씨는 토네이도입니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Speaker).speak(\"현재 날씨는 맑음입니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\") {\n        (#Speaker).speak(\"현재 날씨는 구름입니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 10분마다 누출 여부를 확인하고 누출이 발생하면 이메일(test@dummy.org)로 알려줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (10 MIN) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        (#EmailProvider).sendMail(\"test@dummy.org\", \"누수 감지\", \"누수가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 이틀에 한 번씩 집안의 이산화탄소 농도를 측정하고 1,000을 초과하면 집안의 창문을 열어 환기시킨 다음 30분 후에 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (48 HOUR) {\n    if ((#AirQualityDetector).carbonDioxide > 1000) {\n        if ((#Window).window == \"closed\") {\n            (#Window).open()\n        }\n    }\n    wait until (30 MIN)\n    (#Window).close()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 일주일에 한 번 스피커에서 현재 실내 온도를 알려줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (168 HOUR) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 기온은\" + (#TemperatureSensor).temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오후 3시가 되면 스피커에서 현재 외부 온도를 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" and (#Clock).hour == 15 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(\"현재 기온은\" + (#WeatherProvider).temperature)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침부터 저녁까지 8시간 동안 펌프를 켜고 여름에는 펌프 모드를 최대 모드로 설정하고 겨울에는 펌프 모드를 최소 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on() \n        }\n    }\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Pump).switch != \"off\") {\n        `(#Pump).off()\n        }\n    }\n    if ((#Clock).month == 6 or (#Clock).month == 7 or (#Clock).month == 8) {\n        if ((#Pump).operationMode != \"maximum\"){\n            (#Pump).setOperationMode(\"maximum\")\n        }\n    }\n    if ((#Clock).month == 12 or (#Clock).month == 1 or (#Clock).month == 2) {\n        if ((#Pump).operationMode != \"minimum\"){\n            (#Pump).setOperationMode(\"minimum\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 봄에는 노란색, 여름에는 녹색, 가을에는 분홍색, 겨울에는 흰색으로 설정하고 매일 밤 10시에 조명을 켜고 자정이 되면 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (24 HOUR) {\n    if ((#Clock).month == 3 or (#Clock).month == 4 or (#Clock).month == 5) {\n        (#Light).setColor(\"60|100|100\")\n    }\n    else if ((#Clock).month == 6 or (#Clock).month == 7 or (#Clock).month == 8) {\n        (#Light).setColor(\"120|100|100\")\n    }\n    else if ((#Clock).month == 9 or (#Clock).month == 10 or (#Clock).month == 11) {\n        (#Light).setColor(\"300|100|100\")\n    }\n    else if ((#Clock).month == 12 or (#Clock).month == 1 or (#Clock).month == 2) {\n        (#Light).setColor(\"0|0|100\")\n    }\n    wait until ((#Clock).hour == 22)\n    if ((#Light).switch != \"on\"){\n        (#Light).on()\n    }\n    wait until ((#Clock).hour == 0)\n    if ((#Light).switch != \"off\"){\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간마다 사진을 찍어 이메일로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(3 HOUR) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    x = (#Camera).take()\n    (#EmailProvider).sendMailWithFile(\"my@email.com\", \"사진\", \"가장 최근에 찍은 사진 파일입니다.\", x)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일에는 오전 7시에 그늘막을 완전히 열고 오후 8시에 완전히 닫으며, 주말에는 오전 11시에 그늘막을 완전히 열고 오후 10시에 완전히 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 100) {\n                (#Shade).open()\n            }\n        }\n        else if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 0) {\n                (#Shade).close()\n            }\n        }\n    }\n    else {\n        if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 100) {\n                (#Shade).open()\n            }\n        }\n        else if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n            if ((#Shade).shadeLevel != 0) {\n                (#Shade).close()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일에는 오전 8시마다 10분간 일반 모드로 펌프를 작동하고, 주말에는 오전 8시마다 1시간 동안 최소 모드로 펌프를 작동해게 해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n        if ((#Pump).switch != \"on\") {\n              (#Pump).on()\n        }\n        if ((#Pump).operationMode != \"normal\"){\n            (#Pump).setOperationMode(\"normal\")\n        }\n        wait until(10 MIN)\n        if ((#Pump).switch != \"off\") {\n              (#Pump).off()\n        }\n    }\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#Pump).switch != \"on\") {\n              (#Pump).on()\n        }\n        if ((#Pump).operationMode != \"minimum\"){\n            (#Pump).setOperationMode(\"minimum\")\n        }\n        wait until(1 HOUR)\n        if ((#Pump).switch != \"off\") {\n              (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 7시에 그날의 날씨에 맞게 조명의 색상을 설정하고 조명을 켠 다음 스피커를 통해 알려줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"thunderstorm\" or (#WeatherProvider).weather == \"drizzle\") {\n        (#Light).setColor(\"173|216|230\")\n        (#Speaker).speak(\"비 오는 날에 어울리는 연한 파란색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        (#Light).setColor(\"255|255|255\")\n        (#Speaker).speak(\"눈 오는 날에 어울리는 흰색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"clear\") {\n        (#Light).setColor(\"255|223|0\")\n        (#Speaker).speak(\"맑은 날에 어울리는 노란색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"clouds\" or (#WeatherProvider).weather == \"fog\" or (#WeatherProvider).weather == \"mist\" or (#WeatherProvider).weather == \"haze\") {\n        (#Light).setColor(\"128|128|128\")\n        (#Speaker).speak(\"흐린 날에 어울리는 회색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"tornado\" or (#WeatherProvider).weather == \"squall\") {\n        (#Light).setColor(\"0|0|255\")\n        (#Speaker).speak(\"바람부는 날에 어울리는 푸른색 조명을 켜겠습니다.\")\n    } else if ((#WeatherProvider).weather == \"smoke\" or (#WeatherProvider).weather == \"dust\" or (#WeatherProvider).weather == \"sand\" or (#WeatherProvider).weather == \"ash\") {\n        (#Light).setColor(\"192|192|192\")\n        (#Speaker).speak(\"연기나 먼지에 어울리는 은색 조명을 켜겠습니다.\")\n    } else {\n        (#Light).setColor(\"255|255|255\")\n        (#Speaker).speak(\"흰색 조명을 켜겠습니다.\")\n    }\n    if ((#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에서 10시 사이에 집을 나설 경우 기온에 맞는 복장을 추천하고 우산이나 마스크를 가져와야 하는지 알려줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, ((#Clock).hour <= 8 and (#Clock).hour > 10) and (#DoorLock).door == \"opening\") {\n    outfit_recommendation = \"\"\n    if ((#WeatherProvider).temperature < 0) {\n        outfit_recommendation = \"오늘은 매우 춥습니다. 두꺼운 코트와 목도리를 착용하세요. \"\n    } else if ((#WeatherProvider).temperature >= 0 and (#WeatherProvider).temperature < 10) {\n        outfit_recommendation = \"오늘은 추운 날씨입니다. 따뜻한 옷과 코트를 입으세요. \"\n    } else if ((#WeatherProvider).temperature >= 10 and (#WeatherProvider).temperature < 20) {\n        outfit_recommendation = \"오늘은 쌀쌀한 날씨입니다. 가벼운 자켓이나 스웨터를 입으세요. \"\n    } else if ((#WeatherProvider).temperature >= 20 and (#WeatherProvider).temperature < 30) {\n        outfit_recommendation = \"오늘은 따뜻한 날씨입니다. 가벼운 옷차림을 하세요. \"\n    } else {\n        outfit_recommendation = \"오늘은 매우 더운 날씨입니다. 시원한 옷차림을 하세요. \"\n    }\n    if ((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"thunderstorm\" or (#WeatherProvider).weather == \"drizzle\") {\n        outfit_recommendation = outfit_recommendation + \"비가 오니 우산을 챙기세요. \"\n    } else if ((#WeatherProvider).weather == \"snow\") {\n        outfit_recommendation = outfit_recommendation + \"눈이 오니 우산을 챙기세요. \"\n    }\n    if ((#WeatherProvider).weather == \"smoke\" or (#WeatherProvider).weather == \"dust\" or (#WeatherProvider).weather == \"sand\" or (#WeatherProvider).weather == \"ash\" or (#AirQualityDetector).fineDustLevel >= 35.0 or (#AirQualityDetector).dustLevel > 80.0) {\n        outfit_recommendation = outfit_recommendation + \"먼지가 많으니 마스크를 챙기세요. \"\n    }\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    (#Speaker).speak(outfit_recommendation)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 화재 연기나 누수가 감지되면 사이렌이 울리고, 집안에 움직임이 감지되지 않으면 상황을 설명하는 제목과 내용을 이메일(security@home.com)로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'SmokeDetector': 'Functions : []\\nValues : [\\n    smoke : string {\"detected\"|\"not_detected\"} \\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC) {\n    if ((#SmokeDetector).smoke == \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\"){\n            (#Siren).setSirenMode(\"both\")\n        }\n        (#EmailProvider).sendMail(\"security@home.com\", \"화재 감지\", \"집에서 화재가 감지되었습니다.\")\n    }\n    if ((#LeakSensor).leakage ==  \"detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\"){\n            (#Siren).setSirenMode(\"both\")\n        }\n        (#EmailProvider).sendMail(\"security@home.com\", \"누수 감지\", \"집에서 누수가 감지되었습니다.\")\n    }\n    if ((#SmokeDetector).smoke == \"clear\" and (#LeakSensor).leakage == \"not_detected\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 30분마다 집안의 쾌적한 공기를 확인하고 유지하는 시나리오를 만들어 줘. 스피커를 통해 활동을 알려줘.\n\nServices: {'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (30 MIN) {\n    if ((#Speaker).switch != \"on\") {\n        (#Speaker).on()\n    }\n    if ((#TemperatureSensor).temperature > 28) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n            (#AirConditioner).setTemperature(22)\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"실내 온도가 높습니다. 에어컨을 냉방 모드로 켭니다.\")\n    } else if ((#TemperatureSensor).temperature < 17) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"heat\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n            (#AirConditioner).setTemperature(25)\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"실내 온도가 낮습니다. 에어컨을 난방 모드로 켭니다.\")\n    } else {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n        (#Speaker).speak(\"실내 온도가 적정하여 에어컨을 끕니다.\")\n    }\n    if ((#HumiditySensor).humidity > 70) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n        (#Speaker).speak(\"습도가 높아 가습기를 끄고 에어컨을 자동 모드로 켭니다.\")\n    } else if ((#HumiditySensor).humidity < 30) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"습도가 낮아 가습기를 켜고 창문을 닫습니다.\")\n    } else {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n        (#Speaker).speak(\"습도가 적절합니다.\")\n    }\n    if ((#AirQualityDetector).dustLevel > 50 or (#AirQualityDetector).fineDustLevel > 35) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        (#Speaker).speak(\"공기 질이 나쁩니다. 창문을 닫고 공기 청정기를 가동합니다.\")\n    } else {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 1000) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#Window).window != \"on\") {\n            (#Window).open()\n        }\n        (#Speaker).speak(\"이산화탄소 농도가 높습니다. 환기를 시작합니다.\")\n    } else {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 3시에 식기세척기는 자동 모드로, 로봇청소기는 지도 모드로 1시간 동안 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 15 and (#Clock).minute == 0) {\n    if ((#Dishwasher).switch != \"on\") {\n        (#Dishwasher).on()\n    }\n    if ((#Dishwasher).dishwasherMode != \"auto\") {\n        (#Dishwasher).setDishwasherMode(\"auto\")\n    }\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n    if ((#RobotCleaner).robotCleanerCleaningMode != \"map\") {\n        (#RobotCleaner).setRobotCleanerCleaningMode(\"map\")\n    }\n    wait until (1 HOUR)\n    if ((#RobotCleaner).switch != \"off\") {\n        (#RobotCleaner).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 버튼을 눌러 모든 에어컨, 조명, 선풍기, 건조기를 꺼줘.\n\nServices: {'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Button).button == \"pressed\"){\n        if ((#AirConditioner).switch != \"off\"){\n            (#AirConditioner).off()\n        }\n        if ((#Light).switch != \"off\"){\n            (#Light).off()\n        }\n        if ((#Fan).switch != \"off\"){\n            (#Fan).off()\n        }\n        if ((#Dehumidifier).switch != \"off\"){\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 누수가 감지되면 admin@admin.com 으로 이메일을 보내고 스피커를 통해 누수가 감지되었다고 말해줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#LeakSensor).leakage){\n    (#EmailProvider).sendMail(\"admin@admin.com\",\"누수 감지\",\"누수가 감지되었습니다.\")\n    (#Speaker).speak(\"누수가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 1시부터 오전 7시까지, 주말에는 하루 종일 움직임이 감지되면 1분 동안 사이렌이 울려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#MotionSensor).motion == \"active\"){\n        if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n            if((#Clock).hour >= 1 and (#Clock).hour < 7){\n                if((#Siren).switch != \"on\"){\n                    (#Siren).on()\n                }\n            if((#Siren).sirenMode != \"siren\"){\n                (#Siren).setSirenMode(\"siren\")\n            }\n            wait until(1 MIN)\n            if((#Siren).switch != \"off\"){\n                (#Siren).off()\n            }\n        }\n    }\n    else{\n            if((#Siren).switch != \"on\"){\n                (#Siren).on()\n            }\n            if((#Siren).sirenMode != \"siren\"){\n                (#Siren).setSirenMode(\"siren\")\n            }\n            wait until(1 MIN)\n            if((#Siren).switch != \"off\"){\n                (#Siren).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 눈이나 비가 오면 창문을 닫아줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"snow\" or (#WeatherProvider).weather == \"rain\"){\n        if((#Window).window != \"closed\"){\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 3시간마다 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(3 HOUR){\n    if((#AirPurifier).switch != \"on\"){\n        (#AirPurifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주변에 사람이 있고 온도가 27도 이상이면 6시간에 한 번씩 창문을 열어줘.\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(6 HOUR){\n    if((#PresenceSensor).presence == \"present\" and (#TemperatureSensor).temperature >= 27){\n        if((#Window).window != \"open\"){\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 1시에서 5시 사이에 2시간마다 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(2 HOUR, (#Clock).hour >=1 and (#Clock).hour < 5){\n        (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 새벽 3:05에 소리가 감지되면 감지되었다고 알려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 3 and (#Clock).minute == 5 and (#Clock).second == 0){\n        if((#SoundSensor).sound == \"detected\"){\n            (#Speaker).speak(\"소리가 감지되었습니다.\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 11시 5분에 열려 있는 경우 문을 닫아줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 23 and (#Clock).minute == 5){\n        if((#DoorLock).door == \"open\"){\n            (#DoorLock).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 11시 5분에 문이 열려 있을 때 사진을 찍어줘.\n\nServices: {'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 23 and (#Clock).minute == 5){\n        if((#DoorLock).door == \"open\"){\n            (#Camera).take()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 5시에 에어컨을 켜고 저녁 8시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n    }\n    if((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 6시에 공기청정기를 켜고, 평일 오후 7시에 움직임이 감지되면 사진을 찍고 스피커를 통해 움직임이 감지되었다고 말해줘.\n\nServices: {'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n    }\n    if((#Clock).hour == 19 and (#Clock).minute == 0 and (#Clock).second == 0){\n        if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n            if((#MotionSensor).motion == \"active\"){\n                if((#Camera).switch != \"on\"){\n                (#Camera).on()\n                }\n                (#Camera).take()\n                if ((#Speaker).switch != \"on\"){\n                    (#Speaker).on()\n                }\n                (#Speaker).speak(\"움직임이 감지되었습니다.\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 화요일과 목요일 오후 3시에 로봇 청소기를 켜고, 날씨가 흐린 날에는 매일 오전 7시에 조명을 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if((#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"thursday\"){\n        if((#Clock).hour == 15 and (#Clock).minute == 0){\n            if((#RobotCleaner).switch != \"on\"){\n                (#RobotCleaner).on()\n            }\n            if((#RobotCleaner).robotCleanerCleaningMode != \"auto\"){\n                (#RobotCleaner).setRobotCleanerCleaningMode(\"auto\")\n            }\n        }\n    }\n    if((#Clock).hour == 7 and (#Clock).minute  == 0){\n        if((#WeatherProvider).weather == \"clouds\"){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사람이 감지되면 2시간마다 이메일을 보내줘. admin@admin.com\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(2 HOUR){\n    if((#PresenceSensor).presence == \"present\"){\n        (#EmailProvider).sendMail(\"사람이 감지되었습니다.\",\"사람 감지\",\"admin@admin.com\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 버튼을 연속으로 두 번 눌러 조명과 에어컨을 켜고 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#Button).button == \"double\"){\n        if((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n        if((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if((#AirConditioner).airConditionerMode != \"cool\"){\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 비나 눈이 오면 창문을 닫고 건조기를 AI 모드로 켜줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if((#WeatherProvider).weather == \"rain\" or (#WeatherProvider).weather == \"snow\"){\n        if((#Window).window != \"closed\"){\n            (#Window).close()\n        }\n        if((#Dehumidifier).switch != \"on\"){\n            (#Dehumidifier).on()\n        }\n        if((#Dehumidifier).dehumidifierMode != \"AIDrying\"){\n            (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 입력 : 월요일, 수요일, 금요일에는 오전 7시에 조명을 켜고 블라인드를 열고, 오후 12시에 조명을 끄고 블라인드를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "On weekends, press the button to turn on the lights and open the blinds.\nloop(1 SEC){\n    if((#Clock).weekday == \"monday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"friday\"){\n        if((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).second == 0){\n            if((#Light).switch != \"on\"){\n                (#Light).on()\n            }\n            if((#Blind).blindLevel != 100){\n                (#Blind).setBlindLevel(100)\n            }\n        }\n        if((#Clock).hour == 12 and (#Clock).minute == 0 and (#Clock).second == 0){\n            if((#Light).switch != \"off\"){\n                (#Light).off()\n            }\n            if((#Blind).blindLevel != 0){\n                (#Blind).setBlindLevel(0)\n            }\n        }\n    }\n    else{\n        if((#Button).button == \"pressed\"){\n            if((#Light).switch != \"on\"){\n            (#Light).on()\n            }\n            if((#Blind).blindLevel != 100){\n                (#Blind).setBlindLevel(100)\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일부터 금요일 오전 8시부터 오후 8시까지 공기질 감지기가 미세먼지 농도를 50 이상으로 감지하면 블라인드가 50% 열리고, 버튼을 누르면 에어컨이 자동 모드로 설정되고 공기청정기가 켜줘.\n\nServices: {'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Clock).hour >= 8 and (#Clock).hour < 20) {\n    if ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\"){\n        if ((#AirQualityDetector).dustLevel >= 50.0) {\n            if ((#Blind).blindLevel != 50){\n                (#Blind).setBlindLevel(50)\n            }\n        }\n        if ((#Button).button == \"pushed\") {\n            if ((#Airconditioner).switch != \"on\"){\n                (#AirConditioner).on()\n            }\n            if ((#Airconditioner).AirConditionerMode != \"auto){\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n            if ((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n        }   \n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 50% 커튼을 열고 충전기가 충전되면 카메라로 사진을 찍은 다음 접촉 센서가 열리면 이메일로 사진을 보내고 10 분 후에 커튼을 닫아줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC, (#Clock).hour == 18 and (#Clock).minute == 0 and (#Clock).second == 0) {\n    if ((#Curtain).curtainLevel != 50){\n        (#Curtain).setCurtainLevel(50)\n    }\n    if ((#Charger).chargeState == \"isAtFullCharge\") {\n        if ((#Camera).switch != \"on\"){\n        (#Camera).on()\n        }\n        (#Camera).take()\n        imagePath = (#Camera).image\n        wait until ((#ContactSensor).contact == \"open\") \n        (#EmailProvider).sendWithFile(\"recipient@example.com\", \"사진 전송\", \"최근 사진입니다.\", imagePath)\n        wait until (10 MIN) \n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 8시에 식기세척기를 켜고 오후 1시에 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\") {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n    }\n    if ((#Clock).hour == 13 and (#Clock).minute == 0){\n        if ((#Dishwasher).switch != \"off\"){\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 정문이 닫히지 않으면 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'DoorLock': 'Functions : []\\nValues : [\\n    door : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"unknown\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 19 and (#Clock).minute == 0) {\n    if ((#DoorLock).door != \"closed\") {\n        (#EmailProvider).sendMail(\"user@dummy.com\", \"Front Door Not Closed\", \"Front Door is not closed\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 70% 이상이면 매일 오전 7시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\n    if ((#HumiditySensor).humidity >= 70.0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 주말 동안 습도가 70% 이상인 경우 가습기를 끄고 식기세척기를 자동 모드로 설정한 후 30분 후에 로봇 청소기를 켜줘.\n\nServices: {'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n    if ((#HumiditySensor).humidity >= 70.0) {\n        if ((#Humidifier).switch != \"off\"){\n        (#Humidifier).off()\n        }\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\"){\n        (#Dishwasher).setDishwasherMode(\"auto\")\n        }\n        wait until (30 MIN)\n        if ((#RobotCleaner).switch != \"on\"){\n        (#RobotCleaner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 습도가 60% 이상이면 가습기를 끄고 100g 급이기를 켜서 반려견에게 먹이를 주고 1시간 후에 가습기를 다시 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#HumiditySensor).humidity >= 60.0) {\n        if ((#Humidifier).switch != \"off\"){\n            (#Humidifier).off()\n        }\n        if ((#Feeder).switch != \"on\"){\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(100.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n        wait until ((#Clock).hour == 19 and (#Clock).minute == 0)\n        if ((#Humidifier).switch != \"on\"){\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 9시에 습도가 80% 이상이면 가습기를 끄고 가스 밸브를 닫은 다음 급이기를 켜고 반려견에게 50그램을 먹이를 줘. 한 시간 후 급이기를 끄고 가스 밸브를 열어줘.\n\nServices: {'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\") {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity >= 80.0) {\n            if ((#Humidifier).switch != \"off\"){\n                (#Humidifier).off()\n            }\n            if ((#GasValve).valve != \"closed\"){\n                (#GasValve).close()\n            }\n            if ((#Feeder).switch != \"on\"){\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(50.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n            wait until (1 HOUR)\n            if ((#Feeder).switch != \"off\"){\n                (#Feeder).off()\n            }\n            if ((#GasValve).valve != \"open\"){\n                (#GasValve).open()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 6시에 밝기가 3000lx 이상이면 조명을 켜고, 1시간 후에 조도를 확인한 후 2000lx 미만이면 조명을 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#LightSensor).light >= 3000.0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        wait until (1 HOUR)\n        if ((#LightSensor).light <= 2000.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 저녁 8시에 누수 감지기가 누수를 감지하면 가스 밸브를 끄고 조명을 빨간색으로 설정한 후 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'LeakSensor': 'Functions : []\\nValues : [\\n    leakage : string {\"detected\"|\"not_detected\"}\\n]\\nTags : []', 'GasValve': 'Functions : [\\n\\topen(),\\n\\tclose()\\n]\\nValues : [\\n    valve : string {\"open\"|\"closed\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 20 and (#Clock).minute == 0) {\n    if ((#LeakSensor).leakage == \"detected\") {\n        if ((#GasValve).valve != \"closed\") {\n            (#GasValve).close()\n        }\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        if ((#Light).color != \"0|100|100\") {\n            (#Light).setColor(\"0|100|100\")\n        }\n        (#EmailProvider).sendMail(\"user@dummy.com\", \"누수 감지 알림\", \"누수가 감지되었습니다.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 9시에 로봇 청소기를 켜고 움직임이 감지되지 않으면 1시간 후에 펌프를 켜고 30분 후에 로봇 청소기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 21 and (#Clock).minute == 0) {\n    if ((#MotionSensor).motion == \"inactive\") {\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n        wait until (30 MIN)\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).off()\n        }\n        wait until (30 MIN)\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 2시에 아무도 없으면 냉장고를 시동한 다음 2시간 후에 펌프를 시동하고 로봇 청소기를 켜줘.\n\nServices: {'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []', 'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 14 and (#Clock).minute == 0) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n        wait until (2 HOUR)\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n        if ((#RobotCleaner).switch != \"on\") {\n            (#RobotCleaner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 4시에 조도가 1500lx 이하로 떨어지면 조명을 켜고 급수 시스템을 작동하고 1리터를 급수해줘. 30분 후 급수 시스템을 끄고 조도 레벨을 확인한 후 1500lx 이상이면 조명을 꺼줘.\n\nServices: {'LightSensor': 'Functions : []\\nValues : [\\n    light : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Irrigator': 'Functions : [\\n    on(),\\n    off(),\\n    startWatering(),\\n    setWaterPortion(portion: double [0 ~ 2000], unit: string {\"liters\"|\"milliliters\"|\"gallons\"|\"ounces\"})\\n]\\nValues :\\t[\\n    switch: string {\"on\"|\"off\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 16 and (#Clock).minute == 0) {\n    if ((#LightSensor).light <= 1500.0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Irrigator).on()\n        wait until (30 MIN)\n        (#Irrigator).setWaterPortion(1.0, \"liters\")\n        (#Irrigator).startWatering()\n        if ((#Irrigator).switch != \"off\") {\n            (#Irrigator).off()\n        }\n        if ((#LightSensor).light >= 1500.0) {\n            if ((#Light).switch != \"off\") {\n                (#Light).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 소리가 감지되지 않으면 사이렌을 울리고 스마트 플러그를 켜고 한 시간 후에 모두 꺼줘.\n\nServices: {'SmartPlug': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"},\\n    voltage : double,\\n    current : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#SoundSensor).sound == \"not_detected\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#SmartPlug).switch != \"on\") {\n            (#SmartPlug).on()\n        }\n        wait until (1 HOUR)\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#SmartPlug).switch != \"off\") {\n            (#SmartPlug).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시에 기온이 20도 미만이면 창문을 닫고 TV를 켜고 스피커를 통해 '추워요'라고 말해줘.\n\nServices: {'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 7 and (#Clock).minute == 0) {\nif ((#TemperatureSensor).temperature <= 20.0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"추워요\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 5시에 날씨가 비가 오면 창문을 닫고 스피커를 통해 '비가 와요.'라고 말해줘.\n\nServices: {'WeatherProvider': 'Functions : [\\n    getWeatherInfo(double latitude, double longitude): return string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"}\\n]\\nValues : [\\n    weather : string {\"thunderstorm\"|\"drizzle\"|\"rain\"|\"snow\"|\"mist\"|\"smoke\"|\"haze\"|\"dust\"|\"fog\"|\"sand\"|\"ash\"|\"squall\"|\"tornado\"|\"clear\"|\"clouds\"},\\n\\ttemperature : int celcius,\\n\\thumidity : double,\\n\\tpressure : double\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 17 and (#Clock).minute == 0) {\n    weatherInfo = (#WeatherProvider).weather\n    if (weatherInfo == \"Rain\") {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"비가 와요.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 3시에 기온이 25도 이상이면 창문을 닫고 TV를 켜고 2시간 후에 꺼줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 15 and (#Clock).minute == 0) {\n    if ((#TemperatureSensor).temperature > 25.0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n        wait until (2 HOUR)\n        if ((#Television).switch != \"off\") {\n            (#Television).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 8시에 에어컨 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 8 and (#Clock).minute == 0) {\n    if ((#AirConditioner).switch != \"on\") {\n        (#AirConditioner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Dehumidifier).switch != \"on\"){\n        (#Dehumidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 정오에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Fan).switch != \"on\"){\n        (#Fan).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 꺼져 있을 때마다 50그램으로 시작해.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN){\n    if ((#Feeder).switch != \"on\") {\n        (#Feeder).on()\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 6시에 가습기 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 5시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 5 and (#Clock).minute == 0) {\n    if ((#Light).switch != \"on\"){\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 7시에 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 19 and (#Clock).minute == 0) {\n    if ((#Pump).switch != \"on\"){\n        (#Pump).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시에 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0){\n        if ((#Camera).switch != \"off\"){\n        (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 6시에 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if (#Curtain.curtain != \"open\"){\n        (#Curtain).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매시간 팬이 꺼져 있으면 이메일을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR){\n    if ((#Fan).switch != \"on\") {\n        (#EmailProvider).send(\"user@dummy.com\", \"Fan is off alert\", \"The fan is off\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 50그램을 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시부터 오전 6시까지 사람이 감지되지 않으면 조명 꺼줘\n\nServices: {'PresenceSensor': 'Functions : []\\nValues : [\\n    presence : string {\"present\"|\"not_present\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour >= 22 or (#Clock).hour < 6) {\n    if ((#PresenceSensor).presence == \"not_present\") {\n        if ((#Light).switch != \"off\"){\n        (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 밤 11시에 공기청정기가 켜져 있는 경우 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 23 and (#Clock).minute == 0) {\n    if ((#AirPurifier).switch != \"off\") {\n        (#AirPurifier).off()\n    }\n    if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n        (#AirPurifier).setPurifierFanMode(\"sleep\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 아침 6시에 블라인드 열기\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 6 and (#Clock).minute == 0) {\n    if ((#Blind).blind != \"open\"){\n    (#Blind).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 자정마다 TV를 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 0 and (#Clock).minute == 0) {\n    if ((#Television).switch != \"off\") {\n        (#Television).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기가 충전 중일 때마다 표시등을 켜고 색상을 파란색으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN){\n    if ((#Charger).chargeState == \"isCharging\") {\n        if ((#Light).switch != \"on\"){\n            (#Light).on()\n        }\n        if ((#Light).color != \"240|100|100\"){\n            (#Light).setColor(\"240|100|100\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 토요일 오전 9시에 로봇 청소기 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).weekday == \"saturday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n    if ((#RobotCleaner).switch != \"on\") {\n        (#RobotCleaner).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 밤 10시에 블라인드를 닫아줘.\n\nServices: {'Shade': 'Functions : [\\n\\topen(),\\n\\tclose(),\\n    setShadeLevel(openPercent: int[0 ~ 100])\\n]\\nValues : [\\n    shadeLevel : int openPercent[0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 22 and (#Clock).minute == 0) {\n    if ((#Shade).shadeLevel != 0){\n    (#Shade).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 버튼을 누를 때마다 조명 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Button': 'Functions : []\\nValues : [\\n    button : string {\"pushed\"|\"held\"|\"double\"|\"pushed_2x\"|\"pushed_3x\"|\"pushed_4x\"|\"pushed_5x\"|\"pushed_6x\"|\"down\"|\"down_2x\"|\"down_3x\"|\"down_4x\"|\"down_5x\"|\"down_6x\"|\"down_hold\"|\"up\"|\"up_2x\"|\"up_3x\"|\"up_4x\"|\"up_5x\"|\"up_6x\"|\"up_hold\"|\"swipe_up\"|\"swipe_down\"|\"swipe_left\"|\"swipe_right\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 SEC){\n    if ((#Button).button == \"pushed\") {\n        if ((#Light).switch != \"off\"){\n        (#Light).off()\n        }\n    } \n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 정오에 카메라로 사진 찍기\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 12 and (#Clock).minute == 0) {\n    if ((#Camera).switch != \"on\"){\n        (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 6시에 가습기 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour == 18 and (#Clock).minute == 0) {\n    if ((#Humidifier).switch != \"on\") {\n        (#Humidifier).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 밤 10시에 전등 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if((#Clock).hour == 22 and (#Clock).minute == 0){\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 모션 센서가 움직임을 감지할 때마다 조명 켜줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'MotionSensor': 'Functions : []\\nValues : [\\n    motion : string {\"active\"|\"inactive\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 SEC){\n    if ((#MotionSensor).motion == \"active\" and (#Light).switch != \"on\") {\n        (#Light).on()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 야간에 소리가 감지되면 조명 꺼줘\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'SoundSensor': 'Functions : []\\nValues : [\\n    sound : string {\"detected\"|\"not_detected\"},\\n\\tsoundPressureLevel : double [0 ~ 194]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN, (#Clock).hour >= 22 or (#Clock).hour < 6) {\n    if ((#SoundSensor).sound == \"detected\" and (#Light).switch != \"off\") {\n        (#Light).off()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 25도 이상이면 매일 오전 8시에 에어컨을 켜줘.\"\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature > 25.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지 수치가 50 이상이면 매일 오전 9시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 50.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시에 사진 찍기\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\"){\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 9시에 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\"){\n        (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 10시에 식기세척기를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if (#Dishwasher.switch != \"on\"){\n        (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지 농도가 50 이상이고 오전 10시인 경우 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 50.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 기온이 22도 미만이면 에어컨을 꺼줘.\n\nServices: {'TemperatureSensor': 'Functions : []\\nValues : [\\n    temperature: int [-460 ~ 10000]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#TemperatureSensor).temperature < 22.0) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매 시간마다 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 HOUR) {\n    if ((#Camera).switch != \"on\"){\n    (#Camera).on()\n    }\n    (#Camera).take()\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 매일 오후 8시에 충전기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#ContactSensor).contact == \"closed\") {\n            if( (#Charger).switch != \"on\"){\n            (#Charger).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 60% 이상인 경우 오후 2시에 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'HumiditySensor': 'Functions : []\\nValues : [\\n    humidity : double[0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#HumiditySensor).humidity > 60.0) {\n            if (#Dehumidifier.switch != \"on\"){\n            (#Dehumidifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 11시에 식기세척기를 시작해.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop (1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\"){\n        (#Dishwasher).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 30분에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 30) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시 15분에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 15) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시 45분에 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 45) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시 30분에 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시 45분에 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 45) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시 30분에 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        (#Curtain).open()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시 15분에 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 15) {\n        (#Curtain).close()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시 15분에 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 먹이공급기를 켜줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 30분에 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 30) {\n        if ((#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시 30분에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 냉장고를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"on\") {\n            (#Refrigerator).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 냉장고를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Refrigerator': 'Functions : [\\n    on(),\\n    off(),\\n    setRefrigeratorMode(string mode{\"RapidCool\"|\"RapidFreeze\"}) \\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    refrigeratorMode : string {\"RapidCool\"|\"RapidFreeze\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Refrigerator).switch != \"off\") {\n            (#Refrigerator).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 에어컨을 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 에어컨을 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 1시에 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10:00에 에어컨을 난방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"heat\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시 30분에 자동 모드가 아닌 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 30) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시 15분에 냉방 모드에 있는 에어컨을 난방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 15) {\n        if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode == \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"heat\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 45분에 로봇 청소기를 켜고 에어컨을 난방 모드로 설정한 경우 에어컨 온도를 20°C로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 45) {\n        if ((#AirConditioner).airConditionerMode == \"heat\") { \n            if (#RobotCleaner.switch != \"on\"){\n            (#RobotCleaner).on()\n            }\n            if ((#AirConditioner).switch != \"on\"){\n            (#Airconditioner).on()\n            }\n            (#AirConditioner).setTemperature(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 창을 열어줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Window).window != \"open\") {\n            (#Window).open()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 창을 닫아줘.\n\nServices: {'Window': 'Functions : [\\n    open(),\\n    close()\\n]\\nValues : [\\n    window : string {\"closed\"|\"open\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Window).window != \"closed\") {\n            (#Window).close()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 가습기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"on\") {\n            (#Humidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 1시에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 공기청정기를 자동 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"auto\") {\n            (#AirPurifier).setPurifierFanMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 공기청정기를 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시 30분에 공기청정기 팬을 약하게 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 30) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 공기청정기 팬을 중간으로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 공기청정기 팬을 최대로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 공기청정기 팬을 저소음으로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 공기청정기를 바람 없는 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기청정기가 오후 4시에 무풍 모드인 경우 조명을 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode == \"windFree\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에는 공기청정기를 자동 모드로, 오후 12시에는 중간 모드로, 오후 10시에는 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"auto\") {\n            (#AirPurifier).setPurifierFanMode(\"auto\")\n        }\n    }\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에는 공기청정기를 저속 모드로, 오후 2시에는 고속 모드로, 오후 8시에는 무풍 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에는 공기청정기를 중간 모드로, 오후 1시에는 절전 모드로, 오후 11시에는 꺼줘 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"off\") {\n            (#AirPurifier).setPurifierFanMode(\"off\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 PM 10 먼지 농도를 측정하고 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        pm10Value = (#AirQualityDetector).dustLevel\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 미세먼지 수치(PM 2.5)가 15 미만이면 공기청정기를 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel < 15.0) {\n            if ((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n                (#AirPurifier).setPurifierFanMode(\"sleep\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 30분에 초미세먼지 수치(PM 1.0)가 50 이상이면 공기청정기를 강 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n            if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n             }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시 45분에 이산화탄소 수치가 400ppm인 경우 에어컨을 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 45) {\n        if ((#AirQualityDetector).carbonDioxide == 400.0) {\n            if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n            }   \n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 공기질 센서 주변의 온도가 30°C를 초과하면 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#AirConditioner).switch != \"on\"){\n                (#AirConditioner).on()\n            }   \n            if ((#AirConditioner).airConditionerMode != \"cool\") {\n                (#AirConditioner).setAirConditionerMode(\"cool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시에 공기질 센서로 측정한 습도가 50을 초과하면 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 50.0) {\n            if ((#AirPurifier).switch != \"on\"){\n                (#AirPurifier).on()\n             }\n            if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n                (#AirPurifier).setPurifierFanMode(\"quiet\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 15 이하이고 기온이 30°C를 넘으면 에어컨을 켜고 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel < 15.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 400ppm이고 습도가 50%를 초과하면 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide == 400.0 and (#AirQualityDetector).humidity > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 50을 초과하고 TVOC 수치가 0.03 이하인 경우 공기청정기를 강 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 50.0 and (#AirQualityDetector).tvocLevel < 0.03) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 1.0 수치가 50을 초과하고 CO2 수치가 400ppm인 경우, 에어컨을 켜고 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0 and (#AirQualityDetector).carbonDioxide == 400.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"auto\") {\n            (#AirConditioner).setAirConditionerMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지(PM 2.5) 수치가 40을 초과하고 TVOC 수치가 3 이상이면 공기청정기를 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 40.0 and (#AirQualityDetector).tvocLevel > 3.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n            (#AirPurifier).setPurifierFanMode(\"sleep\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100 이상이고 온도가 25°C를 초과하는 경우 에어컨을 켜고 냉방 모드로 설정해줘. CO2 수치가 600ppm 이상이면 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하고 VOC 수치가 0.05 이상이면 공기청정기를 켜고 높음 모드로 설정해줘. 습도가 40% 미만인 경우 공기청정기를 낮음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 1000ppm 이상이고 온도가 28°C를 초과하면 에어컨을 켜줘. PM 1.0 수치가 50을 초과하면 공기청정기를 중간 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 50 이상이고 온도가 30°C를 넘으면 에어컨을 켜줘. 습도가 60% 이상이면 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150 이상이고 VOC 수치가 0.1 이상이면 공기청정기를 켜고 무풍 모드로 설정해줘. CO2 수치가 400ppm 미만인 경우 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100 이상이고 온도가 25°C를 초과하는 경우 에어컨을 켜고 냉방 모드로 설정해줘. CO2 수치가 600ppm 이상이면 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하고 VOC 수치가 0.05 이상이면 공기청정기를 켜고 높음 모드로 설정해줘. 습도가 40% 미만인 경우 공기청정기를 낮음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 1000ppm 이상이고 온도가 28°C를 초과하면 에어컨을 켜줘. PM 1.0 수치가 50을 초과하면 공기청정기를 중간 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 50 이상이고 온도가 30°C를 넘으면 에어컨을 켜줘. 습도가 60% 이상이면 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150 이상이고 VOC 수치가 0.1 이상이면 공기청정기를 켜고 무풍 모드로 설정해줘. CO2 수치가 400ppm 미만인 경우 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100 이상이고 온도가 25°C를 초과하는 경우 블라인드를 40%로 설정해줘. CO2 수치가 600ppm 이상이면 블라인드를 0%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하고 VOC 수치가 0.05 이상인 경우 블라인드를 60%로 설정해줘. 습도가 40% 미만인 경우 블라인드를 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Blind).blindLevel != 60) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#Blind).blindLevel != 20) {\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 1000ppm 이상이고 온도가 28°C를 초과하는 경우 블라인드를 50%로 설정해줘. PM 1.0 수치가 50을 초과하면 블라인드를 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#Blind).blindLevel != 50) {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 50 이상이고 기온이 30°C를 초과하는 경우 블라인드를 70%로 설정해줘. 습도가 60% 이상이면 블라인드를 40%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blindLevel != 70) {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150 이상이고 VOC 수치가 0.1 이상이면 블라인드를 80%로 설정해줘. CO2 수치가 400ppm 미만인 경우 블라인드를 0%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#Blind).blindLevel != 80) {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100 이상이고 온도가 25°C를 초과하면 공기청정기를 켜고 냉방 모드로 설정해줘. CO2 수치가 600ppm 이상이면 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"cool\") {\n            (#AirPurifier).setPurifierFanMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하고 VOC 수치가 0.05 이상이면 공기청정기를 켜고 높음 모드로 설정해줘. 습도가 40% 미만인 경우 공기청정기를 낮음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 1000ppm 이상이고 온도가 28°C를 초과하는 경우 에어컨을 켜고 높음 모드로 설정해줘. PM 1.0 수치가 50을 초과하면 공기청정기를 중간 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 50 이상이고 온도가 30°C를 초과하면 에어컨을 켜고 조용한 모드로 설정해줘. 습도가 60% 이상이면 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"quiet\") {\n            (#AirConditioner).setAirConditionerMode(\"quiet\")\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150 이상이고 VOC 수치가 0.1 이상이면 에어컨을 켜고 무풍 모드로 설정해줘. CO2 수치가 400ppm 미만인 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"windFree\") {\n            (#AirConditioner).setAirConditionerMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하고 VOC 수치가 0.05 이상인 경우 블라인드를 60%로 설정해줘. 습도가 40% 미만인 경우 블라인드를 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Blind).blindLevel != 60) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#Blind).blindLevel != 20) {\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 1000ppm 이상이고 온도가 28°C를 초과하는 경우 블라인드를 50%로 설정해줘. PM 1.0 수치가 50을 초과하면 블라인드를 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#Blind).blindLevel != 50) {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 50 이상이고 기온이 30°C를 초과하는 경우 블라인드를 70%로 설정해줘. 습도가 60% 이상이면 블라인드를 40%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blindLevel != 70) {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150 이상이고 VOC 수치가 0.1 이상이면 블라인드를 80%로 설정해줘. CO2 수치가 400ppm 미만인 경우 블라인드를 0%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#Blind).blindLevel != 80) {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100 이상이고 온도가 25°C를 초과하면 공기청정기를 켜고 냉방 모드로 설정해줘. CO2 수치가 600ppm 이상이면 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"cool\") {\n            (#AirPurifier).setPurifierFanMode(\"cool\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하고 VOC 수치가 0.05 이상이면 공기청정기를 켜고 높음 모드로 설정해줘. 습도가 40% 미만인 경우 공기청정기를 낮음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 1000ppm 이상이고 온도가 28°C를 초과하는 경우 에어컨을 켜고 높음 모드로 설정해줘. PM 1.0 수치가 50을 초과하면 공기청정기를 중간 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n            (#AirPurifier).setPurifierFanMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 50 이상이고 온도가 30°C를 초과하면 에어컨을 켜고 조용한 모드로 설정해줘. 습도가 60% 이상이면 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"quiet\") {\n            (#AirConditioner).setAirConditionerMode(\"quiet\")\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150 이상이고 VOC 수치가 0.1 이상이면 에어컨을 켜고 무풍 모드로 설정해줘. CO2 수치가 400ppm 미만인 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"windFree\") {\n            (#AirConditioner).setAirConditionerMode(\"windFree\")\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100 이상이고 온도가 25°C를 초과하는 경우 블라인드를 30%로 설정해줘. CO2 수치가 600ppm 이상이면 블라인드를 0%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하고 VOC 수치가 0.05 이상인 경우 블라인드를 60%로 설정해줘. 습도가 40% 미만인 경우 블라인드를 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Blind).blindLevel != 60) {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n    if ((#AirQualityDetector).humidity < 40.0) {\n        if ((#Blind).blindLevel != 20) {\n            (#Blind).setBlindLevel(20)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 1000ppm 이상이고 온도가 28°C를 초과하는 경우 블라인드를 50%로 설정해줘. PM 1.0 수치가 50을 초과하면 블라인드를 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 1000.0 and (#AirQualityDetector).temperature > 28.0) {\n        if ((#Blind).blindLevel != 50) {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n    if ((#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Blind).blindLevel != 30) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 50 이상이고 기온이 30°C를 초과하는 경우 블라인드를 70%로 설정해줘. 습도가 60% 이상이면 블라인드를 40%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Blind).blindLevel != 70) {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Blind).blindLevel != 40) {\n            (#Blind).setBlindLevel(40)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150 이상이고 VOC 수치가 0.1 이상이면 블라인드를 80%로 설정해줘. CO2 수치가 400ppm 미만인 경우 블라인드를 0%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0 and (#AirQualityDetector).tvocLevel > 0.1) {\n        if ((#Blind).blindLevel != 80) {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Blind).blindLevel != 0) {\n            (#Blind).setBlindLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10:00에 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라가 켜져 있으면 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"off\") {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라가 꺼져 있으면 펌프를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        if ((#Pump).switch != \"off\") {\n            (#Pump).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜고 0.25배속으로 15분간 타임랩스를 촬영해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(0.25, 2.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜고 10배속으로 3시간 동안 타임랩스를 촬영해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).takeTimelapse(3.0, 10.0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100을 초과하면 카메라를 켜고 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 600ppm을 초과하면 카메라를 끄고 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30°C를 초과하고 카메라가 꺼져 있으면 카메라를 켜고 에어컨을 높음 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).temperature > 30.0 and (#Camera).switch != \"on\") {\n        (#Camera).on()\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5가 40을 초과하고 VOC 수치가 0.05 이상이면 카메라를 끄고 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 40.0 and (#AirQualityDetector).tvocLevel > 0.05) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지 농도가 50을 초과하고 기온이 25°C를 초과하면 카메라를 켜고 에어컨을 중간 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50.0 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"medium\") {\n            (#AirConditioner).setAirConditionerMode(\"medium\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.03 이하인 경우 카메라를 켜고 공기청정기를 저감 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).tvocLevel < 0.03) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"low\") {\n            (#AirPurifier).setPurifierFanMode(\"low\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜고 습도가 60%를 초과하면 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).humidity > 60.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 150을 초과하면 카메라를 끄고 공기청정기를 무풍 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 150.0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"windFree\") {\n            (#AirPurifier).setPurifierFanMode(\"windFree\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 400ppm 미만인 경우 카메라를 켜고 공기청정기를 꺼줘 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide < 400.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirPurifier).switch != \"on\"){\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"off\") {\n            (#AirPurifier).setPurifierFanMode(\"off\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 1.0ppm을 초과하고 온도가 30°C 이상이면 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).tvocLevel > 1.0 and (#AirQualityDetector).temperature > 30.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라가 켜져 있고 VOC 수치가 1.0ppm을 초과하면 에어컨을 켜고 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"off\" and (#AirQualityDetector).tvocLevel > 1.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라가 꺼져 있고 미세먼지 수치가 30을 초과하면 공기청정기를 켜고 높음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\" and (#AirQualityDetector).fineDustLevel > 30.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5가 40을 초과하고 CO2 수치가 600ppm 이상이면 카메라를 끄고 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 40.0 and (#AirQualityDetector).carbonDioxide > 600.0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 28°C를 초과하고 PM 1.0이 50을 초과하면 카메라를 켜고 에어컨을 높음 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).temperature > 28.0 and (#AirQualityDetector).veryFineDustLevel > 50.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        if ((#AirConditioner).switch != \"on\"){\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"high\") {\n            (#AirConditioner).setAirConditionerMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 카메라로 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜고 오전 6시에 0.25배속으로 15분간 타임랩스를 촬영해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).takeTimelapse(0.25, 2.0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라를 켜고 오전 9시에 10배속으로 3시간 동안 타임랩스를 촬영해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).takeTimelapse(3.0, 10.0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 카메라로 촬영한 가장 최근 사진을 오후 5시에 name@cite.org 으로 이메일 전송해줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        imagePath = (#Camera).image\n        (#EmailProvider).sendWithFile(\"name@cite.org\", \"최근 사진\", \"\", imagePath)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 지금 사진을 찍어 제목 '사진'과 본문 '방금 찍은 사진'으로 이메일(test@name.com)로 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Camera).switch != \"on\") {\n        (#Camera).on()\n    }\n    (#Camera).take()\n    image = (#Camera).image\n    (#EmailProvider).sendWithFile(\"test@name.com\", \"사진\", \"방금 찍은 사진\", image)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시 30분에 카메라를 켜고 오전 7시 30분에 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 4시 45분에 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 45) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시 15분에 카메라를 끄고 오후 11시 30분에 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 15) {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 5시에 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있으면 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blind == \"closed\") {\n    (#Blind).setBlindLevel(50)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 열려 있으면 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blind == \"open\") {\n    (#Blind).setBlindLevel(20)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 부분적으로 열려 있는 경우 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blind == \"partially\") {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 블라인드를 70%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 블라인드를 100%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 50%인 경우 80%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 50) {\n    (#Blind).setBlindLevel(80)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 20%인 경우 40%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 20) {\n    (#Blind).setBlindLevel(40)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 30%인 경우 60%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 30) {\n    (#Blind).setBlindLevel(60)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 70%인 경우 90%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 70) {\n    (#Blind).setBlindLevel(90)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 90%인 경우 블라인드를 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "if ((#Blind).blindLevel == 90) {\n    (#Blind).setBlindLevel(0)\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하면 블라인드를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 35) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.1을 초과하면 블라인드를 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).tvocLevel > 0.1) {\n        (#Blind).setBlindLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30°C를 초과하는 경우 블라인드를 80%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).temperature > 30) {\n        (#Blind).setBlindLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 40% 미만인 경우 블라인드를 40%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).humidity < 40) {\n        (#Blind).setBlindLevel(40)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수준이 600ppm을 초과하면 블라인드를 60%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 600) {\n        (#Blind).setBlindLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 10 수치가 100을 초과하면 블라인드를 70%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100) {\n        (#Blind).setBlindLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 미세먼지 농도가 50을 초과하면 블라인드를 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).fineDustLevel > 50) {\n        (#Blind).setBlindLevel(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 블라인드를 100%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 블라인드를 0%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 1.0 수치가 30을 초과하면 블라인드를 90%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).veryFineDustLevel > 30) {\n        (#Blind).setBlindLevel(90)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있으면 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"closed\") {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 열려 있으면 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"open\") {\n        (#Blind).setBlindLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 부분적으로 열려 있는 경우 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blind == \"partially\") {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 블라인드를 70%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 블라인드를 100%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 50%인 경우 80%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 50) {\n        (#Blind).setBlindLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 20%인 경우 40%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 20) {\n        (#Blind).setBlindLevel(40)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 30%인 경우 60%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 30) {\n        (#Blind).setBlindLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 70%인 경우 90%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 70) {\n        (#Blind).setBlindLevel(90)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 90%인 경우 블라인드를 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 90) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 충전 상태가 \"충전 중\"이고 전압이 12.5V 이상이면 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"charging\" and (#Charger).voltage > 12.5) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 충전 상태가 \"완전 충전됨\"이고 오전 9:00인 경우 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"fullyCharged\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 충전 상태가 '방전 중'이고 전류가 1.5A 이상이면 블라인드를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"discharging\" and (#Charger).current > 1.5) {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 전압이 11V 이하로 떨어지면 오후 8시에 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).voltage < 11 and (#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 전류가 2A를 초과하고 오전 7시가 되면 가습기의 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).current > 2.0 and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 충전 상태가 \"오류\"이고 PM 10 레벨이 100 이상인 경우 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"error\" and (#AirQualityDetector).dustLevel > 100.0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 전압이 11V에서 12V 사이이고 온도가 25°C를 초과하는 경우 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).voltage >= 11 and (#Charger).voltage <= 12 and (#AirQualityDetector).temperature > 25.0) {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 전류가 0.5A 미만이고 충전 상태가 \"충전 중\"이며 습도가 60% 이상인 경우 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).current < 0.5 and (#Charger).chargingState == \"charging\" and (#AirQualityDetector).humidity > 60.0) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n            (#AirPurifier).setPurifierFanMode(\"quiet\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기가 '중지' 상태이고 전압이 13V 이상인 경우 블라인드를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"stopped\" and (#Charger).voltage > 13.0) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기가 \"완전 충전됨\"이고 전류가 0이면 오후 10:00에 조명을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Charger).chargingState == \"fullyCharged\" and (#Charger).current == 0 and (#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Light).switch != \"off\") {\n            (#Light).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 블라인드를 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true) {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말에는 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 9시에 카메라로 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일 오전 8시에 블라인드를 100%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 현재 온도가 25°C 이상인 경우 오전 6시 30분에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오늘이 월요일이고 시간이 오후 5시인 경우 블라인드를 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"monday\" and (#Clock).hour == 17 and (#Clock).minute == 0) {\n        (#Blind).setBlindLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 마지막 날 오후 11시 30분에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 31 and (#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일에 오전 9시에 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 60% 이상인 경우 오후 10시에 공기청정기를 절전 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"sleep\") {\n                (#AirPurifier).setPurifierFanMode(\"sleep\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전기의 전압이 5V 미만인 경우 오후 2시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Charger).voltage < 5.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 대기질(PM 10)이 나쁘고 휴일인 경우 블라인드를 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0 and (#Clock).isHoliday==true) {\n        (#Blind).setBlindLevel(30)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 600ppm 이상이면 오전 7시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 에어컨이 켜져 있는 경우 오후 3시에 블라인드를 80%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#Blind).setBlindLevel(80)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전 상태가 \"충전 중\"인 경우 오후 11시에 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"charging\") {\n            if ((#Camera).switch != \"off\") {\n                (#Camera).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 30°C를 넘으면 오전 8시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 15°C 미만인 경우 오전 6시에 에어컨을 난방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 15.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"heat\") {\n                (#AirConditioner).setAirConditionerMode(\"heat\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 오후 5시에 닫히는 경우 블라인드를 70%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            (#Blind).setBlindLevel(70)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 40% 미만인 경우 오전 6시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity < 40.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 블라인드가 50%인 경우 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Blind).blindLevel == 50) {\n            (#Blind).setBlindLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 방전 중인 경우 오전 12시에 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"discharging\") {\n            if ((#Camera).switch != \"off\") {\n                (#Camera).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.05 이상인 경우 오후 7시에 공기청정기를 높음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 800ppm을 초과하는 경우 오후 3시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 오후 4시에 열려 있으면 10%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            (#Blind).setBlindLevel(10)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 20°C 미만인 경우 오후 9시에 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.03 미만인 경우 오후 2시에 블라인드를 90%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.03) {\n            (#Blind).setBlindLevel(90)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 7시에 카메라를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전압이 220V 이상인 경우 오후 5시에 에어컨을 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Charger).voltage > 220.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"auto\") {\n                (#AirConditioner).setAirConditionerMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전 상태가 \"완전 충전됨\"인 경우 오후 11시에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"fullyCharged\") {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 70% 이상인 경우 오후 8시에 공기청정기를 저소음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"quiet\") {\n                (#AirPurifier).setPurifierFanMode(\"quiet\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 400ppm 미만인 경우 오후 2시에 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide < 400.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n            if ((#AirConditioner).airConditionerMode != \"cool\") {\n                (#AirConditioner).setAirConditionerMode(\"cool\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.02 이하인 경우 오후 10시에 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.02) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전 상태가 \"오류\"인 경우 오전 7시 30분에 블라인드를 75%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Charger).chargingState == \"error\") {\n            (#Blind).setBlindLevel(75)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 800ppm 이상이면 오후 5시 30분에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10:00에 블라인드가 열려 있으면 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            (#Blind).setBlindLevel(50)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 18°C 미만인 경우 오후 6시에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 18.0) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 50% 미만인 경우 오전 8시에 공기청정기를 중간 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity < 50.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"medium\") {\n                (#AirPurifier).setPurifierFanMode(\"medium\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 35°C를 초과하는 경우 오후 12시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 35.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 오후 3시에 닫히는 경우 블라인드를 60%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            (#Blind).setBlindLevel(60)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시 30분에 카메라를 켜고 15분간 타임랩스를 촬영해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 30) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).takeTimelapse(0.25, 2.0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 11시 45분에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 23 and (#Clock).minute == 45) {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: PM 2.5 수치가 35를 초과하는 경우 오후 1시에 공기청정기를 높음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).fineDustLevel > 35.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n            if ((#AirPurifier).airPurifierFanMode != \"high\") {\n                (#AirPurifier).setPurifierFanMode(\"high\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 전압이 230V를 초과하는 경우 오후 3시에 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Charger).voltage > 230.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.01 이하인 경우 오후 9시 30분에 공기청정기를 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).tvocLevel < 0.01) {\n            if ((#AirPurifier).switch != \"off\") {\n                (#AirPurifier).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전 상태가 \"완전 충전됨\"인 경우 오전 8시 30분에 블라인드를 85%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 30) {\n        if ((#Charger).chargingState == \"fullyCharged\") {\n            (#Blind).setBlindLevel(85)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 500ppm 이상이면 오전 6시 30분에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#AirQualityDetector).carbonDioxide > 500.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10:00에 블라인드가 열려 있으면 75%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            (#Blind).setBlindLevel(75)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 22°C 미만인 경우 오후 9시에 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 22.0) {\n            if ((#AirConditioner).switch != \"off\") {\n                (#AirConditioner).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼이 열려 있는 경우 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtain == \"open\") {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼이 부분적으로 열려 있는 경우 완전히 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtain == \"partially\") {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 커튼을 50%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(50)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼이 닫혀 있으면 커튼을 완전히 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtain == \"closed\") {\n        (#Curtain).setCurtainLevel(100)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 20°C 이상인 경우 오전 6시에 커튼을 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 20.0) {\n            (#Curtain).setCurtainLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 15°C 미만인 경우 오후 10시에 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 15.0) {\n            (#Curtain).setCurtainLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공기질(PM 10)이 좋지 않은 경우 커튼을 75%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).dustLevel > 100.0) {\n        (#Curtain).setCurtainLevel(75)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 커튼이 50%인 경우 80%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Curtain).curtainLevel == 50) {\n        (#Curtain).setCurtainLevel(80)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 800ppm 이상인 경우 커튼을 20%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#AirQualityDetector).carbonDioxide > 800.0) {\n        (#Curtain).setCurtainLevel(20)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 커튼이 열려 있으면 30%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Curtain).curtain == \"open\") {\n            (#Curtain).setCurtainLevel(30)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 9시에 커튼을 60%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 9 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(60)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 70% 이상이면 오후 11시에 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            (#Curtain).setCurtainLevel(0)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 70%인 경우 커튼을 40%로 설정해줘.\n\nServices: {'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Blind).blindLevel == 70) {\n        (#Curtain).setCurtainLevel(40)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 커튼을 열고 오후 8시에 커튼을 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Curtain': 'Functions : [\\n    setCurtainLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    curtain : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    curtainLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(100)\n    }\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        (#Curtain).setCurtainLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 공기청정기의 전원을 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 공기청정기를 켜고 강 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 조명을 켜고 밝기를 70%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 연락처 센서가 열려 있으면 이메일 알림을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"open\") {\n        (#EmailProvider).sendMail(\"user@example.com\", \"Contact Sensor Alert\", \"The contact sensor is open.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 블라인드를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact != \"closed\") {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있으면 스피커를 켜고 소리를 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"closed\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"alert_sound.mp3\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있으면 에어컨을 냉방 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#ContactSensor).contact == \"open\") {\n        if ((#AirConditioner).switch != \"on\") {\n            (#AirConditioner).on()\n        }\n        if ((#AirConditioner).airConditionerMode != \"cool\") {\n            (#AirConditioner).setAirConditionerMode(\"cool\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 접촉 센서가 열려 있으면 조명을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 접촉 센서가 닫히면 공기청정기의 전원을 꺼줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#AirPurifier).switch != \"off\") {\n            (#AirPurifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말에 접촉 센서가 열려 있으면 팬을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if (((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\") and (#ContactSensor).contact != \"closed\") {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 자정에 접촉 센서가 닫혀 있으면 에어컨을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#AirConditioner).switch != \"off\") {\n            (#AirConditioner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 열려 있고 시간이 오후 6:00이면 제습기를 켜줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 접촉 센서가 닫혀 있고 공휴일인 경우 가습기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Humidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setHumidifierMode(mode: string {\"auto\"|\"low\"|\"medium\"|\"high\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    humidifierMode : string {\"auto\"|\"low\"|\"medium\"|\"high\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#ContactSensor).contact == \"closed\") {\n        if ((#Humidifier).switch != \"off\") {\n            (#Humidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 접촉 센서가 열려 있으면 공기청정기를 켜고 높음 모드로 설정해줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#AirPurifier).switch != \"on\") {\n            (#AirPurifier).on()\n        }\n        if ((#AirPurifier).airPurifierFanMode != \"high\") {\n            (#AirPurifier).setPurifierFanMode(\"high\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 접촉 센서가 닫히면 카메라를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#Camera).switch != \"off\") {\n            (#Camera).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 10시에 접촉 센서가 열려 있는 경우 조명을 켜고 밝기를 70%로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Light': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetColor(color: string {\"{hue}|{saturation}|{brightness}\"})\\n\\tsetLevel(level int [0 ~ 100])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\tlight : double\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday != \"saturday\" and (#Clock).weekday != \"sunday\" and (#Clock).hour == 10 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Light).switch != \"on\") {\n            (#Light).on()\n        }\n        (#Light).setLevel(70)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 접촉 센서가 닫히면 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 연락처 센서가 열려 있으면 이메일 알림을 보내줘.\n\nServices: {'EmailProvider': 'Functions : [\\n    sendMail(toAddress: string , title: string , text: string),\\n    sendMailWithFile(toAddress: string, title: string, text: string, filePath: string)\\n]\\nValues : []\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        (#EmailProvider).sendMail(\"user@example.com\", \"Contact Sensor Alert\", \"The contact sensor is open.\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 접점 센서가 닫혀 있으면 TV를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Television': 'Functions : [\\n    on(),\\n\\toff(),\\n\\tsetTvChannel(tvChannel: int),\\n\\tchannelUp(),\\n\\tchannelDown(),\\n    setVolume(volume: int [0 ~ 100]),\\n    volumeUp(),\\n    volumeDown(),\\n\\tmute() : void, toggle muteStatus\\n]\\n\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"}\\n\\tmuteStatus : string {\"muted\"|\"unmuted\"}\\n\\ttvChannel : int\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#Television).switch != \"on\") {\n            (#Television).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 접촉 센서가 열려 있으면 블라인드를 닫아줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        (#Blind).setBlindLevel(0)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오후 2시에 접촉 센서가 닫히면 로봇 청소기의 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'RobotCleaner': 'Functions : [\\n    on(),\\n    off(),\\n    setRobotCleanerCleaningMode(string mode{\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"})\\n]\\nValues : [\\n    switch : string {\"on\"|\"off\"},\\n    robotCleanerCleaningMode : string {\"auto\"|\"part\"|\"repeat\"|\"manual\"|\"stop\"|\"map\"}\\n\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 14 and (#Clock).minute == 0 and (#ContactSensor).contact == \"closed\") {\n        if ((#RobotCleaner).switch != \"off\") {\n            (#RobotCleaner).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 접촉 센서가 열려 있으면 펌프를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Pump': 'Functions : [\\n    on(),\\n\\toff(),\\n    setOperationMode(string mode {\"normal\"|\"minimum\"|\"maximum\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    operationMode : string {\"normal\"|\"minimum\"|\"maximum\"}\\n]\\nTags : []', 'ContactSensor': 'Functions : []\\nValues : [\\n    contact : string {\"open\"|\"closed\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0 and (#ContactSensor).contact != \"closed\") {\n        if ((#Pump).switch != \"on\") {\n            (#Pump).on()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 제습기를 켜고 냉방 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n            (#Dehumidifier).setDehumidifierMode(\"cooling\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 모드가 연속인 경우 제습기 꺼줘오후 10:00에 제습.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"continuousDehumidifying\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 60% 이상인 경우 오후 2시에 제습기를 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오후 3시에 제습기를 주름방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 오후 11시에 건조 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"drying\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 25°C 이상인 경우 오전 8시에 제습기를 상쾌 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n                (#Dehumidifier).setDehumidifierMode(\"refreshing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 살균 모드인 경우 오전 9시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"sanitizing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 600ppm 이상인 경우 오후 7시에 제습기를 자동 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n                (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 제습기를 켜고 VOC 수치가 0.05 이상이면 내부 케어 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n                (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 열려 있는 경우 제습기를 오후 5시에 지연세척 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n                (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 제습기가 새로 고침 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"refreshing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 2시에 제습기를 동결보호 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n            (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 제습기가 냉각 모드에 있는 경우 완료 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"cooling\") {\n            if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n            }\n            (#Dehumidifier).setDehumidifierMode(\"finished\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 제습기를 켜고 PM 10 수치가 100 이상이면 살균 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).dustLevel > 100.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n                (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 내부 케어 모드인 경우 오후 11시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"internalCare\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 기온이 20°C 미만인 경우 오전 7시에 제습기를 연속제습 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n                (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있는 경우 오전 10시에 제습기를 켜고 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전 상태가 \"방전\"인 경우 오후 5시에 제습기를 동결보호 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"discharging\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n                (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 제습기가 무게 감지 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"weightSensing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 새벽 4시에 제습기를 해동 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 4 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n            (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시에 제습기가 냉각 모드에 있는 경우 내부 관리 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"cooling\") {\n            (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 70% 이상인 경우 제습기를 켜고 오후 9시에 살균 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 70.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n                (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 2시에 제습기가 새로 고침 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"refreshing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 18°C 미만인 경우 오전 10시에 제습기를 주름방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 18.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n                (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11:00에 제습기가 자동 건조 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"AIDrying\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.1 이상인 경우 오후 1시에 제습기를 동결보호 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.1) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n                (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 제습기가 연속제습 모드에 있는 경우 해동해동 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"continuousDehumidifying\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 제습기를 켜고 CO2 수치가 800ppm 이상이면 내부 관리 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 800.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n                (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 오후 10시에 냉각 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"cooling\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 부분적으로 열려 있는 경우 제습기를 오후 6시에 지연세척 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"partially\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n                (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 제습기가 내부 관리 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"internalCare\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 제습기를 켜고 온도가 30°C 이상이면 살균 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n                (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전 상태가 \"완전 충전됨\"인 경우 오전 11시에 제습기를 연속제습 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"fullyCharged\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n                (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 제습기가 동결보호 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"freezeProtection\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수준이 0.03 이하인 경우 오전 7시에 제습기를 무게 감지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.03) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"weightSensing\") {\n                (#Dehumidifier).setDehumidifierMode(\"weightSensing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 제습기를 켜고 CO2 수준이 500ppm 미만인 경우 주름 방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide < 500.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n                (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 오후 11:00에 해동 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 1시에 제습기를 살균 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n            (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 제습기를 켜고 온도가 20°C 미만인 경우 상쾌 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature < 20.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n                (#Dehumidifier).setDehumidifierMode(\"refreshing\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 오후 8시에 무게 감지 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"weightSensing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있는 경우 오전 5시에 제습기를 해동 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n                (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 제습기를 켜고 VOC 수치가 0.08 이상이면 제습 모드를 연속으로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.08) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n                (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 충전 상태가 \"오류\"인 경우 오후 3시에 제습기를 내부 관리 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Charger': 'Functions : [\\n    on(),\\n\\toff()\\n]\\nValues : [\\n    voltage : double,\\n    current : double,\\n\\tswitch : string {\"on\"|\"off\"},\\n    chargingState : string {\"charging\"|\"discharging\"|\"stopped\"|\"fullyCharged\"|\"error\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Charger).chargingState == \"error\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n                (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 살균 모드에 있는 경우 오후 11시 30분에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Dehumidifier).dehumidifierMode == \"sanitizing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 700ppm 이상인 경우 오후 10시에 제습기를 AID건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 700.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n                (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 4시에 제습기를 켜고 주름방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 28°C 이상인 경우 오전 9시에 제습기를 냉각 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n                (#Dehumidifier).setDehumidifierMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 제습기가 해동 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기가 살균 모드에 있는 경우 오후 11시 30분에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 30) {\n        if ((#Dehumidifier).dehumidifierMode == \"sanitizing\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 700ppm 이상인 경우 오후 10시에 제습기를 AID건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 700.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n                (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오후 4시에 제습기를 켜고 주름방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 28°C 이상인 경우 오전 9시에 제습기를 냉각 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n                (#Dehumidifier).setDehumidifierMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 제습기가 해동 모드에 있는 경우 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).dehumidifierMode == \"thawingFrozenInside\" and (#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 80% 이상인 경우 오후 7시에 제습기를 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 80.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 열려 있는 경우 제습기를 켜고 오후 2시에 지연세척 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"opening\") {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n                (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 식기세척기를 켜고 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 모드가 강렬할 경우 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"intense\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 60% 이상인 경우 오후 2시에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"auto\") {\n                (#Dishwasher).setDishwaherMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오후 3시에 식기세척기를 빠른 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 식기세척기가 헹굼 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 25°C 이상인 경우 오전 8시에 식기세척기를 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"dry\") {\n                (#Dishwasher).setDishwaherMode(\"dry\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 모드가 에코인 경우 오전 9시에 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 600ppm 이상이면 오후 7시에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"auto\") {\n                (#Dishwasher).setDishwaherMode(\"auto\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.05 이상이면 식기세척기를 켜고 오후 6시에 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"dry\") {\n                (#Dishwasher).setDishwaherMode(\"dry\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 열려 있는 경우 오후 5시에 식기세척기를 헹굼 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"open\") {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"rinse\") {\n                (#Dishwasher).setDishwaherMode(\"rinse\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 식기세척기가 빠른 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"quick\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 6시에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 켜고 오후 7시에 VOC 수치가 0.08 이상이면 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel > 0.08) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwaherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 식기세척기가 헹굼 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있는 경우 오후 5시에 식기세척기를 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"dry\") {\n                (#Dishwasher).setDishwaherMode(\"dry\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 자동 모드에 있는 경우 오후 9시에 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"auto\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 30°C 이상인 경우 오전 8시에 식기세척기를 급속 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"quick\") {\n                (#Dishwasher).setDishwaherMode(\"quick\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 식기세척기가 건조 모드에 있으면 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"dry\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.05 미만인 경우 오후 6시에 식기세척기를 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).tvocLevel < 0.05) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwaherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 켜고 오후 3시에 CO2 수치가 700ppm 이상이면 헹굼 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 700.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"rinse\") {\n                (#Dishwasher).setDishwaherMode(\"rinse\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 11:00에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 온도가 28°C 이상이고 모드가 에코인 경우 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0 and (#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 65% 이상인 경우 오전 10:00에 식기세척기를 강렬 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 65.0) {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"intense\") {\n                (#Dishwasher).setDishwaherMode(\"intense\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시에 식기세척기를 켜고 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 모드가 강렬할 경우 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"intense\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오후 3시에 식기세척기를 빠른 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 식기세척기가 헹굼 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 식기세척기를 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"dry\") {\n            (#Dishwasher).setDishwaherMode(\"dry\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 모드가 에코인 경우 오전 9시에 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 식기세척기를 켜고 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"dry\") {\n            (#Dishwasher).setDishwaherMode(\"dry\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 식기세척기를 헹굼 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"rinse\") {\n            (#Dishwasher).setDishwaherMode(\"rinse\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 식기세척기가 빠른 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"quick\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 6시에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 식기세척기를 켜고 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 식기세척기가 헹굼 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"rinse\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 식기세척기를 건조 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"dry\") {\n            (#Dishwasher).setDishwaherMode(\"dry\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 자동 모드에 있는 경우 오후 9시에 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"auto\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 식기세척기를 빠른 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 식기세척기가 건조 모드에 있으면 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"dry\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시에 식기세척기를 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"eco\") {\n            (#Dishwasher).setDishwaherMode(\"eco\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 식기세척기를 켜고 오후 3시에 헹굼 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"rinse\") {\n            (#Dishwasher).setDishwaherMode(\"rinse\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 11:00에 식기세척기를 자동 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).isHoliday==true and (#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"auto\") {\n            (#Dishwasher).setDishwaherMode(\"auto\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 에코 모드에 있는 경우 식기세척기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"eco\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10:00에 식기세척기를 강렬 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"intense\") {\n            (#Dishwasher).setDishwaherMode(\"intense\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 식기세척기가 자동 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"auto\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 식기세척기를 켜고 빠른 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"quick\") {\n            (#Dishwasher).setDishwaherMode(\"quick\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 식기세척기가 건조 모드에 있는 경우 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dishwasher).dishwasherMode == \"dry\" and (#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 식기세척기를 헹굼 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"rinse\") {\n            (#Dishwasher).setDishwaherMode(\"rinse\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 8시에 선풍기를 켜고 속도를 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시 30분에 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 6시 45분에 팬 속도를 2로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시에 선풍기를 켜고 속도를 1로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(1)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시 15분에 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 팬 속도를 4로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(4)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 5시 30분에 선풍기를 켜고 속도를 2로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시 45분에 팬을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시 15분에 팬 속도를 1로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(1)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시 30분에 선풍기를 켜고 속도를 5로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(5)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 1시에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시 15분에 팬 속도를 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 4시 45분에 선풍기를 켜고 속도를 2로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 4 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 6시 20분에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 20) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시 10분에 팬 속도를 4로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 10) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(4)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 7시에 선풍기를 켜고 속도를 1로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(1)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 12시 45분에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 45) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 3시 15분에 팬 속도를 2로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 3 and (#Clock).minute == 15) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(2)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 2시에 선풍기를 켜고 속도를 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Fan).switch != \"on\") {\n            (#Fan).on()\n        }\n        (#Fan).setFanSpeed(3)\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시 30분에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 제습기를 켜고 냉방 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n            (#Dehumidifier).setDehumidifierMode(\"cooling\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기를 켜고 오전 8시에 지연세척 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"delayWash\") {\n            (#Dehumidifier).setDehumidifierMode(\"delayWash\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 제습기를 켜고 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n            (#Dehumidifier).setDehumidifierMode(\"drying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10시에 제습기를 켜고 완료 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"finished\") {\n            (#Dehumidifier).setDehumidifierMode(\"finished\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시에 제습기를 켜고 상쾌 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"refreshing\") {\n            (#Dehumidifier).setDehumidifierMode(\"refreshing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기를 켜고 오후 12시에 무게 감지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"weightSensing\") {\n            (#Dehumidifier).setDehumidifierMode(\"weightSensing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기를 켜고 오후 1시에 주름 방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 제습기를 켜고 제습 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"dehumidifying\") {\n            (#Dehumidifier).setDehumidifierMode(\"dehumidifying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 제습기를 켜고 자동 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"AIDrying\") {\n            (#Dehumidifier).setDehumidifierMode(\"AIDrying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 제습기를 켜고 살균 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"sanitizing\") {\n            (#Dehumidifier).setDehumidifierMode(\"sanitizing\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 5시에 제습기를 켜고 내부 관리 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"internalCare\") {\n            (#Dehumidifier).setDehumidifierMode(\"internalCare\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기를 켜고 오후 6시에 동결 보호 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"freezeProtection\") {\n            (#Dehumidifier).setDehumidifierMode(\"freezeProtection\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기를 켜고 오후 7시에 연속제습 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n            (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 제습기를 켜고 오후 8시에 냉동 해동 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"thawingFrozenInside\") {\n            (#Dehumidifier).setDehumidifierMode(\"thawingFrozenInside\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 12시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 0 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 1시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 1 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 새벽 2시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 2 and (#Clock).minute == 0) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 먹이공급기를 켜고 1인분만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(1.0, \"servings\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 8시에 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 꺼져 있으면 오전 6시에 먹이공급기를 켜고 30g만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Feeder).switch == \"off\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(30.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 12시에 45그램만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(45.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기를 켜고 오후 5시에 60그램만큼 먹이를 줘줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(60.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 3시에 20g을 먹이기 시작해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(20.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 9시 30분에 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 30) {\n        if ((#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 4시에 먹이공급기가 켜져 있으면 40그램을 먹이기 시작해줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0) {\n        if ((#Feeder).switch == \"on\") {\n            (#Feeder).setFeedPortion(40.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시 30분에 먹이공급기를 켜고 25g만큼 먹이를 줘줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(25.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 11시 45분에 35g만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 11 and (#Clock).minute == 45) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(35.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 10:00에 먹이공급기를 켜고 50그램을 먹이기 시작해.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 7시에 먹이공급기를 켜고 먹이공급기가 유휴 상태이면 50ml만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n           (#Feeder).setFeedPortion(50.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 유휴 상태인 경우 오후 8시에 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"off\") {\n                (#Feeder).off()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 꺼져 있고 유휴 상태인 경우 오전 6시에 먹이공급기를 켜고 30g만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\" and (#Feeder).switch == \"off\") {\n            (#Feeder).on()\n            (#Feeder).setFeedPortion(30.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 유휴 상태인 경우 오후 12시에 45g만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(45.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 꺼져 있고 유휴 상태인 경우 오후 5시에 먹이공급기를 켜고 60g만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\" and (#Feeder).switch == \"off\") {\n            (#Feeder).on()\n            (#Feeder).setFeedPortion(60.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오전 9시에 먹이공급기가 피딩 중이면 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"feeding\" and (#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 유휴 상태인 경우 오후 3시에 30g을 먹이기 시작해.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(30.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 유휴 상태인 경우 오전 6시 30분에 먹이공급기를 켜고 50g만큼 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 30) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(50.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 먹이공급기가 오류 상태인 경우 오후 11:00에 먹이공급기를 꺼줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"error\" and (#Feeder).switch != \"off\") {\n            (#Feeder).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 2시에 먹이공급기가 유휴 상태이면 20그램을 먹이기 시작해.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#Feeder).feederState == \"idle\") {\n            if ((#Feeder).switch != \"on\") {\n                (#Feeder).on()\n            }\n            (#Feeder).setFeedPortion(20.0, \"grams\")\n            if ((#Feeder).feederOperatingState != \"feeding\"){\n                (#Feeder).startFeeding()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 2시에 기온이 30°C를 넘으면 에어컨을 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'AirConditioner': 'Functions : [\\n    on(),\\n\\toff(),\\n    setTemperature(temperature: int),\\n    setAirConditionerMode(mode: string {\"auto\"|\"cool\"|\"heat\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airConditionerMode : string {\"auto\"|\"cool\"|\"heat\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#AirQualityDetector).temperature > 30.0) {\n            if ((#AirConditioner).switch != \"on\") {\n                (#AirConditioner).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: VOC 수치가 0.05 이상이면 휴일 오전 6시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#AirQualityDetector).tvocLevel > 0.05) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있는 경우 평일 오전 7시에 블라인드를 열어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Blind).blind == \"closed\") {\n            (#Blind).setBlindLevel(100)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말에는 오후 11시에 제습기를 꺼줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Dehumidifier).switch != \"off\") {\n            (#Dehumidifier).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오전 9시에 카메라를 켜고 사진을 찍어줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Camera': 'Functions : [\\n    on(),\\n\\toff(),\\n    take() : return binary : storage path for image(photo),\\n    takeTimelapse(duration: double [0 ~ ∞], speed: double [0 ~ ∞]) : return binary : storage path for timelapse\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    image : binary : the storage path for the most recent image(photo)\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Camera).switch != \"on\") {\n            (#Camera).on()\n        }\n        (#Camera).take()\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 28°C를 초과하면 오후 2시에 제습기를 냉각 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 14 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 28.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"cooling\") {\n                (#Dehumidifier).setDehumidifierMode(\"cooling\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 온도가 25°C를 넘으면 오전 10시에 선풍기를 켜줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).temperature > 25.0) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 8시에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시와 오후 6시에 반려동물에게 50g의 사료를 먹이를 줘.\n\nServices: {'Feeder': 'Functions : [\\n    on(),\\n\\toff(),\\n    startFeeding(),\\n    setFeedPortion(portion: double [0 ~ 2000], unit: string {\"grams\"|\"pounds\"|\"ounces\"|\"servings\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    feederOperatingState : string {\"idle\"|\"feeding\"|\"error\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 or (#Clock).hour == 18 and (#Clock).minute == 0) {\n        if ((#Feeder).switch != \"on\") {\n            (#Feeder).on()\n        }\n        (#Feeder).setFeedPortion(50.0, \"grams\")\n        if ((#Feeder).feederOperatingState != \"feeding\"){\n            (#Feeder).startFeeding()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오후 12:00에 팬 속도를 3으로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Fan).FanSpeed != 3) {\n            if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n            (#Fan).setFanSpeed(3)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 10시에 작동 중인 식기세척기의 전원을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Dishwasher).switch != \"off\") {\n            (#Dishwasher).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 블라인드가 닫혀 있는 경우 오후 8시에 식기세척기를 에코 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []', 'Blind': 'Functions : [\\n    setBlindLevel(level: int [0 ~ 100])\\n]\\nValues : [\\n    blind : string {\"closed\"|\"closing\"|\"open\"|\"opening\"|\"partially\"|\"paused\"|\"unknown\"},\\n    blindLevel : int [0 ~ 100]\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Blind).blind == \"closed\") {\n            if ((#Dishwasher).switch != \"on\") {\n                (#Dishwasher).on()\n            }\n            if ((#Dishwasher).dishwasherMode != \"eco\") {\n                (#Dishwasher).setDishwaherMode(\"eco\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오전 9시에 제습기를 켜고 연속제습 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"continuousDehumidifying\") {\n            (#Dehumidifier).setDehumidifierMode(\"continuousDehumidifying\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시 30분에 팬 속도를 2로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"on\") {\n                (#Fan).on()\n            }\n        if ((#Fan).FanSpeed != 2) {\n            (#Fan).setFanSpeed(2)\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 습도가 60% 이상인 경우 오후 10시에 제습기를 건조 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).humidity > 60.0) {\n            if ((#Dehumidifier).switch != \"on\") {\n                (#Dehumidifier).on()\n            }\n            if ((#Dehumidifier).dehumidifierMode != \"drying\") {\n                (#Dehumidifier).setDehumidifierMode(\"drying\")\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: CO2 수치가 600ppm을 초과하면 오전 5시에 공기청정기를 켜줘.\n\nServices: {'AirPurifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setAirPurifierFanMode(mode: string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    airPurifierFanMode : string {\"auto\"|\"sleep\"|\"low\"|\"medium\"|\"high\"|\"quiet\"|\"windFree\"|\"off\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'AirQualityDetector': 'Functions : []\\nValues : [\\n    dustLevel : int [0 ~ ∞] : PM 10 dust level,\\n    fineDustLevel : int [0 ~ ∞] : PM 2.5 finedust level,\\n    veryFineDustLevel : int [0 ~ ∞] : PM 1.0 finedust level,\\n    carbonDioxide : double : CO2 level,\\n    temperature : int [-460 ~ 10000],\\n    humidity : double [0 ~ 100],\\n    tvocLevel : double [0 ~ 1000000] : inert gas concentration\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0) {\n        if ((#AirQualityDetector).carbonDioxide > 600.0) {\n            if ((#AirPurifier).switch != \"on\") {\n                (#AirPurifier).on()\n            }\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 6시에 식기세척기를 강렬 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Dishwasher': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDishwasherMode(mode: string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dishwasherMode : string {\"eco\"|\"intense\"|\"auto\"|\"quick\"|\"rinse\"|\"dry\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Dishwasher).switch != \"on\") {\n            (#Dishwasher).on()\n        }\n        if ((#Dishwasher).dishwasherMode != \"intense\") {\n            (#Dishwasher).setDishwaherMode(\"intense\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 8시 30분에 선풍기를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Fan': 'Functions : [\\n    on(),\\n\\toff(),\\n    setFanSpeed(speed: int [0 ~ ∞])\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 30) {\n        if ((#Fan).switch != \"off\") {\n            (#Fan).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일 오후 3시에 제습기를 켜고 주름 방지 모드로 설정해줘.\n\nServices: {'Dehumidifier': 'Functions : [\\n    on(),\\n\\toff(),\\n    setDehumidifierMode(mode: string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    dehumidifierMode : string {\"cooling\"|\"delayWash\"|\"drying\"|\"finished\"|\"refreshing\"|\"weightSensing\"|\"wrinklePrevent\"|\"dehumidifying\"|\"AIDrying\"|\"sanitizing\"|\"internalCare\"|\"freezeProtection\"|\"continuousDehumidifying\"|\"thawingFrozenInside\"}\\n]\\nTags : []', 'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 15 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Dehumidifier).switch != \"on\") {\n            (#Dehumidifier).on()\n        }\n        if ((#Dehumidifier).dehumidifierMode != \"wrinklePrevent\") {\n            (#Dehumidifier).setDehumidifierMode(\"wrinklePrevent\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 7시에 스피커를 켜고 음악을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/music.mp3\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 9시에 스피커를 일시 중지해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).pause()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 재생 중인 경우 오후 10시에 스피커를 중지해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).stop()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오전 6시에 스피커를 켜고 팟캐스트를 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/podcast\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일에는 오후 11시에 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 8시에 오디오북을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/audiobook\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오전 7시에 \"굿모닝\"이라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"굿모닝\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 토요일과 일요일 오후 12시에 스피커를 일시 중지해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).pause()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 화요일과 목요일 오후 6시에 운동 재생 목록을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and ((#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"thursday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/workout_playlist\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 오후 9시에 \"쉴 시간이에요\"라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0 and (#Clock).weekday == \"friday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"쉴 시간이에요\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 10시에 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 토요일 오전 5시에 자연의 소리를 들려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 5 and (#Clock).minute == 0 and (#Clock).weekday == \"saturday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/nature_sounds\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오후 9시에 \"굿나잇\"이라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 21 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"굿나잇\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 1시에 스피커를 일시 중지해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 13 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).playbackStatus == \"playing\") {\n            (#Speaker).pause()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 8시에 잠자리 동화를 들려줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        if ((#Speaker).playbackStatus != \"playing\") {\n            (#Speaker).play(\"path/to/bedtime_story\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오후 12시에 '점심시간이에요'이라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or (#Clock).weekday == \"friday\")) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"점심시간이에요\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오전 9시에 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 8시에 \"출근시간이에요\"이라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 8 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"출근시간이에요\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 1월 1일 오전 7시에 생일 축하 노래를 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).month == 1 and (#Clock).day == 1 and (#Clock).hour == 7 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"path/to/birthday_song\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 7월 20일 오전 8시에 \"생일 축하합니다\"라고 말해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).month == 7 and (#Clock).day == 20 and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"생일 축하합니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오후 10시에 스피커를 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Speaker).switch != \"off\") {\n            (#Speaker).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 9시에 사이렌을 켜고 스트로브 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or \n         (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or \n         (#Clock).weekday == \"friday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 10시에 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오후 12:00에 사이렌을 두 가지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공휴일 오후 6시에 사이렌을 켜고 사이렌 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 18 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"siren\") {\n            (#Siren).setSirenMode(\"siren\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 오후 11시에 두 모드 모두에 있는 경우 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 23 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"both\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 7시에 사이렌을 스트로브 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 사이렌 모드인 경우 오후 8시에 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0) {\n        if ((#Siren).sirenMode == \"siren\" and (#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 휴일인 경우 오전 10시에 사이렌을 두 가지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 금요일 오후 5시에 사이렌을 켜고 스트로브 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0 and (#Clock).weekday == \"friday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오전 7시에 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 1일 오전 8시에 사이렌을 두 가지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 1 and (#Clock).hour == 8 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 마지막 날 오후 9시에 사이렌을 켜고 스트로브 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).day == 31 and (#Clock).hour == 21 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 토요일 오후 5시에 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 17 and (#Clock).minute == 0 and (#Clock).weekday == \"saturday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 월요일 오전 6시에 사이렌을 두 가지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).weekday == \"monday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 목요일 오후 7시에 사이렌을 켜고 스트로브 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 19 and (#Clock).minute == 0 and (#Clock).weekday == \"thursday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 수요일 오후 4시에 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 16 and (#Clock).minute == 0 and (#Clock).weekday == \"wednesday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 화요일 오후 8시에 사이렌을 두 가지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 20 and (#Clock).minute == 0 and (#Clock).weekday == \"tuesday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 목요일 오전 7시에 사이렌을 켜고 사이렌 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 7 and (#Clock).minute == 0 and (#Clock).weekday == \"thursday\") {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"siren\") {\n            (#Siren).setSirenMode(\"siren\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매주 일요일 오전 6시에 사이렌을 꺼줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 6 and (#Clock).minute == 0 and (#Clock).weekday == \"sunday\") {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매월 마지막 금요일 오후 3시에 사이렌을 두 가지 모드로 설정해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).weekday == \"friday\" and (#Clock).day >= 24 and (#Clock).hour == 15 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 공휴일인 경우 오전 10시에 사이렌을 'both' 모드로 설정해줘. 스피커에서 \"휴일 사이렌 모드를 'both'로 설정했습니다\"라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 10 and (#Clock).minute == 0 and (#Clock).isHoliday==true) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"휴일 사이렌 모드를 'both'로 설정했습니다\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 평일 오전 9시에 사이렌을 켜고 스트로브 모드로 설정해줘. 스피커에서 \"사이렌 활성화됨\"이라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 9 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"monday\" or (#Clock).weekday == \"tuesday\" or \n         (#Clock).weekday == \"wednesday\" or (#Clock).weekday == \"thursday\" or \n         (#Clock).weekday == \"friday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"strobe\") {\n            (#Siren).setSirenMode(\"strobe\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"사이렌 활성화됨\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 매일 오후 10시에 사이렌을 꺼줘. 스피커에서 \"사이렌 비활성화됨\"이라고 안내해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 22 and (#Clock).minute == 0) {\n        if ((#Siren).switch != \"off\") {\n            (#Siren).off()\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).speak(\"사이렌 비활성화됨\")\n    }\n}"
        }
    ],
    [
        {
            "from": "human",
            "value": "Input: 주말 오후 12:00에 사이렌을 두 가지 모드로 설정해줘. 스피커에서 경고음을 재생해줘.\n\nServices: {'Clock': 'Functions : []\\nValues : [\\n    day : int [1~31]\\n    hour : int [0~23]\\n    minute : int [0~59]\\n    month : int [1~12]\\n    second : int [0~59]\\n    weekday : string {\"monday\"|\"tuesday\"|\"wednesday\"|\"thursday\"|\"friday\"|\"saturday\"|\"sunday\"}\\n    year : int [0 ~ 100000]\\n    isHoliday : bool {true|false}\\n    timestamp : double : unixTime\\n]\\nTags : []', 'Siren': 'Functions : [\\n    on(),\\n\\toff(),\\n    setSirenMode(mode: string {\"both\"|\"off\"|\"siren\"|\"strobe\"})\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    sirenMode : string {\"both\"|\"off\"|\"siren\"|\"strobe\"}\\n]\\nTags : []', 'Speaker': 'Functions : [\\n    on(),\\n\\toff(),\\n    pause(),\\n    stop(),\\n    play(source: string),\\n    speak(text: string)\\n]\\nValues : [\\n\\tswitch : string {\"on\"|\"off\"},\\n    playbackStatus : string {\"paused\"|\"playing\"|\"stopped\"|\"fast\"|\"rewinding\"|\"buffering\"}\\n]\\nTags : []'}"
        },
        {
            "from": "gpt",
            "value": "loop(1 MIN) {\n    if ((#Clock).hour == 12 and (#Clock).minute == 0 and \n        ((#Clock).weekday == \"saturday\" or (#Clock).weekday == \"sunday\")) {\n        if ((#Siren).switch != \"on\") {\n            (#Siren).on()\n        }\n        if ((#Siren).sirenMode != \"both\") {\n            (#Siren).setSirenMode(\"both\")\n        }\n        if ((#Speaker).switch != \"on\") {\n            (#Speaker).on()\n        }\n        (#Speaker).play(\"alert_sound.mp3\")\n    }\n}"
        }
    ]
]
